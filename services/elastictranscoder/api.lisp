;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elastictranscoder/api
  (:use)
  (:nicknames #:aws/elastictranscoder)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elastictranscoder/api)
(common-lisp:progn
 (common-lisp:defclass elastictranscoder-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "elastictranscoder"
                        :protocol :rest-json))
 (common-lisp:export 'elastictranscoder-request))
(common-lisp:progn
 (common-lisp:define-condition elastictranscoder-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elastictranscoder-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("IncompatibleVersionException" . incompatible-version-exception)
    ("InternalServiceException" . internal-service-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype access-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-controls ()
   '(trivial-types:proper-list access-control))
 (common-lisp:defun |make-access-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:defclass artwork common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %artwork-encryption :initform common-lisp:nil)
                        (album-art-format :initarg :album-art-format :type
                         (common-lisp:or jpg-or-png common-lisp:null) :accessor
                         %artwork-album-art-format :initform common-lisp:nil)
                        (padding-policy :initarg :padding-policy :type
                         (common-lisp:or padding-policy common-lisp:null)
                         :accessor %artwork-padding-policy :initform
                         common-lisp:nil)
                        (sizing-policy :initarg :sizing-policy :type
                         (common-lisp:or sizing-policy common-lisp:null)
                         :accessor %artwork-sizing-policy :initform
                         common-lisp:nil)
                        (max-height :initarg :max-height :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %artwork-max-height :initform
                         common-lisp:nil)
                        (max-width :initarg :max-width :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %artwork-max-width :initform
                         common-lisp:nil)
                        (input-key :initarg :input-key :type
                         (common-lisp:or watermark-key common-lisp:null)
                         :accessor %artwork-input-key :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'artwork 'make-artwork))
 (common-lisp:defun make-artwork
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption album-art-format
                     padding-policy sizing-policy max-height max-width
                     input-key)
   (common-lisp:apply #'common-lisp:make-instance 'artwork
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artwork))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artwork))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-key))
      (common-lisp:list
       (common-lisp:cons "InputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-width))
      (common-lisp:list
       (common-lisp:cons "MaxWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-height))
      (common-lisp:list
       (common-lisp:cons "MaxHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-policy))
      (common-lisp:list
       (common-lisp:cons "SizingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-policy))
      (common-lisp:list
       (common-lisp:cons "PaddingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'album-art-format))
      (common-lisp:list
       (common-lisp:cons "AlbumArtFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artwork))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artworks () '(trivial-types:proper-list artwork))
 (common-lisp:defun |make-artworks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artwork))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ascending () 'common-lisp:string)
(common-lisp:deftype aspect-ratio () 'common-lisp:string)
(common-lisp:deftype audio-bit-depth () 'common-lisp:string)
(common-lisp:deftype audio-bit-order () 'common-lisp:string)
(common-lisp:deftype audio-bit-rate () 'common-lisp:string)
(common-lisp:deftype audio-channels () 'common-lisp:string)
(common-lisp:deftype audio-codec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-codec-options common-lisp:nil
                       ((signed :initarg :signed :type
                         (common-lisp:or audio-signed common-lisp:null)
                         :accessor %audio-codec-options-signed :initform
                         common-lisp:nil)
                        (bit-order :initarg :bit-order :type
                         (common-lisp:or audio-bit-order common-lisp:null)
                         :accessor %audio-codec-options-bit-order :initform
                         common-lisp:nil)
                        (bit-depth :initarg :bit-depth :type
                         (common-lisp:or audio-bit-depth common-lisp:null)
                         :accessor %audio-codec-options-bit-depth :initform
                         common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or audio-codec-profile common-lisp:null)
                         :accessor %audio-codec-options-profile :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-codec-options 'make-audio-codec-options))
 (common-lisp:defun make-audio-codec-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signed bit-order bit-depth profile)
   (common-lisp:apply #'common-lisp:make-instance 'audio-codec-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-codec-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-codec-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-order))
      (common-lisp:list
       (common-lisp:cons "BitOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed))
      (common-lisp:list
       (common-lisp:cons "Signed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-codec-options))
   common-lisp:nil))
(common-lisp:deftype audio-codec-profile () 'common-lisp:string)
(common-lisp:deftype audio-packing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-parameters common-lisp:nil
                       ((codec-options :initarg :codec-options :type
                         (common-lisp:or audio-codec-options common-lisp:null)
                         :accessor %audio-parameters-codec-options :initform
                         common-lisp:nil)
                        (audio-packing-mode :initarg :audio-packing-mode :type
                         (common-lisp:or audio-packing-mode common-lisp:null)
                         :accessor %audio-parameters-audio-packing-mode
                         :initform common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or audio-channels common-lisp:null)
                         :accessor %audio-parameters-channels :initform
                         common-lisp:nil)
                        (bit-rate :initarg :bit-rate :type
                         (common-lisp:or audio-bit-rate common-lisp:null)
                         :accessor %audio-parameters-bit-rate :initform
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or audio-sample-rate common-lisp:null)
                         :accessor %audio-parameters-sample-rate :initform
                         common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or audio-codec common-lisp:null)
                         :accessor %audio-parameters-codec :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-parameters 'make-audio-parameters))
 (common-lisp:defun make-audio-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key codec-options audio-packing-mode channels
                     bit-rate sample-rate codec)
   (common-lisp:apply #'common-lisp:make-instance 'audio-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-rate))
      (common-lisp:list
       (common-lisp:cons "BitRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-packing-mode))
      (common-lisp:list
       (common-lisp:cons "AudioPackingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-options))
      (common-lisp:list
       (common-lisp:cons "CodecOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-parameters))
   common-lisp:nil))
(common-lisp:deftype audio-sample-rate () 'common-lisp:string)
(common-lisp:deftype audio-signed () 'common-lisp:string)
(common-lisp:deftype base64encoded-string () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %cancel-job-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defun make-cancel-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defun make-cancel-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-format common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %caption-format-encryption :initform common-lisp:nil)
                        (pattern :initarg :pattern :type
                         (common-lisp:or caption-format-pattern
                                         common-lisp:null)
                         :accessor %caption-format-pattern :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or caption-format-format
                                         common-lisp:null)
                         :accessor %caption-format-format :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'caption-format 'make-caption-format))
 (common-lisp:defun make-caption-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption pattern format)
   (common-lisp:apply #'common-lisp:make-instance 'caption-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-format))
   common-lisp:nil))
(common-lisp:deftype caption-format-format () 'common-lisp:string)
(common-lisp:deftype caption-format-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype caption-formats ()
   '(trivial-types:proper-list caption-format))
 (common-lisp:defun |make-caption-formats|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-format))
   aws-sdk/generator/shape::members))
(common-lisp:deftype caption-merge-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass caption-source common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %caption-source-encryption :initform common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %caption-source-label :initform common-lisp:nil)
                        (time-offset :initarg :time-offset :type
                         (common-lisp:or time-offset common-lisp:null)
                         :accessor %caption-source-time-offset :initform
                         common-lisp:nil)
                        (language :initarg :language :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %caption-source-language :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or long-key common-lisp:null) :accessor
                         %caption-source-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'caption-source 'make-caption-source))
 (common-lisp:defun make-caption-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption label time-offset language
                     key)
   (common-lisp:apply #'common-lisp:make-instance 'caption-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-offset))
      (common-lisp:list
       (common-lisp:cons "TimeOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype caption-sources ()
   '(trivial-types:proper-list caption-source))
 (common-lisp:defun |make-caption-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass captions common-lisp:nil
                       ((caption-formats :initarg :caption-formats :type
                         (common-lisp:or caption-formats common-lisp:null)
                         :accessor %captions-caption-formats :initform
                         common-lisp:nil)
                        (caption-sources :initarg :caption-sources :type
                         (common-lisp:or caption-sources common-lisp:null)
                         :accessor %captions-caption-sources :initform
                         common-lisp:nil)
                        (merge-policy :initarg :merge-policy :type
                         (common-lisp:or caption-merge-policy common-lisp:null)
                         :accessor %captions-merge-policy :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'captions 'make-captions))
 (common-lisp:defun make-captions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key caption-formats caption-sources
                     merge-policy)
   (common-lisp:apply #'common-lisp:make-instance 'captions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input captions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input captions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-policy))
      (common-lisp:list
       (common-lisp:cons "MergePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-sources))
      (common-lisp:list
       (common-lisp:cons "CaptionSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-formats))
      (common-lisp:list
       (common-lisp:cons "CaptionFormats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input captions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clip common-lisp:nil
                       ((time-span :initarg :time-span :type
                         (common-lisp:or time-span common-lisp:null) :accessor
                         %clip-time-span :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'clip 'make-clip))
 (common-lisp:defun make-clip
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-span)
   (common-lisp:apply #'common-lisp:make-instance 'clip
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-span))
      (common-lisp:list
       (common-lisp:cons "TimeSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clip))
   common-lisp:nil))
(common-lisp:deftype codec-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype codec-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-codec-options| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype composition () '(trivial-types:proper-list clip))
 (common-lisp:defun |make-composition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list clip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-job-output common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %create-job-output-encryption :initform
                         common-lisp:nil)
                        (captions :initarg :captions :type
                         (common-lisp:or captions common-lisp:null) :accessor
                         %create-job-output-captions :initform common-lisp:nil)
                        (composition :initarg :composition :type
                         (common-lisp:or composition common-lisp:null)
                         :accessor %create-job-output-composition :initform
                         common-lisp:nil)
                        (album-art :initarg :album-art :type
                         (common-lisp:or job-album-art common-lisp:null)
                         :accessor %create-job-output-album-art :initform
                         common-lisp:nil)
                        (watermarks :initarg :watermarks :type
                         (common-lisp:or job-watermarks common-lisp:null)
                         :accessor %create-job-output-watermarks :initform
                         common-lisp:nil)
                        (segment-duration :initarg :segment-duration :type
                         (common-lisp:or float-string common-lisp:null)
                         :accessor %create-job-output-segment-duration
                         :initform common-lisp:nil)
                        (preset-id :initarg :preset-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-job-output-preset-id :initform
                         common-lisp:nil)
                        (rotate :initarg :rotate :type
                         (common-lisp:or rotate common-lisp:null) :accessor
                         %create-job-output-rotate :initform common-lisp:nil)
                        (thumbnail-encryption :initarg :thumbnail-encryption
                         :type (common-lisp:or encryption common-lisp:null)
                         :accessor %create-job-output-thumbnail-encryption
                         :initform common-lisp:nil)
                        (thumbnail-pattern :initarg :thumbnail-pattern :type
                         (common-lisp:or thumbnail-pattern common-lisp:null)
                         :accessor %create-job-output-thumbnail-pattern
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %create-job-output-key :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-output 'make-create-job-output))
 (common-lisp:defun make-create-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption captions composition album-art
                     watermarks segment-duration preset-id rotate
                     thumbnail-encryption thumbnail-pattern key)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-pattern))
      (common-lisp:list
       (common-lisp:cons "ThumbnailPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thumbnail-encryption))
      (common-lisp:list
       (common-lisp:cons "ThumbnailEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotate))
      (common-lisp:list
       (common-lisp:cons "Rotate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset-id))
      (common-lisp:list
       (common-lisp:cons "PresetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-duration))
      (common-lisp:list
       (common-lisp:cons "SegmentDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watermarks))
      (common-lisp:list
       (common-lisp:cons "Watermarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'album-art))
      (common-lisp:list
       (common-lisp:cons "AlbumArt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composition))
      (common-lisp:list
       (common-lisp:cons "Composition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captions))
      (common-lisp:list
       (common-lisp:cons "Captions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-job-outputs ()
   '(trivial-types:proper-list create-job-output))
 (common-lisp:defun |make-create-job-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-job-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-job-playlist common-lisp:nil
                       ((play-ready-drm :initarg :play-ready-drm :type
                         (common-lisp:or play-ready-drm common-lisp:null)
                         :accessor %create-job-playlist-play-ready-drm
                         :initform common-lisp:nil)
                        (hls-content-protection :initarg
                         :hls-content-protection :type
                         (common-lisp:or hls-content-protection
                                         common-lisp:null)
                         :accessor %create-job-playlist-hls-content-protection
                         :initform common-lisp:nil)
                        (output-keys :initarg :output-keys :type
                         (common-lisp:or output-keys common-lisp:null)
                         :accessor %create-job-playlist-output-keys :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or playlist-format common-lisp:null)
                         :accessor %create-job-playlist-format :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filename common-lisp:null) :accessor
                         %create-job-playlist-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-playlist 'make-create-job-playlist))
 (common-lisp:defun make-create-job-playlist
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key play-ready-drm hls-content-protection
                     output-keys format name)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-playlist
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-playlist))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-playlist))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-keys))
      (common-lisp:list
       (common-lisp:cons "OutputKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-content-protection))
      (common-lisp:list
       (common-lisp:cons "HlsContentProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'play-ready-drm))
      (common-lisp:list
       (common-lisp:cons "PlayReadyDrm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-playlist))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-job-playlists ()
   '(trivial-types:proper-list create-job-playlist))
 (common-lisp:defun |make-create-job-playlists|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-job-playlist))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((user-metadata :initarg :user-metadata :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor %create-job-request-user-metadata :initform
                         common-lisp:nil)
                        (playlists :initarg :playlists :type
                         (common-lisp:or create-job-playlists common-lisp:null)
                         :accessor %create-job-request-playlists :initform
                         common-lisp:nil)
                        (output-key-prefix :initarg :output-key-prefix :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %create-job-request-output-key-prefix :initform
                         common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or create-job-outputs common-lisp:null)
                         :accessor %create-job-request-outputs :initform
                         common-lisp:nil)
                        (output :initarg :output :type
                         (common-lisp:or create-job-output common-lisp:null)
                         :accessor %create-job-request-output :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or job-inputs common-lisp:null) :accessor
                         %create-job-request-inputs :initform common-lisp:nil)
                        (input :initarg :input :type
                         (common-lisp:or job-input common-lisp:null) :accessor
                         %create-job-request-input :initform common-lisp:nil)
                        (pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-job-request-pipeline-id :initform
                         (common-lisp:error ":pipeline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defun make-create-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-metadata playlists output-key-prefix
                     outputs output inputs input pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'playlists))
      (common-lisp:list
       (common-lisp:cons "Playlists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or job common-lisp:null) :accessor
                         %create-job-response-job :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defun make-create-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-request common-lisp:nil
                       ((thumbnail-config :initarg :thumbnail-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %create-pipeline-request-thumbnail-config
                         :initform common-lisp:nil)
                        (content-config :initarg :content-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %create-pipeline-request-content-config
                         :initform common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or notifications common-lisp:null)
                         :accessor %create-pipeline-request-notifications
                         :initform common-lisp:nil)
                        (aws-kms-key-arn :initarg :aws-kms-key-arn :type
                         (common-lisp:or key-arn common-lisp:null) :accessor
                         %create-pipeline-request-aws-kms-key-arn :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-pipeline-request-role :initform
                         (common-lisp:error ":role is required"))
                        (output-bucket :initarg :output-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-pipeline-request-output-bucket
                         :initform common-lisp:nil)
                        (input-bucket :initarg :input-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-pipeline-request-input-bucket
                         :initform
                         (common-lisp:error ":input-bucket is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-pipeline-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-request 'make-create-pipeline-request))
 (common-lisp:defun make-create-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbnail-config content-config
                     notifications aws-kms-key-arn role output-bucket
                     input-bucket name)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bucket))
      (common-lisp:list
       (common-lisp:cons "InputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket))
      (common-lisp:list
       (common-lisp:cons "OutputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-config))
      (common-lisp:list
       (common-lisp:cons "ContentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-config))
      (common-lisp:list
       (common-lisp:cons "ThumbnailConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-pipeline-response common-lisp:nil
                       ((warnings :initarg :warnings :type
                         (common-lisp:or warnings common-lisp:null) :accessor
                         %create-pipeline-response-warnings :initform
                         common-lisp:nil)
                        (pipeline :initarg :pipeline :type
                         (common-lisp:or pipeline common-lisp:null) :accessor
                         %create-pipeline-response-pipeline :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-response 'make-create-pipeline-response))
 (common-lisp:defun make-create-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warnings pipeline)
   (common-lisp:apply #'common-lisp:make-instance 'create-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-preset-request common-lisp:nil
                       ((thumbnails :initarg :thumbnails :type
                         (common-lisp:or thumbnails common-lisp:null) :accessor
                         %create-preset-request-thumbnails :initform
                         common-lisp:nil)
                        (audio :initarg :audio :type
                         (common-lisp:or audio-parameters common-lisp:null)
                         :accessor %create-preset-request-audio :initform
                         common-lisp:nil)
                        (video :initarg :video :type
                         (common-lisp:or video-parameters common-lisp:null)
                         :accessor %create-preset-request-video :initform
                         common-lisp:nil)
                        (container :initarg :container :type
                         (common-lisp:or preset-container common-lisp:null)
                         :accessor %create-preset-request-container :initform
                         (common-lisp:error ":container is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-preset-request-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-preset-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-preset-request 'make-create-preset-request))
 (common-lisp:defun make-create-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbnails audio video container
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnails))
      (common-lisp:list
       (common-lisp:cons "Thumbnails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-preset-response common-lisp:nil
                       ((warning :initarg :warning :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-preset-response-warning :initform
                         common-lisp:nil)
                        (preset :initarg :preset :type
                         (common-lisp:or preset common-lisp:null) :accessor
                         %create-preset-response-preset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-preset-response 'make-create-preset-response))
 (common-lisp:defun make-create-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warning preset)
   (common-lisp:apply #'common-lisp:make-instance 'create-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipeline-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-pipeline-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-request 'make-delete-pipeline-request))
 (common-lisp:defun make-delete-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pipeline-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-response 'make-delete-pipeline-response))
 (common-lisp:defun make-delete-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-preset-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-preset-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-preset-request 'make-delete-preset-request))
 (common-lisp:defun make-delete-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-preset-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-preset-response 'make-delete-preset-response))
 (common-lisp:defun make-delete-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detected-properties common-lisp:nil
                       ((duration-millis :initarg :duration-millis :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %detected-properties-duration-millis
                         :initform common-lisp:nil)
                        (file-size :initarg :file-size :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %detected-properties-file-size :initform
                         common-lisp:nil)
                        (frame-rate :initarg :frame-rate :type
                         (common-lisp:or float-string common-lisp:null)
                         :accessor %detected-properties-frame-rate :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %detected-properties-height :initform
                         common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %detected-properties-width :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detected-properties 'make-detected-properties))
 (common-lisp:defun make-detected-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-millis file-size frame-rate
                     height width)
   (common-lisp:apply #'common-lisp:make-instance 'detected-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detected-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detected-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size))
      (common-lisp:list
       (common-lisp:cons "FileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detected-properties))
   common-lisp:nil))
(common-lisp:deftype digits () 'common-lisp:string)
(common-lisp:deftype digits-or-auto () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption common-lisp:nil
                       ((initialization-vector :initarg :initialization-vector
                         :type
                         (common-lisp:or zero-to255string common-lisp:null)
                         :accessor %encryption-initialization-vector :initform
                         common-lisp:nil)
                        (key-md5 :initarg :key-md5 :type
                         (common-lisp:or base64encoded-string common-lisp:null)
                         :accessor %encryption-key-md5 :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or base64encoded-string common-lisp:null)
                         :accessor %encryption-key :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or encryption-mode common-lisp:null)
                         :accessor %encryption-mode :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defun make-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key initialization-vector key-md5 key mode)
   (common-lisp:apply #'common-lisp:make-instance 'encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-md5))
      (common-lisp:list
       (common-lisp:cons "KeyMd5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:deftype encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exception-messages ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-exception-messages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filename () 'common-lisp:string)
(common-lisp:deftype fixed-gop () 'common-lisp:string)
(common-lisp:deftype float-string () 'common-lisp:string)
(common-lisp:deftype frame-rate () 'common-lisp:string)
(common-lisp:deftype grantee () 'common-lisp:string)
(common-lisp:deftype grantee-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-content-protection common-lisp:nil
                       ((key-storage-policy :initarg :key-storage-policy :type
                         (common-lisp:or key-storage-policy common-lisp:null)
                         :accessor %hls-content-protection-key-storage-policy
                         :initform common-lisp:nil)
                        (license-acquisition-url :initarg
                         :license-acquisition-url :type
                         (common-lisp:or zero-to512string common-lisp:null)
                         :accessor
                         %hls-content-protection-license-acquisition-url
                         :initform common-lisp:nil)
                        (initialization-vector :initarg :initialization-vector
                         :type
                         (common-lisp:or zero-to255string common-lisp:null)
                         :accessor
                         %hls-content-protection-initialization-vector
                         :initform common-lisp:nil)
                        (key-md5 :initarg :key-md5 :type
                         (common-lisp:or base64encoded-string common-lisp:null)
                         :accessor %hls-content-protection-key-md5 :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or base64encoded-string common-lisp:null)
                         :accessor %hls-content-protection-key :initform
                         common-lisp:nil)
                        (method :initarg :method :type
                         (common-lisp:or hls-content-protection-method
                                         common-lisp:null)
                         :accessor %hls-content-protection-method :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-content-protection 'make-hls-content-protection))
 (common-lisp:defun make-hls-content-protection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-storage-policy
                     license-acquisition-url initialization-vector key-md5 key
                     method)
   (common-lisp:apply #'common-lisp:make-instance 'hls-content-protection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-content-protection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-content-protection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-md5))
      (common-lisp:list
       (common-lisp:cons "KeyMd5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-acquisition-url))
      (common-lisp:list
       (common-lisp:cons "LicenseAcquisitionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-storage-policy))
      (common-lisp:list
       (common-lisp:cons "KeyStoragePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-content-protection))
   common-lisp:nil))
(common-lisp:deftype hls-content-protection-method () 'common-lisp:string)
(common-lisp:deftype horizontal-align () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incompatible-version-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'incompatible-version-exception)))
(common-lisp:progn
 (common-lisp:defclass input-captions common-lisp:nil
                       ((caption-sources :initarg :caption-sources :type
                         (common-lisp:or caption-sources common-lisp:null)
                         :accessor %input-captions-caption-sources :initform
                         common-lisp:nil)
                        (merge-policy :initarg :merge-policy :type
                         (common-lisp:or caption-merge-policy common-lisp:null)
                         :accessor %input-captions-merge-policy :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-captions 'make-input-captions))
 (common-lisp:defun make-input-captions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key caption-sources merge-policy)
   (common-lisp:apply #'common-lisp:make-instance 'input-captions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-captions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-captions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-policy))
      (common-lisp:list
       (common-lisp:cons "MergePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-sources))
      (common-lisp:list
       (common-lisp:cons "CaptionSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-captions))
   common-lisp:nil))
(common-lisp:deftype interlaced () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-service-exception)))
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((timing :initarg :timing :type
                         (common-lisp:or timing common-lisp:null) :accessor
                         %job-timing :initform common-lisp:nil)
                        (user-metadata :initarg :user-metadata :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor %job-user-metadata :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-status :initform common-lisp:nil)
                        (playlists :initarg :playlists :type
                         (common-lisp:or playlists common-lisp:null) :accessor
                         %job-playlists :initform common-lisp:nil)
                        (output-key-prefix :initarg :output-key-prefix :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %job-output-key-prefix :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or job-outputs common-lisp:null)
                         :accessor %job-outputs :initform common-lisp:nil)
                        (output :initarg :output :type
                         (common-lisp:or job-output common-lisp:null) :accessor
                         %job-output :initform common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or job-inputs common-lisp:null) :accessor
                         %job-inputs :initform common-lisp:nil)
                        (input :initarg :input :type
                         (common-lisp:or job-input common-lisp:null) :accessor
                         %job-input :initform common-lisp:nil)
                        (pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %job-pipeline-id :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %job-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor %job-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defun make-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timing user-metadata status playlists
                     output-key-prefix outputs output inputs input pipeline-id
                     arn id)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'playlists))
      (common-lisp:list
       (common-lisp:cons "Playlists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing))
      (common-lisp:list
       (common-lisp:cons "Timing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-album-art common-lisp:nil
                       ((artwork :initarg :artwork :type
                         (common-lisp:or artworks common-lisp:null) :accessor
                         %job-album-art-artwork :initform common-lisp:nil)
                        (merge-policy :initarg :merge-policy :type
                         (common-lisp:or merge-policy common-lisp:null)
                         :accessor %job-album-art-merge-policy :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-album-art 'make-job-album-art))
 (common-lisp:defun make-job-album-art
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key artwork merge-policy)
   (common-lisp:apply #'common-lisp:make-instance 'job-album-art
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-album-art))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-album-art))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-policy))
      (common-lisp:list
       (common-lisp:cons "MergePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artwork))
      (common-lisp:list
       (common-lisp:cons "Artwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-album-art))
   common-lisp:nil))
(common-lisp:deftype job-container () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-input common-lisp:nil
                       ((detected-properties :initarg :detected-properties
                         :type
                         (common-lisp:or detected-properties common-lisp:null)
                         :accessor %job-input-detected-properties :initform
                         common-lisp:nil)
                        (input-captions :initarg :input-captions :type
                         (common-lisp:or input-captions common-lisp:null)
                         :accessor %job-input-input-captions :initform
                         common-lisp:nil)
                        (time-span :initarg :time-span :type
                         (common-lisp:or time-span common-lisp:null) :accessor
                         %job-input-time-span :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %job-input-encryption :initform common-lisp:nil)
                        (container :initarg :container :type
                         (common-lisp:or job-container common-lisp:null)
                         :accessor %job-input-container :initform
                         common-lisp:nil)
                        (interlaced :initarg :interlaced :type
                         (common-lisp:or interlaced common-lisp:null) :accessor
                         %job-input-interlaced :initform common-lisp:nil)
                        (aspect-ratio :initarg :aspect-ratio :type
                         (common-lisp:or aspect-ratio common-lisp:null)
                         :accessor %job-input-aspect-ratio :initform
                         common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or resolution common-lisp:null) :accessor
                         %job-input-resolution :initform common-lisp:nil)
                        (frame-rate :initarg :frame-rate :type
                         (common-lisp:or frame-rate common-lisp:null) :accessor
                         %job-input-frame-rate :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or long-key common-lisp:null) :accessor
                         %job-input-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-input 'make-job-input))
 (common-lisp:defun make-job-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detected-properties input-captions
                     time-span encryption container interlaced aspect-ratio
                     resolution frame-rate key)
   (common-lisp:apply #'common-lisp:make-instance 'job-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "AspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlaced))
      (common-lisp:list
       (common-lisp:cons "Interlaced"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-span))
      (common-lisp:list
       (common-lisp:cons "TimeSpan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-captions))
      (common-lisp:list
       (common-lisp:cons "InputCaptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detected-properties))
      (common-lisp:list
       (common-lisp:cons "DetectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-inputs () '(trivial-types:proper-list job-input))
 (common-lisp:defun |make-job-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-output common-lisp:nil
                       ((applied-color-space-conversion :initarg
                         :applied-color-space-conversion :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %job-output-applied-color-space-conversion :initform
                         common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %job-output-encryption :initform common-lisp:nil)
                        (captions :initarg :captions :type
                         (common-lisp:or captions common-lisp:null) :accessor
                         %job-output-captions :initform common-lisp:nil)
                        (composition :initarg :composition :type
                         (common-lisp:or composition common-lisp:null)
                         :accessor %job-output-composition :initform
                         common-lisp:nil)
                        (album-art :initarg :album-art :type
                         (common-lisp:or job-album-art common-lisp:null)
                         :accessor %job-output-album-art :initform
                         common-lisp:nil)
                        (watermarks :initarg :watermarks :type
                         (common-lisp:or job-watermarks common-lisp:null)
                         :accessor %job-output-watermarks :initform
                         common-lisp:nil)
                        (duration-millis :initarg :duration-millis :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %job-output-duration-millis :initform
                         common-lisp:nil)
                        (file-size :initarg :file-size :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %job-output-file-size :initform
                         common-lisp:nil)
                        (frame-rate :initarg :frame-rate :type
                         (common-lisp:or float-string common-lisp:null)
                         :accessor %job-output-frame-rate :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %job-output-height :initform
                         common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %job-output-width :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %job-output-duration :initform
                         common-lisp:nil)
                        (status-detail :initarg :status-detail :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %job-output-status-detail :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-output-status :initform common-lisp:nil)
                        (segment-duration :initarg :segment-duration :type
                         (common-lisp:or float-string common-lisp:null)
                         :accessor %job-output-segment-duration :initform
                         common-lisp:nil)
                        (preset-id :initarg :preset-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %job-output-preset-id :initform common-lisp:nil)
                        (rotate :initarg :rotate :type
                         (common-lisp:or rotate common-lisp:null) :accessor
                         %job-output-rotate :initform common-lisp:nil)
                        (thumbnail-encryption :initarg :thumbnail-encryption
                         :type (common-lisp:or encryption common-lisp:null)
                         :accessor %job-output-thumbnail-encryption :initform
                         common-lisp:nil)
                        (thumbnail-pattern :initarg :thumbnail-pattern :type
                         (common-lisp:or thumbnail-pattern common-lisp:null)
                         :accessor %job-output-thumbnail-pattern :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %job-output-key :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %job-output-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-output 'make-job-output))
 (common-lisp:defun make-job-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applied-color-space-conversion encryption
                     captions composition album-art watermarks duration-millis
                     file-size frame-rate height width duration status-detail
                     status segment-duration preset-id rotate
                     thumbnail-encryption thumbnail-pattern key id)
   (common-lisp:apply #'common-lisp:make-instance 'job-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-pattern))
      (common-lisp:list
       (common-lisp:cons "ThumbnailPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thumbnail-encryption))
      (common-lisp:list
       (common-lisp:cons "ThumbnailEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotate))
      (common-lisp:list
       (common-lisp:cons "Rotate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset-id))
      (common-lisp:list
       (common-lisp:cons "PresetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-duration))
      (common-lisp:list
       (common-lisp:cons "SegmentDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "StatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size))
      (common-lisp:list
       (common-lisp:cons "FileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-millis))
      (common-lisp:list
       (common-lisp:cons "DurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watermarks))
      (common-lisp:list
       (common-lisp:cons "Watermarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'album-art))
      (common-lisp:list
       (common-lisp:cons "AlbumArt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composition))
      (common-lisp:list
       (common-lisp:cons "Composition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captions))
      (common-lisp:list
       (common-lisp:cons "Captions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applied-color-space-conversion))
      (common-lisp:list
       (common-lisp:cons "AppliedColorSpaceConversion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-outputs () '(trivial-types:proper-list job-output))
 (common-lisp:defun |make-job-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-watermark common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %job-watermark-encryption :initform common-lisp:nil)
                        (input-key :initarg :input-key :type
                         (common-lisp:or watermark-key common-lisp:null)
                         :accessor %job-watermark-input-key :initform
                         common-lisp:nil)
                        (preset-watermark-id :initarg :preset-watermark-id
                         :type
                         (common-lisp:or preset-watermark-id common-lisp:null)
                         :accessor %job-watermark-preset-watermark-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-watermark 'make-job-watermark))
 (common-lisp:defun make-job-watermark
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption input-key preset-watermark-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-watermark
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-watermark))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-watermark))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset-watermark-id))
      (common-lisp:list
       (common-lisp:cons "PresetWatermarkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-key))
      (common-lisp:list
       (common-lisp:cons "InputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-watermark))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-watermarks ()
   '(trivial-types:proper-list job-watermark))
 (common-lisp:defun |make-job-watermarks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-watermark))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype jobs () '(trivial-types:proper-list job))
 (common-lisp:defun |make-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype jpg-or-png () 'common-lisp:string)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype key-arn () 'common-lisp:string)
(common-lisp:deftype key-id-guid () 'common-lisp:string)
(common-lisp:deftype key-storage-policy () 'common-lisp:string)
(common-lisp:deftype keyframes-max-dist () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-jobs-by-pipeline-request common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-jobs-by-pipeline-request-page-token :initform
                         common-lisp:nil)
                        (ascending :initarg :ascending :type
                         (common-lisp:or ascending common-lisp:null) :accessor
                         %list-jobs-by-pipeline-request-ascending :initform
                         common-lisp:nil)
                        (pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-jobs-by-pipeline-request-pipeline-id :initform
                         (common-lisp:error ":pipeline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-jobs-by-pipeline-request
                    'make-list-jobs-by-pipeline-request))
 (common-lisp:defun make-list-jobs-by-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token ascending pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-jobs-by-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-by-pipeline-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-jobs-by-pipeline-response-next-page-token
                         :initform common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or jobs common-lisp:null) :accessor
                         %list-jobs-by-pipeline-response-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-by-pipeline-response
                    'make-list-jobs-by-pipeline-response))
 (common-lisp:defun make-list-jobs-by-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-jobs-by-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-by-status-request common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-jobs-by-status-request-page-token :initform
                         common-lisp:nil)
                        (ascending :initarg :ascending :type
                         (common-lisp:or ascending common-lisp:null) :accessor
                         %list-jobs-by-status-request-ascending :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-jobs-by-status-request-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'list-jobs-by-status-request
                    'make-list-jobs-by-status-request))
 (common-lisp:defun make-list-jobs-by-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token ascending status)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-by-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-by-status-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-jobs-by-status-response-next-page-token
                         :initform common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or jobs common-lisp:null) :accessor
                         %list-jobs-by-status-response-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-by-status-response
                    'make-list-jobs-by-status-response))
 (common-lisp:defun make-list-jobs-by-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-by-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-jobs-by-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-request common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-pipelines-request-page-token :initform
                         common-lisp:nil)
                        (ascending :initarg :ascending :type
                         (common-lisp:or ascending common-lisp:null) :accessor
                         %list-pipelines-request-ascending :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-request 'make-list-pipelines-request))
 (common-lisp:defun make-list-pipelines-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token ascending)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pipelines-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-pipelines-response-next-page-token :initform
                         common-lisp:nil)
                        (pipelines :initarg :pipelines :type
                         (common-lisp:or pipelines common-lisp:null) :accessor
                         %list-pipelines-response-pipelines :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-response 'make-list-pipelines-response))
 (common-lisp:defun make-list-pipelines-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token pipelines)
   (common-lisp:apply #'common-lisp:make-instance 'list-pipelines-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "Pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-presets-request common-lisp:nil
                       ((page-token :initarg :page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-presets-request-page-token :initform
                         common-lisp:nil)
                        (ascending :initarg :ascending :type
                         (common-lisp:or ascending common-lisp:null) :accessor
                         %list-presets-request-ascending :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-presets-request 'make-list-presets-request))
 (common-lisp:defun make-list-presets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-token ascending)
   (common-lisp:apply #'common-lisp:make-instance 'list-presets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-presets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-presets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-presets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-presets-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-presets-response-next-page-token :initform
                         common-lisp:nil)
                        (presets :initarg :presets :type
                         (common-lisp:or presets common-lisp:null) :accessor
                         %list-presets-response-presets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-presets-response 'make-list-presets-response))
 (common-lisp:defun make-list-presets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token presets)
   (common-lisp:apply #'common-lisp:make-instance 'list-presets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presets))
      (common-lisp:list
       (common-lisp:cons "Presets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   common-lisp:nil))
(common-lisp:deftype long-key () 'common-lisp:string)
(common-lisp:deftype max-frame-rate () 'common-lisp:string)
(common-lisp:deftype merge-policy () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype non-empty-base64encoded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notifications common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or sns-topic common-lisp:null) :accessor
                         %notifications-error :initform common-lisp:nil)
                        (warning :initarg :warning :type
                         (common-lisp:or sns-topic common-lisp:null) :accessor
                         %notifications-warning :initform common-lisp:nil)
                        (completed :initarg :completed :type
                         (common-lisp:or sns-topic common-lisp:null) :accessor
                         %notifications-completed :initform common-lisp:nil)
                        (progressing :initarg :progressing :type
                         (common-lisp:or sns-topic common-lisp:null) :accessor
                         %notifications-progressing :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'notifications 'make-notifications))
 (common-lisp:defun make-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error warning completed progressing)
   (common-lisp:apply #'common-lisp:make-instance 'notifications
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progressing))
      (common-lisp:list
       (common-lisp:cons "Progressing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed))
      (common-lisp:list
       (common-lisp:cons "Completed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notifications))
   common-lisp:nil))
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-long () 'common-lisp:integer)
(common-lisp:deftype one-to512string () 'common-lisp:string)
(common-lisp:deftype opacity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype output-keys () '(trivial-types:proper-list key))
 (common-lisp:defun |make-output-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype padding-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permission common-lisp:nil
                       ((access :initarg :access :type
                         (common-lisp:or access-controls common-lisp:null)
                         :accessor %permission-access :initform
                         common-lisp:nil)
                        (grantee :initarg :grantee :type
                         (common-lisp:or grantee common-lisp:null) :accessor
                         %permission-grantee :initform common-lisp:nil)
                        (grantee-type :initarg :grantee-type :type
                         (common-lisp:or grantee-type common-lisp:null)
                         :accessor %permission-grantee-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defun make-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access grantee grantee-type)
   (common-lisp:apply #'common-lisp:make-instance 'permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-type))
      (common-lisp:list
       (common-lisp:cons "GranteeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permissions () '(trivial-types:proper-list permission))
 (common-lisp:defun |make-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pipeline common-lisp:nil
                       ((thumbnail-config :initarg :thumbnail-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %pipeline-thumbnail-config :initform
                         common-lisp:nil)
                        (content-config :initarg :content-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %pipeline-content-config :initform
                         common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or notifications common-lisp:null)
                         :accessor %pipeline-notifications :initform
                         common-lisp:nil)
                        (aws-kms-key-arn :initarg :aws-kms-key-arn :type
                         (common-lisp:or key-arn common-lisp:null) :accessor
                         %pipeline-aws-kms-key-arn :initform common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %pipeline-role :initform common-lisp:nil)
                        (output-bucket :initarg :output-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %pipeline-output-bucket :initform
                         common-lisp:nil)
                        (input-bucket :initarg :input-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %pipeline-input-bucket :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or pipeline-status common-lisp:null)
                         :accessor %pipeline-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %pipeline-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pipeline-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %pipeline-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pipeline 'make-pipeline))
 (common-lisp:defun make-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbnail-config content-config
                     notifications aws-kms-key-arn role output-bucket
                     input-bucket status name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bucket))
      (common-lisp:list
       (common-lisp:cons "InputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket))
      (common-lisp:list
       (common-lisp:cons "OutputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-config))
      (common-lisp:list
       (common-lisp:cons "ContentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-config))
      (common-lisp:list
       (common-lisp:cons "ThumbnailConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-output-config common-lisp:nil
                       ((permissions :initarg :permissions :type
                         (common-lisp:or permissions common-lisp:null)
                         :accessor %pipeline-output-config-permissions
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %pipeline-output-config-storage-class
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %pipeline-output-config-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-output-config 'make-pipeline-output-config))
 (common-lisp:defun make-pipeline-output-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions storage-class bucket)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-output-config))
   common-lisp:nil))
(common-lisp:deftype pipeline-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pipelines () '(trivial-types:proper-list pipeline))
 (common-lisp:defun |make-pipelines|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pixels-or-percent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass play-ready-drm common-lisp:nil
                       ((license-acquisition-url :initarg
                         :license-acquisition-url :type
                         (common-lisp:or one-to512string common-lisp:null)
                         :accessor %play-ready-drm-license-acquisition-url
                         :initform common-lisp:nil)
                        (initialization-vector :initarg :initialization-vector
                         :type
                         (common-lisp:or zero-to255string common-lisp:null)
                         :accessor %play-ready-drm-initialization-vector
                         :initform common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or key-id-guid common-lisp:null)
                         :accessor %play-ready-drm-key-id :initform
                         common-lisp:nil)
                        (key-md5 :initarg :key-md5 :type
                         (common-lisp:or non-empty-base64encoded-string
                                         common-lisp:null)
                         :accessor %play-ready-drm-key-md5 :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or non-empty-base64encoded-string
                                         common-lisp:null)
                         :accessor %play-ready-drm-key :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or play-ready-drm-format-string
                                         common-lisp:null)
                         :accessor %play-ready-drm-format :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'play-ready-drm 'make-play-ready-drm))
 (common-lisp:defun make-play-ready-drm
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-acquisition-url
                     initialization-vector key-id key-md5 key format)
   (common-lisp:apply #'common-lisp:make-instance 'play-ready-drm
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input play-ready-drm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input play-ready-drm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-md5))
      (common-lisp:list
       (common-lisp:cons "KeyMd5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-acquisition-url))
      (common-lisp:list
       (common-lisp:cons "LicenseAcquisitionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input play-ready-drm))
   common-lisp:nil))
(common-lisp:deftype play-ready-drm-format-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass playlist common-lisp:nil
                       ((status-detail :initarg :status-detail :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %playlist-status-detail :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %playlist-status :initform common-lisp:nil)
                        (play-ready-drm :initarg :play-ready-drm :type
                         (common-lisp:or play-ready-drm common-lisp:null)
                         :accessor %playlist-play-ready-drm :initform
                         common-lisp:nil)
                        (hls-content-protection :initarg
                         :hls-content-protection :type
                         (common-lisp:or hls-content-protection
                                         common-lisp:null)
                         :accessor %playlist-hls-content-protection :initform
                         common-lisp:nil)
                        (output-keys :initarg :output-keys :type
                         (common-lisp:or output-keys common-lisp:null)
                         :accessor %playlist-output-keys :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or playlist-format common-lisp:null)
                         :accessor %playlist-format :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filename common-lisp:null) :accessor
                         %playlist-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'playlist 'make-playlist))
 (common-lisp:defun make-playlist
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-detail status play-ready-drm
                     hls-content-protection output-keys format name)
   (common-lisp:apply #'common-lisp:make-instance 'playlist
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input playlist))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input playlist))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-keys))
      (common-lisp:list
       (common-lisp:cons "OutputKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-content-protection))
      (common-lisp:list
       (common-lisp:cons "HlsContentProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'play-ready-drm))
      (common-lisp:list
       (common-lisp:cons "PlayReadyDrm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "StatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input playlist))
   common-lisp:nil))
(common-lisp:deftype playlist-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype playlists () '(trivial-types:proper-list playlist))
 (common-lisp:defun |make-playlists|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list playlist))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass preset common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or preset-type common-lisp:null)
                         :accessor %preset-type :initform common-lisp:nil)
                        (thumbnails :initarg :thumbnails :type
                         (common-lisp:or thumbnails common-lisp:null) :accessor
                         %preset-thumbnails :initform common-lisp:nil)
                        (video :initarg :video :type
                         (common-lisp:or video-parameters common-lisp:null)
                         :accessor %preset-video :initform common-lisp:nil)
                        (audio :initarg :audio :type
                         (common-lisp:or audio-parameters common-lisp:null)
                         :accessor %preset-audio :initform common-lisp:nil)
                        (container :initarg :container :type
                         (common-lisp:or preset-container common-lisp:null)
                         :accessor %preset-container :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %preset-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %preset-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %preset-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %preset-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'preset 'make-preset))
 (common-lisp:defun make-preset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type thumbnails video audio container
                     description name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'preset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnails))
      (common-lisp:list
       (common-lisp:cons "Thumbnails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preset))
   common-lisp:nil))
(common-lisp:deftype preset-container () 'common-lisp:string)
(common-lisp:deftype preset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass preset-watermark common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or target common-lisp:null) :accessor
                         %preset-watermark-target :initform common-lisp:nil)
                        (opacity :initarg :opacity :type
                         (common-lisp:or opacity common-lisp:null) :accessor
                         %preset-watermark-opacity :initform common-lisp:nil)
                        (vertical-offset :initarg :vertical-offset :type
                         (common-lisp:or pixels-or-percent common-lisp:null)
                         :accessor %preset-watermark-vertical-offset :initform
                         common-lisp:nil)
                        (vertical-align :initarg :vertical-align :type
                         (common-lisp:or vertical-align common-lisp:null)
                         :accessor %preset-watermark-vertical-align :initform
                         common-lisp:nil)
                        (horizontal-offset :initarg :horizontal-offset :type
                         (common-lisp:or pixels-or-percent common-lisp:null)
                         :accessor %preset-watermark-horizontal-offset
                         :initform common-lisp:nil)
                        (horizontal-align :initarg :horizontal-align :type
                         (common-lisp:or horizontal-align common-lisp:null)
                         :accessor %preset-watermark-horizontal-align :initform
                         common-lisp:nil)
                        (sizing-policy :initarg :sizing-policy :type
                         (common-lisp:or watermark-sizing-policy
                                         common-lisp:null)
                         :accessor %preset-watermark-sizing-policy :initform
                         common-lisp:nil)
                        (max-height :initarg :max-height :type
                         (common-lisp:or pixels-or-percent common-lisp:null)
                         :accessor %preset-watermark-max-height :initform
                         common-lisp:nil)
                        (max-width :initarg :max-width :type
                         (common-lisp:or pixels-or-percent common-lisp:null)
                         :accessor %preset-watermark-max-width :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or preset-watermark-id common-lisp:null)
                         :accessor %preset-watermark-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'preset-watermark 'make-preset-watermark))
 (common-lisp:defun make-preset-watermark
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target opacity vertical-offset
                     vertical-align horizontal-offset horizontal-align
                     sizing-policy max-height max-width id)
   (common-lisp:apply #'common-lisp:make-instance 'preset-watermark
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preset-watermark))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preset-watermark))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-width))
      (common-lisp:list
       (common-lisp:cons "MaxWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-height))
      (common-lisp:list
       (common-lisp:cons "MaxHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-policy))
      (common-lisp:list
       (common-lisp:cons "SizingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-align))
      (common-lisp:list
       (common-lisp:cons "HorizontalAlign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-offset))
      (common-lisp:list
       (common-lisp:cons "HorizontalOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-align))
      (common-lisp:list
       (common-lisp:cons "VerticalAlign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-offset))
      (common-lisp:list
       (common-lisp:cons "VerticalOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preset-watermark))
   common-lisp:nil))
(common-lisp:deftype preset-watermark-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype preset-watermarks ()
   '(trivial-types:proper-list preset-watermark))
 (common-lisp:defun |make-preset-watermarks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list preset-watermark))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype presets () '(trivial-types:proper-list preset))
 (common-lisp:defun |make-presets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list preset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass read-job-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %read-job-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'read-job-request 'make-read-job-request))
 (common-lisp:defun make-read-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'read-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or job common-lisp:null) :accessor
                         %read-job-response-job :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'read-job-response 'make-read-job-response))
 (common-lisp:defun make-read-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance 'read-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-pipeline-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %read-pipeline-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'read-pipeline-request 'make-read-pipeline-request))
 (common-lisp:defun make-read-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'read-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-pipeline-response common-lisp:nil
                       ((warnings :initarg :warnings :type
                         (common-lisp:or warnings common-lisp:null) :accessor
                         %read-pipeline-response-warnings :initform
                         common-lisp:nil)
                        (pipeline :initarg :pipeline :type
                         (common-lisp:or pipeline common-lisp:null) :accessor
                         %read-pipeline-response-pipeline :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'read-pipeline-response 'make-read-pipeline-response))
 (common-lisp:defun make-read-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warnings pipeline)
   (common-lisp:apply #'common-lisp:make-instance 'read-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          read-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-preset-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %read-preset-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'read-preset-request 'make-read-preset-request))
 (common-lisp:defun make-read-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'read-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass read-preset-response common-lisp:nil
                       ((preset :initarg :preset :type
                         (common-lisp:or preset common-lisp:null) :accessor
                         %read-preset-response-preset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'read-preset-response 'make-read-preset-response))
 (common-lisp:defun make-read-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preset)
   (common-lisp:apply #'common-lisp:make-instance 'read-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input read-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input read-preset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input read-preset-response))
   common-lisp:nil))
(common-lisp:deftype resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype rotate () 'common-lisp:string)
(common-lisp:deftype sizing-policy () 'common-lisp:string)
(common-lisp:deftype sns-topic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sns-topics () '(trivial-types:proper-list sns-topic))
 (common-lisp:defun |make-sns-topics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sns-topic))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype success () 'common-lisp:string)
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-role-request common-lisp:nil
                       ((topics :initarg :topics :type
                         (common-lisp:or sns-topics common-lisp:null) :accessor
                         %test-role-request-topics :initform
                         (common-lisp:error ":topics is required"))
                        (output-bucket :initarg :output-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %test-role-request-output-bucket :initform
                         (common-lisp:error ":output-bucket is required"))
                        (input-bucket :initarg :input-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %test-role-request-input-bucket :initform
                         (common-lisp:error ":input-bucket is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %test-role-request-role :initform
                         (common-lisp:error ":role is required"))))
 (common-lisp:export
  (common-lisp:list 'test-role-request 'make-test-role-request))
 (common-lisp:defun make-test-role-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topics output-bucket input-bucket role)
   (common-lisp:apply #'common-lisp:make-instance 'test-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bucket))
      (common-lisp:list
       (common-lisp:cons "InputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket))
      (common-lisp:list
       (common-lisp:cons "OutputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topics))
      (common-lisp:list
       (common-lisp:cons "Topics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-role-response common-lisp:nil
                       ((messages :initarg :messages :type
                         (common-lisp:or exception-messages common-lisp:null)
                         :accessor %test-role-response-messages :initform
                         common-lisp:nil)
                        (success :initarg :success :type
                         (common-lisp:or success common-lisp:null) :accessor
                         %test-role-response-success :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-role-response 'make-test-role-response))
 (common-lisp:defun make-test-role-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key messages success)
   (common-lisp:apply #'common-lisp:make-instance 'test-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-role-response))
   common-lisp:nil))
(common-lisp:deftype thumbnail-pattern () 'common-lisp:string)
(common-lisp:deftype thumbnail-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thumbnails common-lisp:nil
                       ((padding-policy :initarg :padding-policy :type
                         (common-lisp:or padding-policy common-lisp:null)
                         :accessor %thumbnails-padding-policy :initform
                         common-lisp:nil)
                        (sizing-policy :initarg :sizing-policy :type
                         (common-lisp:or sizing-policy common-lisp:null)
                         :accessor %thumbnails-sizing-policy :initform
                         common-lisp:nil)
                        (max-height :initarg :max-height :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %thumbnails-max-height :initform
                         common-lisp:nil)
                        (max-width :initarg :max-width :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %thumbnails-max-width :initform
                         common-lisp:nil)
                        (aspect-ratio :initarg :aspect-ratio :type
                         (common-lisp:or aspect-ratio common-lisp:null)
                         :accessor %thumbnails-aspect-ratio :initform
                         common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or thumbnail-resolution common-lisp:null)
                         :accessor %thumbnails-resolution :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or digits common-lisp:null) :accessor
                         %thumbnails-interval :initform common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or jpg-or-png common-lisp:null) :accessor
                         %thumbnails-format :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'thumbnails 'make-thumbnails))
 (common-lisp:defun make-thumbnails
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key padding-policy sizing-policy max-height
                     max-width aspect-ratio resolution interval format)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnails
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "AspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-width))
      (common-lisp:list
       (common-lisp:cons "MaxWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-height))
      (common-lisp:list
       (common-lisp:cons "MaxHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-policy))
      (common-lisp:list
       (common-lisp:cons "SizingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-policy))
      (common-lisp:list
       (common-lisp:cons "PaddingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnails))
   common-lisp:nil))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype time-offset () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-span common-lisp:nil
                       ((duration :initarg :duration :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %time-span-duration :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %time-span-start-time :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'time-span 'make-time-span))
 (common-lisp:defun make-time-span
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration start-time)
   (common-lisp:apply #'common-lisp:make-instance 'time-span
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-span))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-span))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-span))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timing common-lisp:nil
                       ((finish-time-millis :initarg :finish-time-millis :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %timing-finish-time-millis :initform
                         common-lisp:nil)
                        (start-time-millis :initarg :start-time-millis :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %timing-start-time-millis :initform
                         common-lisp:nil)
                        (submit-time-millis :initarg :submit-time-millis :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor %timing-submit-time-millis :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'timing 'make-timing))
 (common-lisp:defun make-timing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finish-time-millis start-time-millis
                     submit-time-millis)
   (common-lisp:apply #'common-lisp:make-instance 'timing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time-millis))
      (common-lisp:list
       (common-lisp:cons "SubmitTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-millis))
      (common-lisp:list
       (common-lisp:cons "StartTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finish-time-millis))
      (common-lisp:list
       (common-lisp:cons "FinishTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-notifications-request common-lisp:nil
                       ((notifications :initarg :notifications :type
                         (common-lisp:or notifications common-lisp:null)
                         :accessor
                         %update-pipeline-notifications-request-notifications
                         :initform
                         (common-lisp:error ":notifications is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-pipeline-notifications-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-notifications-request
                    'make-update-pipeline-notifications-request))
 (common-lisp:defun make-update-pipeline-notifications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notifications id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipeline-notifications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-notifications-response common-lisp:nil
                       ((pipeline :initarg :pipeline :type
                         (common-lisp:or pipeline common-lisp:null) :accessor
                         %update-pipeline-notifications-response-pipeline
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-notifications-response
                    'make-update-pipeline-notifications-response))
 (common-lisp:defun make-update-pipeline-notifications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipeline-notifications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-notifications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-request common-lisp:nil
                       ((thumbnail-config :initarg :thumbnail-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %update-pipeline-request-thumbnail-config
                         :initform common-lisp:nil)
                        (content-config :initarg :content-config :type
                         (common-lisp:or pipeline-output-config
                                         common-lisp:null)
                         :accessor %update-pipeline-request-content-config
                         :initform common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or notifications common-lisp:null)
                         :accessor %update-pipeline-request-notifications
                         :initform common-lisp:nil)
                        (aws-kms-key-arn :initarg :aws-kms-key-arn :type
                         (common-lisp:or key-arn common-lisp:null) :accessor
                         %update-pipeline-request-aws-kms-key-arn :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-pipeline-request-role :initform
                         common-lisp:nil)
                        (input-bucket :initarg :input-bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %update-pipeline-request-input-bucket
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-pipeline-request-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-pipeline-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-request 'make-update-pipeline-request))
 (common-lisp:defun make-update-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thumbnail-config content-config
                     notifications aws-kms-key-arn role input-bucket name id)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-bucket))
      (common-lisp:list
       (common-lisp:cons "InputBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-config))
      (common-lisp:list
       (common-lisp:cons "ContentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-config))
      (common-lisp:list
       (common-lisp:cons "ThumbnailConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-response common-lisp:nil
                       ((warnings :initarg :warnings :type
                         (common-lisp:or warnings common-lisp:null) :accessor
                         %update-pipeline-response-warnings :initform
                         common-lisp:nil)
                        (pipeline :initarg :pipeline :type
                         (common-lisp:or pipeline common-lisp:null) :accessor
                         %update-pipeline-response-pipeline :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-response 'make-update-pipeline-response))
 (common-lisp:defun make-update-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warnings pipeline)
   (common-lisp:apply #'common-lisp:make-instance 'update-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-status-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or pipeline-status common-lisp:null)
                         :accessor %update-pipeline-status-request-status
                         :initform (common-lisp:error ":status is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-pipeline-status-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-status-request
                    'make-update-pipeline-status-request))
 (common-lisp:defun make-update-pipeline-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipeline-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pipeline-status-response common-lisp:nil
                       ((pipeline :initarg :pipeline :type
                         (common-lisp:or pipeline common-lisp:null) :accessor
                         %update-pipeline-status-response-pipeline :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-status-response
                    'make-update-pipeline-status-response))
 (common-lisp:defun make-update-pipeline-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-pipeline-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-user-metadata| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (elastictranscoder-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype vertical-align () 'common-lisp:string)
(common-lisp:deftype video-bit-rate () 'common-lisp:string)
(common-lisp:deftype video-codec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-parameters common-lisp:nil
                       ((watermarks :initarg :watermarks :type
                         (common-lisp:or preset-watermarks common-lisp:null)
                         :accessor %video-parameters-watermarks :initform
                         common-lisp:nil)
                        (padding-policy :initarg :padding-policy :type
                         (common-lisp:or padding-policy common-lisp:null)
                         :accessor %video-parameters-padding-policy :initform
                         common-lisp:nil)
                        (sizing-policy :initarg :sizing-policy :type
                         (common-lisp:or sizing-policy common-lisp:null)
                         :accessor %video-parameters-sizing-policy :initform
                         common-lisp:nil)
                        (display-aspect-ratio :initarg :display-aspect-ratio
                         :type (common-lisp:or aspect-ratio common-lisp:null)
                         :accessor %video-parameters-display-aspect-ratio
                         :initform common-lisp:nil)
                        (max-height :initarg :max-height :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %video-parameters-max-height :initform
                         common-lisp:nil)
                        (max-width :initarg :max-width :type
                         (common-lisp:or digits-or-auto common-lisp:null)
                         :accessor %video-parameters-max-width :initform
                         common-lisp:nil)
                        (aspect-ratio :initarg :aspect-ratio :type
                         (common-lisp:or aspect-ratio common-lisp:null)
                         :accessor %video-parameters-aspect-ratio :initform
                         common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or resolution common-lisp:null) :accessor
                         %video-parameters-resolution :initform
                         common-lisp:nil)
                        (max-frame-rate :initarg :max-frame-rate :type
                         (common-lisp:or max-frame-rate common-lisp:null)
                         :accessor %video-parameters-max-frame-rate :initform
                         common-lisp:nil)
                        (frame-rate :initarg :frame-rate :type
                         (common-lisp:or frame-rate common-lisp:null) :accessor
                         %video-parameters-frame-rate :initform
                         common-lisp:nil)
                        (bit-rate :initarg :bit-rate :type
                         (common-lisp:or video-bit-rate common-lisp:null)
                         :accessor %video-parameters-bit-rate :initform
                         common-lisp:nil)
                        (fixed-gop :initarg :fixed-gop :type
                         (common-lisp:or fixed-gop common-lisp:null) :accessor
                         %video-parameters-fixed-gop :initform common-lisp:nil)
                        (keyframes-max-dist :initarg :keyframes-max-dist :type
                         (common-lisp:or keyframes-max-dist common-lisp:null)
                         :accessor %video-parameters-keyframes-max-dist
                         :initform common-lisp:nil)
                        (codec-options :initarg :codec-options :type
                         (common-lisp:or codec-options common-lisp:null)
                         :accessor %video-parameters-codec-options :initform
                         common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or video-codec common-lisp:null)
                         :accessor %video-parameters-codec :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-parameters 'make-video-parameters))
 (common-lisp:defun make-video-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key watermarks padding-policy sizing-policy
                     display-aspect-ratio max-height max-width aspect-ratio
                     resolution max-frame-rate frame-rate bit-rate fixed-gop
                     keyframes-max-dist codec-options codec)
   (common-lisp:apply #'common-lisp:make-instance 'video-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-options))
      (common-lisp:list
       (common-lisp:cons "CodecOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyframes-max-dist))
      (common-lisp:list
       (common-lisp:cons "KeyframesMaxDist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-gop))
      (common-lisp:list
       (common-lisp:cons "FixedGOP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-rate))
      (common-lisp:list
       (common-lisp:cons "BitRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-rate))
      (common-lisp:list
       (common-lisp:cons "FrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-frame-rate))
      (common-lisp:list
       (common-lisp:cons "MaxFrameRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "AspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-width))
      (common-lisp:list
       (common-lisp:cons "MaxWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-height))
      (common-lisp:list
       (common-lisp:cons "MaxHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "DisplayAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sizing-policy))
      (common-lisp:list
       (common-lisp:cons "SizingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-policy))
      (common-lisp:list
       (common-lisp:cons "PaddingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'watermarks))
      (common-lisp:list
       (common-lisp:cons "Watermarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass warning common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %warning-message :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %warning-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'warning 'make-warning))
 (common-lisp:defun make-warning
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'warning
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype warnings () '(trivial-types:proper-list warning))
 (common-lisp:defun |make-warnings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype watermark-key () 'common-lisp:string)
(common-lisp:deftype watermark-sizing-policy () 'common-lisp:string)
(common-lisp:deftype zero-to255string () 'common-lisp:string)
(common-lisp:deftype zero-to512string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "CancelJob" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id input inputs output outputs
                     output-key-prefix playlists user-metadata)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id input inputs output outputs
     output-key-prefix playlists user-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json "/2012-09-25/jobs" "CreateJob" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name input-bucket output-bucket role
                     aws-kms-key-arn notifications content-config
                     thumbnail-config)
   (common-lisp:declare
    (common-lisp:ignorable name input-bucket output-bucket role aws-kms-key-arn
     notifications content-config thumbnail-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json "/2012-09-25/pipelines" "CreatePipeline" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun create-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description container video audio
                     thumbnails)
   (common-lisp:declare
    (common-lisp:ignorable name description container video audio thumbnails))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json "/2012-09-25/presets" "CreatePreset" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-preset))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeletePipeline" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/presets/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeletePreset" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-preset))
(common-lisp:progn
 (common-lisp:defun list-jobs-by-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id ascending page-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id ascending page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-by-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/jobsByPipeline/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'pipeline-id))))
        "ListJobsByPipeline" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs-by-pipeline))
(common-lisp:progn
 (common-lisp:defun list-jobs-by-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status ascending page-token)
   (common-lisp:declare (common-lisp:ignorable status ascending page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-by-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/jobsByStatus/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'status))))
        "ListJobsByStatus" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs-by-status))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ascending page-token)
   (common-lisp:declare (common-lisp:ignorable ascending page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json "/2012-09-25/pipelines" "ListPipelines" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun list-presets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ascending page-token)
   (common-lisp:declare (common-lisp:ignorable ascending page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-presets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json "/2012-09-25/presets" "ListPresets" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-presets))
(common-lisp:progn
 (common-lisp:defun read-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-read-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "ReadJob" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'read-job))
(common-lisp:progn
 (common-lisp:defun read-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-read-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "ReadPipeline" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'read-pipeline))
(common-lisp:progn
 (common-lisp:defun read-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-read-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/presets/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "ReadPreset" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'read-preset))
(common-lisp:progn
 (common-lisp:defun test-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role input-bucket output-bucket topics)
   (common-lisp:declare
    (common-lisp:ignorable role input-bucket output-bucket topics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json "/2012-09-25/roleTests" "TestRole" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-role))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name input-bucket role aws-kms-key-arn
                     notifications content-config thumbnail-config)
   (common-lisp:declare
    (common-lisp:ignorable id name input-bucket role aws-kms-key-arn
     notifications content-config thumbnail-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdatePipeline" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline))
(common-lisp:progn
 (common-lisp:defun update-pipeline-notifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id notifications)
   (common-lisp:declare (common-lisp:ignorable id notifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-pipeline-notifications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/2012-09-25/pipelines/~A/notifications"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdatePipelineNotifications" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline-notifications))
(common-lisp:progn
 (common-lisp:defun update-pipeline-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id status)
   (common-lisp:declare (common-lisp:ignorable id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elastictranscoder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/2012-09-25/pipelines/~A/status"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdatePipelineStatus" "2012-09-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline-status))
