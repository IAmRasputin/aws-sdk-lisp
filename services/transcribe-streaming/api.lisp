;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/transcribe-streaming/api
  (:use)
  (:nicknames #:aws/transcribe-streaming)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transcribe-streaming/api)
(common-lisp:progn
 (common-lisp:defclass transcribe-streaming-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "transcribe-streaming"))
 (common-lisp:export 'transcribe-streaming-request))
(common-lisp:progn
 (common-lisp:define-condition transcribe-streaming-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transcribe-streaming-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (alternative (:copier common-lisp:nil)
      (:conc-name "struct-shape-alternative-"))
   (transcript common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type (common-lisp:or item-list common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or entity-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alternative 'make-alternative))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alternative))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alternative))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alternative))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alternative-list ()
   '(trivial-types:proper-list alternative))
 (common-lisp:defun |make-alternative-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alternative))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-chunk ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-event-"))
   (audio-chunk common-lisp:nil :type
    (common-lisp:or audio-chunk common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audio-event 'make-audio-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-chunk))
      (common-lisp:list
       (common-lisp:cons "AudioChunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-stream-"))
   (audio-event common-lisp:nil :type
    (common-lisp:or audio-event common-lisp:null))
   (configuration-event common-lisp:nil :type
    (common-lisp:or configuration-event common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audio-stream 'make-audio-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-event))
      (common-lisp:list
       (common-lisp:cons "AudioEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-event))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-entity-"))
   (begin-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (end-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (category common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-entity 'make-call-analytics-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype call-analytics-entity-list ()
   '(trivial-types:proper-list call-analytics-entity))
 (common-lisp:defun |make-call-analytics-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list call-analytics-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-item-"))
   (begin-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (end-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or item-type common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null))
   (vocabulary-filter-match common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (stable common-lisp:nil :type (common-lisp:or stable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-item 'make-call-analytics-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input call-analytics-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input call-analytics-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-match))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stable))
      (common-lisp:list
       (common-lisp:cons "Stable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input call-analytics-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype call-analytics-item-list ()
   '(trivial-types:proper-list call-analytics-item))
 (common-lisp:defun |make-call-analytics-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list call-analytics-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype call-analytics-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-transcript-result-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-transcript-result-stream-"))
   (utterance-event common-lisp:nil :type
    (common-lisp:or utterance-event common-lisp:null))
   (category-event common-lisp:nil :type
    (common-lisp:or category-event common-lisp:null))
   (bad-request-exception common-lisp:nil :type
    (common-lisp:or bad-request-exception common-lisp:null))
   (limit-exceeded-exception common-lisp:nil :type
    (common-lisp:or limit-exceeded-exception common-lisp:null))
   (internal-failure-exception common-lisp:nil :type
    (common-lisp:or internal-failure-exception common-lisp:null))
   (conflict-exception common-lisp:nil :type
    (common-lisp:or conflict-exception common-lisp:null))
   (service-unavailable-exception common-lisp:nil :type
    (common-lisp:or service-unavailable-exception common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-transcript-result-stream
                    'make-call-analytics-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-event))
      (common-lisp:list
       (common-lisp:cons "UtteranceEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-event))
      (common-lisp:list
       (common-lisp:cons "CategoryEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-transcript-result-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (category-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-category-event-"))
   (matched-categories common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (matched-details common-lisp:nil :type
    (common-lisp:or matched-category-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'category-event 'make-category-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-categories))
      (common-lisp:list
       (common-lisp:cons "MatchedCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-details))
      (common-lisp:list
       (common-lisp:cons "MatchedDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-definition-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or channel-id common-lisp:null))
   (participant-role (common-lisp:error ":participant-role is required") :type
    (common-lisp:or participant-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-definition 'make-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-definitions ()
   '(trivial-types:proper-list channel-definition))
 (common-lisp:defun |make-channel-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (character-offsets (:copier common-lisp:nil)
      (:conc-name "struct-shape-character-offsets-"))
   (begin common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'character-offsets 'make-character-offsets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input character-offsets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input character-offsets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input character-offsets))
   common-lisp:nil))
(common-lisp:deftype confidence () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-event-"))
   (channel-definitions common-lisp:nil :type
    (common-lisp:or channel-definitions common-lisp:null))
   (post-call-analytics-settings common-lisp:nil :type
    (common-lisp:or post-call-analytics-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-event 'make-configuration-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-call-analytics-settings))
      (common-lisp:list
       (common-lisp:cons "PostCallAnalyticsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-identification-type () 'common-lisp:string)
(common-lisp:deftype content-redaction-output () 'common-lisp:string)
(common-lisp:deftype content-redaction-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (entity (:copier common-lisp:nil) (:conc-name "struct-shape-entity-"))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (category common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity))
 (common-lisp:defun |make-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (issue-detected (:copier common-lisp:nil)
      (:conc-name "struct-shape-issue-detected-"))
   (character-offsets common-lisp:nil :type
    (common-lisp:or character-offsets common-lisp:null)))
 (common-lisp:export (common-lisp:list 'issue-detected 'make-issue-detected))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issue-detected))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issue-detected))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-offsets))
      (common-lisp:list
       (common-lisp:cons "CharacterOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issue-detected))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype issues-detected ()
   '(trivial-types:proper-list issue-detected))
 (common-lisp:defun |make-issues-detected|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue-detected))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (item (:copier common-lisp:nil) (:conc-name "struct-shape-item-"))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or item-type common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vocabulary-filter-match common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (speaker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null))
   (stable common-lisp:nil :type (common-lisp:or stable common-lisp:null)))
 (common-lisp:export (common-lisp:list 'item 'make-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-match))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stable))
      (common-lisp:list
       (common-lisp:cons "Stable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype item-list () '(trivial-types:proper-list item))
 (common-lisp:defun |make-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype item-type () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-identification ()
   '(trivial-types:proper-list language-with-score))
 (common-lisp:defun |make-language-identification|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-with-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype language-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (language-with-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-language-with-score-"))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (score common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'language-with-score 'make-language-with-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-with-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-with-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-with-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype matched-category-details () 'common-lisp:hash-table)
 (common-lisp:defun |make-matched-category-details|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype media-encoding () 'common-lisp:string)
(common-lisp:deftype media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (medical-alternative (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-alternative-"))
   (transcript common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or medical-item-list common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or medical-entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-alternative 'make-medical-alternative))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-alternative))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-alternative))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-alternative))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-alternative-list ()
   '(trivial-types:proper-list medical-alternative))
 (common-lisp:defun |make-medical-alternative-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-alternative))
   aws-sdk/generator/shape::members))
(common-lisp:deftype medical-content-identification-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (medical-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-entity-"))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (category common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null)))
 (common-lisp:export (common-lisp:list 'medical-entity 'make-medical-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-entity-list ()
   '(trivial-types:proper-list medical-entity))
 (common-lisp:defun |make-medical-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-item-"))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or item-type common-lisp:null))
   (content common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or confidence common-lisp:null))
   (speaker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'medical-item 'make-medical-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker))
      (common-lisp:list
       (common-lisp:cons "Speaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-item-list ()
   '(trivial-types:proper-list medical-item))
 (common-lisp:defun |make-medical-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-result-"))
   (result-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (is-partial common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (alternatives common-lisp:nil :type
    (common-lisp:or medical-alternative-list common-lisp:null))
   (channel-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'medical-result 'make-medical-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternatives))
      (common-lisp:list
       (common-lisp:cons "Alternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-result-list ()
   '(trivial-types:proper-list medical-result))
 (common-lisp:defun |make-medical-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list medical-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcript (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcript-"))
   (results common-lisp:nil :type
    (common-lisp:or medical-result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcript 'make-medical-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcript-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcript-event-"))
   (transcript common-lisp:nil :type
    (common-lisp:or medical-transcript common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcript-event 'make-medical-transcript-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcript-result-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcript-result-stream-"))
   (transcript-event common-lisp:nil :type
    (common-lisp:or medical-transcript-event common-lisp:null))
   (bad-request-exception common-lisp:nil :type
    (common-lisp:or bad-request-exception common-lisp:null))
   (limit-exceeded-exception common-lisp:nil :type
    (common-lisp:or limit-exceeded-exception common-lisp:null))
   (internal-failure-exception common-lisp:nil :type
    (common-lisp:or internal-failure-exception common-lisp:null))
   (conflict-exception common-lisp:nil :type
    (common-lisp:or conflict-exception common-lisp:null))
   (service-unavailable-exception common-lisp:nil :type
    (common-lisp:or service-unavailable-exception common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcript-result-stream
                    'make-medical-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-event))
      (common-lisp:list
       (common-lisp:cons "TranscriptEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcript-result-stream))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:deftype number-of-channels () 'common-lisp:integer)
(common-lisp:deftype partial-results-stability () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype pii-entity-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (points-of-interest (:copier common-lisp:nil)
      (:conc-name "struct-shape-points-of-interest-"))
   (timestamp-ranges common-lisp:nil :type
    (common-lisp:or timestamp-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'points-of-interest 'make-points-of-interest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input points-of-interest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input points-of-interest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-ranges))
      (common-lisp:list
       (common-lisp:cons "TimestampRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input points-of-interest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (post-call-analytics-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-post-call-analytics-settings-"))
   (output-location (common-lisp:error ":output-location is required") :type
    (common-lisp:or string common-lisp:null))
   (data-access-role-arn
    (common-lisp:error ":data-access-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (content-redaction-output common-lisp:nil :type
    (common-lisp:or content-redaction-output common-lisp:null))
   (output-encryption-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'post-call-analytics-settings
                    'make-post-call-analytics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-output))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   common-lisp:nil))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (result (:copier common-lisp:nil) (:conc-name "struct-shape-result-"))
   (result-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (is-partial common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (alternatives common-lisp:nil :type
    (common-lisp:or alternative-list common-lisp:null))
   (channel-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (language-identification common-lisp:nil :type
    (common-lisp:or language-identification common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alternatives))
      (common-lisp:list
       (common-lisp:cons "Alternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-identification))
      (common-lisp:list
       (common-lisp:cons "LanguageIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun |make-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sentiment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (transcribe-streaming-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype specialty () 'common-lisp:string)
(common-lisp:deftype stable () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (start-call-analytics-stream-transcription-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-call-analytics-stream-transcription-request-"))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or call-analytics-language-code common-lisp:null))
   (media-sample-rate-hertz
    (common-lisp:error ":media-sample-rate-hertz is required") :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding (common-lisp:error ":media-encoding is required") :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (audio-stream (common-lisp:error ":audio-stream is required") :type
    (common-lisp:or audio-stream common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-identification-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-redaction-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-stream-transcription-request
                    'make-start-call-analytics-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-call-analytics-stream-transcription-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-call-analytics-stream-transcription-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or call-analytics-language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding common-lisp:nil :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (call-analytics-transcript-result-stream common-lisp:nil :type
    (common-lisp:or call-analytics-transcript-result-stream common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-identification-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-redaction-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-stream-transcription-response
                    'make-start-call-analytics-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsTranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'call-analytics-transcript-result-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-medical-stream-transcription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-medical-stream-transcription-request-"))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz
    (common-lisp:error ":media-sample-rate-hertz is required") :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding (common-lisp:error ":media-encoding is required") :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (specialty (common-lisp:error ":specialty is required") :type
    (common-lisp:or specialty common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (show-speaker-label common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (audio-stream (common-lisp:error ":audio-stream is required") :type
    (common-lisp:or audio-stream common-lisp:null))
   (enable-channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-channels common-lisp:nil :type
    (common-lisp:or number-of-channels common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or medical-content-identification-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-medical-stream-transcription-request
                    'make-start-medical-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:cons "x-amzn-transcribe-specialty"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:cons "x-amzn-transcribe-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-medical-stream-transcription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-medical-stream-transcription-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding common-lisp:nil :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (specialty common-lisp:nil :type
    (common-lisp:or specialty common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null))
   (show-speaker-label common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (transcript-result-stream common-lisp:nil :type
    (common-lisp:or medical-transcript-result-stream common-lisp:null))
   (enable-channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-channels common-lisp:nil :type
    (common-lisp:or number-of-channels common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or medical-content-identification-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-medical-stream-transcription-response
                    'make-start-medical-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:cons "x-amzn-transcribe-specialty"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:cons "x-amzn-transcribe-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "TranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'transcript-result-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-stream-transcription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-stream-transcription-request-"))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz
    (common-lisp:error ":media-sample-rate-hertz is required") :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding (common-lisp:error ":media-encoding is required") :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (audio-stream (common-lisp:error ":audio-stream is required") :type
    (common-lisp:or audio-stream common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (show-speaker-label common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-channels common-lisp:nil :type
    (common-lisp:or number-of-channels common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-identification-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-redaction-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-names common-lisp:nil :type
    (common-lisp:or vocabulary-names common-lisp:null))
   (vocabulary-filter-names common-lisp:nil :type
    (common-lisp:or vocabulary-filter-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-stream-transcription-request
                    'make-start-stream-transcription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:cons "x-amzn-transcribe-identify-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:cons "x-amzn-transcribe-language-options"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:cons "x-amzn-transcribe-preferred-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-names"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-names"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-stream-transcription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-stream-transcription-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-encoding common-lisp:nil :type
    (common-lisp:or media-encoding common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (transcript-result-stream common-lisp:nil :type
    (common-lisp:or transcript-result-stream common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (show-speaker-label common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (number-of-channels common-lisp:nil :type
    (common-lisp:or number-of-channels common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-identification-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-redaction-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-names common-lisp:nil :type
    (common-lisp:or vocabulary-names common-lisp:null))
   (vocabulary-filter-names common-lisp:nil :type
    (common-lisp:or vocabulary-filter-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-stream-transcription-response
                    'make-start-stream-transcription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:cons "x-amzn-request-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:cons "x-amzn-transcribe-language-code"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:cons "x-amzn-transcribe-sample-rate"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:cons "x-amzn-transcribe-media-encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amzn-transcribe-session-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-method"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:cons "x-amzn-transcribe-show-speaker-label"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-channel-identification))
      (common-lisp:cons "x-amzn-transcribe-enable-channel-identification"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:cons "x-amzn-transcribe-number-of-channels"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:cons
       "x-amzn-transcribe-enable-partial-results-stabilization"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:cons "x-amzn-transcribe-partial-results-stability"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:cons "x-amzn-transcribe-content-identification-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:cons "x-amzn-transcribe-content-redaction-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:cons "x-amzn-transcribe-pii-entity-types"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:cons "x-amzn-transcribe-language-model-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:cons "x-amzn-transcribe-identify-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:cons "x-amzn-transcribe-language-options"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:cons "x-amzn-transcribe-preferred-language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-names"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:cons "x-amzn-transcribe-vocabulary-filter-names"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-result-stream))
      (common-lisp:list
       (common-lisp:cons "TranscriptResultStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-stream-transcription-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'transcript-result-stream)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (timestamp-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestamp-range-"))
   (begin-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (end-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestamp-ranges ()
   '(trivial-types:proper-list timestamp-range))
 (common-lisp:defun |make-timestamp-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transcript (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-"))
   (results common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transcript 'make-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transcript-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-event-"))
   (transcript common-lisp:nil :type
    (common-lisp:or transcript common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcript-event 'make-transcript-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transcript-result-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-result-stream-"))
   (transcript-event common-lisp:nil :type
    (common-lisp:or transcript-event common-lisp:null))
   (bad-request-exception common-lisp:nil :type
    (common-lisp:or bad-request-exception common-lisp:null))
   (limit-exceeded-exception common-lisp:nil :type
    (common-lisp:or limit-exceeded-exception common-lisp:null))
   (internal-failure-exception common-lisp:nil :type
    (common-lisp:or internal-failure-exception common-lisp:null))
   (conflict-exception common-lisp:nil :type
    (common-lisp:or conflict-exception common-lisp:null))
   (service-unavailable-exception common-lisp:nil :type
    (common-lisp:or service-unavailable-exception common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcript-result-stream 'make-transcript-result-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-event))
      (common-lisp:list
       (common-lisp:cons "TranscriptEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-request-exception))
      (common-lisp:list
       (common-lisp:cons "BadRequestException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'limit-exceeded-exception))
      (common-lisp:list
       (common-lisp:cons "LimitExceededException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-failure-exception))
      (common-lisp:list
       (common-lisp:cons "InternalFailureException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-unavailable-exception))
      (common-lisp:list
       (common-lisp:cons "ServiceUnavailableException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcript-result-stream))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (utterance-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-utterance-event-"))
   (utterance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-partial common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (begin-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (end-offset-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (transcript common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or call-analytics-item-list common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or call-analytics-entity-list common-lisp:null))
   (sentiment common-lisp:nil :type
    (common-lisp:or sentiment common-lisp:null))
   (issues-detected common-lisp:nil :type
    (common-lisp:or issues-detected common-lisp:null)))
 (common-lisp:export (common-lisp:list 'utterance-event 'make-utterance-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utterance-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utterance-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-id))
      (common-lisp:list
       (common-lisp:cons "UtteranceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset-millis))
      (common-lisp:list
       (common-lisp:cons "BeginOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset-millis))
      (common-lisp:list
       (common-lisp:cons "EndOffsetMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment))
      (common-lisp:list
       (common-lisp:cons "Sentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues-detected))
      (common-lisp:list
       (common-lisp:cons "IssuesDetected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utterance-event))
   common-lisp:nil))
(common-lisp:deftype vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-names () 'common-lisp:string)
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-names () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun start-call-analytics-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name session-id audio-stream
                     vocabulary-filter-name vocabulary-filter-method
                     language-model-name enable-partial-results-stabilization
                     partial-results-stability content-identification-type
                     content-redaction-type pii-entity-types)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name session-id audio-stream vocabulary-filter-name
     vocabulary-filter-method language-model-name
     enable-partial-results-stabilization partial-results-stability
     content-identification-type content-redaction-type pii-entity-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-call-analytics-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/call-analytics-stream-transcription"
        "StartCallAnalyticsStreamTranscription" "2017-10-26"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'start-call-analytics-stream-transcription))
(common-lisp:progn
 (common-lisp:defun start-medical-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name specialty type
                     show-speaker-label session-id audio-stream
                     enable-channel-identification number-of-channels
                     content-identification-type)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name specialty type show-speaker-label session-id audio-stream
     enable-channel-identification number-of-channels
     content-identification-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-medical-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/medical-stream-transcription" "StartMedicalStreamTranscription"
        "2017-10-26"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'start-medical-stream-transcription))
(common-lisp:progn
 (common-lisp:defun start-stream-transcription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code media-sample-rate-hertz
                     media-encoding vocabulary-name session-id audio-stream
                     vocabulary-filter-name vocabulary-filter-method
                     show-speaker-label enable-channel-identification
                     number-of-channels enable-partial-results-stabilization
                     partial-results-stability content-identification-type
                     content-redaction-type pii-entity-types
                     language-model-name identify-language language-options
                     preferred-language vocabulary-names
                     vocabulary-filter-names)
   (common-lisp:declare
    (common-lisp:ignorable language-code media-sample-rate-hertz media-encoding
     vocabulary-name session-id audio-stream vocabulary-filter-name
     vocabulary-filter-method show-speaker-label enable-channel-identification
     number-of-channels enable-partial-results-stabilization
     partial-results-stability content-identification-type
     content-redaction-type pii-entity-types language-model-name
     identify-language language-options preferred-language vocabulary-names
     vocabulary-filter-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-stream-transcription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'transcribe-streaming-request aws-sdk/generator/operation::input "POST"
        "/stream-transcription" "StartStreamTranscription" "2017-10-26"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'start-stream-transcription))
