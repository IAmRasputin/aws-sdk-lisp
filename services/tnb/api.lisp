;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/tnb/api
  (:use)
  (:nicknames #:aws/tnb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/tnb/api)
(common-lisp:progn
 (common-lisp:defclass tnb-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "tnb"))
 (common-lisp:export 'tnb-request))
(common-lisp:progn
 (common-lisp:define-condition tnb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'tnb-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-sol-network-operation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-sol-network-operation-input-"))
   (ns-lcm-op-occ-id (common-lisp:error ":nslcmopoccid is required") :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-sol-network-operation-input
                    'make-cancel-sol-network-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-function-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-function-package-input-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-function-package-input
                    'make-create-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-function-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-function-package-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vnf-pkg-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (onboarding-state (common-lisp:error ":onboardingstate is required") :type
    (common-lisp:or onboarding-state common-lisp:null))
   (operational-state (common-lisp:error ":operationalstate is required") :type
    (common-lisp:or operational-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (usage-state (common-lisp:error ":usagestate is required") :type
    (common-lisp:or usage-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-function-package-output
                    'make-create-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-network-instance-input-"))
   (ns-description common-lisp:nil :type
    (common-lisp:or create-sol-network-instance-input-ns-description-string
                    common-lisp:null))
   (ns-name (common-lisp:error ":nsname is required") :type
    (common-lisp:or create-sol-network-instance-input-ns-name-string
                    common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-instance-input
                    'make-create-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-description))
      (common-lisp:list
       (common-lisp:cons "nsDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-name))
      (common-lisp:list
       (common-lisp:cons "nsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:deftype create-sol-network-instance-input-ns-description-string ()
  'common-lisp:string)
(common-lisp:deftype create-sol-network-instance-input-ns-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-network-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-network-instance-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or ns-instance-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (ns-instance-name (common-lisp:error ":nsinstancename is required") :type
    (common-lisp:or string common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-instance-output
                    'make-create-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-network-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-network-package-input-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-package-input
                    'make-create-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sol-network-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sol-network-package-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or nsd-info-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (nsd-onboarding-state (common-lisp:error ":nsdonboardingstate is required")
    :type (common-lisp:or nsd-onboarding-state common-lisp:null))
   (nsd-operational-state
    (common-lisp:error ":nsdoperationalstate is required") :type
    (common-lisp:or nsd-operational-state common-lisp:null))
   (nsd-usage-state (common-lisp:error ":nsdusagestate is required") :type
    (common-lisp:or nsd-usage-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-package-output
                    'make-create-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sol-function-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sol-function-package-input-"))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sol-function-package-input
                    'make-delete-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sol-network-instance-input-"))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sol-network-instance-input
                    'make-delete-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sol-network-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sol-network-package-input-"))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sol-network-package-input
                    'make-delete-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   common-lisp:nil))
(common-lisp:deftype descriptor-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-")))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:deftype error-cause () 'common-lisp:string)
(common-lisp:deftype error-details () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-info-"))
   (cause common-lisp:nil :type (common-lisp:or error-cause common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (function-artifact-meta (:copier common-lisp:nil)
      (:conc-name "struct-shape-function-artifact-meta-"))
   (overrides common-lisp:nil :type
    (common-lisp:or override-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'function-artifact-meta 'make-function-artifact-meta))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-instance-input-"))
   (vnf-instance-id (common-lisp:error ":vnfinstanceid is required") :type
    (common-lisp:or vnf-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-input
                    'make-get-sol-function-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-instance-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-instance-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-metadata
                    'make-get-sol-function-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-instance-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vnf-instance-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-instance-id common-lisp:null))
   (instantiated-vnf-info common-lisp:nil :type
    (common-lisp:or get-sol-vnf-info common-lisp:null))
   (instantiation-state (common-lisp:error ":instantiationstate is required")
    :type (common-lisp:or vnf-instantiation-state common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or get-sol-function-instance-metadata common-lisp:null))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (vnf-product-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnf-provider common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnfd-id (common-lisp:error ":vnfdid is required") :type
    (common-lisp:or vnfd-id common-lisp:null))
   (vnfd-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-output
                    'make-get-sol-function-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instantiated-vnf-info))
      (common-lisp:list
       (common-lisp:cons "instantiatedVnfInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instantiation-state))
      (common-lisp:list
       (common-lisp:cons "instantiationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-id))
      (common-lisp:list
       (common-lisp:cons "vnfPkgId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-content-input-"))
   (accept (common-lisp:error ":accept is required") :type
    (common-lisp:or package-content-type common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-content-input
                    'make-get-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-content-output-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (package-content common-lisp:nil :type
    (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-content-output
                    'make-get-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-content))
      (common-lisp:list
       (common-lisp:cons "packageContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'package-content)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-descriptor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-descriptor-input-"))
   (accept (common-lisp:error ":accept is required") :type
    (common-lisp:or descriptor-content-type common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-descriptor-input
                    'make-get-sol-function-package-descriptor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-descriptor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-descriptor-output-"))
   (content-type common-lisp:nil :type
    (common-lisp:or descriptor-content-type common-lisp:null))
   (vnfd common-lisp:nil :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-descriptor-output
                    'make-get-sol-function-package-descriptor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'vnfd)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-input-"))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-input
                    'make-get-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (vnfd common-lisp:nil :type
    (common-lisp:or function-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-metadata
                    'make-get-sol-function-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-function-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-function-package-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vnf-pkg-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or get-sol-function-package-metadata common-lisp:null))
   (onboarding-state (common-lisp:error ":onboardingstate is required") :type
    (common-lisp:or onboarding-state common-lisp:null))
   (operational-state (common-lisp:error ":operationalstate is required") :type
    (common-lisp:or operational-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (usage-state (common-lisp:error ":usagestate is required") :type
    (common-lisp:or usage-state common-lisp:null))
   (vnf-product-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnf-provider common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnfd-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vnfd-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-output
                    'make-get-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-instantiated-vnf-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-instantiated-vnf-info-"))
   (vnf-state common-lisp:nil :type
    (common-lisp:or vnf-operational-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-instantiated-vnf-info
                    'make-get-sol-instantiated-vnf-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-state))
      (common-lisp:list
       (common-lisp:cons "vnfState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-instance-input-"))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-input
                    'make-get-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-instance-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-instance-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-metadata
                    'make-get-sol-network-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-instance-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or ns-instance-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (lcm-op-info common-lisp:nil :type
    (common-lisp:or lcm-operation-info common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or get-sol-network-instance-metadata common-lisp:null))
   (ns-instance-description
    (common-lisp:error ":nsinstancedescription is required") :type
    (common-lisp:or string common-lisp:null))
   (ns-instance-name (common-lisp:error ":nsinstancename is required") :type
    (common-lisp:or string common-lisp:null))
   (ns-state common-lisp:nil :type (common-lisp:or ns-state common-lisp:null))
   (nsd-id (common-lisp:error ":nsdid is required") :type
    (common-lisp:or nsd-id common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-output
                    'make-get-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-op-info))
      (common-lisp:list
       (common-lisp:cons "lcmOpInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ns-instance-description))
      (common-lisp:list
       (common-lisp:cons "nsInstanceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-state))
      (common-lisp:list
       (common-lisp:cons "nsState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-operation-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-operation-input-"))
   (ns-lcm-op-occ-id (common-lisp:error ":nslcmopoccid is required") :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-input
                    'make-get-sol-network-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-operation-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-operation-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-metadata
                    'make-get-sol-network-operation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-operation-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-operation-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or ns-lcm-op-occ-arn common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or problem-details common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null))
   (lcm-operation-type common-lisp:nil :type
    (common-lisp:or lcm-operation-type common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or get-sol-network-operation-metadata common-lisp:null))
   (ns-instance-id common-lisp:nil :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (operation-state common-lisp:nil :type
    (common-lisp:or ns-lcm-operation-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (tasks common-lisp:nil :type
    (common-lisp:or get-sol-network-operation-tasks-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-output
                    'make-get-sol-network-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-operation-type))
      (common-lisp:list
       (common-lisp:cons "lcmOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "operationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-operation-task-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-operation-task-details-"))
   (task-context common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (task-end-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (task-error-details common-lisp:nil :type
    (common-lisp:or error-info common-lisp:null))
   (task-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task-start-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or task-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-task-details
                    'make-get-sol-network-operation-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-context))
      (common-lisp:list
       (common-lisp:cons "taskContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "taskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-error-details))
      (common-lisp:list
       (common-lisp:cons "taskErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-sol-network-operation-tasks-list ()
   '(trivial-types:proper-list get-sol-network-operation-task-details))
 (common-lisp:defun |make-get-sol-network-operation-tasks-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            get-sol-network-operation-task-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-content-input-"))
   (accept (common-lisp:error ":accept is required") :type
    (common-lisp:or package-content-type common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-content-input
                    'make-get-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-content-output-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (nsd-content common-lisp:nil :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-content-output
                    'make-get-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-content))
      (common-lisp:list
       (common-lisp:cons "nsdContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'nsd-content)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-descriptor-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-descriptor-input-"))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-descriptor-input
                    'make-get-sol-network-package-descriptor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-descriptor-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-descriptor-output-"))
   (content-type common-lisp:nil :type
    (common-lisp:or descriptor-content-type common-lisp:null))
   (nsd common-lisp:nil :type (common-lisp:or blob common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-descriptor-output
                    'make-get-sol-network-package-descriptor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'nsd)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-input-"))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-input
                    'make-get-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (nsd common-lisp:nil :type
    (common-lisp:or network-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-metadata
                    'make-get-sol-network-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-network-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-network-package-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or nsd-info-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or get-sol-network-package-metadata common-lisp:null))
   (nsd-id (common-lisp:error ":nsdid is required") :type
    (common-lisp:or nsd-id common-lisp:null))
   (nsd-name (common-lisp:error ":nsdname is required") :type
    (common-lisp:or string common-lisp:null))
   (nsd-onboarding-state (common-lisp:error ":nsdonboardingstate is required")
    :type (common-lisp:or nsd-onboarding-state common-lisp:null))
   (nsd-operational-state
    (common-lisp:error ":nsdoperationalstate is required") :type
    (common-lisp:or nsd-operational-state common-lisp:null))
   (nsd-usage-state (common-lisp:error ":nsdusagestate is required") :type
    (common-lisp:or nsd-usage-state common-lisp:null))
   (nsd-version (common-lisp:error ":nsdversion is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (vnf-pkg-ids (common-lisp:error ":vnfpkgids is required") :type
    (common-lisp:or vnf-pkg-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-output
                    'make-get-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-vnf-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-vnf-info-"))
   (vnf-state common-lisp:nil :type
    (common-lisp:or vnf-operational-state common-lisp:null))
   (vnfc-resource-info common-lisp:nil :type
    (common-lisp:or get-sol-vnfc-resource-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnf-info 'make-get-sol-vnf-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-state))
      (common-lisp:list
       (common-lisp:cons "vnfState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfc-resource-info))
      (common-lisp:list
       (common-lisp:cons "vnfcResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-vnfc-resource-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-vnfc-resource-info-"))
   (metadata common-lisp:nil :type
    (common-lisp:or get-sol-vnfc-resource-info-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnfc-resource-info
                    'make-get-sol-vnfc-resource-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-sol-vnfc-resource-info-list ()
   '(trivial-types:proper-list get-sol-vnfc-resource-info))
 (common-lisp:defun |make-get-sol-vnfc-resource-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            get-sol-vnfc-resource-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sol-vnfc-resource-info-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sol-vnfc-resource-info-metadata-"))
   (cluster common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (helm-chart common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (node-group common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnfc-resource-info-metadata
                    'make-get-sol-vnfc-resource-info-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'helm-chart))
      (common-lisp:list
       (common-lisp:cons "helmChart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group))
      (common-lisp:list
       (common-lisp:cons "nodeGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instantiate-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-instantiate-sol-network-instance-input-"))
   (additional-params-for-ns common-lisp:nil :type
    (common-lisp:or document common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instantiate-sol-network-instance-input
                    'make-instantiate-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-params-for-ns))
      (common-lisp:list
       (common-lisp:cons "additionalParamsForNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instantiate-sol-network-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-instantiate-sol-network-instance-output-"))
   (ns-lcm-op-occ-id (common-lisp:error ":nslcmopoccid is required") :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instantiate-sol-network-instance-output
                    'make-instantiate-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (lcm-operation-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-lcm-operation-info-"))
   (ns-lcm-op-occ-id (common-lisp:error ":nslcmopoccid is required") :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lcm-operation-info 'make-lcm-operation-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   common-lisp:nil))
(common-lisp:deftype lcm-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-instance-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-instance-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vnf-instance-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-instance-id common-lisp:null))
   (instantiated-vnf-info common-lisp:nil :type
    (common-lisp:or get-sol-instantiated-vnf-info common-lisp:null))
   (instantiation-state (common-lisp:error ":instantiationstate is required")
    :type (common-lisp:or vnf-instantiation-state common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or list-sol-function-instance-metadata common-lisp:null))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (vnf-pkg-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instance-info
                    'make-list-sol-function-instance-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instantiated-vnf-info))
      (common-lisp:list
       (common-lisp:cons "instantiatedVnfInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instantiation-state))
      (common-lisp:list
       (common-lisp:cons "instantiationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-id))
      (common-lisp:list
       (common-lisp:cons "vnfPkgId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-name))
      (common-lisp:list
       (common-lisp:cons "vnfPkgName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-instance-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-instance-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instance-metadata
                    'make-list-sol-function-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-function-instance-resources ()
   '(trivial-types:proper-list list-sol-function-instance-info))
 (common-lisp:defun |make-list-sol-function-instance-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-function-instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-instances-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-sol-function-instances-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instances-input
                    'make-list-sol-function-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-function-instances-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-instances-output-"))
   (function-instances common-lisp:nil :type
    (common-lisp:or list-sol-function-instance-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instances-output
                    'make-list-sol-function-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-instances))
      (common-lisp:list
       (common-lisp:cons "functionInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-package-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-package-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or vnf-pkg-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or list-sol-function-package-metadata common-lisp:null))
   (onboarding-state (common-lisp:error ":onboardingstate is required") :type
    (common-lisp:or onboarding-state common-lisp:null))
   (operational-state (common-lisp:error ":operationalstate is required") :type
    (common-lisp:or operational-state common-lisp:null))
   (usage-state (common-lisp:error ":usagestate is required") :type
    (common-lisp:or usage-state common-lisp:null))
   (vnf-product-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnf-provider common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vnfd-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vnfd-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-package-info
                    'make-list-sol-function-package-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-package-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-package-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-package-metadata
                    'make-list-sol-function-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-function-package-resources ()
   '(trivial-types:proper-list list-sol-function-package-info))
 (common-lisp:defun |make-list-sol-function-package-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-function-package-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-packages-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-packages-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-sol-function-packages-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-packages-input
                    'make-list-sol-function-packages-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-function-packages-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-function-packages-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-function-packages-output-"))
   (function-packages (common-lisp:error ":functionpackages is required") :type
    (common-lisp:or list-sol-function-package-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-packages-output
                    'make-list-sol-function-packages-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-packages))
      (common-lisp:list
       (common-lisp:cons "functionPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-instance-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-instance-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or ns-instance-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or list-sol-network-instance-metadata common-lisp:null))
   (ns-instance-description
    (common-lisp:error ":nsinstancedescription is required") :type
    (common-lisp:or string common-lisp:null))
   (ns-instance-name (common-lisp:error ":nsinstancename is required") :type
    (common-lisp:or string common-lisp:null))
   (ns-state (common-lisp:error ":nsstate is required") :type
    (common-lisp:or ns-state common-lisp:null))
   (nsd-id (common-lisp:error ":nsdid is required") :type
    (common-lisp:or nsd-id common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instance-info
                    'make-list-sol-network-instance-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ns-instance-description))
      (common-lisp:list
       (common-lisp:cons "nsInstanceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-state))
      (common-lisp:list
       (common-lisp:cons "nsState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-instance-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-instance-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instance-metadata
                    'make-list-sol-network-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-instance-resources ()
   '(trivial-types:proper-list list-sol-network-instance-info))
 (common-lisp:defun |make-list-sol-network-instance-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-instances-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-sol-network-instances-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instances-input
                    'make-list-sol-network-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-instances-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-instances-output-"))
   (network-instances common-lisp:nil :type
    (common-lisp:or list-sol-network-instance-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instances-output
                    'make-list-sol-network-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-instances))
      (common-lisp:list
       (common-lisp:cons "networkInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-operations-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-operations-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or ns-lcm-op-occ-arn common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or problem-details common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null))
   (lcm-operation-type (common-lisp:error ":lcmoperationtype is required")
    :type (common-lisp:or lcm-operation-type common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or list-sol-network-operations-metadata common-lisp:null))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (operation-state (common-lisp:error ":operationstate is required") :type
    (common-lisp:or ns-lcm-operation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-info
                    'make-list-sol-network-operations-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-operation-type))
      (common-lisp:list
       (common-lisp:cons "lcmOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "operationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-operations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-operations-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-sol-network-operations-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-input
                    'make-list-sol-network-operations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-operations-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-operations-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-operations-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-metadata
                    'make-list-sol-network-operations-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-operations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-operations-output-"))
   (network-operations common-lisp:nil :type
    (common-lisp:or list-sol-network-operations-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-output
                    'make-list-sol-network-operations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-operations))
      (common-lisp:list
       (common-lisp:cons "networkOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-operations-resources ()
   '(trivial-types:proper-list list-sol-network-operations-info))
 (common-lisp:defun |make-list-sol-network-operations-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-operations-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-package-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-package-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or nsd-info-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or list-sol-network-package-metadata common-lisp:null))
   (nsd-designer common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nsd-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (nsd-invariant-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nsd-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (nsd-onboarding-state (common-lisp:error ":nsdonboardingstate is required")
    :type (common-lisp:or nsd-onboarding-state common-lisp:null))
   (nsd-operational-state
    (common-lisp:error ":nsdoperationalstate is required") :type
    (common-lisp:or nsd-operational-state common-lisp:null))
   (nsd-usage-state (common-lisp:error ":nsdusagestate is required") :type
    (common-lisp:or nsd-usage-state common-lisp:null))
   (nsd-version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vnf-pkg-ids common-lisp:nil :type
    (common-lisp:or vnf-pkg-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-package-info
                    'make-list-sol-network-package-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-designer))
      (common-lisp:list
       (common-lisp:cons "nsdDesigner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-invariant-id))
      (common-lisp:list
       (common-lisp:cons "nsdInvariantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-package-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-package-metadata-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (last-modified (common-lisp:error ":lastmodified is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-package-metadata
                    'make-list-sol-network-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-package-resources ()
   '(trivial-types:proper-list list-sol-network-package-info))
 (common-lisp:defun |make-list-sol-network-package-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-package-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-packages-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-packages-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-sol-network-packages-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-packages-input
                    'make-list-sol-network-packages-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-packages-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-sol-network-packages-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sol-network-packages-output-"))
   (network-packages (common-lisp:error ":networkpackages is required") :type
    (common-lisp:or list-sol-network-package-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-packages-output
                    'make-list-sol-network-packages-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-packages))
      (common-lisp:list
       (common-lisp:cons "networkPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tnbresource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-artifact-meta (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-artifact-meta-"))
   (overrides common-lisp:nil :type
    (common-lisp:or override-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-artifact-meta 'make-network-artifact-meta))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   common-lisp:nil))
(common-lisp:deftype ns-instance-arn () 'common-lisp:string)
(common-lisp:deftype ns-instance-id () 'common-lisp:string)
(common-lisp:deftype ns-lcm-op-occ-arn () 'common-lisp:string)
(common-lisp:deftype ns-lcm-op-occ-id () 'common-lisp:string)
(common-lisp:deftype ns-lcm-operation-state () 'common-lisp:string)
(common-lisp:deftype ns-state () 'common-lisp:string)
(common-lisp:deftype nsd-id () 'common-lisp:string)
(common-lisp:deftype nsd-info-arn () 'common-lisp:string)
(common-lisp:deftype nsd-info-id () 'common-lisp:string)
(common-lisp:deftype nsd-onboarding-state () 'common-lisp:string)
(common-lisp:deftype nsd-operational-state () 'common-lisp:string)
(common-lisp:deftype nsd-usage-state () 'common-lisp:string)
(common-lisp:deftype onboarding-state () 'common-lisp:string)
(common-lisp:deftype operational-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype override-list ()
   '(trivial-types:proper-list tosca-override))
 (common-lisp:defun |make-override-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tosca-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-content-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (problem-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-problem-details-"))
   (detail (common-lisp:error ":detail is required") :type
    (common-lisp:or string common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'problem-details 'make-problem-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-function-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-function-package-content-input-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (file (common-lisp:error ":file is required") :type
    (common-lisp:or blob common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-input
                    'make-put-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-function-package-content-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-function-package-content-metadata-"))
   (vnfd common-lisp:nil :type
    (common-lisp:or function-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-metadata
                    'make-put-sol-function-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-function-package-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-function-package-content-output-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or put-sol-function-package-content-metadata
                    common-lisp:null))
   (vnf-product-name (common-lisp:error ":vnfproductname is required") :type
    (common-lisp:or string common-lisp:null))
   (vnf-provider (common-lisp:error ":vnfprovider is required") :type
    (common-lisp:or string common-lisp:null))
   (vnfd-id (common-lisp:error ":vnfdid is required") :type
    (common-lisp:or vnfd-id common-lisp:null))
   (vnfd-version (common-lisp:error ":vnfdversion is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-output
                    'make-put-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-network-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-network-package-content-input-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (file (common-lisp:error ":file is required") :type
    (common-lisp:or blob common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-input
                    'make-put-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-network-package-content-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-network-package-content-metadata-"))
   (nsd common-lisp:nil :type
    (common-lisp:or network-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-metadata
                    'make-put-sol-network-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-sol-network-package-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-sol-network-package-content-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or nsd-info-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or put-sol-network-package-content-metadata common-lisp:null))
   (nsd-id (common-lisp:error ":nsdid is required") :type
    (common-lisp:or nsd-id common-lisp:null))
   (nsd-name (common-lisp:error ":nsdname is required") :type
    (common-lisp:or string common-lisp:null))
   (nsd-version (common-lisp:error ":nsdversion is required") :type
    (common-lisp:or string common-lisp:null))
   (vnf-pkg-ids (common-lisp:error ":vnfpkgids is required") :type
    (common-lisp:or vnf-pkg-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-output
                    'make-put-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tnbresource-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tnbresource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-sol-network-instance-input-"))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-sol-network-instance-input
                    'make-terminate-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-sol-network-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-sol-network-instance-output-"))
   (ns-lcm-op-occ-id common-lisp:nil :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-sol-network-instance-output
                    'make-terminate-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (tosca-override (:copier common-lisp:nil)
      (:conc-name "struct-shape-tosca-override-"))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tosca-override 'make-tosca-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tosca-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tosca-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tosca-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tnbresource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-function-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-function-package-input-"))
   (operational-state (common-lisp:error ":operationalstate is required") :type
    (common-lisp:or operational-state common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-function-package-input
                    'make-update-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-function-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-function-package-output-"))
   (operational-state (common-lisp:error ":operationalstate is required") :type
    (common-lisp:or operational-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-function-package-output
                    'make-update-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-network-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-network-instance-input-"))
   (modify-vnf-info-data common-lisp:nil :type
    (common-lisp:or update-sol-network-modify common-lisp:null))
   (ns-instance-id (common-lisp:error ":nsinstanceid is required") :type
    (common-lisp:or ns-instance-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (update-type (common-lisp:error ":updatetype is required") :type
    (common-lisp:or update-sol-network-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-instance-input
                    'make-update-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modify-vnf-info-data))
      (common-lisp:list
       (common-lisp:cons "modifyVnfInfoData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-network-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-network-instance-output-"))
   (ns-lcm-op-occ-id common-lisp:nil :type
    (common-lisp:or ns-lcm-op-occ-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-instance-output
                    'make-update-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-network-modify (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-network-modify-"))
   (vnf-configurable-properties
    (common-lisp:error ":vnfconfigurableproperties is required") :type
    (common-lisp:or document common-lisp:null))
   (vnf-instance-id (common-lisp:error ":vnfinstanceid is required") :type
    (common-lisp:or vnf-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-modify
                    'make-update-sol-network-modify))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-modify))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-modify))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vnf-configurable-properties))
      (common-lisp:list
       (common-lisp:cons "vnfConfigurableProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-instance-id))
      (common-lisp:list
       (common-lisp:cons "vnfInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-modify))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-network-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-network-package-input-"))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (nsd-operational-state
    (common-lisp:error ":nsdoperationalstate is required") :type
    (common-lisp:or nsd-operational-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-package-input
                    'make-update-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sol-network-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sol-network-package-output-"))
   (nsd-operational-state
    (common-lisp:error ":nsdoperationalstate is required") :type
    (common-lisp:or nsd-operational-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-package-output
                    'make-update-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   common-lisp:nil))
(common-lisp:deftype update-sol-network-type () 'common-lisp:string)
(common-lisp:deftype usage-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-function-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-sol-function-package-content-input-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (file (common-lisp:error ":file is required") :type
    (common-lisp:or blob common-lisp:null))
   (vnf-pkg-id (common-lisp:error ":vnfpkgid is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-input
                    'make-validate-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file)))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-function-package-content-metadata (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-sol-function-package-content-metadata-"))
   (vnfd common-lisp:nil :type
    (common-lisp:or function-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-metadata
                    'make-validate-sol-function-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-function-package-content-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-sol-function-package-content-output-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or vnf-pkg-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or validate-sol-function-package-content-metadata
                    common-lisp:null))
   (vnf-product-name (common-lisp:error ":vnfproductname is required") :type
    (common-lisp:or string common-lisp:null))
   (vnf-provider (common-lisp:error ":vnfprovider is required") :type
    (common-lisp:or string common-lisp:null))
   (vnfd-id (common-lisp:error ":vnfdid is required") :type
    (common-lisp:or vnfd-id common-lisp:null))
   (vnfd-version (common-lisp:error ":vnfdversion is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-output
                    'make-validate-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-network-package-content-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-sol-network-package-content-input-"))
   (content-type common-lisp:nil :type
    (common-lisp:or package-content-type common-lisp:null))
   (file (common-lisp:error ":file is required") :type
    (common-lisp:or blob common-lisp:null))
   (nsd-info-id (common-lisp:error ":nsdinfoid is required") :type
    (common-lisp:or nsd-info-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-input
                    'make-validate-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file)))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-network-package-content-metadata (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-validate-sol-network-package-content-metadata-"))
   (nsd common-lisp:nil :type
    (common-lisp:or network-artifact-meta common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-metadata
                    'make-validate-sol-network-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-sol-network-package-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-sol-network-package-content-output-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or nsd-info-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or nsd-info-id common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or validate-sol-network-package-content-metadata
                    common-lisp:null))
   (nsd-id (common-lisp:error ":nsdid is required") :type
    (common-lisp:or nsd-id common-lisp:null))
   (nsd-name (common-lisp:error ":nsdname is required") :type
    (common-lisp:or string common-lisp:null))
   (nsd-version (common-lisp:error ":nsdversion is required") :type
    (common-lisp:or string common-lisp:null))
   (vnf-pkg-ids (common-lisp:error ":vnfpkgids is required") :type
    (common-lisp:or vnf-pkg-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-output
                    'make-validate-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vnf-instance-arn () 'common-lisp:string)
(common-lisp:deftype vnf-instance-id () 'common-lisp:string)
(common-lisp:deftype vnf-instantiation-state () 'common-lisp:string)
(common-lisp:deftype vnf-operational-state () 'common-lisp:string)
(common-lisp:deftype vnf-pkg-arn () 'common-lisp:string)
(common-lisp:deftype vnf-pkg-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vnf-pkg-id-list ()
   '(trivial-types:proper-list vnf-pkg-id))
 (common-lisp:defun |make-vnf-pkg-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vnf-pkg-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vnfd-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-sol-network-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-lcm-op-occ-id)
   (common-lisp:declare (common-lisp:ignorable ns-lcm-op-occ-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-sol-network-operation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_lcm_op_occs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-lcm-op-occ-id))))
                                                        "CancelSolNetworkOperation"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-sol-network-operation))
(common-lisp:progn
 (common-lisp:defun create-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/vnfpkgm/v1/vnf_packages"
                                                        "CreateSolFunctionPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sol-function-package))
(common-lisp:progn
 (common-lisp:defun create-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-description ns-name nsd-info-id tags)
   (common-lisp:declare
    (common-lisp:ignorable ns-description ns-name nsd-info-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/nslcm/v1/ns_instances"
                                                        "CreateSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun create-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/nsd/v1/ns_descriptors"
                                                        "CreateSolNetworkPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sol-network-package))
(common-lisp:progn
 (common-lisp:defun delete-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "DeleteSolFunctionPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sol-function-package))
(common-lisp:progn
 (common-lisp:defun delete-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "DeleteSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun delete-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "DeleteSolNetworkPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sol-network-package))
(common-lisp:progn
 (common-lisp:defun get-sol-function-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-instance-id)
   (common-lisp:declare (common-lisp:ignorable vnf-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-function-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnflcm/v1/vnf_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-instance-id))))
                                                        "GetSolFunctionInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-function-instance))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-function-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-function-package))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable accept vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackageContent"
                                                        "2008-10-21")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable accept vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-function-package-descriptor-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/vnfd"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackageDescriptor"
                                                        "2008-10-21")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-function-package-descriptor))
(common-lisp:progn
 (common-lisp:defun get-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "GetSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun get-sol-network-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-lcm-op-occ-id)
   (common-lisp:declare (common-lisp:ignorable ns-lcm-op-occ-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_lcm_op_occs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-lcm-op-occ-id))))
                                                        "GetSolNetworkOperation"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-network-operation))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-network-package))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable accept nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackageContent"
                                                        "2008-10-21")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-network-package-content))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-network-package-descriptor-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackageDescriptor"
                                                        "2008-10-21")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sol-network-package-descriptor))
(common-lisp:progn
 (common-lisp:defun instantiate-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key additional-params-for-ns dry-run
                     ns-instance-id tags)
   (common-lisp:declare
    (common-lisp:ignorable additional-params-for-ns dry-run ns-instance-id
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-instantiate-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/instantiate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "InstantiateSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'instantiate-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun list-sol-function-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sol-function-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/vnflcm/v1/vnf_instances"
                                                        "ListSolFunctionInstances"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sol-function-instances))
(common-lisp:progn
 (common-lisp:defun list-sol-function-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-function-packages-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/vnfpkgm/v1/vnf_packages"
                                                        "ListSolFunctionPackages"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sol-function-packages))
(common-lisp:progn
 (common-lisp:defun list-sol-network-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-network-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nslcm/v1/ns_instances"
                                                        "ListSolNetworkInstances"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sol-network-instances))
(common-lisp:progn
 (common-lisp:defun list-sol-network-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sol-network-operations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nslcm/v1/ns_lcm_op_occs"
                                                        "ListSolNetworkOperations"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sol-network-operations))
(common-lisp:progn
 (common-lisp:defun list-sol-network-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-network-packages-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nsd/v1/ns_descriptors"
                                                        "ListSolNetworkPackages"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sol-network-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable content-type file vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "PutSolFunctionPackageContent"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun put-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable content-type file nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "PutSolNetworkPackageContent"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-sol-network-package-content))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id tags)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/terminate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "TerminateSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operational-state vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable operational-state vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "UpdateSolFunctionPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sol-function-package))
(common-lisp:progn
 (common-lisp:defun update-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key modify-vnf-info-data ns-instance-id tags
                     update-type)
   (common-lisp:declare
    (common-lisp:ignorable modify-vnf-info-data ns-instance-id tags
     update-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "UpdateSolNetworkInstance"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun update-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id nsd-operational-state)
   (common-lisp:declare
    (common-lisp:ignorable nsd-info-id nsd-operational-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "UpdateSolNetworkPackage"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sol-network-package))
(common-lisp:progn
 (common-lisp:defun validate-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable content-type file vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content/validate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "ValidateSolFunctionPackageContent"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun validate-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable content-type file nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content/validate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "ValidateSolNetworkPackageContent"
                                                        "2008-10-21"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-sol-network-package-content))
