;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/license-manager/api
  (:use)
  (:nicknames #:aws/license-manager)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/license-manager/api)
(common-lisp:progn
 (common-lisp:defclass license-manager-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "license-manager"))
 (common-lisp:export 'license-manager-request))
(common-lisp:progn
 (common-lisp:define-condition license-manager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'license-manager-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AuthorizationException" . authorization-exception)
    ("ConflictException" . conflict-exception)
    ("EntitlementNotAllowedException" . entitlement-not-allowed-exception)
    ("FailedDependencyException" . failed-dependency-exception)
    ("FilterLimitExceededException" . filter-limit-exceeded-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidResourceStateException" . invalid-resource-state-exception)
    ("LicenseUsageException" . license-usage-exception)
    ("NoEntitlementsAllowedException" . no-entitlements-allowed-exception)
    ("RateLimitExceededException" . rate-limit-exceeded-exception)
    ("RedirectException" . redirect-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerInternalException" . server-internal-exception)
    ("UnsupportedDigitalSignatureMethodException"
     . unsupported-digital-signature-method-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-grant-request-"))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-grant-request 'make-accept-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-grant-response-"))
   (grant-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-grant-response 'make-accept-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype allowed-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-operation-list ()
   '(trivial-types:proper-list allowed-operation))
 (common-lisp:defun |make-allowed-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authorization-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       authorization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'authorization-exception 'authorization-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (automated-discovery-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-automated-discovery-information-"))
   (last-run-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'automated-discovery-information
                    'make-automated-discovery-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "LastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (borrow-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-borrow-configuration-"))
   (allow-early-check-in
    (common-lisp:error ":allow-early-check-in is required") :type
    (common-lisp:or box-boolean common-lisp:null))
   (max-time-to-live-in-minutes
    (common-lisp:error ":max-time-to-live-in-minutes is required") :type
    (common-lisp:or box-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'borrow-configuration 'make-borrow-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input borrow-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input borrow-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-early-check-in))
      (common-lisp:list
       (common-lisp:cons "AllowEarlyCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-time-to-live-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxTimeToLiveInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input borrow-configuration))
   common-lisp:nil))
(common-lisp:deftype box-boolean () 'common-lisp:boolean)
(common-lisp:deftype box-integer () 'common-lisp:integer)
(common-lisp:deftype box-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (check-in-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-in-license-request-"))
   (license-consumption-token
    (common-lisp:error ":license-consumption-token is required") :type
    (common-lisp:or string common-lisp:null))
   (beneficiary common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-in-license-request 'make-check-in-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (check-in-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-in-license-response-")))
 (common-lisp:export
  (common-lisp:list 'check-in-license-response
                    'make-check-in-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkout-borrow-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkout-borrow-license-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (entitlements (common-lisp:error ":entitlements is required") :type
    (common-lisp:or entitlement-data-list common-lisp:null))
   (digital-signature-method
    (common-lisp:error ":digital-signature-method is required") :type
    (common-lisp:or digital-signature-method common-lisp:null))
   (node-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (checkout-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkout-borrow-license-request
                    'make-checkout-borrow-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'digital-signature-method))
      (common-lisp:list
       (common-lisp:cons "DigitalSignatureMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-metadata))
      (common-lisp:list
       (common-lisp:cons "CheckoutMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkout-borrow-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkout-borrow-license-response-"))
   (license-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (license-consumption-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (entitlements-allowed common-lisp:nil :type
    (common-lisp:or entitlement-data-list common-lisp:null))
   (node-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (signed-token common-lisp:nil :type
    (common-lisp:or signed-token common-lisp:null))
   (issued-at common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (checkout-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkout-borrow-license-response
                    'make-checkout-borrow-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entitlements-allowed))
      (common-lisp:list
       (common-lisp:cons "EntitlementsAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-token))
      (common-lisp:list
       (common-lisp:cons "SignedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-metadata))
      (common-lisp:list
       (common-lisp:cons "CheckoutMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkout-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkout-license-request-"))
   (product-sku (common-lisp:error ":product-sku is required") :type
    (common-lisp:or string common-lisp:null))
   (checkout-type (common-lisp:error ":checkout-type is required") :type
    (common-lisp:or checkout-type common-lisp:null))
   (key-fingerprint (common-lisp:error ":key-fingerprint is required") :type
    (common-lisp:or string common-lisp:null))
   (entitlements (common-lisp:error ":entitlements is required") :type
    (common-lisp:or entitlement-data-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (beneficiary common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (node-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkout-license-request 'make-checkout-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-type))
      (common-lisp:list
       (common-lisp:cons "CheckoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (checkout-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkout-license-response-"))
   (checkout-type common-lisp:nil :type
    (common-lisp:or checkout-type common-lisp:null))
   (license-consumption-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (entitlements-allowed common-lisp:nil :type
    (common-lisp:or entitlement-data-list common-lisp:null))
   (signed-token common-lisp:nil :type
    (common-lisp:or signed-token common-lisp:null))
   (node-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (issued-at common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (license-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkout-license-response
                    'make-checkout-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-type))
      (common-lisp:list
       (common-lisp:cons "CheckoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entitlements-allowed))
      (common-lisp:list
       (common-lisp:cons "EntitlementsAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-token))
      (common-lisp:list
       (common-lisp:cons "SignedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   common-lisp:nil))
(common-lisp:deftype checkout-type () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (consumed-license-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-consumed-license-summary-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (consumed-licenses common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'consumed-license-summary 'make-consumed-license-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consumed-license-summary-list ()
   '(trivial-types:proper-list consumed-license-summary))
 (common-lisp:defun |make-consumed-license-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            consumed-license-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (consumption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-consumption-configuration-"))
   (renew-type common-lisp:nil :type
    (common-lisp:or renew-type common-lisp:null))
   (provisional-configuration common-lisp:nil :type
    (common-lisp:or provisional-configuration common-lisp:null))
   (borrow-configuration common-lisp:nil :type
    (common-lisp:or borrow-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'consumption-configuration
                    'make-consumption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renew-type))
      (common-lisp:list
       (common-lisp:cons "RenewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisional-configuration))
      (common-lisp:list
       (common-lisp:cons "ProvisionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'borrow-configuration))
      (common-lisp:list
       (common-lisp:cons "BorrowConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (grant-name (common-lisp:error ":grant-name is required") :type
    (common-lisp:or string common-lisp:null))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (principals (common-lisp:error ":principals is required") :type
    (common-lisp:or principal-arn-list common-lisp:null))
   (home-region (common-lisp:error ":home-region is required") :type
    (common-lisp:or string common-lisp:null))
   (allowed-operations (common-lisp:error ":allowed-operations is required")
    :type (common-lisp:or allowed-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-request 'make-create-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-response-"))
   (grant-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-response 'make-create-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-version-request-"))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (grant-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-operations common-lisp:nil :type
    (common-lisp:or allowed-operation-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason-message common-lisp:null))
   (source-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-version-request
                    'make-create-grant-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grant-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grant-version-response-"))
   (grant-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grant-version-response
                    'make-create-grant-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (license-counting-type
    (common-lisp:error ":license-counting-type is required") :type
    (common-lisp:or license-counting-type common-lisp:null))
   (license-count common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (license-count-hard-limit common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (license-rules common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (disassociate-when-not-found common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (product-information-list common-lisp:nil :type
    (common-lisp:or product-information-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-configuration-request
                    'make-create-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-configuration-response-"))
   (license-configuration-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-configuration-response
                    'make-create-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-conversion-task-for-resource-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-license-conversion-task-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (source-license-context
    (common-lisp:error ":source-license-context is required") :type
    (common-lisp:or license-conversion-context common-lisp:null))
   (destination-license-context
    (common-lisp:error ":destination-license-context is required") :type
    (common-lisp:or license-conversion-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-conversion-task-for-resource-request
                    'make-create-license-conversion-task-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-conversion-task-for-resource-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-license-conversion-task-for-resource-response-"))
   (license-conversion-task-id common-lisp:nil :type
    (common-lisp:or license-conversion-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-conversion-task-for-resource-response
                    'make-create-license-conversion-task-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-manager-report-generator-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-license-manager-report-generator-request-"))
   (report-generator-name
    (common-lisp:error ":report-generator-name is required") :type
    (common-lisp:or report-generator-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or report-type-list common-lisp:null))
   (report-context (common-lisp:error ":report-context is required") :type
    (common-lisp:or report-context common-lisp:null))
   (report-frequency (common-lisp:error ":report-frequency is required") :type
    (common-lisp:or report-frequency common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-manager-report-generator-request
                    'make-create-license-manager-report-generator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-manager-report-generator-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-license-manager-report-generator-response-"))
   (license-manager-report-generator-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-manager-report-generator-response
                    'make-create-license-manager-report-generator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-request-"))
   (license-name (common-lisp:error ":license-name is required") :type
    (common-lisp:or string common-lisp:null))
   (product-name (common-lisp:error ":product-name is required") :type
    (common-lisp:or string common-lisp:null))
   (product-sku (common-lisp:error ":product-sku is required") :type
    (common-lisp:or string common-lisp:null))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or issuer common-lisp:null))
   (home-region (common-lisp:error ":home-region is required") :type
    (common-lisp:or string common-lisp:null))
   (validity (common-lisp:error ":validity is required") :type
    (common-lisp:or datetime-range common-lisp:null))
   (entitlements (common-lisp:error ":entitlements is required") :type
    (common-lisp:or entitlement-list common-lisp:null))
   (beneficiary (common-lisp:error ":beneficiary is required") :type
    (common-lisp:or string common-lisp:null))
   (consumption-configuration
    (common-lisp:error ":consumption-configuration is required") :type
    (common-lisp:or consumption-configuration common-lisp:null))
   (license-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-request 'make-create-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-response-"))
   (license-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-response 'make-create-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-version-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (license-name (common-lisp:error ":license-name is required") :type
    (common-lisp:or string common-lisp:null))
   (product-name (common-lisp:error ":product-name is required") :type
    (common-lisp:or string common-lisp:null))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or issuer common-lisp:null))
   (home-region (common-lisp:error ":home-region is required") :type
    (common-lisp:or string common-lisp:null))
   (validity (common-lisp:error ":validity is required") :type
    (common-lisp:or datetime-range common-lisp:null))
   (license-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (entitlements (common-lisp:error ":entitlements is required") :type
    (common-lisp:or entitlement-list common-lisp:null))
   (consumption-configuration
    (common-lisp:error ":consumption-configuration is required") :type
    (common-lisp:or consumption-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or license-status common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (source-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-version-request
                    'make-create-license-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-license-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-license-version-response-"))
   (license-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-license-version-response
                    'make-create-license-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (role-arns common-lisp:nil :type (common-lisp:or arn-list common-lisp:null))
   (expiration-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (token-properties common-lisp:nil :type
    (common-lisp:or max-size3string-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-request 'make-create-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arns))
      (common-lisp:list
       (common-lisp:cons "RoleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-token-response-"))
   (token-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (token-type common-lisp:nil :type
    (common-lisp:or token-type common-lisp:null))
   (token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-token-response 'make-create-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "TokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   common-lisp:nil))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (datetime-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-datetime-range-"))
   (begin (common-lisp:error ":begin is required") :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (end common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'datetime-range 'make-datetime-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datetime-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datetime-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datetime-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-grant-request-"))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason-message common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-grant-request 'make-delete-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-grant-response-"))
   (grant-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-grant-response 'make-delete-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-license-configuration-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-license-configuration-request
                    'make-delete-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-license-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-license-configuration-response
                    'make-delete-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-manager-report-generator-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-license-manager-report-generator-request-"))
   (license-manager-report-generator-arn
    (common-lisp:error ":license-manager-report-generator-arn is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-license-manager-report-generator-request
                    'make-delete-license-manager-report-generator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-manager-report-generator-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-license-manager-report-generator-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-license-manager-report-generator-response
                    'make-delete-license-manager-report-generator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-license-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (source-version (common-lisp:error ":source-version is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-license-request 'make-delete-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-license-response-"))
   (status common-lisp:nil :type
    (common-lisp:or license-deletion-status common-lisp:null))
   (deletion-date common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-license-response 'make-delete-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-token-request-"))
   (token-id (common-lisp:error ":token-id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-token-request 'make-delete-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-token-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-token-response 'make-delete-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   common-lisp:nil))
(common-lisp:deftype digital-signature-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entitlement (:copier common-lisp:nil)
      (:conc-name "struct-shape-entitlement-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (overage common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or entitlement-unit common-lisp:null))
   (allow-check-in common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overage))
      (common-lisp:list
       (common-lisp:cons "Overage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-check-in))
      (common-lisp:list
       (common-lisp:cons "AllowCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entitlement-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-entitlement-data-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or entitlement-data-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entitlement-data 'make-entitlement-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-data-list ()
   '(trivial-types:proper-list entitlement-data))
 (common-lisp:defun |make-entitlement-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entitlement-data-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entitlement-list ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun |make-entitlement-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition entitlement-not-allowed-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entitlement-not-allowed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entitlement-not-allowed-exception
                    'entitlement-not-allowed-exception-message)))
(common-lisp:deftype entitlement-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entitlement-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-entitlement-usage-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (consumed-value (common-lisp:error ":consumed-value is required") :type
    (common-lisp:or string common-lisp:null))
   (max-count common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or entitlement-data-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entitlement-usage 'make-entitlement-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-value))
      (common-lisp:list
       (common-lisp:cons "ConsumedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-usage-list ()
   '(trivial-types:proper-list entitlement-usage))
 (common-lisp:defun |make-entitlement-usage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (extend-license-consumption-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-extend-license-consumption-request-"))
   (license-consumption-token
    (common-lisp:error ":license-consumption-token is required") :type
    (common-lisp:or string common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'extend-license-consumption-request
                    'make-extend-license-consumption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extend-license-consumption-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-extend-license-consumption-response-"))
   (license-consumption-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'extend-license-consumption-response
                    'make-extend-license-consumption-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition failed-dependency-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       failed-dependency-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       failed-dependency-exception-error-code)))
 (common-lisp:export
  (common-lisp:list 'failed-dependency-exception
                    'failed-dependency-exception-message
                    'failed-dependency-exception-error-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or filter-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition filter-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       filter-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'filter-limit-exceeded-exception
                    'filter-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-token-request-"))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or token-string common-lisp:null))
   (token-properties common-lisp:nil :type
    (common-lisp:or max-size3string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-token-request 'make-get-access-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-token-response-"))
   (access-token common-lisp:nil :type
    (common-lisp:or token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-token-response
                    'make-get-access-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-grant-request-"))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-grant-request 'make-get-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-grant-response-"))
   (grant common-lisp:nil :type (common-lisp:or grant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-grant-response 'make-get-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant))
      (common-lisp:list
       (common-lisp:cons "Grant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-configuration-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-configuration-request
                    'make-get-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-configuration-response-"))
   (license-configuration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-configuration-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (license-counting-type common-lisp:nil :type
    (common-lisp:or license-counting-type common-lisp:null))
   (license-rules common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (license-count common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (license-count-hard-limit common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (consumed-licenses common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (consumed-license-summary-list common-lisp:nil :type
    (common-lisp:or consumed-license-summary-list common-lisp:null))
   (managed-resource-summary-list common-lisp:nil :type
    (common-lisp:or managed-resource-summary-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (product-information-list common-lisp:nil :type
    (common-lisp:or product-information-list common-lisp:null))
   (automated-discovery-information common-lisp:nil :type
    (common-lisp:or automated-discovery-information common-lisp:null))
   (disassociate-when-not-found common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-configuration-response
                    'make-get-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-license-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenseSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-resource-summary-list))
      (common-lisp:list
       (common-lisp:cons "ManagedResourceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-information))
      (common-lisp:list
       (common-lisp:cons "AutomatedDiscoveryInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-conversion-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-conversion-task-request-"))
   (license-conversion-task-id
    (common-lisp:error ":license-conversion-task-id is required") :type
    (common-lisp:or license-conversion-task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-conversion-task-request
                    'make-get-license-conversion-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-conversion-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-conversion-task-response-"))
   (license-conversion-task-id common-lisp:nil :type
    (common-lisp:or license-conversion-task-id common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-license-context common-lisp:nil :type
    (common-lisp:or license-conversion-context common-lisp:null))
   (destination-license-context common-lisp:nil :type
    (common-lisp:or license-conversion-context common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-conversion-task-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (license-conversion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-conversion-task-response
                    'make-get-license-conversion-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-time))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-manager-report-generator-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-license-manager-report-generator-request-"))
   (license-manager-report-generator-arn
    (common-lisp:error ":license-manager-report-generator-arn is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-manager-report-generator-request
                    'make-get-license-manager-report-generator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-manager-report-generator-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-license-manager-report-generator-response-"))
   (report-generator common-lisp:nil :type
    (common-lisp:or report-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-manager-report-generator-response
                    'make-get-license-manager-report-generator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-generator))
      (common-lisp:list
       (common-lisp:cons "ReportGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-request 'make-get-license-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-response-"))
   (license common-lisp:nil :type (common-lisp:or license common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-response 'make-get-license-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license))
      (common-lisp:list
       (common-lisp:cons "License"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-usage-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-usage-request
                    'make-get-license-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-license-usage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-license-usage-response-"))
   (license-usage common-lisp:nil :type
    (common-lisp:or license-usage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-license-usage-response
                    'make-get-license-usage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-usage))
      (common-lisp:list
       (common-lisp:cons "LicenseUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-settings-request-")))
 (common-lisp:export
  (common-lisp:list 'get-service-settings-request
                    'make-get-service-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-settings-response-"))
   (s3bucket-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (organization-configuration common-lisp:nil :type
    (common-lisp:or organization-configuration common-lisp:null))
   (enable-cross-accounts-discovery common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (license-manager-resource-share-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-settings-response
                    'make-get-service-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-configuration))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cross-accounts-discovery))
      (common-lisp:list
       (common-lisp:cons "EnableCrossAccountsDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-resource-share-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerResourceShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grant (:copier common-lisp:nil) (:conc-name "struct-shape-grant-"))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (grant-name (common-lisp:error ":grant-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parent-arn (common-lisp:error ":parent-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (grantee-principal-arn
    (common-lisp:error ":grantee-principal-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (home-region (common-lisp:error ":home-region is required") :type
    (common-lisp:or string common-lisp:null))
   (grant-status (common-lisp:error ":grant-status is required") :type
    (common-lisp:or grant-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason-message common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or string common-lisp:null))
   (granted-operations (common-lisp:error ":granted-operations is required")
    :type (common-lisp:or allowed-operation-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grant 'make-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-arn))
      (common-lisp:list
       (common-lisp:cons "ParentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grantee-principal-arn))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-status))
      (common-lisp:list
       (common-lisp:cons "GrantStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-operations))
      (common-lisp:list
       (common-lisp:cons "GrantedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grant-list () '(trivial-types:proper-list grant))
 (common-lisp:defun |make-grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (granted-license (:copier common-lisp:nil)
      (:conc-name "struct-shape-granted-license-"))
   (license-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (license-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-sku common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (issuer common-lisp:nil :type
    (common-lisp:or issuer-details common-lisp:null))
   (home-region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-status common-lisp:null))
   (validity common-lisp:nil :type
    (common-lisp:or datetime-range common-lisp:null))
   (beneficiary common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (entitlements common-lisp:nil :type
    (common-lisp:or entitlement-list common-lisp:null))
   (consumption-configuration common-lisp:nil :type
    (common-lisp:or consumption-configuration common-lisp:null))
   (license-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (received-metadata common-lisp:nil :type
    (common-lisp:or received-metadata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'granted-license 'make-granted-license))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-license))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-license))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-metadata))
      (common-lisp:list
       (common-lisp:cons "ReceivedMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-license))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype granted-license-list ()
   '(trivial-types:proper-list granted-license))
 (common-lisp:defun |make-granted-license-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list granted-license))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601date-time () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-exception
                    'invalid-resource-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or inventory-filter-condition common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-filter-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-filter-list ()
   '(trivial-types:proper-list inventory-filter))
 (common-lisp:defun |make-inventory-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (issuer (:copier common-lisp:nil) (:conc-name "struct-shape-issuer-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (sign-key common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'issuer 'make-issuer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-key))
      (common-lisp:list
       (common-lisp:cons "SignKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issuer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (issuer-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-issuer-details-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sign-key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-fingerprint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'issuer-details 'make-issuer-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issuer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issuer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-key))
      (common-lisp:list
       (common-lisp:cons "SignKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issuer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (license (:copier common-lisp:nil) (:conc-name "struct-shape-license-"))
   (license-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (license-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-sku common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (issuer common-lisp:nil :type
    (common-lisp:or issuer-details common-lisp:null))
   (home-region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-status common-lisp:null))
   (validity common-lisp:nil :type
    (common-lisp:or datetime-range common-lisp:null))
   (beneficiary common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (entitlements common-lisp:nil :type
    (common-lisp:or entitlement-list common-lisp:null))
   (consumption-configuration common-lisp:nil :type
    (common-lisp:or consumption-configuration common-lisp:null))
   (license-metadata common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'license 'make-license))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (license-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-configuration-"))
   (license-configuration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-configuration-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (license-counting-type common-lisp:nil :type
    (common-lisp:or license-counting-type common-lisp:null))
   (license-rules common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (license-count common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (license-count-hard-limit common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (disassociate-when-not-found common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (consumed-licenses common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (consumed-license-summary-list common-lisp:nil :type
    (common-lisp:or consumed-license-summary-list common-lisp:null))
   (managed-resource-summary-list common-lisp:nil :type
    (common-lisp:or managed-resource-summary-list common-lisp:null))
   (product-information-list common-lisp:nil :type
    (common-lisp:or product-information-list common-lisp:null))
   (automated-discovery-information common-lisp:nil :type
    (common-lisp:or automated-discovery-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-configuration 'make-license-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-license-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenseSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-resource-summary-list))
      (common-lisp:list
       (common-lisp:cons "ManagedResourceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-information))
      (common-lisp:list
       (common-lisp:cons "AutomatedDiscoveryInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (license-configuration-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-configuration-association-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (ami-association-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-configuration-association
                    'make-license-configuration-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-time))
      (common-lisp:list
       (common-lisp:cons "AssociationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-association-scope))
      (common-lisp:list
       (common-lisp:cons "AmiAssociationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-configuration-associations ()
   '(trivial-types:proper-list license-configuration-association))
 (common-lisp:defun |make-license-configuration-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (license-configuration-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-configuration-usage-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (association-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (consumed-licenses common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-configuration-usage
                    'make-license-configuration-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-time))
      (common-lisp:list
       (common-lisp:cons "AssociationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-configuration-usage-list ()
   '(trivial-types:proper-list license-configuration-usage))
 (common-lisp:defun |make-license-configuration-usage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype license-configurations ()
   '(trivial-types:proper-list license-configuration))
 (common-lisp:defun |make-license-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (license-conversion-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-conversion-context-"))
   (usage-operation common-lisp:nil :type
    (common-lisp:or usage-operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-conversion-context
                    'make-license-conversion-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-operation))
      (common-lisp:list
       (common-lisp:cons "UsageOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (license-conversion-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-conversion-task-"))
   (license-conversion-task-id common-lisp:nil :type
    (common-lisp:or license-conversion-task-id common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-license-context common-lisp:nil :type
    (common-lisp:or license-conversion-context common-lisp:null))
   (destination-license-context common-lisp:nil :type
    (common-lisp:or license-conversion-context common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or license-conversion-task-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (license-conversion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-conversion-task 'make-license-conversion-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-time))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   common-lisp:nil))
(common-lisp:deftype license-conversion-task-id () 'common-lisp:string)
(common-lisp:deftype license-conversion-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-conversion-tasks ()
   '(trivial-types:proper-list license-conversion-task))
 (common-lisp:defun |make-license-conversion-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-conversion-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-counting-type () 'common-lisp:string)
(common-lisp:deftype license-deletion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-list () '(trivial-types:proper-list license))
 (common-lisp:defun |make-license-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (license-operation-failure (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-operation-failure-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (failure-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (operation-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (operation-requested-by common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (metadata-list common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-operation-failure
                    'make-license-operation-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-time))
      (common-lisp:list
       (common-lisp:cons "FailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-name))
      (common-lisp:list
       (common-lisp:cons "OperationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-requested-by))
      (common-lisp:list
       (common-lisp:cons "OperationRequestedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-list))
      (common-lisp:list
       (common-lisp:cons "MetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-operation-failure-list ()
   '(trivial-types:proper-list license-operation-failure))
 (common-lisp:defun |make-license-operation-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-operation-failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (license-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-specification-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (ami-association-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'license-specification 'make-license-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-association-scope))
      (common-lisp:list
       (common-lisp:cons "AmiAssociationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-specifications ()
   '(trivial-types:proper-list license-specification))
 (common-lisp:defun |make-license-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (license-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-usage-"))
   (entitlement-usages common-lisp:nil :type
    (common-lisp:or entitlement-usage-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'license-usage 'make-license-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-usages))
      (common-lisp:list
       (common-lisp:cons "EntitlementUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition license-usage-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       license-usage-exception-message)))
 (common-lisp:export
  (common-lisp:list 'license-usage-exception 'license-usage-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associations-for-license-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-associations-for-license-configuration-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associations-for-license-configuration-request
                    'make-list-associations-for-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associations-for-license-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-associations-for-license-configuration-response-"))
   (license-configuration-associations common-lisp:nil :type
    (common-lisp:or license-configuration-associations common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associations-for-license-configuration-response
                    'make-list-associations-for-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-associations))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-distributed-grants-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-distributed-grants-request-"))
   (grant-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-distributed-grants-request
                    'make-list-distributed-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arns))
      (common-lisp:list
       (common-lisp:cons "GrantArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-distributed-grants-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-distributed-grants-response-"))
   (grants common-lisp:nil :type (common-lisp:or grant-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-distributed-grants-response
                    'make-list-distributed-grants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-failures-for-license-configuration-operations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-failures-for-license-configuration-operations-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-failures-for-license-configuration-operations-request
                    'make-list-failures-for-license-configuration-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-failures-for-license-configuration-operations-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-failures-for-license-configuration-operations-response-"))
   (license-operation-failure-list common-lisp:nil :type
    (common-lisp:or license-operation-failure-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-failures-for-license-configuration-operations-response
   'make-list-failures-for-license-configuration-operations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-operation-failure-list))
      (common-lisp:list
       (common-lisp:cons "LicenseOperationFailureList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-configurations-request-"))
   (license-configuration-arns common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-configurations-request
                    'make-list-license-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-configurations-response-"))
   (license-configurations common-lisp:nil :type
    (common-lisp:or license-configurations common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-configurations-response
                    'make-list-license-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configurations))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-conversion-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-conversion-tasks-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-conversion-tasks-request
                    'make-list-license-conversion-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-conversion-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-conversion-tasks-response-"))
   (license-conversion-tasks common-lisp:nil :type
    (common-lisp:or license-conversion-tasks common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-conversion-tasks-response
                    'make-list-license-conversion-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-tasks))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-manager-report-generators-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-license-manager-report-generators-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-manager-report-generators-request
                    'make-list-license-manager-report-generators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-manager-report-generators-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-license-manager-report-generators-response-"))
   (report-generators common-lisp:nil :type
    (common-lisp:or report-generator-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-manager-report-generators-response
                    'make-list-license-manager-report-generators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-generators))
      (common-lisp:list
       (common-lisp:cons "ReportGenerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-specifications-for-resource-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-license-specifications-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-specifications-for-resource-request
                    'make-list-license-specifications-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-specifications-for-resource-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-license-specifications-for-resource-response-"))
   (license-specifications common-lisp:nil :type
    (common-lisp:or license-specifications common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-specifications-for-resource-response
                    'make-list-license-specifications-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-specifications))
      (common-lisp:list
       (common-lisp:cons "LicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-versions-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-versions-request
                    'make-list-license-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-license-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-license-versions-response-"))
   (licenses common-lisp:nil :type
    (common-lisp:or license-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-license-versions-response
                    'make-list-license-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-licenses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-licenses-request-"))
   (license-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-licenses-request 'make-list-licenses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-licenses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-licenses-response-"))
   (licenses common-lisp:nil :type
    (common-lisp:or license-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-licenses-response 'make-list-licenses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-grants-for-organization-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-received-grants-for-organization-request-"))
   (license-arn (common-lisp:error ":license-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-for-organization-request
                    'make-list-received-grants-for-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-grants-for-organization-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-received-grants-for-organization-response-"))
   (grants common-lisp:nil :type (common-lisp:or grant-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-for-organization-response
                    'make-list-received-grants-for-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-grants-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-received-grants-request-"))
   (grant-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-request
                    'make-list-received-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arns))
      (common-lisp:list
       (common-lisp:cons "GrantArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-grants-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-received-grants-response-"))
   (grants common-lisp:nil :type (common-lisp:or grant-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-response
                    'make-list-received-grants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-licenses-for-organization-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-received-licenses-for-organization-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-for-organization-request
                    'make-list-received-licenses-for-organization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-licenses-for-organization-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-received-licenses-for-organization-response-"))
   (licenses common-lisp:nil :type
    (common-lisp:or granted-license-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-for-organization-response
                    'make-list-received-licenses-for-organization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-licenses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-received-licenses-request-"))
   (license-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-request
                    'make-list-received-licenses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-received-licenses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-received-licenses-response-"))
   (licenses common-lisp:nil :type
    (common-lisp:or granted-license-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-response
                    'make-list-received-licenses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-inventory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-inventory-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or inventory-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-inventory-request
                    'make-list-resource-inventory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-inventory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resource-inventory-response-"))
   (resource-inventory-list common-lisp:nil :type
    (common-lisp:or resource-inventory-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-inventory-response
                    'make-list-resource-inventory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-inventory-list))
      (common-lisp:list
       (common-lisp:cons "ResourceInventoryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tokens-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tokens-request-"))
   (token-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-size100 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tokens-request 'make-list-tokens-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tokens-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tokens-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-ids))
      (common-lisp:list
       (common-lisp:cons "TokenIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tokens-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tokens-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tokens-response-"))
   (tokens common-lisp:nil :type (common-lisp:or token-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tokens-response 'make-list-tokens-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tokens-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tokens-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tokens))
      (common-lisp:list
       (common-lisp:cons "Tokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tokens-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-for-license-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-usage-for-license-configuration-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or box-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-for-license-configuration-request
                    'make-list-usage-for-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-for-license-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-usage-for-license-configuration-response-"))
   (license-configuration-usage-list common-lisp:nil :type
    (common-lisp:or license-configuration-usage-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-for-license-configuration-response
                    'make-list-usage-for-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-usage-list))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationUsageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-resource-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-resource-summary-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (association-count common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-resource-summary 'make-managed-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-count))
      (common-lisp:list
       (common-lisp:cons "AssociationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-resource-summary-list ()
   '(trivial-types:proper-list managed-resource-summary))
 (common-lisp:defun |make-managed-resource-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-size100 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype max-size3string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-max-size3string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata (:copier common-lisp:nil) (:conc-name "struct-shape-metadata-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metadata 'make-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-list () '(trivial-types:proper-list metadata))
 (common-lisp:defun |make-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-entitlements-allowed-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-entitlements-allowed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-entitlements-allowed-exception
                    'no-entitlements-allowed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (organization-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-organization-configuration-"))
   (enable-integration (common-lisp:error ":enable-integration is required")
    :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'organization-configuration
                    'make-organization-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-integration))
      (common-lisp:list
       (common-lisp:cons "EnableIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-principal-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (product-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-product-information-"))
   (resource-type (common-lisp:error ":resource-type is required") :type
    (common-lisp:or string common-lisp:null))
   (product-information-filter-list
    (common-lisp:error ":product-information-filter-list is required") :type
    (common-lisp:or product-information-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'product-information 'make-product-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (product-information-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-product-information-filter-"))
   (product-information-filter-name
    (common-lisp:error ":product-information-filter-name is required") :type
    (common-lisp:or string common-lisp:null))
   (product-information-filter-value common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (product-information-filter-comparator
    (common-lisp:error ":product-information-filter-comparator is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'product-information-filter
                    'make-product-information-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-name))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-value))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-comparator))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterComparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-information-filter-list ()
   '(trivial-types:proper-list product-information-filter))
 (common-lisp:defun |make-product-information-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            product-information-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype product-information-list ()
   '(trivial-types:proper-list product-information))
 (common-lisp:defun |make-product-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provisional-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisional-configuration-"))
   (max-time-to-live-in-minutes
    (common-lisp:error ":max-time-to-live-in-minutes is required") :type
    (common-lisp:or box-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisional-configuration
                    'make-provisional-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-time-to-live-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxTimeToLiveInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition rate-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rate-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-exceeded-exception
                    'rate-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (received-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-received-metadata-"))
   (received-status common-lisp:nil :type
    (common-lisp:or received-status common-lisp:null))
   (received-status-reason common-lisp:nil :type
    (common-lisp:or status-reason-message common-lisp:null))
   (allowed-operations common-lisp:nil :type
    (common-lisp:or allowed-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'received-metadata 'make-received-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input received-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input received-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-status))
      (common-lisp:list
       (common-lisp:cons "ReceivedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'received-status-reason))
      (common-lisp:list
       (common-lisp:cons "ReceivedStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input received-metadata))
   common-lisp:nil))
(common-lisp:deftype received-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition redirect-exception
     (license-manager-error)
     ((location :initarg :location :initform common-lisp:nil :reader
       redirect-exception-location)
      (message :initarg :message :initform common-lisp:nil :reader
       redirect-exception-message)))
 (common-lisp:export
  (common-lisp:list 'redirect-exception 'redirect-exception-location
                    'redirect-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-grant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-grant-request-"))
   (grant-arn (common-lisp:error ":grant-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-grant-request 'make-reject-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-grant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-grant-response-"))
   (grant-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or grant-status common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-grant-response 'make-reject-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   common-lisp:nil))
(common-lisp:deftype renew-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (report-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-report-context-"))
   (license-configuration-arns
    (common-lisp:error ":licenseconfigurationarns is required") :type
    (common-lisp:or arn-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'report-context 'make-report-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "licenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (report-frequency (:copier common-lisp:nil)
      (:conc-name "struct-shape-report-frequency-"))
   (value common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or report-frequency-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-frequency 'make-report-frequency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-frequency))
   common-lisp:nil))
(common-lisp:deftype report-frequency-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (report-generator (:copier common-lisp:nil)
      (:conc-name "struct-shape-report-generator-"))
   (report-generator-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (report-type common-lisp:nil :type
    (common-lisp:or report-type-list common-lisp:null))
   (report-context common-lisp:nil :type
    (common-lisp:or report-context common-lisp:null))
   (report-frequency common-lisp:nil :type
    (common-lisp:or report-frequency common-lisp:null))
   (license-manager-report-generator-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-run-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-run-failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-report-generation-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (report-creator-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null))
   (create-time common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-generator 'make-report-generator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "ReportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "LastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-failure-reason))
      (common-lisp:list
       (common-lisp:cons "LastRunFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-report-generation-time))
      (common-lisp:list
       (common-lisp:cons "LastReportGenerationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-creator-account))
      (common-lisp:list
       (common-lisp:cons "ReportCreatorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-generator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype report-generator-list ()
   '(trivial-types:proper-list report-generator))
 (common-lisp:defun |make-report-generator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-generator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype report-generator-name () 'common-lisp:string)
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype report-type-list ()
   '(trivial-types:proper-list report-type))
 (common-lisp:defun |make-report-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-inventory (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-inventory-"))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-owning-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-inventory 'make-resource-inventory))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-inventory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-inventory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owning-account-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwningAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-inventory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-inventory-list ()
   '(trivial-types:proper-list resource-inventory))
 (common-lisp:defun |make-resource-inventory-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-inventory))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key-prefix common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition server-internal-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-internal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-internal-exception
                    'server-internal-exception-message)))
(common-lisp:deftype signed-token () 'common-lisp:string)
(common-lisp:deftype status-reason-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (token-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-token-data-"))
   (token-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (token-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (license-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or iso8601date-time common-lisp:null))
   (token-properties common-lisp:nil :type
    (common-lisp:or max-size3string-list common-lisp:null))
   (role-arns common-lisp:nil :type (common-lisp:or arn-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'token-data 'make-token-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input token-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input token-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "TokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arns))
      (common-lisp:list
       (common-lisp:cons "RoleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input token-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype token-list () '(trivial-types:proper-list token-data))
 (common-lisp:defun |make-token-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token-string () 'common-lisp:string)
(common-lisp:deftype token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-digital-signature-method-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-digital-signature-method-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-digital-signature-method-exception
                    'unsupported-digital-signature-method-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-license-configuration-request-"))
   (license-configuration-arn
    (common-lisp:error ":license-configuration-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (license-configuration-status common-lisp:nil :type
    (common-lisp:or license-configuration-status common-lisp:null))
   (license-rules common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (license-count common-lisp:nil :type
    (common-lisp:or box-long common-lisp:null))
   (license-count-hard-limit common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-information-list common-lisp:nil :type
    (common-lisp:or product-information-list common-lisp:null))
   (disassociate-when-not-found common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-license-configuration-request
                    'make-update-license-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-status))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-license-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-license-configuration-response
                    'make-update-license-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-manager-report-generator-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-license-manager-report-generator-request-"))
   (license-manager-report-generator-arn
    (common-lisp:error ":license-manager-report-generator-arn is required")
    :type (common-lisp:or string common-lisp:null))
   (report-generator-name
    (common-lisp:error ":report-generator-name is required") :type
    (common-lisp:or report-generator-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or report-type-list common-lisp:null))
   (report-context (common-lisp:error ":report-context is required") :type
    (common-lisp:or report-context common-lisp:null))
   (report-frequency (common-lisp:error ":report-frequency is required") :type
    (common-lisp:or report-frequency common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-request-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-license-manager-report-generator-request
                    'make-update-license-manager-report-generator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-manager-report-generator-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-license-manager-report-generator-response-")))
 (common-lisp:export
  (common-lisp:list 'update-license-manager-report-generator-response
                    'make-update-license-manager-report-generator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-specifications-for-resource-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-license-specifications-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (add-license-specifications common-lisp:nil :type
    (common-lisp:or license-specifications common-lisp:null))
   (remove-license-specifications common-lisp:nil :type
    (common-lisp:or license-specifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-license-specifications-for-resource-request
                    'make-update-license-specifications-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-license-specifications))
      (common-lisp:list
       (common-lisp:cons "AddLicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-license-specifications))
      (common-lisp:list
       (common-lisp:cons "RemoveLicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-license-specifications-for-resource-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-license-specifications-for-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'update-license-specifications-for-resource-response
                    'make-update-license-specifications-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-settings-request-"))
   (s3bucket-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (organization-configuration common-lisp:nil :type
    (common-lisp:or organization-configuration common-lisp:null))
   (enable-cross-accounts-discovery common-lisp:nil :type
    (common-lisp:or box-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-settings-request
                    'make-update-service-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-configuration))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cross-accounts-discovery))
      (common-lisp:list
       (common-lisp:cons "EnableCrossAccountsDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-settings-response-")))
 (common-lisp:export
  (common-lisp:list 'update-service-settings-response
                    'make-update-service-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   common-lisp:nil))
(common-lisp:deftype usage-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn)
   (common-lisp:declare (common-lisp:ignorable grant-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "AcceptGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-grant))
(common-lisp:progn
 (common-lisp:defun check-in-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-consumption-token beneficiary)
   (common-lisp:declare
    (common-lisp:ignorable license-consumption-token beneficiary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-in-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CheckInLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-in-license))
(common-lisp:progn
 (common-lisp:defun checkout-borrow-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn entitlements
                     digital-signature-method node-id checkout-metadata
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-arn entitlements digital-signature-method
     node-id checkout-metadata client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-checkout-borrow-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CheckoutBorrowLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'checkout-borrow-license))
(common-lisp:progn
 (common-lisp:defun checkout-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-sku checkout-type key-fingerprint
                     entitlements client-token beneficiary node-id)
   (common-lisp:declare
    (common-lisp:ignorable product-sku checkout-type key-fingerprint
     entitlements client-token beneficiary node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-checkout-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CheckoutLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'checkout-license))
(common-lisp:progn
 (common-lisp:defun create-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token grant-name license-arn
                     principals home-region allowed-operations)
   (common-lisp:declare
    (common-lisp:ignorable client-token grant-name license-arn principals
     home-region allowed-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-grant))
(common-lisp:progn
 (common-lisp:defun create-grant-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token grant-arn grant-name
                     allowed-operations status status-reason source-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token grant-arn grant-name allowed-operations
     status status-reason source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateGrantVersion" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-grant-version))
(common-lisp:progn
 (common-lisp:defun create-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-name product-name product-sku
                     issuer home-region validity entitlements beneficiary
                     consumption-configuration license-metadata client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-name product-name product-sku issuer
     home-region validity entitlements beneficiary consumption-configuration
     license-metadata client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license))
(common-lisp:progn
 (common-lisp:defun create-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description license-counting-type
                     license-count license-count-hard-limit license-rules tags
                     disassociate-when-not-found product-information-list)
   (common-lisp:declare
    (common-lisp:ignorable name description license-counting-type license-count
     license-count-hard-limit license-rules tags disassociate-when-not-found
     product-information-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-configuration))
(common-lisp:progn
 (common-lisp:defun create-license-conversion-task-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn source-license-context
                     destination-license-context)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn source-license-context
     destination-license-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-conversion-task-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLicenseConversionTaskForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-conversion-task-for-resource))
(common-lisp:progn
 (common-lisp:defun create-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-generator-name type report-context
                     report-frequency client-token description tags)
   (common-lisp:declare
    (common-lisp:ignorable report-generator-name type report-context
     report-frequency client-token description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun create-license-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn license-name product-name
                     issuer home-region validity license-metadata entitlements
                     consumption-configuration status client-token
                     source-version)
   (common-lisp:declare
    (common-lisp:ignorable license-arn license-name product-name issuer
     home-region validity license-metadata entitlements
     consumption-configuration status client-token source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-license-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLicenseVersion" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-version))
(common-lisp:progn
 (common-lisp:defun create-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn role-arns expiration-in-days
                     token-properties client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-arn role-arns expiration-in-days
     token-properties client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "CreateToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-token))
(common-lisp:progn
 (common-lisp:defun delete-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn status-reason version)
   (common-lisp:declare
    (common-lisp:ignorable grant-arn status-reason version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-grant))
(common-lisp:progn
 (common-lisp:defun delete-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn source-version)
   (common-lisp:declare (common-lisp:ignorable license-arn source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license))
(common-lisp:progn
 (common-lisp:defun delete-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable license-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license-configuration))
(common-lisp:progn
 (common-lisp:defun delete-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun delete-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-id)
   (common-lisp:declare (common-lisp:ignorable token-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-token))
(common-lisp:progn
 (common-lisp:defun extend-license-consumption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-consumption-token dry-run)
   (common-lisp:declare
    (common-lisp:ignorable license-consumption-token dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-extend-license-consumption-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ExtendLicenseConsumption" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'extend-license-consumption))
(common-lisp:progn
 (common-lisp:defun get-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token token-properties)
   (common-lisp:declare (common-lisp:ignorable token token-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetAccessToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-token))
(common-lisp:progn
 (common-lisp:defun get-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn version)
   (common-lisp:declare (common-lisp:ignorable grant-arn version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-grant))
(common-lisp:progn
 (common-lisp:defun get-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn version)
   (common-lisp:declare (common-lisp:ignorable license-arn version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license))
(common-lisp:progn
 (common-lisp:defun get-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable license-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-configuration))
(common-lisp:progn
 (common-lisp:defun get-license-conversion-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-conversion-task-id)
   (common-lisp:declare (common-lisp:ignorable license-conversion-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-conversion-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetLicenseConversionTask" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-conversion-task))
(common-lisp:progn
 (common-lisp:defun get-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun get-license-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn)
   (common-lisp:declare (common-lisp:ignorable license-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-license-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "GetLicenseUsage" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-usage))
(common-lisp:progn
 (common-lisp:defun get-service-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'license-manager-request :method "POST" :path
                                "/" :params
                                `(("Action" ,@"GetServiceSettings")
                                  ("Version" ,@"2018-08-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-service-settings))
(common-lisp:progn
 (common-lisp:defun list-associations-for-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-associations-for-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListAssociationsForLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associations-for-license-configuration))
(common-lisp:progn
 (common-lisp:defun list-distributed-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable grant-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-distributed-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListDistributedGrants" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributed-grants))
(common-lisp:progn
 (common-lisp:defun list-failures-for-license-configuration-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-failures-for-license-configuration-operations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListFailuresForLicenseConfigurationOperations" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-failures-for-license-configuration-operations))
(common-lisp:progn
 (common-lisp:defun list-license-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arns max-results
                     next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arns max-results next-token
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenseConfigurations" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-configurations))
(common-lisp:progn
 (common-lisp:defun list-license-conversion-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-conversion-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenseConversionTasks" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-conversion-tasks))
(common-lisp:progn
 (common-lisp:defun list-license-manager-report-generators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-manager-report-generators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenseManagerReportGenerators" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-manager-report-generators))
(common-lisp:progn
 (common-lisp:defun list-license-specifications-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-specifications-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenseSpecificationsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-specifications-for-resource))
(common-lisp:progn
 (common-lisp:defun list-license-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-license-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenseVersions" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-versions))
(common-lisp:progn
 (common-lisp:defun list-licenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-licenses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListLicenses" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-licenses))
(common-lisp:progn
 (common-lisp:defun list-received-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable grant-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-received-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListReceivedGrants" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-grants))
(common-lisp:progn
 (common-lisp:defun list-received-grants-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arn filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-received-grants-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListReceivedGrantsForOrganization" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-grants-for-organization))
(common-lisp:progn
 (common-lisp:defun list-received-licenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-received-licenses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListReceivedLicenses" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-licenses))
(common-lisp:progn
 (common-lisp:defun list-received-licenses-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-received-licenses-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListReceivedLicensesForOrganization" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-licenses-for-organization))
(common-lisp:progn
 (common-lisp:defun list-resource-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-inventory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListResourceInventory" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-inventory))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tokens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-ids filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable token-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tokens-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListTokens" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tokens))
(common-lisp:progn
 (common-lisp:defun list-usage-for-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-usage-for-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "ListUsageForLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-usage-for-license-configuration))
(common-lisp:progn
 (common-lisp:defun reject-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn)
   (common-lisp:declare (common-lisp:ignorable grant-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "RejectGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-grant))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn
                     license-configuration-status license-rules license-count
                     license-count-hard-limit name description
                     product-information-list disassociate-when-not-found)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn
     license-configuration-status license-rules license-count
     license-count-hard-limit name description product-information-list
     disassociate-when-not-found))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-configuration))
(common-lisp:progn
 (common-lisp:defun update-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn
                     report-generator-name type report-context report-frequency
                     client-token description)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn
     report-generator-name type report-context report-frequency client-token
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun update-license-specifications-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn add-license-specifications
                     remove-license-specifications)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn add-license-specifications
     remove-license-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-specifications-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateLicenseSpecificationsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-specifications-for-resource))
(common-lisp:progn
 (common-lisp:defun update-service-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3bucket-arn sns-topic-arn
                     organization-configuration
                     enable-cross-accounts-discovery)
   (common-lisp:declare
    (common-lisp:ignorable s3bucket-arn sns-topic-arn
     organization-configuration enable-cross-accounts-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateServiceSettings" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-settings))
