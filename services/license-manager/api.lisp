;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/license-manager/api
  (:use)
  (:nicknames #:aws/license-manager)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/license-manager/api)
(common-lisp:progn
 (common-lisp:defclass license-manager-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "license-manager" :protocol
                        :json))
 (common-lisp:export 'license-manager-request))
(common-lisp:progn
 (common-lisp:define-condition license-manager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'license-manager-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AuthorizationException" . authorization-exception)
    ("ConflictException" . conflict-exception)
    ("EntitlementNotAllowedException" . entitlement-not-allowed-exception)
    ("FailedDependencyException" . failed-dependency-exception)
    ("FilterLimitExceededException" . filter-limit-exceeded-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidResourceStateException" . invalid-resource-state-exception)
    ("LicenseUsageException" . license-usage-exception)
    ("NoEntitlementsAllowedException" . no-entitlements-allowed-exception)
    ("RateLimitExceededException" . rate-limit-exceeded-exception)
    ("RedirectException" . redirect-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerInternalException" . server-internal-exception)
    ("UnsupportedDigitalSignatureMethodException"
     . unsupported-digital-signature-method-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-grant-request common-lisp:nil
                       ((grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %accept-grant-request-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-grant-request 'make-accept-grant-request))
 (common-lisp:defun make-accept-grant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'accept-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-grant-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %accept-grant-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %accept-grant-response-status :initform
                         common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %accept-grant-response-grant-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-grant-response 'make-accept-grant-response))
 (common-lisp:defun make-accept-grant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'accept-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype activation-override-behavior () 'common-lisp:string)
(common-lisp:deftype allowed-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-operation-list ()
   '(trivial-types:proper-list allowed-operation))
 (common-lisp:defun |make-allowed-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authorization-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       authorization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'authorization-exception 'authorization-exception-message)))
(common-lisp:progn
 (common-lisp:defclass automated-discovery-information common-lisp:nil
                       ((last-run-time :initarg :last-run-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %automated-discovery-information-last-run-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automated-discovery-information
                    'make-automated-discovery-information))
 (common-lisp:defun make-automated-discovery-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-run-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'automated-discovery-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "LastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automated-discovery-information))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass borrow-configuration common-lisp:nil
                       ((max-time-to-live-in-minutes :initarg
                         :max-time-to-live-in-minutes :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %borrow-configuration-max-time-to-live-in-minutes
                         :initform
                         (common-lisp:error
                          ":max-time-to-live-in-minutes is required"))
                        (allow-early-check-in :initarg :allow-early-check-in
                         :type (common-lisp:or box-boolean common-lisp:null)
                         :accessor %borrow-configuration-allow-early-check-in
                         :initform
                         (common-lisp:error
                          ":allow-early-check-in is required"))))
 (common-lisp:export
  (common-lisp:list 'borrow-configuration 'make-borrow-configuration))
 (common-lisp:defun make-borrow-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-time-to-live-in-minutes
                     allow-early-check-in)
   (common-lisp:apply #'common-lisp:make-instance 'borrow-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input borrow-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input borrow-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-early-check-in))
      (common-lisp:list
       (common-lisp:cons "AllowEarlyCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-time-to-live-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxTimeToLiveInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input borrow-configuration))
   common-lisp:nil))
(common-lisp:deftype box-boolean () 'common-lisp:boolean)
(common-lisp:deftype box-integer () 'common-lisp:integer)
(common-lisp:deftype box-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass check-in-license-request common-lisp:nil
                       ((beneficiary :initarg :beneficiary :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %check-in-license-request-beneficiary :initform
                         common-lisp:nil)
                        (license-consumption-token :initarg
                         :license-consumption-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %check-in-license-request-license-consumption-token
                         :initform
                         (common-lisp:error
                          ":license-consumption-token is required"))))
 (common-lisp:export
  (common-lisp:list 'check-in-license-request 'make-check-in-license-request))
 (common-lisp:defun make-check-in-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key beneficiary license-consumption-token)
   (common-lisp:apply #'common-lisp:make-instance 'check-in-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-in-license-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'check-in-license-response
                    'make-check-in-license-response))
 (common-lisp:defun make-check-in-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'check-in-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-in-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass checkout-borrow-license-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %checkout-borrow-license-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (checkout-metadata :initarg :checkout-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor
                         %checkout-borrow-license-request-checkout-metadata
                         :initform common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-borrow-license-request-node-id :initform
                         common-lisp:nil)
                        (digital-signature-method :initarg
                         :digital-signature-method :type
                         (common-lisp:or digital-signature-method
                                         common-lisp:null)
                         :accessor
                         %checkout-borrow-license-request-digital-signature-method
                         :initform
                         (common-lisp:error
                          ":digital-signature-method is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-data-list
                                         common-lisp:null)
                         :accessor
                         %checkout-borrow-license-request-entitlements
                         :initform
                         (common-lisp:error ":entitlements is required"))
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %checkout-borrow-license-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'checkout-borrow-license-request
                    'make-checkout-borrow-license-request))
 (common-lisp:defun make-checkout-borrow-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token checkout-metadata node-id
                     digital-signature-method entitlements license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'checkout-borrow-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'digital-signature-method))
      (common-lisp:list
       (common-lisp:cons "DigitalSignatureMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-metadata))
      (common-lisp:list
       (common-lisp:cons "CheckoutMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass checkout-borrow-license-response common-lisp:nil
                       ((checkout-metadata :initarg :checkout-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor
                         %checkout-borrow-license-response-checkout-metadata
                         :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %checkout-borrow-license-response-expiration
                         :initform common-lisp:nil)
                        (issued-at :initarg :issued-at :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %checkout-borrow-license-response-issued-at
                         :initform common-lisp:nil)
                        (signed-token :initarg :signed-token :type
                         (common-lisp:or signed-token common-lisp:null)
                         :accessor
                         %checkout-borrow-license-response-signed-token
                         :initform common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-borrow-license-response-node-id :initform
                         common-lisp:nil)
                        (entitlements-allowed :initarg :entitlements-allowed
                         :type
                         (common-lisp:or entitlement-data-list
                                         common-lisp:null)
                         :accessor
                         %checkout-borrow-license-response-entitlements-allowed
                         :initform common-lisp:nil)
                        (license-consumption-token :initarg
                         :license-consumption-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-borrow-license-response-license-consumption-token
                         :initform common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %checkout-borrow-license-response-license-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'checkout-borrow-license-response
                    'make-checkout-borrow-license-response))
 (common-lisp:defun make-checkout-borrow-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checkout-metadata expiration issued-at
                     signed-token node-id entitlements-allowed
                     license-consumption-token license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'checkout-borrow-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entitlements-allowed))
      (common-lisp:list
       (common-lisp:cons "EntitlementsAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-token))
      (common-lisp:list
       (common-lisp:cons "SignedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-metadata))
      (common-lisp:list
       (common-lisp:cons "CheckoutMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-borrow-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass checkout-license-request common-lisp:nil
                       ((node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-request-node-id :initform
                         common-lisp:nil)
                        (beneficiary :initarg :beneficiary :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-request-beneficiary :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %checkout-license-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-data-list
                                         common-lisp:null)
                         :accessor %checkout-license-request-entitlements
                         :initform
                         (common-lisp:error ":entitlements is required"))
                        (key-fingerprint :initarg :key-fingerprint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-request-key-fingerprint :initform
                         (common-lisp:error ":key-fingerprint is required"))
                        (checkout-type :initarg :checkout-type :type
                         (common-lisp:or checkout-type common-lisp:null)
                         :accessor %checkout-license-request-checkout-type
                         :initform
                         (common-lisp:error ":checkout-type is required"))
                        (product-sku :initarg :product-sku :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-request-product-sku :initform
                         (common-lisp:error ":product-sku is required"))))
 (common-lisp:export
  (common-lisp:list 'checkout-license-request 'make-checkout-license-request))
 (common-lisp:defun make-checkout-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key node-id beneficiary client-token
                     entitlements key-fingerprint checkout-type product-sku)
   (common-lisp:apply #'common-lisp:make-instance 'checkout-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-type))
      (common-lisp:list
       (common-lisp:cons "CheckoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass checkout-license-response common-lisp:nil
                       ((license-arn :initarg :license-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-response-license-arn :initform
                         common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %checkout-license-response-expiration
                         :initform common-lisp:nil)
                        (issued-at :initarg :issued-at :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %checkout-license-response-issued-at
                         :initform common-lisp:nil)
                        (node-id :initarg :node-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-response-node-id :initform
                         common-lisp:nil)
                        (signed-token :initarg :signed-token :type
                         (common-lisp:or signed-token common-lisp:null)
                         :accessor %checkout-license-response-signed-token
                         :initform common-lisp:nil)
                        (entitlements-allowed :initarg :entitlements-allowed
                         :type
                         (common-lisp:or entitlement-data-list
                                         common-lisp:null)
                         :accessor
                         %checkout-license-response-entitlements-allowed
                         :initform common-lisp:nil)
                        (license-consumption-token :initarg
                         :license-consumption-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %checkout-license-response-license-consumption-token
                         :initform common-lisp:nil)
                        (checkout-type :initarg :checkout-type :type
                         (common-lisp:or checkout-type common-lisp:null)
                         :accessor %checkout-license-response-checkout-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'checkout-license-response
                    'make-checkout-license-response))
 (common-lisp:defun make-checkout-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-arn expiration issued-at node-id
                     signed-token entitlements-allowed
                     license-consumption-token checkout-type)
   (common-lisp:apply #'common-lisp:make-instance 'checkout-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkout-type))
      (common-lisp:list
       (common-lisp:cons "CheckoutType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entitlements-allowed))
      (common-lisp:list
       (common-lisp:cons "EntitlementsAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signed-token))
      (common-lisp:list
       (common-lisp:cons "SignedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-id))
      (common-lisp:list
       (common-lisp:cons "NodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          checkout-license-response))
   common-lisp:nil))
(common-lisp:deftype checkout-type () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass consumed-license-summary common-lisp:nil
                       ((consumed-licenses :initarg :consumed-licenses :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %consumed-license-summary-consumed-licenses :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %consumed-license-summary-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'consumed-license-summary 'make-consumed-license-summary))
 (common-lisp:defun make-consumed-license-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consumed-licenses resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'consumed-license-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumed-license-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype consumed-license-summary-list ()
   '(trivial-types:proper-list consumed-license-summary))
 (common-lisp:defun |make-consumed-license-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            consumed-license-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass consumption-configuration common-lisp:nil
                       ((borrow-configuration :initarg :borrow-configuration
                         :type
                         (common-lisp:or borrow-configuration common-lisp:null)
                         :accessor
                         %consumption-configuration-borrow-configuration
                         :initform common-lisp:nil)
                        (provisional-configuration :initarg
                         :provisional-configuration :type
                         (common-lisp:or provisional-configuration
                                         common-lisp:null)
                         :accessor
                         %consumption-configuration-provisional-configuration
                         :initform common-lisp:nil)
                        (renew-type :initarg :renew-type :type
                         (common-lisp:or renew-type common-lisp:null) :accessor
                         %consumption-configuration-renew-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'consumption-configuration
                    'make-consumption-configuration))
 (common-lisp:defun make-consumption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key borrow-configuration
                     provisional-configuration renew-type)
   (common-lisp:apply #'common-lisp:make-instance 'consumption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renew-type))
      (common-lisp:list
       (common-lisp:cons "RenewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisional-configuration))
      (common-lisp:list
       (common-lisp:cons "ProvisionalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'borrow-configuration))
      (common-lisp:list
       (common-lisp:cons "BorrowConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          consumption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-request common-lisp:nil
                       ((allowed-operations :initarg :allowed-operations :type
                         (common-lisp:or allowed-operation-list
                                         common-lisp:null)
                         :accessor %create-grant-request-allowed-operations
                         :initform
                         (common-lisp:error ":allowed-operations is required"))
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-request-home-region :initform
                         (common-lisp:error ":home-region is required"))
                        (principals :initarg :principals :type
                         (common-lisp:or principal-arn-list common-lisp:null)
                         :accessor %create-grant-request-principals :initform
                         (common-lisp:error ":principals is required"))
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-grant-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))
                        (grant-name :initarg :grant-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-request-grant-name :initform
                         (common-lisp:error ":grant-name is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-grant-request-client-token :initform
                         (common-lisp:error ":client-token is required"))))
 (common-lisp:export
  (common-lisp:list 'create-grant-request 'make-create-grant-request))
 (common-lisp:defun make-create-grant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-operations home-region principals
                     license-arn grant-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %create-grant-response-status :initform
                         common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-grant-response-grant-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-grant-response 'make-create-grant-response))
 (common-lisp:defun make-create-grant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-version-request common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or options common-lisp:null) :accessor
                         %create-grant-version-request-options :initform
                         common-lisp:nil)
                        (source-version :initarg :source-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-version-request-source-version :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or status-reason-message
                                         common-lisp:null)
                         :accessor %create-grant-version-request-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %create-grant-version-request-status
                         :initform common-lisp:nil)
                        (allowed-operations :initarg :allowed-operations :type
                         (common-lisp:or allowed-operation-list
                                         common-lisp:null)
                         :accessor
                         %create-grant-version-request-allowed-operations
                         :initform common-lisp:nil)
                        (grant-name :initarg :grant-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-version-request-grant-name :initform
                         common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-grant-version-request-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-grant-version-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))))
 (common-lisp:export
  (common-lisp:list 'create-grant-version-request
                    'make-create-grant-version-request))
 (common-lisp:defun make-create-grant-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options source-version status-reason
                     status allowed-operations grant-name grant-arn
                     client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-grant-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-version-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-grant-version-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %create-grant-version-response-status
                         :initform common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-grant-version-response-grant-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-grant-version-response
                    'make-create-grant-version-response))
 (common-lisp:defun make-create-grant-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status grant-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-grant-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-configuration-request common-lisp:nil
                       ((product-information-list :initarg
                         :product-information-list :type
                         (common-lisp:or product-information-list
                                         common-lisp:null)
                         :accessor
                         %create-license-configuration-request-product-information-list
                         :initform common-lisp:nil)
                        (disassociate-when-not-found :initarg
                         :disassociate-when-not-found :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %create-license-configuration-request-disassociate-when-not-found
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-license-configuration-request-tags :initform
                         common-lisp:nil)
                        (license-rules :initarg :license-rules :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-license-configuration-request-license-rules
                         :initform common-lisp:nil)
                        (license-count-hard-limit :initarg
                         :license-count-hard-limit :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %create-license-configuration-request-license-count-hard-limit
                         :initform common-lisp:nil)
                        (license-count :initarg :license-count :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %create-license-configuration-request-license-count
                         :initform common-lisp:nil)
                        (license-counting-type :initarg :license-counting-type
                         :type
                         (common-lisp:or license-counting-type
                                         common-lisp:null)
                         :accessor
                         %create-license-configuration-request-license-counting-type
                         :initform
                         (common-lisp:error
                          ":license-counting-type is required"))
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-configuration-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-configuration-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-license-configuration-request
                    'make-create-license-configuration-request))
 (common-lisp:defun make-create-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-information-list
                     disassociate-when-not-found tags license-rules
                     license-count-hard-limit license-count
                     license-counting-type description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-configuration-response common-lisp:nil
                       ((license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-configuration-response-license-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-license-configuration-response
                    'make-create-license-configuration-response))
 (common-lisp:defun make-create-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-conversion-task-for-resource-request
                       common-lisp:nil
                       ((destination-license-context :initarg
                         :destination-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %create-license-conversion-task-for-resource-request-destination-license-context
                         :initform
                         (common-lisp:error
                          ":destination-license-context is required"))
                        (source-license-context :initarg
                         :source-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %create-license-conversion-task-for-resource-request-source-license-context
                         :initform
                         (common-lisp:error
                          ":source-license-context is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-license-conversion-task-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-license-conversion-task-for-resource-request
                    'make-create-license-conversion-task-for-resource-request))
 (common-lisp:defun make-create-license-conversion-task-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-license-context
                     source-license-context resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-conversion-task-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-conversion-task-for-resource-response
                       common-lisp:nil
                       ((license-conversion-task-id :initarg
                         :license-conversion-task-id :type
                         (common-lisp:or license-conversion-task-id
                                         common-lisp:null)
                         :accessor
                         %create-license-conversion-task-for-resource-response-license-conversion-task-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-license-conversion-task-for-resource-response
                    'make-create-license-conversion-task-for-resource-response))
 (common-lisp:defun make-create-license-conversion-task-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-conversion-task-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-conversion-task-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-conversion-task-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-manager-report-generator-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-license-manager-report-generator-request-tags
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-manager-report-generator-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-license-manager-report-generator-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (report-frequency :initarg :report-frequency :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         %create-license-manager-report-generator-request-report-frequency
                         :initform
                         (common-lisp:error ":report-frequency is required"))
                        (report-context :initarg :report-context :type
                         (common-lisp:or report-context common-lisp:null)
                         :accessor
                         %create-license-manager-report-generator-request-report-context
                         :initform
                         (common-lisp:error ":report-context is required"))
                        (type :initarg :type :type
                         (common-lisp:or report-type-list common-lisp:null)
                         :accessor
                         %create-license-manager-report-generator-request-type
                         :initform (common-lisp:error ":type is required"))
                        (report-generator-name :initarg :report-generator-name
                         :type
                         (common-lisp:or report-generator-name
                                         common-lisp:null)
                         :accessor
                         %create-license-manager-report-generator-request-report-generator-name
                         :initform
                         (common-lisp:error
                          ":report-generator-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-license-manager-report-generator-request
                    'make-create-license-manager-report-generator-request))
 (common-lisp:defun make-create-license-manager-report-generator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description client-token
                     report-frequency report-context type
                     report-generator-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-manager-report-generator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-manager-report-generator-response
                       common-lisp:nil
                       ((license-manager-report-generator-arn :initarg
                         :license-manager-report-generator-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-manager-report-generator-response-license-manager-report-generator-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-license-manager-report-generator-response
                    'make-create-license-manager-report-generator-response))
 (common-lisp:defun make-create-license-manager-report-generator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-manager-report-generator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-license-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (license-metadata :initarg :license-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor %create-license-request-license-metadata
                         :initform common-lisp:nil)
                        (consumption-configuration :initarg
                         :consumption-configuration :type
                         (common-lisp:or consumption-configuration
                                         common-lisp:null)
                         :accessor
                         %create-license-request-consumption-configuration
                         :initform
                         (common-lisp:error
                          ":consumption-configuration is required"))
                        (beneficiary :initarg :beneficiary :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-request-beneficiary :initform
                         (common-lisp:error ":beneficiary is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %create-license-request-entitlements
                         :initform
                         (common-lisp:error ":entitlements is required"))
                        (validity :initarg :validity :type
                         (common-lisp:or datetime-range common-lisp:null)
                         :accessor %create-license-request-validity :initform
                         (common-lisp:error ":validity is required"))
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-request-home-region :initform
                         (common-lisp:error ":home-region is required"))
                        (issuer :initarg :issuer :type
                         (common-lisp:or issuer common-lisp:null) :accessor
                         %create-license-request-issuer :initform
                         (common-lisp:error ":issuer is required"))
                        (product-sku :initarg :product-sku :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-request-product-sku :initform
                         (common-lisp:error ":product-sku is required"))
                        (product-name :initarg :product-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-request-product-name :initform
                         (common-lisp:error ":product-name is required"))
                        (license-name :initarg :license-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-request-license-name :initform
                         (common-lisp:error ":license-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-license-request 'make-create-license-request))
 (common-lisp:defun make-create-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token license-metadata
                     consumption-configuration beneficiary entitlements
                     validity home-region issuer product-sku product-name
                     license-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-status common-lisp:null)
                         :accessor %create-license-response-status :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-license-response-license-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-license-response 'make-create-license-response))
 (common-lisp:defun make-create-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-version-request common-lisp:nil
                       ((source-version :initarg :source-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-version-request-source-version
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-license-version-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (status :initarg :status :type
                         (common-lisp:or license-status common-lisp:null)
                         :accessor %create-license-version-request-status
                         :initform (common-lisp:error ":status is required"))
                        (consumption-configuration :initarg
                         :consumption-configuration :type
                         (common-lisp:or consumption-configuration
                                         common-lisp:null)
                         :accessor
                         %create-license-version-request-consumption-configuration
                         :initform
                         (common-lisp:error
                          ":consumption-configuration is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %create-license-version-request-entitlements
                         :initform
                         (common-lisp:error ":entitlements is required"))
                        (license-metadata :initarg :license-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor
                         %create-license-version-request-license-metadata
                         :initform common-lisp:nil)
                        (validity :initarg :validity :type
                         (common-lisp:or datetime-range common-lisp:null)
                         :accessor %create-license-version-request-validity
                         :initform (common-lisp:error ":validity is required"))
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-version-request-home-region :initform
                         (common-lisp:error ":home-region is required"))
                        (issuer :initarg :issuer :type
                         (common-lisp:or issuer common-lisp:null) :accessor
                         %create-license-version-request-issuer :initform
                         (common-lisp:error ":issuer is required"))
                        (product-name :initarg :product-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-version-request-product-name :initform
                         (common-lisp:error ":product-name is required"))
                        (license-name :initarg :license-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-version-request-license-name :initform
                         (common-lisp:error ":license-name is required"))
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-license-version-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-license-version-request
                    'make-create-license-version-request))
 (common-lisp:defun make-create-license-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-version client-token status
                     consumption-configuration entitlements license-metadata
                     validity home-region issuer product-name license-name
                     license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-license-version-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or license-status common-lisp:null)
                         :accessor %create-license-version-response-status
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-license-version-response-version :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-license-version-response-license-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-license-version-response
                    'make-create-license-version-response))
 (common-lisp:defun make-create-license-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status version license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-license-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-license-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-token-request-client-token :initform
                         (common-lisp:error ":client-token is required"))
                        (token-properties :initarg :token-properties :type
                         (common-lisp:or max-size3string-list common-lisp:null)
                         :accessor %create-token-request-token-properties
                         :initform common-lisp:nil)
                        (expiration-in-days :initarg :expiration-in-days :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-token-request-expiration-in-days :initform
                         common-lisp:nil)
                        (role-arns :initarg :role-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %create-token-request-role-arns :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-token-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-token-request 'make-create-token-request))
 (common-lisp:defun make-create-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token token-properties
                     expiration-in-days role-arns license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arns))
      (common-lisp:list
       (common-lisp:cons "RoleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-response common-lisp:nil
                       ((token :initarg :token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %create-token-response-token :initform
                         common-lisp:nil)
                        (token-type :initarg :token-type :type
                         (common-lisp:or token-type common-lisp:null) :accessor
                         %create-token-response-token-type :initform
                         common-lisp:nil)
                        (token-id :initarg :token-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-token-response-token-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-token-response 'make-create-token-response))
 (common-lisp:defun make-create-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token token-type token-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "TokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   common-lisp:nil))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datetime-range common-lisp:nil
                       ((end :initarg :end :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %datetime-range-end :initform
                         common-lisp:nil)
                        (begin :initarg :begin :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %datetime-range-begin :initform
                         (common-lisp:error ":begin is required"))))
 (common-lisp:export (common-lisp:list 'datetime-range 'make-datetime-range))
 (common-lisp:defun make-datetime-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end begin)
   (common-lisp:apply #'common-lisp:make-instance 'datetime-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datetime-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datetime-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datetime-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-grant-request common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-grant-request-version :initform
                         (common-lisp:error ":version is required"))
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or status-reason-message
                                         common-lisp:null)
                         :accessor %delete-grant-request-status-reason
                         :initform common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-grant-request-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-grant-request 'make-delete-grant-request))
 (common-lisp:defun make-delete-grant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status-reason grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-grant-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-grant-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %delete-grant-response-status :initform
                         common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-grant-response-grant-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-grant-response 'make-delete-grant-response))
 (common-lisp:defun make-delete-grant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-configuration-request common-lisp:nil
                       ((license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-license-configuration-request-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-license-configuration-request
                    'make-delete-license-configuration-request))
 (common-lisp:defun make-delete-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-license-configuration-response
                    'make-delete-license-configuration-response))
 (common-lisp:defun make-delete-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-manager-report-generator-request
                       common-lisp:nil
                       ((license-manager-report-generator-arn :initarg
                         :license-manager-report-generator-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-license-manager-report-generator-request-license-manager-report-generator-arn
                         :initform
                         (common-lisp:error
                          ":license-manager-report-generator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-license-manager-report-generator-request
                    'make-delete-license-manager-report-generator-request))
 (common-lisp:defun make-delete-license-manager-report-generator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-license-manager-report-generator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-manager-report-generator-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-license-manager-report-generator-response
                    'make-delete-license-manager-report-generator-response))
 (common-lisp:defun make-delete-license-manager-report-generator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-license-manager-report-generator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-request common-lisp:nil
                       ((source-version :initarg :source-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-license-request-source-version :initform
                         (common-lisp:error ":source-version is required"))
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-license-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-license-request 'make-delete-license-request))
 (common-lisp:defun make-delete-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-version license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-license-response common-lisp:nil
                       ((deletion-date :initarg :deletion-date :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %delete-license-response-deletion-date
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-deletion-status
                                         common-lisp:null)
                         :accessor %delete-license-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-license-response 'make-delete-license-response))
 (common-lisp:defun make-delete-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-date status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-request common-lisp:nil
                       ((token-id :initarg :token-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-token-request-token-id :initform
                         (common-lisp:error ":token-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-token-request 'make-delete-token-request))
 (common-lisp:defun make-delete-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-token-response 'make-delete-token-response))
 (common-lisp:defun make-delete-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   common-lisp:nil))
(common-lisp:deftype digital-signature-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entitlement common-lisp:nil
                       ((allow-check-in :initarg :allow-check-in :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor %entitlement-allow-check-in :initform
                         common-lisp:nil)
                        (unit :initarg :unit :type
                         (common-lisp:or entitlement-unit common-lisp:null)
                         :accessor %entitlement-unit :initform
                         (common-lisp:error ":unit is required"))
                        (overage :initarg :overage :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor %entitlement-overage :initform
                         common-lisp:nil)
                        (max-count :initarg :max-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %entitlement-max-count :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defun make-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-check-in unit overage max-count
                     value name)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overage))
      (common-lisp:list
       (common-lisp:cons "Overage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-check-in))
      (common-lisp:list
       (common-lisp:cons "AllowCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entitlement-data common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or entitlement-data-unit
                                         common-lisp:null)
                         :accessor %entitlement-data-unit :initform
                         (common-lisp:error ":unit is required"))
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-data-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-data-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'entitlement-data 'make-entitlement-data))
 (common-lisp:defun make-entitlement-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit value name)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-data-list ()
   '(trivial-types:proper-list entitlement-data))
 (common-lisp:defun |make-entitlement-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entitlement-data-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype entitlement-list ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun |make-entitlement-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition entitlement-not-allowed-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entitlement-not-allowed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entitlement-not-allowed-exception
                    'entitlement-not-allowed-exception-message)))
(common-lisp:deftype entitlement-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entitlement-usage common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or entitlement-data-unit
                                         common-lisp:null)
                         :accessor %entitlement-usage-unit :initform
                         (common-lisp:error ":unit is required"))
                        (max-count :initarg :max-count :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-usage-max-count :initform
                         common-lisp:nil)
                        (consumed-value :initarg :consumed-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-usage-consumed-value :initform
                         (common-lisp:error ":consumed-value is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-usage-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'entitlement-usage 'make-entitlement-usage))
 (common-lisp:defun make-entitlement-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit max-count consumed-value name)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-value))
      (common-lisp:list
       (common-lisp:cons "ConsumedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-count))
      (common-lisp:list
       (common-lisp:cons "MaxCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-usage-list ()
   '(trivial-types:proper-list entitlement-usage))
 (common-lisp:defun |make-entitlement-usage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass extend-license-consumption-request common-lisp:nil
                       ((dry-run :initarg :dry-run :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %extend-license-consumption-request-dry-run :initform
                         common-lisp:nil)
                        (license-consumption-token :initarg
                         :license-consumption-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %extend-license-consumption-request-license-consumption-token
                         :initform
                         (common-lisp:error
                          ":license-consumption-token is required"))))
 (common-lisp:export
  (common-lisp:list 'extend-license-consumption-request
                    'make-extend-license-consumption-request))
 (common-lisp:defun make-extend-license-consumption-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run license-consumption-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'extend-license-consumption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extend-license-consumption-response common-lisp:nil
                       ((expiration :initarg :expiration :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         %extend-license-consumption-response-expiration
                         :initform common-lisp:nil)
                        (license-consumption-token :initarg
                         :license-consumption-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %extend-license-consumption-response-license-consumption-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'extend-license-consumption-response
                    'make-extend-license-consumption-response))
 (common-lisp:defun make-extend-license-consumption-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration license-consumption-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'extend-license-consumption-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-consumption-token))
      (common-lisp:list
       (common-lisp:cons "LicenseConsumptionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extend-license-consumption-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition failed-dependency-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       failed-dependency-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       failed-dependency-exception-error-code)))
 (common-lisp:export
  (common-lisp:list 'failed-dependency-exception
                    'failed-dependency-exception-message
                    'failed-dependency-exception-error-code)))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition filter-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       filter-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'filter-limit-exceeded-exception
                    'filter-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-access-token-request common-lisp:nil
                       ((token-properties :initarg :token-properties :type
                         (common-lisp:or max-size3string-list common-lisp:null)
                         :accessor %get-access-token-request-token-properties
                         :initform common-lisp:nil)
                        (token :initarg :token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %get-access-token-request-token :initform
                         (common-lisp:error ":token is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-token-request 'make-get-access-token-request))
 (common-lisp:defun make-get-access-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-properties token)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-token-response common-lisp:nil
                       ((access-token :initarg :access-token :type
                         (common-lisp:or token-string common-lisp:null)
                         :accessor %get-access-token-response-access-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-access-token-response
                    'make-get-access-token-response))
 (common-lisp:defun make-get-access-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "AccessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-grant-request common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-grant-request-version :initform common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-grant-request-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-grant-request 'make-get-grant-request))
 (common-lisp:defun make-get-grant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-grant-response common-lisp:nil
                       ((grant :initarg :grant :type
                         (common-lisp:or grant common-lisp:null) :accessor
                         %get-grant-response-grant :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-grant-response 'make-get-grant-response))
 (common-lisp:defun make-get-grant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grant)
   (common-lisp:apply #'common-lisp:make-instance 'get-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant))
      (common-lisp:list
       (common-lisp:cons "Grant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-configuration-request common-lisp:nil
                       ((license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-request-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-license-configuration-request
                    'make-get-license-configuration-request))
 (common-lisp:defun make-get-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-configuration-response common-lisp:nil
                       ((disassociate-when-not-found :initarg
                         :disassociate-when-not-found :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %get-license-configuration-response-disassociate-when-not-found
                         :initform common-lisp:nil)
                        (automated-discovery-information :initarg
                         :automated-discovery-information :type
                         (common-lisp:or automated-discovery-information
                                         common-lisp:null)
                         :accessor
                         %get-license-configuration-response-automated-discovery-information
                         :initform common-lisp:nil)
                        (product-information-list :initarg
                         :product-information-list :type
                         (common-lisp:or product-information-list
                                         common-lisp:null)
                         :accessor
                         %get-license-configuration-response-product-information-list
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %get-license-configuration-response-tags :initform
                         common-lisp:nil)
                        (managed-resource-summary-list :initarg
                         :managed-resource-summary-list :type
                         (common-lisp:or managed-resource-summary-list
                                         common-lisp:null)
                         :accessor
                         %get-license-configuration-response-managed-resource-summary-list
                         :initform common-lisp:nil)
                        (consumed-license-summary-list :initarg
                         :consumed-license-summary-list :type
                         (common-lisp:or consumed-license-summary-list
                                         common-lisp:null)
                         :accessor
                         %get-license-configuration-response-consumed-license-summary-list
                         :initform common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-owner-account-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-status :initform
                         common-lisp:nil)
                        (consumed-licenses :initarg :consumed-licenses :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %get-license-configuration-response-consumed-licenses
                         :initform common-lisp:nil)
                        (license-count-hard-limit :initarg
                         :license-count-hard-limit :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %get-license-configuration-response-license-count-hard-limit
                         :initform common-lisp:nil)
                        (license-count :initarg :license-count :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %get-license-configuration-response-license-count
                         :initform common-lisp:nil)
                        (license-rules :initarg :license-rules :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %get-license-configuration-response-license-rules
                         :initform common-lisp:nil)
                        (license-counting-type :initarg :license-counting-type
                         :type
                         (common-lisp:or license-counting-type
                                         common-lisp:null)
                         :accessor
                         %get-license-configuration-response-license-counting-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-name :initform
                         common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-license-configuration-arn
                         :initform common-lisp:nil)
                        (license-configuration-id :initarg
                         :license-configuration-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-configuration-response-license-configuration-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-license-configuration-response
                    'make-get-license-configuration-response))
 (common-lisp:defun make-get-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disassociate-when-not-found
                     automated-discovery-information product-information-list
                     tags managed-resource-summary-list
                     consumed-license-summary-list owner-account-id status
                     consumed-licenses license-count-hard-limit license-count
                     license-rules license-counting-type description name
                     license-configuration-arn license-configuration-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-license-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenseSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-resource-summary-list))
      (common-lisp:list
       (common-lisp:cons "ManagedResourceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-information))
      (common-lisp:list
       (common-lisp:cons "AutomatedDiscoveryInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-conversion-task-request common-lisp:nil
                       ((license-conversion-task-id :initarg
                         :license-conversion-task-id :type
                         (common-lisp:or license-conversion-task-id
                                         common-lisp:null)
                         :accessor
                         %get-license-conversion-task-request-license-conversion-task-id
                         :initform
                         (common-lisp:error
                          ":license-conversion-task-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-license-conversion-task-request
                    'make-get-license-conversion-task-request))
 (common-lisp:defun make-get-license-conversion-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-conversion-task-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-conversion-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-conversion-task-response common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-license-conversion-task-response-end-time
                         :initform common-lisp:nil)
                        (license-conversion-time :initarg
                         :license-conversion-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-license-conversion-task-response-license-conversion-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-license-conversion-task-response-start-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-conversion-task-status
                                         common-lisp:null)
                         :accessor %get-license-conversion-task-response-status
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-conversion-task-response-status-message
                         :initform common-lisp:nil)
                        (destination-license-context :initarg
                         :destination-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %get-license-conversion-task-response-destination-license-context
                         :initform common-lisp:nil)
                        (source-license-context :initarg
                         :source-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %get-license-conversion-task-response-source-license-context
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-conversion-task-response-resource-arn
                         :initform common-lisp:nil)
                        (license-conversion-task-id :initarg
                         :license-conversion-task-id :type
                         (common-lisp:or license-conversion-task-id
                                         common-lisp:null)
                         :accessor
                         %get-license-conversion-task-response-license-conversion-task-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-license-conversion-task-response
                    'make-get-license-conversion-task-response))
 (common-lisp:defun make-get-license-conversion-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time license-conversion-time
                     start-time status status-message
                     destination-license-context source-license-context
                     resource-arn license-conversion-task-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-conversion-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-time))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-conversion-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-manager-report-generator-request
                       common-lisp:nil
                       ((license-manager-report-generator-arn :initarg
                         :license-manager-report-generator-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-manager-report-generator-request-license-manager-report-generator-arn
                         :initform
                         (common-lisp:error
                          ":license-manager-report-generator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-license-manager-report-generator-request
                    'make-get-license-manager-report-generator-request))
 (common-lisp:defun make-get-license-manager-report-generator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-manager-report-generator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-manager-report-generator-response
                       common-lisp:nil
                       ((report-generator :initarg :report-generator :type
                         (common-lisp:or report-generator common-lisp:null)
                         :accessor
                         %get-license-manager-report-generator-response-report-generator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-license-manager-report-generator-response
                    'make-get-license-manager-report-generator-response))
 (common-lisp:defun make-get-license-manager-report-generator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-generator)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-license-manager-report-generator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-generator))
      (common-lisp:list
       (common-lisp:cons "ReportGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-request common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-license-request-version :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-license-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-license-request 'make-get-license-request))
 (common-lisp:defun make-get-license-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-license-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-license-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-license-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-license-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-response common-lisp:nil
                       ((license :initarg :license :type
                         (common-lisp:or license common-lisp:null) :accessor
                         %get-license-response-license :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-license-response 'make-get-license-response))
 (common-lisp:defun make-get-license-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license)
   (common-lisp:apply #'common-lisp:make-instance 'get-license-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-license-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-license-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license))
      (common-lisp:list
       (common-lisp:cons "License"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-license-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-usage-request common-lisp:nil
                       ((license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-license-usage-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-license-usage-request
                    'make-get-license-usage-request))
 (common-lisp:defun make-get-license-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-license-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-license-usage-response common-lisp:nil
                       ((license-usage :initarg :license-usage :type
                         (common-lisp:or license-usage common-lisp:null)
                         :accessor %get-license-usage-response-license-usage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-license-usage-response
                    'make-get-license-usage-response))
 (common-lisp:defun make-get-license-usage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-usage)
   (common-lisp:apply #'common-lisp:make-instance 'get-license-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-usage))
      (common-lisp:list
       (common-lisp:cons "LicenseUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-license-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-settings-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-service-settings-request
                    'make-get-service-settings-request))
 (common-lisp:defun make-get-service-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-settings-response common-lisp:nil
                       ((license-manager-resource-share-arn :initarg
                         :license-manager-resource-share-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-service-settings-response-license-manager-resource-share-arn
                         :initform common-lisp:nil)
                        (enable-cross-accounts-discovery :initarg
                         :enable-cross-accounts-discovery :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %get-service-settings-response-enable-cross-accounts-discovery
                         :initform common-lisp:nil)
                        (organization-configuration :initarg
                         :organization-configuration :type
                         (common-lisp:or organization-configuration
                                         common-lisp:null)
                         :accessor
                         %get-service-settings-response-organization-configuration
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-service-settings-response-sns-topic-arn :initform
                         common-lisp:nil)
                        (s3bucket-arn :initarg :s3bucket-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-service-settings-response-s3bucket-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-service-settings-response
                    'make-get-service-settings-response))
 (common-lisp:defun make-get-service-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-manager-resource-share-arn
                     enable-cross-accounts-discovery organization-configuration
                     sns-topic-arn s3bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-configuration))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cross-accounts-discovery))
      (common-lisp:list
       (common-lisp:cons "EnableCrossAccountsDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-resource-share-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerResourceShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or options common-lisp:null) :accessor
                         %grant-options :initform common-lisp:nil)
                        (granted-operations :initarg :granted-operations :type
                         (common-lisp:or allowed-operation-list
                                         common-lisp:null)
                         :accessor %grant-granted-operations :initform
                         (common-lisp:error ":granted-operations is required"))
                        (version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %grant-version :initform
                         (common-lisp:error ":version is required"))
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or status-reason-message
                                         common-lisp:null)
                         :accessor %grant-status-reason :initform
                         common-lisp:nil)
                        (grant-status :initarg :grant-status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %grant-grant-status :initform
                         (common-lisp:error ":grant-status is required"))
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %grant-home-region :initform
                         (common-lisp:error ":home-region is required"))
                        (grantee-principal-arn :initarg :grantee-principal-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %grant-grantee-principal-arn :initform
                         (common-lisp:error
                          ":grantee-principal-arn is required"))
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %grant-license-arn :initform
                         (common-lisp:error ":license-arn is required"))
                        (parent-arn :initarg :parent-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %grant-parent-arn :initform
                         (common-lisp:error ":parent-arn is required"))
                        (grant-name :initarg :grant-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %grant-grant-name :initform
                         (common-lisp:error ":grant-name is required"))
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %grant-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))))
 (common-lisp:export (common-lisp:list 'grant 'make-grant))
 (common-lisp:defun make-grant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options granted-operations version
                     status-reason grant-status home-region
                     grantee-principal-arn license-arn parent-arn grant-name
                     grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'grant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-name))
      (common-lisp:list
       (common-lisp:cons "GrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-arn))
      (common-lisp:list
       (common-lisp:cons "ParentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grantee-principal-arn))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-status))
      (common-lisp:list
       (common-lisp:cons "GrantStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granted-operations))
      (common-lisp:list
       (common-lisp:cons "GrantedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grant-list () '(trivial-types:proper-list grant))
 (common-lisp:defun |make-grant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass granted-license common-lisp:nil
                       ((received-metadata :initarg :received-metadata :type
                         (common-lisp:or received-metadata common-lisp:null)
                         :accessor %granted-license-received-metadata :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-version :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %granted-license-create-time :initform
                         common-lisp:nil)
                        (license-metadata :initarg :license-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor %granted-license-license-metadata :initform
                         common-lisp:nil)
                        (consumption-configuration :initarg
                         :consumption-configuration :type
                         (common-lisp:or consumption-configuration
                                         common-lisp:null)
                         :accessor %granted-license-consumption-configuration
                         :initform common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %granted-license-entitlements :initform
                         common-lisp:nil)
                        (beneficiary :initarg :beneficiary :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-beneficiary :initform
                         common-lisp:nil)
                        (validity :initarg :validity :type
                         (common-lisp:or datetime-range common-lisp:null)
                         :accessor %granted-license-validity :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-status common-lisp:null)
                         :accessor %granted-license-status :initform
                         common-lisp:nil)
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-home-region :initform
                         common-lisp:nil)
                        (issuer :initarg :issuer :type
                         (common-lisp:or issuer-details common-lisp:null)
                         :accessor %granted-license-issuer :initform
                         common-lisp:nil)
                        (product-sku :initarg :product-sku :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-product-sku :initform
                         common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-product-name :initform
                         common-lisp:nil)
                        (license-name :initarg :license-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %granted-license-license-name :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %granted-license-license-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'granted-license 'make-granted-license))
 (common-lisp:defun make-granted-license
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key received-metadata version create-time
                     license-metadata consumption-configuration entitlements
                     beneficiary validity status home-region issuer product-sku
                     product-name license-name license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'granted-license
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input granted-license))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input granted-license))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-metadata))
      (common-lisp:list
       (common-lisp:cons "ReceivedMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input granted-license))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype granted-license-list ()
   '(trivial-types:proper-list granted-license))
 (common-lisp:defun |make-granted-license-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list granted-license))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601date-time () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-exception
                    'invalid-resource-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass inventory-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inventory-filter-value :initform common-lisp:nil)
                        (condition :initarg :condition :type
                         (common-lisp:or inventory-filter-condition
                                         common-lisp:null)
                         :accessor %inventory-filter-condition :initform
                         (common-lisp:error ":condition is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inventory-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defun make-inventory-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value condition name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-filter-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-filter-list ()
   '(trivial-types:proper-list inventory-filter))
 (common-lisp:defun |make-inventory-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass issuer common-lisp:nil
                       ((sign-key :initarg :sign-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issuer-sign-key :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issuer-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'issuer 'make-issuer))
 (common-lisp:defun make-issuer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sign-key name)
   (common-lisp:apply #'common-lisp:make-instance 'issuer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-key))
      (common-lisp:list
       (common-lisp:cons "SignKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issuer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass issuer-details common-lisp:nil
                       ((key-fingerprint :initarg :key-fingerprint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issuer-details-key-fingerprint :initform
                         common-lisp:nil)
                        (sign-key :initarg :sign-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issuer-details-sign-key :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %issuer-details-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'issuer-details 'make-issuer-details))
 (common-lisp:defun make-issuer-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-fingerprint sign-key name)
   (common-lisp:apply #'common-lisp:make-instance 'issuer-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input issuer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input issuer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-key))
      (common-lisp:list
       (common-lisp:cons "SignKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "KeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input issuer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass license common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-version :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %license-create-time :initform
                         common-lisp:nil)
                        (license-metadata :initarg :license-metadata :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor %license-license-metadata :initform
                         common-lisp:nil)
                        (consumption-configuration :initarg
                         :consumption-configuration :type
                         (common-lisp:or consumption-configuration
                                         common-lisp:null)
                         :accessor %license-consumption-configuration :initform
                         common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %license-entitlements :initform
                         common-lisp:nil)
                        (beneficiary :initarg :beneficiary :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-beneficiary :initform common-lisp:nil)
                        (validity :initarg :validity :type
                         (common-lisp:or datetime-range common-lisp:null)
                         :accessor %license-validity :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-status common-lisp:null)
                         :accessor %license-status :initform common-lisp:nil)
                        (home-region :initarg :home-region :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-home-region :initform common-lisp:nil)
                        (issuer :initarg :issuer :type
                         (common-lisp:or issuer-details common-lisp:null)
                         :accessor %license-issuer :initform common-lisp:nil)
                        (product-sku :initarg :product-sku :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-product-sku :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-product-name :initform common-lisp:nil)
                        (license-name :initarg :license-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-license-name :initform common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %license-license-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'license 'make-license))
 (common-lisp:defun make-license
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version create-time license-metadata
                     consumption-configuration entitlements beneficiary
                     validity status home-region issuer product-sku
                     product-name license-name license-arn)
   (common-lisp:apply #'common-lisp:make-instance 'license
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-name))
      (common-lisp:list
       (common-lisp:cons "LicenseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-sku))
      (common-lisp:list
       (common-lisp:cons "ProductSKU"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beneficiary))
      (common-lisp:list
       (common-lisp:cons "Beneficiary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumption-configuration))
      (common-lisp:list
       (common-lisp:cons "ConsumptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-metadata))
      (common-lisp:list
       (common-lisp:cons "LicenseMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass license-configuration common-lisp:nil
                       ((automated-discovery-information :initarg
                         :automated-discovery-information :type
                         (common-lisp:or automated-discovery-information
                                         common-lisp:null)
                         :accessor
                         %license-configuration-automated-discovery-information
                         :initform common-lisp:nil)
                        (product-information-list :initarg
                         :product-information-list :type
                         (common-lisp:or product-information-list
                                         common-lisp:null)
                         :accessor
                         %license-configuration-product-information-list
                         :initform common-lisp:nil)
                        (managed-resource-summary-list :initarg
                         :managed-resource-summary-list :type
                         (common-lisp:or managed-resource-summary-list
                                         common-lisp:null)
                         :accessor
                         %license-configuration-managed-resource-summary-list
                         :initform common-lisp:nil)
                        (consumed-license-summary-list :initarg
                         :consumed-license-summary-list :type
                         (common-lisp:or consumed-license-summary-list
                                         common-lisp:null)
                         :accessor
                         %license-configuration-consumed-license-summary-list
                         :initform common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-owner-account-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-status :initform
                         common-lisp:nil)
                        (consumed-licenses :initarg :consumed-licenses :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %license-configuration-consumed-licenses :initform
                         common-lisp:nil)
                        (disassociate-when-not-found :initarg
                         :disassociate-when-not-found :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %license-configuration-disassociate-when-not-found
                         :initform common-lisp:nil)
                        (license-count-hard-limit :initarg
                         :license-count-hard-limit :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %license-configuration-license-count-hard-limit
                         :initform common-lisp:nil)
                        (license-count :initarg :license-count :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %license-configuration-license-count :initform
                         common-lisp:nil)
                        (license-rules :initarg :license-rules :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %license-configuration-license-rules
                         :initform common-lisp:nil)
                        (license-counting-type :initarg :license-counting-type
                         :type
                         (common-lisp:or license-counting-type
                                         common-lisp:null)
                         :accessor %license-configuration-license-counting-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-name :initform common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-license-configuration-arn
                         :initform common-lisp:nil)
                        (license-configuration-id :initarg
                         :license-configuration-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-license-configuration-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-configuration 'make-license-configuration))
 (common-lisp:defun make-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automated-discovery-information
                     product-information-list managed-resource-summary-list
                     consumed-license-summary-list owner-account-id status
                     consumed-licenses disassociate-when-not-found
                     license-count-hard-limit license-count license-rules
                     license-counting-type description name
                     license-configuration-arn license-configuration-id)
   (common-lisp:apply #'common-lisp:make-instance 'license-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-counting-type))
      (common-lisp:list
       (common-lisp:cons "LicenseCountingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'consumed-license-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenseSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-resource-summary-list))
      (common-lisp:list
       (common-lisp:cons "ManagedResourceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-discovery-information))
      (common-lisp:list
       (common-lisp:cons "AutomatedDiscoveryInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass license-configuration-association common-lisp:nil
                       ((ami-association-scope :initarg :ami-association-scope
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %license-configuration-association-ami-association-scope
                         :initform common-lisp:nil)
                        (association-time :initarg :association-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-configuration-association-association-time
                         :initform common-lisp:nil)
                        (resource-owner-id :initarg :resource-owner-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-association-resource-owner-id
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %license-configuration-association-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-association-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-configuration-association
                    'make-license-configuration-association))
 (common-lisp:defun make-license-configuration-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ami-association-scope association-time
                     resource-owner-id resource-type resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'license-configuration-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-time))
      (common-lisp:list
       (common-lisp:cons "AssociationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-association-scope))
      (common-lisp:list
       (common-lisp:cons "AmiAssociationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-configuration-associations ()
   '(trivial-types:proper-list license-configuration-association))
 (common-lisp:defun |make-license-configuration-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass license-configuration-usage common-lisp:nil
                       ((consumed-licenses :initarg :consumed-licenses :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %license-configuration-usage-consumed-licenses
                         :initform common-lisp:nil)
                        (association-time :initarg :association-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-configuration-usage-association-time
                         :initform common-lisp:nil)
                        (resource-owner-id :initarg :resource-owner-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-usage-resource-owner-id
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-usage-resource-status :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %license-configuration-usage-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-configuration-usage-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-configuration-usage
                    'make-license-configuration-usage))
 (common-lisp:defun make-license-configuration-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consumed-licenses association-time
                     resource-owner-id resource-status resource-type
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'license-configuration-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-time))
      (common-lisp:list
       (common-lisp:cons "AssociationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-licenses))
      (common-lisp:list
       (common-lisp:cons "ConsumedLicenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-configuration-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-configuration-usage-list ()
   '(trivial-types:proper-list license-configuration-usage))
 (common-lisp:defun |make-license-configuration-usage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype license-configurations ()
   '(trivial-types:proper-list license-configuration))
 (common-lisp:defun |make-license-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass license-conversion-context common-lisp:nil
                       ((usage-operation :initarg :usage-operation :type
                         (common-lisp:or usage-operation common-lisp:null)
                         :accessor %license-conversion-context-usage-operation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-conversion-context
                    'make-license-conversion-context))
 (common-lisp:defun make-license-conversion-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-operation)
   (common-lisp:apply #'common-lisp:make-instance 'license-conversion-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-operation))
      (common-lisp:list
       (common-lisp:cons "UsageOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass license-conversion-task common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-conversion-task-end-time :initform
                         common-lisp:nil)
                        (license-conversion-time :initarg
                         :license-conversion-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-conversion-task-license-conversion-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-conversion-task-start-time :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-conversion-task-status-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or license-conversion-task-status
                                         common-lisp:null)
                         :accessor %license-conversion-task-status :initform
                         common-lisp:nil)
                        (destination-license-context :initarg
                         :destination-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %license-conversion-task-destination-license-context
                         :initform common-lisp:nil)
                        (source-license-context :initarg
                         :source-license-context :type
                         (common-lisp:or license-conversion-context
                                         common-lisp:null)
                         :accessor
                         %license-conversion-task-source-license-context
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-conversion-task-resource-arn :initform
                         common-lisp:nil)
                        (license-conversion-task-id :initarg
                         :license-conversion-task-id :type
                         (common-lisp:or license-conversion-task-id
                                         common-lisp:null)
                         :accessor
                         %license-conversion-task-license-conversion-task-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-conversion-task 'make-license-conversion-task))
 (common-lisp:defun make-license-conversion-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time license-conversion-time
                     start-time status-message status
                     destination-license-context source-license-context
                     resource-arn license-conversion-task-id)
   (common-lisp:apply #'common-lisp:make-instance 'license-conversion-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-task-id))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-license-context))
      (common-lisp:list
       (common-lisp:cons "SourceLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-license-context))
      (common-lisp:list
       (common-lisp:cons "DestinationLicenseContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-time))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-conversion-task))
   common-lisp:nil))
(common-lisp:deftype license-conversion-task-id () 'common-lisp:string)
(common-lisp:deftype license-conversion-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-conversion-tasks ()
   '(trivial-types:proper-list license-conversion-task))
 (common-lisp:defun |make-license-conversion-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-conversion-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-counting-type () 'common-lisp:string)
(common-lisp:deftype license-deletion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-list () '(trivial-types:proper-list license))
 (common-lisp:defun |make-license-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass license-operation-failure common-lisp:nil
                       ((metadata-list :initarg :metadata-list :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor %license-operation-failure-metadata-list
                         :initform common-lisp:nil)
                        (operation-requested-by :initarg
                         :operation-requested-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-operation-failure-operation-requested-by
                         :initform common-lisp:nil)
                        (resource-owner-id :initarg :resource-owner-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-operation-failure-resource-owner-id :initform
                         common-lisp:nil)
                        (operation-name :initarg :operation-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-operation-failure-operation-name :initform
                         common-lisp:nil)
                        (failure-time :initarg :failure-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %license-operation-failure-failure-time :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-operation-failure-error-message :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %license-operation-failure-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-operation-failure-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'license-operation-failure
                    'make-license-operation-failure))
 (common-lisp:defun make-license-operation-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-list operation-requested-by
                     resource-owner-id operation-name failure-time
                     error-message resource-type resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'license-operation-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-time))
      (common-lisp:list
       (common-lisp:cons "FailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-name))
      (common-lisp:list
       (common-lisp:cons "OperationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-requested-by))
      (common-lisp:list
       (common-lisp:cons "OperationRequestedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-list))
      (common-lisp:list
       (common-lisp:cons "MetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-operation-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-operation-failure-list ()
   '(trivial-types:proper-list license-operation-failure))
 (common-lisp:defun |make-license-operation-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-operation-failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass license-specification common-lisp:nil
                       ((ami-association-scope :initarg :ami-association-scope
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %license-specification-ami-association-scope
                         :initform common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-specification-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'license-specification 'make-license-specification))
 (common-lisp:defun make-license-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ami-association-scope
                     license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance 'license-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-association-scope))
      (common-lisp:list
       (common-lisp:cons "AmiAssociationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          license-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-specifications ()
   '(trivial-types:proper-list license-specification))
 (common-lisp:defun |make-license-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype license-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass license-usage common-lisp:nil
                       ((entitlement-usages :initarg :entitlement-usages :type
                         (common-lisp:or entitlement-usage-list
                                         common-lisp:null)
                         :accessor %license-usage-entitlement-usages :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'license-usage 'make-license-usage))
 (common-lisp:defun make-license-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entitlement-usages)
   (common-lisp:apply #'common-lisp:make-instance 'license-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-usages))
      (common-lisp:list
       (common-lisp:cons "EntitlementUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition license-usage-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       license-usage-exception-message)))
 (common-lisp:export
  (common-lisp:list 'license-usage-exception 'license-usage-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-associations-for-license-configuration-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associations-for-license-configuration-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %list-associations-for-license-configuration-request-max-results
                         :initform common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associations-for-license-configuration-request-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-associations-for-license-configuration-request
                    'make-list-associations-for-license-configuration-request))
 (common-lisp:defun make-list-associations-for-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associations-for-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associations-for-license-configuration-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associations-for-license-configuration-response-next-token
                         :initform common-lisp:nil)
                        (license-configuration-associations :initarg
                         :license-configuration-associations :type
                         (common-lisp:or license-configuration-associations
                                         common-lisp:null)
                         :accessor
                         %list-associations-for-license-configuration-response-license-configuration-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-associations-for-license-configuration-response
                    'make-list-associations-for-license-configuration-response))
 (common-lisp:defun make-list-associations-for-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     license-configuration-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associations-for-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-associations))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-for-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributed-grants-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-distributed-grants-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-distributed-grants-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-distributed-grants-request-filters
                         :initform common-lisp:nil)
                        (grant-arns :initarg :grant-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %list-distributed-grants-request-grant-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributed-grants-request
                    'make-list-distributed-grants-request))
 (common-lisp:defun make-list-distributed-grants-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     grant-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributed-grants-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arns))
      (common-lisp:list
       (common-lisp:cons "GrantArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributed-grants-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-distributed-grants-response-next-token :initform
                         common-lisp:nil)
                        (grants :initarg :grants :type
                         (common-lisp:or grant-list common-lisp:null) :accessor
                         %list-distributed-grants-response-grants :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributed-grants-response
                    'make-list-distributed-grants-response))
 (common-lisp:defun make-list-distributed-grants-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token grants)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributed-grants-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributed-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-failures-for-license-configuration-operations-request common-lisp:nil
  ((next-token :initarg :next-token :type
    (common-lisp:or string common-lisp:null) :accessor
    %list-failures-for-license-configuration-operations-request-next-token
    :initform common-lisp:nil)
   (max-results :initarg :max-results :type
    (common-lisp:or box-integer common-lisp:null) :accessor
    %list-failures-for-license-configuration-operations-request-max-results
    :initform common-lisp:nil)
   (license-configuration-arn :initarg :license-configuration-arn :type
    (common-lisp:or string common-lisp:null) :accessor
    %list-failures-for-license-configuration-operations-request-license-configuration-arn
    :initform (common-lisp:error ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-failures-for-license-configuration-operations-request
                    'make-list-failures-for-license-configuration-operations-request))
 (common-lisp:defun make-list-failures-for-license-configuration-operations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-failures-for-license-configuration-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-failures-for-license-configuration-operations-response common-lisp:nil
  ((next-token :initarg :next-token :type
    (common-lisp:or string common-lisp:null) :accessor
    %list-failures-for-license-configuration-operations-response-next-token
    :initform common-lisp:nil)
   (license-operation-failure-list :initarg :license-operation-failure-list
    :type (common-lisp:or license-operation-failure-list common-lisp:null)
    :accessor
    %list-failures-for-license-configuration-operations-response-license-operation-failure-list
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'list-failures-for-license-configuration-operations-response
   'make-list-failures-for-license-configuration-operations-response))
 (common-lisp:defun make-list-failures-for-license-configuration-operations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     license-operation-failure-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-failures-for-license-configuration-operations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-operation-failure-list))
      (common-lisp:list
       (common-lisp:cons "LicenseOperationFailureList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-failures-for-license-configuration-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-configurations-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-license-configurations-request-filters :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %list-license-configurations-request-max-results
                         :initform common-lisp:nil)
                        (license-configuration-arns :initarg
                         :license-configuration-arns :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-license-configurations-request-license-configuration-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-configurations-request
                    'make-list-license-configurations-request))
 (common-lisp:defun make-list-license-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters next-token max-results
                     license-configuration-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-configurations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-configurations-response-next-token
                         :initform common-lisp:nil)
                        (license-configurations :initarg
                         :license-configurations :type
                         (common-lisp:or license-configurations
                                         common-lisp:null)
                         :accessor
                         %list-license-configurations-response-license-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-configurations-response
                    'make-list-license-configurations-response))
 (common-lisp:defun make-list-license-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token license-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configurations))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-conversion-tasks-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-license-conversion-tasks-request-filters
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %list-license-conversion-tasks-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-conversion-tasks-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-conversion-tasks-request
                    'make-list-license-conversion-tasks-request))
 (common-lisp:defun make-list-license-conversion-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-conversion-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-conversion-tasks-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-conversion-tasks-response-next-token
                         :initform common-lisp:nil)
                        (license-conversion-tasks :initarg
                         :license-conversion-tasks :type
                         (common-lisp:or license-conversion-tasks
                                         common-lisp:null)
                         :accessor
                         %list-license-conversion-tasks-response-license-conversion-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-conversion-tasks-response
                    'make-list-license-conversion-tasks-response))
 (common-lisp:defun make-list-license-conversion-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token license-conversion-tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-conversion-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-conversion-tasks))
      (common-lisp:list
       (common-lisp:cons "LicenseConversionTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-conversion-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-manager-report-generators-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor
                         %list-license-manager-report-generators-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-manager-report-generators-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %list-license-manager-report-generators-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-manager-report-generators-request
                    'make-list-license-manager-report-generators-request))
 (common-lisp:defun make-list-license-manager-report-generators-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-manager-report-generators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-manager-report-generators-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-manager-report-generators-response-next-token
                         :initform common-lisp:nil)
                        (report-generators :initarg :report-generators :type
                         (common-lisp:or report-generator-list
                                         common-lisp:null)
                         :accessor
                         %list-license-manager-report-generators-response-report-generators
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-manager-report-generators-response
                    'make-list-license-manager-report-generators-response))
 (common-lisp:defun make-list-license-manager-report-generators-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token report-generators)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-manager-report-generators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-generators))
      (common-lisp:list
       (common-lisp:cons "ReportGenerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-manager-report-generators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-specifications-for-resource-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-specifications-for-resource-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %list-license-specifications-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-specifications-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-license-specifications-for-resource-request
                    'make-list-license-specifications-for-resource-request))
 (common-lisp:defun make-list-license-specifications-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-specifications-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-specifications-for-resource-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-specifications-for-resource-response-next-token
                         :initform common-lisp:nil)
                        (license-specifications :initarg
                         :license-specifications :type
                         (common-lisp:or license-specifications
                                         common-lisp:null)
                         :accessor
                         %list-license-specifications-for-resource-response-license-specifications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-specifications-for-resource-response
                    'make-list-license-specifications-for-resource-response))
 (common-lisp:defun make-list-license-specifications-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token license-specifications)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-specifications-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-specifications))
      (common-lisp:list
       (common-lisp:cons "LicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-specifications-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-license-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-versions-request-next-token :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-license-versions-request-license-arn :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-license-versions-request
                    'make-list-license-versions-request))
 (common-lisp:defun make-list-license-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-license-versions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-license-versions-response-next-token :initform
                         common-lisp:nil)
                        (licenses :initarg :licenses :type
                         (common-lisp:or license-list common-lisp:null)
                         :accessor %list-license-versions-response-licenses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-license-versions-response
                    'make-list-license-versions-response))
 (common-lisp:defun make-list-license-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token licenses)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-license-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-license-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-licenses-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-licenses-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-licenses-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-licenses-request-filters :initform
                         common-lisp:nil)
                        (license-arns :initarg :license-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %list-licenses-request-license-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-licenses-request 'make-list-licenses-request))
 (common-lisp:defun make-list-licenses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     license-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-licenses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-licenses-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-licenses-response-next-token :initform
                         common-lisp:nil)
                        (licenses :initarg :licenses :type
                         (common-lisp:or license-list common-lisp:null)
                         :accessor %list-licenses-response-licenses :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-licenses-response 'make-list-licenses-response))
 (common-lisp:defun make-list-licenses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token licenses)
   (common-lisp:apply #'common-lisp:make-instance 'list-licenses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-licenses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-grants-for-organization-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor
                         %list-received-grants-for-organization-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-grants-for-organization-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %list-received-grants-for-organization-request-filters
                         :initform common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-received-grants-for-organization-request-license-arn
                         :initform
                         (common-lisp:error ":license-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-for-organization-request
                    'make-list-received-grants-for-organization-request))
 (common-lisp:defun make-list-received-grants-for-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     license-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-grants-for-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-grants-for-organization-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-grants-for-organization-response-next-token
                         :initform common-lisp:nil)
                        (grants :initarg :grants :type
                         (common-lisp:or grant-list common-lisp:null) :accessor
                         %list-received-grants-for-organization-response-grants
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-for-organization-response
                    'make-list-received-grants-for-organization-response))
 (common-lisp:defun make-list-received-grants-for-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token grants)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-grants-for-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-grants-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-received-grants-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-grants-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-received-grants-request-filters
                         :initform common-lisp:nil)
                        (grant-arns :initarg :grant-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %list-received-grants-request-grant-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-request
                    'make-list-received-grants-request))
 (common-lisp:defun make-list-received-grants-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     grant-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-received-grants-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arns))
      (common-lisp:list
       (common-lisp:cons "GrantArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-grants-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-grants-response-next-token :initform
                         common-lisp:nil)
                        (grants :initarg :grants :type
                         (common-lisp:or grant-list common-lisp:null) :accessor
                         %list-received-grants-response-grants :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-grants-response
                    'make-list-received-grants-response))
 (common-lisp:defun make-list-received-grants-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token grants)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-grants-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-licenses-for-organization-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor
                         %list-received-licenses-for-organization-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-licenses-for-organization-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %list-received-licenses-for-organization-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-for-organization-request
                    'make-list-received-licenses-for-organization-request))
 (common-lisp:defun make-list-received-licenses-for-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-licenses-for-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-licenses-for-organization-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-licenses-for-organization-response-next-token
                         :initform common-lisp:nil)
                        (licenses :initarg :licenses :type
                         (common-lisp:or granted-license-list common-lisp:null)
                         :accessor
                         %list-received-licenses-for-organization-response-licenses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-for-organization-response
                    'make-list-received-licenses-for-organization-response))
 (common-lisp:defun make-list-received-licenses-for-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token licenses)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-licenses-for-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-licenses-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-received-licenses-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-licenses-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-received-licenses-request-filters
                         :initform common-lisp:nil)
                        (license-arns :initarg :license-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %list-received-licenses-request-license-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-request
                    'make-list-received-licenses-request))
 (common-lisp:defun make-list-received-licenses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     license-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-licenses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arns))
      (common-lisp:list
       (common-lisp:cons "LicenseArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-received-licenses-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-received-licenses-response-next-token :initform
                         common-lisp:nil)
                        (licenses :initarg :licenses :type
                         (common-lisp:or granted-license-list common-lisp:null)
                         :accessor %list-received-licenses-response-licenses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-received-licenses-response
                    'make-list-received-licenses-response))
 (common-lisp:defun make-list-received-licenses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token licenses)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-received-licenses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "Licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-received-licenses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-inventory-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or inventory-filter-list
                                         common-lisp:null)
                         :accessor %list-resource-inventory-request-filters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resource-inventory-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor %list-resource-inventory-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-inventory-request
                    'make-list-resource-inventory-request))
 (common-lisp:defun make-list-resource-inventory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-inventory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-inventory-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resource-inventory-response-next-token :initform
                         common-lisp:nil)
                        (resource-inventory-list :initarg
                         :resource-inventory-list :type
                         (common-lisp:or resource-inventory-list
                                         common-lisp:null)
                         :accessor
                         %list-resource-inventory-response-resource-inventory-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-inventory-response
                    'make-list-resource-inventory-response))
 (common-lisp:defun make-list-resource-inventory-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-inventory-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-inventory-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-inventory-list))
      (common-lisp:list
       (common-lisp:cons "ResourceInventoryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-inventory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tokens-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-size100 common-lisp:null)
                         :accessor %list-tokens-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tokens-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-tokens-request-filters :initform
                         common-lisp:nil)
                        (token-ids :initarg :token-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-tokens-request-token-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tokens-request 'make-list-tokens-request))
 (common-lisp:defun make-list-tokens-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters token-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-tokens-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tokens-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tokens-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-ids))
      (common-lisp:list
       (common-lisp:cons "TokenIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tokens-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tokens-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tokens-response-next-token :initform
                         common-lisp:nil)
                        (tokens :initarg :tokens :type
                         (common-lisp:or token-list common-lisp:null) :accessor
                         %list-tokens-response-tokens :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tokens-response 'make-list-tokens-response))
 (common-lisp:defun make-list-tokens-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tokens)
   (common-lisp:apply #'common-lisp:make-instance 'list-tokens-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tokens-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tokens-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tokens))
      (common-lisp:list
       (common-lisp:cons "Tokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tokens-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-usage-for-license-configuration-request
                       common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-usage-for-license-configuration-request-filters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-usage-for-license-configuration-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %list-usage-for-license-configuration-request-max-results
                         :initform common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-usage-for-license-configuration-request-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-usage-for-license-configuration-request
                    'make-list-usage-for-license-configuration-request))
 (common-lisp:defun make-list-usage-for-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters next-token max-results
                     license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-usage-for-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-usage-for-license-configuration-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-usage-for-license-configuration-response-next-token
                         :initform common-lisp:nil)
                        (license-configuration-usage-list :initarg
                         :license-configuration-usage-list :type
                         (common-lisp:or license-configuration-usage-list
                                         common-lisp:null)
                         :accessor
                         %list-usage-for-license-configuration-response-license-configuration-usage-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-usage-for-license-configuration-response
                    'make-list-usage-for-license-configuration-response))
 (common-lisp:defun make-list-usage-for-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     license-configuration-usage-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-usage-for-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-usage-list))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationUsageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-for-license-configuration-response))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass managed-resource-summary common-lisp:nil
                       ((association-count :initarg :association-count :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %managed-resource-summary-association-count :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %managed-resource-summary-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'managed-resource-summary 'make-managed-resource-summary))
 (common-lisp:defun make-managed-resource-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-count resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'managed-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-count))
      (common-lisp:list
       (common-lisp:cons "AssociationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-resource-summary-list ()
   '(trivial-types:proper-list managed-resource-summary))
 (common-lisp:defun |make-managed-resource-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-size100 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype max-size3string-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-max-size3string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %metadata-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %metadata-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metadata 'make-metadata))
 (common-lisp:defun make-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-list () '(trivial-types:proper-list metadata))
 (common-lisp:defun |make-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-entitlements-allowed-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-entitlements-allowed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-entitlements-allowed-exception
                    'no-entitlements-allowed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass options common-lisp:nil
                       ((activation-override-behavior :initarg
                         :activation-override-behavior :type
                         (common-lisp:or activation-override-behavior
                                         common-lisp:null)
                         :accessor %options-activation-override-behavior
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'options 'make-options))
 (common-lisp:defun make-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-override-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activation-override-behavior))
      (common-lisp:list
       (common-lisp:cons "ActivationOverrideBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-configuration common-lisp:nil
                       ((enable-integration :initarg :enable-integration :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %organization-configuration-enable-integration
                         :initform
                         (common-lisp:error
                          ":enable-integration is required"))))
 (common-lisp:export
  (common-lisp:list 'organization-configuration
                    'make-organization-configuration))
 (common-lisp:defun make-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-integration)
   (common-lisp:apply #'common-lisp:make-instance 'organization-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-integration))
      (common-lisp:list
       (common-lisp:cons "EnableIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-principal-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass product-information common-lisp:nil
                       ((product-information-filter-list :initarg
                         :product-information-filter-list :type
                         (common-lisp:or product-information-filter-list
                                         common-lisp:null)
                         :accessor
                         %product-information-product-information-filter-list
                         :initform
                         (common-lisp:error
                          ":product-information-filter-list is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %product-information-resource-type :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'product-information 'make-product-information))
 (common-lisp:defun make-product-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-information-filter-list
                     resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'product-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass product-information-filter common-lisp:nil
                       ((product-information-filter-comparator :initarg
                         :product-information-filter-comparator :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %product-information-filter-product-information-filter-comparator
                         :initform
                         (common-lisp:error
                          ":product-information-filter-comparator is required"))
                        (product-information-filter-value :initarg
                         :product-information-filter-value :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %product-information-filter-product-information-filter-value
                         :initform common-lisp:nil)
                        (product-information-filter-name :initarg
                         :product-information-filter-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %product-information-filter-product-information-filter-name
                         :initform
                         (common-lisp:error
                          ":product-information-filter-name is required"))))
 (common-lisp:export
  (common-lisp:list 'product-information-filter
                    'make-product-information-filter))
 (common-lisp:defun make-product-information-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-information-filter-comparator
                     product-information-filter-value
                     product-information-filter-name)
   (common-lisp:apply #'common-lisp:make-instance 'product-information-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-name))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-value))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-filter-comparator))
      (common-lisp:list
       (common-lisp:cons "ProductInformationFilterComparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          product-information-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-information-filter-list ()
   '(trivial-types:proper-list product-information-filter))
 (common-lisp:defun |make-product-information-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            product-information-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype product-information-list ()
   '(trivial-types:proper-list product-information))
 (common-lisp:defun |make-product-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisional-configuration common-lisp:nil
                       ((max-time-to-live-in-minutes :initarg
                         :max-time-to-live-in-minutes :type
                         (common-lisp:or box-integer common-lisp:null)
                         :accessor
                         %provisional-configuration-max-time-to-live-in-minutes
                         :initform
                         (common-lisp:error
                          ":max-time-to-live-in-minutes is required"))))
 (common-lisp:export
  (common-lisp:list 'provisional-configuration
                    'make-provisional-configuration))
 (common-lisp:defun make-provisional-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-time-to-live-in-minutes)
   (common-lisp:apply #'common-lisp:make-instance 'provisional-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-time-to-live-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaxTimeToLiveInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisional-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition rate-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rate-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-exceeded-exception
                    'rate-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass received-metadata common-lisp:nil
                       ((allowed-operations :initarg :allowed-operations :type
                         (common-lisp:or allowed-operation-list
                                         common-lisp:null)
                         :accessor %received-metadata-allowed-operations
                         :initform common-lisp:nil)
                        (received-status-reason :initarg
                         :received-status-reason :type
                         (common-lisp:or status-reason-message
                                         common-lisp:null)
                         :accessor %received-metadata-received-status-reason
                         :initform common-lisp:nil)
                        (received-status :initarg :received-status :type
                         (common-lisp:or received-status common-lisp:null)
                         :accessor %received-metadata-received-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'received-metadata 'make-received-metadata))
 (common-lisp:defun make-received-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-operations received-status-reason
                     received-status)
   (common-lisp:apply #'common-lisp:make-instance 'received-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input received-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input received-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-status))
      (common-lisp:list
       (common-lisp:cons "ReceivedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'received-status-reason))
      (common-lisp:list
       (common-lisp:cons "ReceivedStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-operations))
      (common-lisp:list
       (common-lisp:cons "AllowedOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input received-metadata))
   common-lisp:nil))
(common-lisp:deftype received-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition redirect-exception
     (license-manager-error)
     ((location :initarg :location :initform common-lisp:nil :reader
       redirect-exception-location)
      (message :initarg :message :initform common-lisp:nil :reader
       redirect-exception-message)))
 (common-lisp:export
  (common-lisp:list 'redirect-exception 'redirect-exception-location
                    'redirect-exception-message)))
(common-lisp:progn
 (common-lisp:defclass reject-grant-request common-lisp:nil
                       ((grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %reject-grant-request-grant-arn :initform
                         (common-lisp:error ":grant-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'reject-grant-request 'make-reject-grant-request))
 (common-lisp:defun make-reject-grant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'reject-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-grant-response common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reject-grant-response-version :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or grant-status common-lisp:null)
                         :accessor %reject-grant-response-status :initform
                         common-lisp:nil)
                        (grant-arn :initarg :grant-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %reject-grant-response-grant-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-grant-response 'make-reject-grant-response))
 (common-lisp:defun make-reject-grant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version status grant-arn)
   (common-lisp:apply #'common-lisp:make-instance 'reject-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-arn))
      (common-lisp:list
       (common-lisp:cons "GrantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-grant-response))
   common-lisp:nil))
(common-lisp:deftype renew-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass report-context common-lisp:nil
                       ((license-configuration-arns :initarg
                         :|licenseConfigurationArns| :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %report-context-license-configuration-arns :initform
                         (common-lisp:error
                          ":licenseconfigurationarns is required"))))
 (common-lisp:export (common-lisp:list 'report-context 'make-report-context))
 (common-lisp:defun make-report-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-configuration-arns)
   (common-lisp:apply #'common-lisp:make-instance 'report-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "licenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-frequency common-lisp:nil
                       ((period :initarg :|period| :type
                         (common-lisp:or report-frequency-type
                                         common-lisp:null)
                         :accessor %report-frequency-period :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %report-frequency-value :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'report-frequency 'make-report-frequency))
 (common-lisp:defun make-report-frequency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key period value)
   (common-lisp:apply #'common-lisp:make-instance 'report-frequency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-frequency))
   common-lisp:nil))
(common-lisp:deftype report-frequency-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass report-generator common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %report-generator-tags :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-create-time :initform
                         common-lisp:nil)
                        (s3location :initarg :s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %report-generator-s3location :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-description :initform
                         common-lisp:nil)
                        (report-creator-account :initarg
                         :report-creator-account :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-report-creator-account :initform
                         common-lisp:nil)
                        (last-report-generation-time :initarg
                         :last-report-generation-time :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-last-report-generation-time
                         :initform common-lisp:nil)
                        (last-run-failure-reason :initarg
                         :last-run-failure-reason :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-last-run-failure-reason :initform
                         common-lisp:nil)
                        (last-run-status :initarg :last-run-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-last-run-status :initform
                         common-lisp:nil)
                        (license-manager-report-generator-arn :initarg
                         :license-manager-report-generator-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %report-generator-license-manager-report-generator-arn
                         :initform common-lisp:nil)
                        (report-frequency :initarg :report-frequency :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor %report-generator-report-frequency :initform
                         common-lisp:nil)
                        (report-context :initarg :report-context :type
                         (common-lisp:or report-context common-lisp:null)
                         :accessor %report-generator-report-context :initform
                         common-lisp:nil)
                        (report-type :initarg :report-type :type
                         (common-lisp:or report-type-list common-lisp:null)
                         :accessor %report-generator-report-type :initform
                         common-lisp:nil)
                        (report-generator-name :initarg :report-generator-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %report-generator-report-generator-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'report-generator 'make-report-generator))
 (common-lisp:defun make-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags create-time s3location description
                     report-creator-account last-report-generation-time
                     last-run-failure-reason last-run-status
                     license-manager-report-generator-arn report-frequency
                     report-context report-type report-generator-name)
   (common-lisp:apply #'common-lisp:make-instance 'report-generator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "ReportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-status))
      (common-lisp:list
       (common-lisp:cons "LastRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-failure-reason))
      (common-lisp:list
       (common-lisp:cons "LastRunFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-report-generation-time))
      (common-lisp:list
       (common-lisp:cons "LastReportGenerationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-creator-account))
      (common-lisp:list
       (common-lisp:cons "ReportCreatorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-generator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype report-generator-list ()
   '(trivial-types:proper-list report-generator))
 (common-lisp:defun |make-report-generator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-generator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype report-generator-name () 'common-lisp:string)
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype report-type-list ()
   '(trivial-types:proper-list report-type))
 (common-lisp:defun |make-report-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-inventory common-lisp:nil
                       ((resource-owning-account-id :initarg
                         :resource-owning-account-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-inventory-resource-owning-account-id
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-inventory-platform-version :initform
                         common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-inventory-platform :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-inventory-resource-arn :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-inventory-resource-type :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-inventory-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-inventory 'make-resource-inventory))
 (common-lisp:defun make-resource-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-owning-account-id
                     platform-version platform resource-arn resource-type
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-inventory
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-inventory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-inventory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owning-account-id))
      (common-lisp:list
       (common-lisp:cons "ResourceOwningAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-inventory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-inventory-list ()
   '(trivial-types:proper-list resource-inventory))
 (common-lisp:defun |make-resource-inventory-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-inventory))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((key-prefix :initarg :|keyPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %s3location-key-prefix :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %s3location-bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-prefix bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition server-internal-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-internal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-internal-exception
                    'server-internal-exception-message)))
(common-lisp:deftype signed-token () 'common-lisp:string)
(common-lisp:deftype status-reason-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass token-data common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %token-data-status :initform common-lisp:nil)
                        (role-arns :initarg :role-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %token-data-role-arns :initform common-lisp:nil)
                        (token-properties :initarg :token-properties :type
                         (common-lisp:or max-size3string-list common-lisp:null)
                         :accessor %token-data-token-properties :initform
                         common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor %token-data-expiration-time :initform
                         common-lisp:nil)
                        (license-arn :initarg :license-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %token-data-license-arn :initform common-lisp:nil)
                        (token-type :initarg :token-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %token-data-token-type :initform common-lisp:nil)
                        (token-id :initarg :token-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %token-data-token-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'token-data 'make-token-data))
 (common-lisp:defun make-token-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status role-arns token-properties
                     expiration-time license-arn token-type token-id)
   (common-lisp:apply #'common-lisp:make-instance 'token-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input token-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input token-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-id))
      (common-lisp:list
       (common-lisp:cons "TokenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-type))
      (common-lisp:list
       (common-lisp:cons "TokenType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-properties))
      (common-lisp:list
       (common-lisp:cons "TokenProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arns))
      (common-lisp:list
       (common-lisp:cons "RoleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input token-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype token-list () '(trivial-types:proper-list token-data))
 (common-lisp:defun |make-token-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token-string () 'common-lisp:string)
(common-lisp:deftype token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-digital-signature-method-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-digital-signature-method-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-digital-signature-method-exception
                    'unsupported-digital-signature-method-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-configuration-request common-lisp:nil
                       ((disassociate-when-not-found :initarg
                         :disassociate-when-not-found :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %update-license-configuration-request-disassociate-when-not-found
                         :initform common-lisp:nil)
                        (product-information-list :initarg
                         :product-information-list :type
                         (common-lisp:or product-information-list
                                         common-lisp:null)
                         :accessor
                         %update-license-configuration-request-product-information-list
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-configuration-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-configuration-request-name :initform
                         common-lisp:nil)
                        (license-count-hard-limit :initarg
                         :license-count-hard-limit :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %update-license-configuration-request-license-count-hard-limit
                         :initform common-lisp:nil)
                        (license-count :initarg :license-count :type
                         (common-lisp:or box-long common-lisp:null) :accessor
                         %update-license-configuration-request-license-count
                         :initform common-lisp:nil)
                        (license-rules :initarg :license-rules :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %update-license-configuration-request-license-rules
                         :initform common-lisp:nil)
                        (license-configuration-status :initarg
                         :license-configuration-status :type
                         (common-lisp:or license-configuration-status
                                         common-lisp:null)
                         :accessor
                         %update-license-configuration-request-license-configuration-status
                         :initform common-lisp:nil)
                        (license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-configuration-request-license-configuration-arn
                         :initform
                         (common-lisp:error
                          ":license-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-license-configuration-request
                    'make-update-license-configuration-request))
 (common-lisp:defun make-update-license-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disassociate-when-not-found
                     product-information-list description name
                     license-count-hard-limit license-count license-rules
                     license-configuration-status license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-status))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-rules))
      (common-lisp:list
       (common-lisp:cons "LicenseRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-count))
      (common-lisp:list
       (common-lisp:cons "LicenseCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-count-hard-limit))
      (common-lisp:list
       (common-lisp:cons "LicenseCountHardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-information-list))
      (common-lisp:list
       (common-lisp:cons "ProductInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-when-not-found))
      (common-lisp:list
       (common-lisp:cons "DisassociateWhenNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-license-configuration-response
                    'make-update-license-configuration-response))
 (common-lisp:defun make-update-license-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-manager-report-generator-request
                       common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-manager-report-generator-request-description
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-license-manager-report-generator-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (report-frequency :initarg :report-frequency :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         %update-license-manager-report-generator-request-report-frequency
                         :initform
                         (common-lisp:error ":report-frequency is required"))
                        (report-context :initarg :report-context :type
                         (common-lisp:or report-context common-lisp:null)
                         :accessor
                         %update-license-manager-report-generator-request-report-context
                         :initform
                         (common-lisp:error ":report-context is required"))
                        (type :initarg :type :type
                         (common-lisp:or report-type-list common-lisp:null)
                         :accessor
                         %update-license-manager-report-generator-request-type
                         :initform (common-lisp:error ":type is required"))
                        (report-generator-name :initarg :report-generator-name
                         :type
                         (common-lisp:or report-generator-name
                                         common-lisp:null)
                         :accessor
                         %update-license-manager-report-generator-request-report-generator-name
                         :initform
                         (common-lisp:error
                          ":report-generator-name is required"))
                        (license-manager-report-generator-arn :initarg
                         :license-manager-report-generator-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-manager-report-generator-request-license-manager-report-generator-arn
                         :initform
                         (common-lisp:error
                          ":license-manager-report-generator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-license-manager-report-generator-request
                    'make-update-license-manager-report-generator-request))
 (common-lisp:defun make-update-license-manager-report-generator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description client-token report-frequency
                     report-context type report-generator-name
                     license-manager-report-generator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-manager-report-generator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-manager-report-generator-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseManagerReportGeneratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-generator-name))
      (common-lisp:list
       (common-lisp:cons "ReportGeneratorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-context))
      (common-lisp:list
       (common-lisp:cons "ReportContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "ReportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-manager-report-generator-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-license-manager-report-generator-response
                    'make-update-license-manager-report-generator-response))
 (common-lisp:defun make-update-license-manager-report-generator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-manager-report-generator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-manager-report-generator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-specifications-for-resource-request
                       common-lisp:nil
                       ((remove-license-specifications :initarg
                         :remove-license-specifications :type
                         (common-lisp:or license-specifications
                                         common-lisp:null)
                         :accessor
                         %update-license-specifications-for-resource-request-remove-license-specifications
                         :initform common-lisp:nil)
                        (add-license-specifications :initarg
                         :add-license-specifications :type
                         (common-lisp:or license-specifications
                                         common-lisp:null)
                         :accessor
                         %update-license-specifications-for-resource-request-add-license-specifications
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-license-specifications-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-license-specifications-for-resource-request
                    'make-update-license-specifications-for-resource-request))
 (common-lisp:defun make-update-license-specifications-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-license-specifications
                     add-license-specifications resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-specifications-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-license-specifications))
      (common-lisp:list
       (common-lisp:cons "AddLicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-license-specifications))
      (common-lisp:list
       (common-lisp:cons "RemoveLicenseSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-license-specifications-for-resource-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-license-specifications-for-resource-response
                    'make-update-license-specifications-for-resource-response))
 (common-lisp:defun make-update-license-specifications-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-license-specifications-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-license-specifications-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-settings-request common-lisp:nil
                       ((enable-cross-accounts-discovery :initarg
                         :enable-cross-accounts-discovery :type
                         (common-lisp:or box-boolean common-lisp:null)
                         :accessor
                         %update-service-settings-request-enable-cross-accounts-discovery
                         :initform common-lisp:nil)
                        (organization-configuration :initarg
                         :organization-configuration :type
                         (common-lisp:or organization-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-settings-request-organization-configuration
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-settings-request-sns-topic-arn
                         :initform common-lisp:nil)
                        (s3bucket-arn :initarg :s3bucket-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-settings-request-s3bucket-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-service-settings-request
                    'make-update-service-settings-request))
 (common-lisp:defun make-update-service-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-cross-accounts-discovery
                     organization-configuration sns-topic-arn s3bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-configuration))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cross-accounts-discovery))
      (common-lisp:list
       (common-lisp:cons "EnableCrossAccountsDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-settings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-service-settings-response
                    'make-update-service-settings-response))
 (common-lisp:defun make-update-service-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-settings-response))
   common-lisp:nil))
(common-lisp:deftype usage-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (license-manager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn)
   (common-lisp:declare (common-lisp:ignorable grant-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "AcceptGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-grant))
(common-lisp:progn
 (common-lisp:defun check-in-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-consumption-token beneficiary)
   (common-lisp:declare
    (common-lisp:ignorable license-consumption-token beneficiary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-in-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CheckInLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-in-license))
(common-lisp:progn
 (common-lisp:defun checkout-borrow-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn entitlements
                     digital-signature-method node-id checkout-metadata
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-arn entitlements digital-signature-method
     node-id checkout-metadata client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-checkout-borrow-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CheckoutBorrowLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'checkout-borrow-license))
(common-lisp:progn
 (common-lisp:defun checkout-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-sku checkout-type key-fingerprint
                     entitlements client-token beneficiary node-id)
   (common-lisp:declare
    (common-lisp:ignorable product-sku checkout-type key-fingerprint
     entitlements client-token beneficiary node-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-checkout-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CheckoutLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'checkout-license))
(common-lisp:progn
 (common-lisp:defun create-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token grant-name license-arn
                     principals home-region allowed-operations)
   (common-lisp:declare
    (common-lisp:ignorable client-token grant-name license-arn principals
     home-region allowed-operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-grant))
(common-lisp:progn
 (common-lisp:defun create-grant-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token grant-arn grant-name
                     allowed-operations status status-reason source-version
                     options)
   (common-lisp:declare
    (common-lisp:ignorable client-token grant-arn grant-name allowed-operations
     status status-reason source-version options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateGrantVersion" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-grant-version))
(common-lisp:progn
 (common-lisp:defun create-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-name product-name product-sku
                     issuer home-region validity entitlements beneficiary
                     consumption-configuration license-metadata client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-name product-name product-sku issuer
     home-region validity entitlements beneficiary consumption-configuration
     license-metadata client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license))
(common-lisp:progn
 (common-lisp:defun create-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description license-counting-type
                     license-count license-count-hard-limit license-rules tags
                     disassociate-when-not-found product-information-list)
   (common-lisp:declare
    (common-lisp:ignorable name description license-counting-type license-count
     license-count-hard-limit license-rules tags disassociate-when-not-found
     product-information-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-configuration))
(common-lisp:progn
 (common-lisp:defun create-license-conversion-task-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn source-license-context
                     destination-license-context)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn source-license-context
     destination-license-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-conversion-task-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLicenseConversionTaskForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-conversion-task-for-resource))
(common-lisp:progn
 (common-lisp:defun create-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-generator-name type report-context
                     report-frequency client-token description tags)
   (common-lisp:declare
    (common-lisp:ignorable report-generator-name type report-context
     report-frequency client-token description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun create-license-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn license-name product-name
                     issuer home-region validity license-metadata entitlements
                     consumption-configuration status client-token
                     source-version)
   (common-lisp:declare
    (common-lisp:ignorable license-arn license-name product-name issuer
     home-region validity license-metadata entitlements
     consumption-configuration status client-token source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-license-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLicenseVersion" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-license-version))
(common-lisp:progn
 (common-lisp:defun create-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn role-arns expiration-in-days
                     token-properties client-token)
   (common-lisp:declare
    (common-lisp:ignorable license-arn role-arns expiration-in-days
     token-properties client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-token))
(common-lisp:progn
 (common-lisp:defun delete-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn status-reason version)
   (common-lisp:declare
    (common-lisp:ignorable grant-arn status-reason version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-grant))
(common-lisp:progn
 (common-lisp:defun delete-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn source-version)
   (common-lisp:declare (common-lisp:ignorable license-arn source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license))
(common-lisp:progn
 (common-lisp:defun delete-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable license-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license-configuration))
(common-lisp:progn
 (common-lisp:defun delete-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun delete-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-id)
   (common-lisp:declare (common-lisp:ignorable token-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-token))
(common-lisp:progn
 (common-lisp:defun extend-license-consumption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-consumption-token dry-run)
   (common-lisp:declare
    (common-lisp:ignorable license-consumption-token dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-extend-license-consumption-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ExtendLicenseConsumption" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'extend-license-consumption))
(common-lisp:progn
 (common-lisp:defun get-access-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token token-properties)
   (common-lisp:declare (common-lisp:ignorable token token-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetAccessToken" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-token))
(common-lisp:progn
 (common-lisp:defun get-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn version)
   (common-lisp:declare (common-lisp:ignorable grant-arn version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-grant))
(common-lisp:progn
 (common-lisp:defun get-license
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn version)
   (common-lisp:declare (common-lisp:ignorable license-arn version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-license-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetLicense" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license))
(common-lisp:progn
 (common-lisp:defun get-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable license-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-configuration))
(common-lisp:progn
 (common-lisp:defun get-license-conversion-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-conversion-task-id)
   (common-lisp:declare (common-lisp:ignorable license-conversion-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-conversion-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetLicenseConversionTask" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-conversion-task))
(common-lisp:progn
 (common-lisp:defun get-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun get-license-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn)
   (common-lisp:declare (common-lisp:ignorable license-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-license-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetLicenseUsage" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-license-usage))
(common-lisp:progn
 (common-lisp:defun get-service-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'license-manager-request :method "POST" :path
                                "/" :protocol :json :operation
                                "GetServiceSettings" :params
                                `(("Action" ,@"GetServiceSettings")
                                  ("Version" ,@"2018-08-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-service-settings))
(common-lisp:progn
 (common-lisp:defun list-associations-for-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-associations-for-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListAssociationsForLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associations-for-license-configuration))
(common-lisp:progn
 (common-lisp:defun list-distributed-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable grant-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-distributed-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListDistributedGrants" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributed-grants))
(common-lisp:progn
 (common-lisp:defun list-failures-for-license-configuration-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-failures-for-license-configuration-operations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListFailuresForLicenseConfigurationOperations"
        "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-failures-for-license-configuration-operations))
(common-lisp:progn
 (common-lisp:defun list-license-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arns max-results
                     next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arns max-results next-token
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenseConfigurations" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-configurations))
(common-lisp:progn
 (common-lisp:defun list-license-conversion-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-conversion-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenseConversionTasks" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-conversion-tasks))
(common-lisp:progn
 (common-lisp:defun list-license-manager-report-generators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-manager-report-generators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenseManagerReportGenerators" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-manager-report-generators))
(common-lisp:progn
 (common-lisp:defun list-license-specifications-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-license-specifications-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenseSpecificationsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-specifications-for-resource))
(common-lisp:progn
 (common-lisp:defun list-license-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-license-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenseVersions" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-license-versions))
(common-lisp:progn
 (common-lisp:defun list-licenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-licenses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLicenses" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-licenses))
(common-lisp:progn
 (common-lisp:defun list-received-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable grant-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-received-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListReceivedGrants" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-grants))
(common-lisp:progn
 (common-lisp:defun list-received-grants-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arn filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arn filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-received-grants-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListReceivedGrantsForOrganization" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-grants-for-organization))
(common-lisp:progn
 (common-lisp:defun list-received-licenses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-arns filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable license-arns filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-received-licenses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListReceivedLicenses" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-licenses))
(common-lisp:progn
 (common-lisp:defun list-received-licenses-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-received-licenses-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListReceivedLicensesForOrganization" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-received-licenses-for-organization))
(common-lisp:progn
 (common-lisp:defun list-resource-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-inventory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListResourceInventory" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-inventory))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tokens
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-ids filters next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable token-ids filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tokens-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTokens" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tokens))
(common-lisp:progn
 (common-lisp:defun list-usage-for-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn max-results
                     next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn max-results next-token
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-usage-for-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListUsageForLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-usage-for-license-configuration))
(common-lisp:progn
 (common-lisp:defun reject-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-arn)
   (common-lisp:declare (common-lisp:ignorable grant-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "RejectGrant" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-grant))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-license-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-configuration-arn
                     license-configuration-status license-rules license-count
                     license-count-hard-limit name description
                     product-information-list disassociate-when-not-found)
   (common-lisp:declare
    (common-lisp:ignorable license-configuration-arn
     license-configuration-status license-rules license-count
     license-count-hard-limit name description product-information-list
     disassociate-when-not-found))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateLicenseConfiguration" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-configuration))
(common-lisp:progn
 (common-lisp:defun update-license-manager-report-generator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key license-manager-report-generator-arn
                     report-generator-name type report-context report-frequency
                     client-token description)
   (common-lisp:declare
    (common-lisp:ignorable license-manager-report-generator-arn
     report-generator-name type report-context report-frequency client-token
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-manager-report-generator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateLicenseManagerReportGenerator" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-manager-report-generator))
(common-lisp:progn
 (common-lisp:defun update-license-specifications-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn add-license-specifications
                     remove-license-specifications)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn add-license-specifications
     remove-license-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-license-specifications-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateLicenseSpecificationsForResource" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-license-specifications-for-resource))
(common-lisp:progn
 (common-lisp:defun update-service-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3bucket-arn sns-topic-arn
                     organization-configuration
                     enable-cross-accounts-discovery)
   (common-lisp:declare
    (common-lisp:ignorable s3bucket-arn sns-topic-arn
     organization-configuration enable-cross-accounts-discovery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'license-manager-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateServiceSettings" "2018-08-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-settings))
