;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codepipeline/api
  (:use)
  (:nicknames #:aws/codepipeline)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codepipeline/api)
(common-lisp:progn
 (common-lisp:defclass codepipeline-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codepipeline"))
 (common-lisp:export 'codepipeline-request))
(common-lisp:progn
 (common-lisp:define-condition codepipeline-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codepipeline-error))
(common-lisp:defvar *error-map*
  '(("ActionNotFoundException" . action-not-found-exception)
    ("ActionTypeAlreadyExistsException" . action-type-already-exists-exception)
    ("ActionTypeNotFoundException" . action-type-not-found-exception)
    ("ApprovalAlreadyCompletedException"
     . approval-already-completed-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("DuplicatedStopRequestException" . duplicated-stop-request-exception)
    ("InvalidActionDeclarationException"
     . invalid-action-declaration-exception)
    ("InvalidApprovalTokenException" . invalid-approval-token-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidBlockerDeclarationException"
     . invalid-blocker-declaration-exception)
    ("InvalidClientTokenException" . invalid-client-token-exception)
    ("InvalidJobException" . invalid-job-exception)
    ("InvalidJobStateException" . invalid-job-state-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidNonceException" . invalid-nonce-exception)
    ("InvalidStageDeclarationException" . invalid-stage-declaration-exception)
    ("InvalidStructureException" . invalid-structure-exception)
    ("InvalidTagsException" . invalid-tags-exception)
    ("InvalidWebhookAuthenticationParametersException"
     . invalid-webhook-authentication-parameters-exception)
    ("InvalidWebhookFilterPatternException"
     . invalid-webhook-filter-pattern-exception)
    ("JobNotFoundException" . job-not-found-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotLatestPipelineExecutionException"
     . not-latest-pipeline-execution-exception)
    ("OutputVariablesSizeExceededException"
     . output-variables-size-exceeded-exception)
    ("PipelineExecutionNotFoundException"
     . pipeline-execution-not-found-exception)
    ("PipelineExecutionNotStoppableException"
     . pipeline-execution-not-stoppable-exception)
    ("PipelineNameInUseException" . pipeline-name-in-use-exception)
    ("PipelineNotFoundException" . pipeline-not-found-exception)
    ("PipelineVersionNotFoundException" . pipeline-version-not-found-exception)
    ("RequestFailedException" . request-failed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("StageNotFoundException" . stage-not-found-exception)
    ("StageNotRetryableException" . stage-not-retryable-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)
    ("WebhookNotFoundException" . webhook-not-found-exception)))
(common-lisp:deftype awsregion-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (awssession-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-awssession-credentials-"))
   (access-key-id (common-lisp:error ":accesskeyid is required") :type
    (common-lisp:or access-key-id common-lisp:null))
   (secret-access-key (common-lisp:error ":secretaccesskey is required") :type
    (common-lisp:or secret-access-key common-lisp:null))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or session-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'awssession-credentials 'make-awssession-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awssession-credentials))
   common-lisp:nil))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-acknowledge-job-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (nonce (common-lisp:error ":nonce is required") :type
    (common-lisp:or nonce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-input 'make-acknowledge-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-acknowledge-job-output-"))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-output 'make-acknowledge-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-third-party-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-acknowledge-third-party-job-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (nonce (common-lisp:error ":nonce is required") :type
    (common-lisp:or nonce common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-input
                    'make-acknowledge-third-party-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-third-party-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-acknowledge-third-party-job-output-"))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-output
                    'make-acknowledge-third-party-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acknowledge-third-party-job-output))
   common-lisp:nil))
(common-lisp:deftype action-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-configuration-"))
   (configuration common-lisp:nil :type
    (common-lisp:or action-configuration-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-configuration 'make-action-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-configuration))
   common-lisp:nil))
(common-lisp:deftype action-configuration-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-configuration-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-action-configuration-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (action-configuration-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-configuration-property-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or action-configuration-key common-lisp:null))
   (required (common-lisp:error ":required is required") :type
    (common-lisp:or boolean common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or boolean common-lisp:null))
   (secret (common-lisp:error ":secret is required") :type
    (common-lisp:or boolean common-lisp:null))
   (queryable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or action-configuration-property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-configuration-property
                    'make-action-configuration-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret))
      (common-lisp:list
       (common-lisp:cons "secret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queryable))
      (common-lisp:list
       (common-lisp:cons "queryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-configuration-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-configuration-property-list ()
   '(trivial-types:proper-list action-configuration-property))
 (common-lisp:defun |make-action-configuration-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            action-configuration-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-configuration-property-type () 'common-lisp:string)
(common-lisp:deftype action-configuration-queryable-value ()
  'common-lisp:string)
(common-lisp:deftype action-configuration-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-context-"))
   (name common-lisp:nil :type (common-lisp:or action-name common-lisp:null))
   (action-execution-id common-lisp:nil :type
    (common-lisp:or action-execution-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-context 'make-action-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-declaration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or action-name common-lisp:null))
   (action-type-id (common-lisp:error ":actiontypeid is required") :type
    (common-lisp:or action-type-id common-lisp:null))
   (run-order common-lisp:nil :type
    (common-lisp:or action-run-order common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or action-configuration-map common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or output-artifact-list common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or input-artifact-list common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or awsregion-name common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or action-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-declaration 'make-action-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-order))
      (common-lisp:list
       (common-lisp:cons "runOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-"))
   (action-execution-id common-lisp:nil :type
    (common-lisp:or action-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-execution-status common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or execution-summary common-lisp:null))
   (last-status-change common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (token common-lisp:nil :type
    (common-lisp:or action-execution-token common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or last-updated-by common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (external-execution-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (percent-complete common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution 'make-action-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "lastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-url))
      (common-lisp:list
       (common-lisp:cons "externalExecutionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-complete))
      (common-lisp:list
       (common-lisp:cons "percentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-detail-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (action-execution-id common-lisp:nil :type
    (common-lisp:or action-execution-id common-lisp:null))
   (pipeline-version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (stage-name common-lisp:nil :type
    (common-lisp:or stage-name common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or action-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-execution-status common-lisp:null))
   (input common-lisp:nil :type
    (common-lisp:or action-execution-input common-lisp:null))
   (output common-lisp:nil :type
    (common-lisp:or action-execution-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution-detail 'make-action-execution-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-execution-id))
      (common-lisp:list
       (common-lisp:cons "actionExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-execution-detail-list ()
   '(trivial-types:proper-list action-execution-detail))
 (common-lisp:defun |make-action-execution-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-execution-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-filter-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution-filter 'make-action-execution-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-filter))
   common-lisp:nil))
(common-lisp:deftype action-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-input-"))
   (action-type-id common-lisp:nil :type
    (common-lisp:or action-type-id common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or action-configuration-map common-lisp:null))
   (resolved-configuration common-lisp:nil :type
    (common-lisp:or resolved-action-configuration-map common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or awsregion-name common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or artifact-detail-list common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or action-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution-input 'make-action-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolved-configuration))
      (common-lisp:list
       (common-lisp:cons "resolvedConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-output-"))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or artifact-detail-list common-lisp:null))
   (execution-result common-lisp:nil :type
    (common-lisp:or action-execution-result common-lisp:null))
   (output-variables common-lisp:nil :type
    (common-lisp:or output-variables-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution-output 'make-action-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-result))
      (common-lisp:list
       (common-lisp:cons "executionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-execution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-execution-result-"))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or external-execution-id common-lisp:null))
   (external-execution-summary common-lisp:nil :type
    (common-lisp:or external-execution-summary common-lisp:null))
   (external-execution-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution-result 'make-action-execution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-summary))
      (common-lisp:list
       (common-lisp:cons "externalExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-url))
      (common-lisp:list
       (common-lisp:cons "externalExecutionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-execution-result))
   common-lisp:nil))
(common-lisp:deftype action-execution-status () 'common-lisp:string)
(common-lisp:deftype action-execution-token () 'common-lisp:string)
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:deftype action-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition action-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-not-found-exception)))
(common-lisp:deftype action-owner () 'common-lisp:string)
(common-lisp:deftype action-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-revision-"))
   (revision-id (common-lisp:error ":revisionid is required") :type
    (common-lisp:or revision common-lisp:null))
   (revision-change-id (common-lisp:error ":revisionchangeid is required")
    :type (common-lisp:or revision-change-identifier common-lisp:null))
   (created (common-lisp:error ":created is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-revision 'make-action-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-change-id))
      (common-lisp:list
       (common-lisp:cons "revisionChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-revision))
   common-lisp:nil))
(common-lisp:deftype action-run-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (action-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-state-"))
   (action-name common-lisp:nil :type
    (common-lisp:or action-name common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or action-revision common-lisp:null))
   (latest-execution common-lisp:nil :type
    (common-lisp:or action-execution common-lisp:null))
   (entity-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (revision-url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-state 'make-action-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-execution))
      (common-lisp:list
       (common-lisp:cons "latestExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url))
      (common-lisp:list
       (common-lisp:cons "entityUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-state-list ()
   '(trivial-types:proper-list action-state))
 (common-lisp:defun |make-action-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or action-type-id common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or action-type-settings common-lisp:null))
   (action-configuration-properties common-lisp:nil :type
    (common-lisp:or action-configuration-property-list common-lisp:null))
   (input-artifact-details
    (common-lisp:error ":inputartifactdetails is required") :type
    (common-lisp:or artifact-details common-lisp:null))
   (output-artifact-details
    (common-lisp:error ":outputartifactdetails is required") :type
    (common-lisp:or artifact-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-type 'make-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration-properties))
      (common-lisp:list
       (common-lisp:cons "actionConfigurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition action-type-already-exists-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-type-already-exists-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-artifact-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-artifact-details-"))
   (minimum-count (common-lisp:error ":minimumcount is required") :type
    (common-lisp:or minimum-action-type-artifact-count common-lisp:null))
   (maximum-count (common-lisp:error ":maximumcount is required") :type
    (common-lisp:or maximum-action-type-artifact-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-artifact-details
                    'make-action-type-artifact-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-count))
      (common-lisp:list
       (common-lisp:cons "minimumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-count))
      (common-lisp:list
       (common-lisp:cons "maximumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-artifact-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-declaration-"))
   (description common-lisp:nil :type
    (common-lisp:or action-type-description common-lisp:null))
   (executor (common-lisp:error ":executor is required") :type
    (common-lisp:or action-type-executor common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or action-type-identifier common-lisp:null))
   (input-artifact-details
    (common-lisp:error ":inputartifactdetails is required") :type
    (common-lisp:or action-type-artifact-details common-lisp:null))
   (output-artifact-details
    (common-lisp:error ":outputartifactdetails is required") :type
    (common-lisp:or action-type-artifact-details common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or action-type-permissions common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or action-type-properties common-lisp:null))
   (urls common-lisp:nil :type
    (common-lisp:or action-type-urls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-declaration 'make-action-type-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executor))
      (common-lisp:list
       (common-lisp:cons "executor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urls))
      (common-lisp:list
       (common-lisp:cons "urls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-declaration))
   common-lisp:nil))
(common-lisp:deftype action-type-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-executor (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-executor-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or executor-configuration common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or executor-type common-lisp:null))
   (policy-statements-template common-lisp:nil :type
    (common-lisp:or policy-statements-template common-lisp:null))
   (job-timeout common-lisp:nil :type
    (common-lisp:or job-timeout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-executor 'make-action-type-executor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-executor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-executor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-statements-template))
      (common-lisp:list
       (common-lisp:cons "policyStatementsTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-timeout))
      (common-lisp:list
       (common-lisp:cons "jobTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-executor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-id-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or action-category common-lisp:null))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or action-owner common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or action-provider common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-type-id 'make-action-type-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-identifier-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or action-category common-lisp:null))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or action-type-owner common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or action-provider common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-identifier 'make-action-type-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-type-list ()
   '(trivial-types:proper-list action-type))
 (common-lisp:defun |make-action-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition action-type-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'action-type-not-found-exception)))
(common-lisp:deftype action-type-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-permissions-"))
   (allowed-accounts (common-lisp:error ":allowedaccounts is required") :type
    (common-lisp:or allowed-accounts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-permissions 'make-action-type-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-accounts))
      (common-lisp:list
       (common-lisp:cons "allowedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-type-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-type-properties ()
   '(trivial-types:proper-list action-type-property))
 (common-lisp:defun |make-action-type-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-property-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or action-configuration-key common-lisp:null))
   (optional (common-lisp:error ":optional is required") :type
    (common-lisp:or boolean common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or boolean common-lisp:null))
   (no-echo (common-lisp:error ":noecho is required") :type
    (common-lisp:or boolean common-lisp:null))
   (queryable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or property-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-property 'make-action-type-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "noEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queryable))
      (common-lisp:list
       (common-lisp:cons "queryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-settings-"))
   (third-party-configuration-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (entity-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (execution-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (revision-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-settings 'make-action-type-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'third-party-configuration-url))
      (common-lisp:list
       (common-lisp:cons "thirdPartyConfigurationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url-template))
      (common-lisp:list
       (common-lisp:cons "entityUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-url-template))
      (common-lisp:list
       (common-lisp:cons "executionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-url-template))
      (common-lisp:list
       (common-lisp:cons "revisionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-urls (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-type-urls-"))
   (configuration-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (entity-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (execution-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (revision-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-urls 'make-action-type-urls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-type-urls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-type-urls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-url))
      (common-lisp:list
       (common-lisp:cons "configurationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-url-template))
      (common-lisp:list
       (common-lisp:cons "entityUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-url-template))
      (common-lisp:list
       (common-lisp:cons "executionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-url-template))
      (common-lisp:list
       (common-lisp:cons "revisionUrlTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-type-urls))
   common-lisp:nil))
(common-lisp:deftype allowed-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-accounts ()
   '(trivial-types:proper-list allowed-account))
 (common-lisp:defun |make-allowed-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition approval-already-completed-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'approval-already-completed-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (approval-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-approval-result-"))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or approval-summary common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or approval-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'approval-result 'make-approval-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input approval-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input approval-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input approval-result))
   common-lisp:nil))
(common-lisp:deftype approval-status () 'common-lisp:string)
(common-lisp:deftype approval-summary () 'common-lisp:string)
(common-lisp:deftype approval-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifact (:copier common-lisp:nil) (:conc-name "struct-shape-artifact-"))
   (name common-lisp:nil :type (common-lisp:or artifact-name common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or artifact-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-detail-"))
   (name common-lisp:nil :type (common-lisp:or artifact-name common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact-detail 'make-artifact-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-detail-list ()
   '(trivial-types:proper-list artifact-detail))
 (common-lisp:defun |make-artifact-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-details-"))
   (minimum-count (common-lisp:error ":minimumcount is required") :type
    (common-lisp:or minimum-artifact-count common-lisp:null))
   (maximum-count (common-lisp:error ":maximumcount is required") :type
    (common-lisp:or maximum-artifact-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-details 'make-artifact-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-count))
      (common-lisp:list
       (common-lisp:cons "minimumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-count))
      (common-lisp:list
       (common-lisp:cons "maximumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-list () '(trivial-types:proper-list artifact))
 (common-lisp:defun |make-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-location-"))
   (type common-lisp:nil :type
    (common-lisp:or artifact-location-type common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3artifact-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-location 'make-artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-location))
   common-lisp:nil))
(common-lisp:deftype artifact-location-type () 'common-lisp:string)
(common-lisp:deftype artifact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-revision-"))
   (name common-lisp:nil :type (common-lisp:or artifact-name common-lisp:null))
   (revision-id common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (revision-change-identifier common-lisp:nil :type
    (common-lisp:or revision-change-identifier common-lisp:null))
   (revision-summary common-lisp:nil :type
    (common-lisp:or revision-summary common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (revision-url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-revision 'make-artifact-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revision-change-identifier))
      (common-lisp:list
       (common-lisp:cons "revisionChangeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-revision-list ()
   '(trivial-types:proper-list artifact-revision))
 (common-lisp:defun |make-artifact-revision-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-store (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-store-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or artifact-store-type common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or artifact-store-location common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact-store 'make-artifact-store))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-store))
   common-lisp:nil))
(common-lisp:deftype artifact-store-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype artifact-store-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-artifact-store-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype artifact-store-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blocker-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-blocker-declaration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or blocker-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or blocker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blocker-declaration 'make-blocker-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blocker-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blocker-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blocker-declaration))
   common-lisp:nil))
(common-lisp:deftype blocker-name () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype continuation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-action-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-action-type-input-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or action-category common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or action-provider common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or action-type-settings common-lisp:null))
   (configuration-properties common-lisp:nil :type
    (common-lisp:or action-configuration-property-list common-lisp:null))
   (input-artifact-details
    (common-lisp:error ":inputartifactdetails is required") :type
    (common-lisp:or artifact-details common-lisp:null))
   (output-artifact-details
    (common-lisp:error ":outputartifactdetails is required") :type
    (common-lisp:or artifact-details common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-input
                    'make-create-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-properties))
      (common-lisp:list
       (common-lisp:cons "configurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifact-details))
      (common-lisp:list
       (common-lisp:cons "inputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifact-details))
      (common-lisp:list
       (common-lisp:cons "outputArtifactDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-action-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-action-type-output-"))
   (action-type (common-lisp:error ":actiontype is required") :type
    (common-lisp:or action-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-output
                    'make-create-custom-action-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-action-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pipeline-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pipeline-input-"))
   (pipeline (common-lisp:error ":pipeline is required") :type
    (common-lisp:or pipeline-declaration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-input 'make-create-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pipeline-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pipeline-output-"))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-output 'make-create-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (current-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-revision-"))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision common-lisp:null))
   (change-identifier (common-lisp:error ":changeidentifier is required") :type
    (common-lisp:or revision-change-identifier common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or time common-lisp:null))
   (revision-summary common-lisp:nil :type
    (common-lisp:or revision-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-revision 'make-current-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-identifier))
      (common-lisp:list
       (common-lisp:cons "changeIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-action-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-action-type-input-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or action-category common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or action-provider common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-action-type-input
                    'make-delete-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pipeline-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pipeline-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-input 'make-delete-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-webhook-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-webhook-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or webhook-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-input 'make-delete-webhook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-webhook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-webhook-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-webhook-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-output 'make-delete-webhook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-webhook-with-third-party-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-webhook-with-third-party-input-"))
   (webhook-name common-lisp:nil :type
    (common-lisp:or webhook-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-webhook-with-third-party-input
                    'make-deregister-webhook-with-third-party-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-name))
      (common-lisp:list
       (common-lisp:cons "webhookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-webhook-with-third-party-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-webhook-with-third-party-output-")))
 (common-lisp:export
  (common-lisp:list 'deregister-webhook-with-third-party-output
                    'make-deregister-webhook-with-third-party-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-webhook-with-third-party-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-stage-transition-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-stage-transition-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage-name (common-lisp:error ":stagename is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (transition-type (common-lisp:error ":transitiontype is required") :type
    (common-lisp:or stage-transition-type common-lisp:null))
   (reason (common-lisp:error ":reason is required") :type
    (common-lisp:or disabled-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-stage-transition-input
                    'make-disable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition-type))
      (common-lisp:list
       (common-lisp:cons "transitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-stage-transition-input))
   common-lisp:nil))
(common-lisp:deftype disabled-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicated-stop-request-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicated-stop-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicated-stop-request-exception
                    'duplicated-stop-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-stage-transition-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-stage-transition-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage-name (common-lisp:error ":stagename is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (transition-type (common-lisp:error ":transitiontype is required") :type
    (common-lisp:or stage-transition-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-stage-transition-input
                    'make-enable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition-type))
      (common-lisp:list
       (common-lisp:cons "transitionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-stage-transition-input))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-key-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or encryption-key-id common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or encryption-key-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'encryption-key 'make-encryption-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-key))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-details-"))
   (code common-lisp:nil :type (common-lisp:or code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-details-"))
   (summary common-lisp:nil :type
    (common-lisp:or execution-summary common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (percent-complete common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-details 'make-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-complete))
      (common-lisp:list
       (common-lisp:cons "percentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-details))
   common-lisp:nil))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:deftype execution-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-trigger (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-trigger-"))
   (trigger-type common-lisp:nil :type
    (common-lisp:or trigger-type common-lisp:null))
   (trigger-detail common-lisp:nil :type
    (common-lisp:or trigger-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-trigger 'make-execution-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "triggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-detail))
      (common-lisp:list
       (common-lisp:cons "triggerDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (executor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-executor-configuration-"))
   (lambda-executor-configuration common-lisp:nil :type
    (common-lisp:or lambda-executor-configuration common-lisp:null))
   (job-worker-executor-configuration common-lisp:nil :type
    (common-lisp:or job-worker-executor-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'executor-configuration 'make-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-executor-configuration))
      (common-lisp:list
       (common-lisp:cons "lambdaExecutorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-worker-executor-configuration))
      (common-lisp:list
       (common-lisp:cons "jobWorkerExecutorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          executor-configuration))
   common-lisp:nil))
(common-lisp:deftype executor-type () 'common-lisp:string)
(common-lisp:deftype external-execution-id () 'common-lisp:string)
(common-lisp:deftype external-execution-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (failure-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-failure-details-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or failure-type common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or message common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-execution-id))
      (common-lisp:list
       (common-lisp:cons "externalExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-details))
   common-lisp:nil))
(common-lisp:deftype failure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-action-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-action-type-input-"))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or action-category common-lisp:null))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or action-type-owner common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or action-provider common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-action-type-input 'make-get-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-action-type-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-action-type-output-"))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-action-type-output 'make-get-action-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-action-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-details-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-details-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-details-input 'make-get-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-details-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-details-output-"))
   (job-details common-lisp:nil :type
    (common-lisp:or job-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-details-output 'make-get-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-execution-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-execution-id
    (common-lisp:error ":pipelineexecutionid is required") :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-input
                    'make-get-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-execution-output-"))
   (pipeline-execution common-lisp:nil :type
    (common-lisp:or pipeline-execution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-output
                    'make-get-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-execution))
      (common-lisp:list
       (common-lisp:cons "pipelineExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-input 'make-get-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-output-"))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or pipeline-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-output 'make-get-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-state-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-state-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-input 'make-get-pipeline-state-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-state-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-pipeline-state-output-"))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (stage-states common-lisp:nil :type
    (common-lisp:or stage-state-list common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-output
                    'make-get-pipeline-state-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-states))
      (common-lisp:list
       (common-lisp:cons "stageStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pipeline-state-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-job-details-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-third-party-job-details-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-input
                    'make-get-third-party-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-job-details-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-third-party-job-details-output-"))
   (job-details common-lisp:nil :type
    (common-lisp:or third-party-job-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-output
                    'make-get-third-party-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-third-party-job-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-artifact (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-artifact-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or artifact-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-artifact 'make-input-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-artifact-list ()
   '(trivial-types:proper-list input-artifact))
 (common-lisp:defun |make-input-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-action-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-action-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-approval-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-approval-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-blocker-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-blocker-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-client-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-client-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-job-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-job-state-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-job-state-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-nonce-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-nonce-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-stage-declaration-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-stage-declaration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-structure-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-structure-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tags-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tags-exception 'invalid-tags-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-webhook-authentication-parameters-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-webhook-authentication-parameters-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-webhook-filter-pattern-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-webhook-filter-pattern-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or job-data common-lisp:null))
   (nonce common-lisp:nil :type (common-lisp:or nonce common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-data (:copier common-lisp:nil) (:conc-name "struct-shape-job-data-"))
   (action-type-id common-lisp:nil :type
    (common-lisp:or action-type-id common-lisp:null))
   (action-configuration common-lisp:nil :type
    (common-lisp:or action-configuration common-lisp:null))
   (pipeline-context common-lisp:nil :type
    (common-lisp:or pipeline-context common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (artifact-credentials common-lisp:nil :type
    (common-lisp:or awssession-credentials common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-data 'make-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration))
      (common-lisp:list
       (common-lisp:cons "actionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-context))
      (common-lisp:list
       (common-lisp:cons "pipelineContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifact-credentials))
      (common-lisp:list
       (common-lisp:cons "artifactCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-details-"))
   (id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or job-data common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition job-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'job-not-found-exception)))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (job-worker-executor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-worker-executor-configuration-"))
   (polling-accounts common-lisp:nil :type
    (common-lisp:or polling-account-list common-lisp:null))
   (polling-service-principals common-lisp:nil :type
    (common-lisp:or polling-service-principal-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-worker-executor-configuration
                    'make-job-worker-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polling-accounts))
      (common-lisp:list
       (common-lisp:cons "pollingAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'polling-service-principals))
      (common-lisp:list
       (common-lisp:cons "pollingServicePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-worker-executor-configuration))
   common-lisp:nil))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-executor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-executor-configuration-"))
   (lambda-function-arn (common-lisp:error ":lambdafunctionarn is required")
    :type (common-lisp:or lambda-function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-executor-configuration
                    'make-lambda-executor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-executor-configuration))
   common-lisp:nil))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:deftype last-changed-at () 'common-lisp:string)
(common-lisp:deftype last-changed-by () 'common-lisp:string)
(common-lisp:deftype last-updated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-action-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-action-executions-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or action-execution-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-executions-input
                    'make-list-action-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-action-executions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-action-executions-output-"))
   (action-execution-details common-lisp:nil :type
    (common-lisp:or action-execution-detail-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-executions-output
                    'make-list-action-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-execution-details))
      (common-lisp:list
       (common-lisp:cons "actionExecutionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-action-types-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-action-types-input-"))
   (action-owner-filter common-lisp:nil :type
    (common-lisp:or action-owner common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (region-filter common-lisp:nil :type
    (common-lisp:or awsregion-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-types-input 'make-list-action-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-owner-filter))
      (common-lisp:list
       (common-lisp:cons "actionOwnerFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-filter))
      (common-lisp:list
       (common-lisp:cons "regionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-action-types-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-action-types-output-"))
   (action-types (common-lisp:error ":actiontypes is required") :type
    (common-lisp:or action-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-types-output 'make-list-action-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-types))
      (common-lisp:list
       (common-lisp:cons "actionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-action-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-executions-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-input
                    'make-list-pipeline-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-executions-output-"))
   (pipeline-execution-summaries common-lisp:nil :type
    (common-lisp:or pipeline-execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-output
                    'make-list-pipeline-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-summaries))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipelines-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipelines-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-pipelines common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-input 'make-list-pipelines-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-pipelines-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipelines-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipelines-output-"))
   (pipelines common-lisp:nil :type
    (common-lisp:or pipeline-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-output 'make-list-pipelines-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-webhook-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-webhook-item-"))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or webhook-definition common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or webhook-url common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or webhook-error-message common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or webhook-error-code common-lisp:null))
   (last-triggered common-lisp:nil :type
    (common-lisp:or webhook-last-triggered common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or webhook-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-webhook-item 'make-list-webhook-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhook-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhook-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-triggered))
      (common-lisp:list
       (common-lisp:cons "lastTriggered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhook-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-webhooks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-webhooks-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-input 'make-list-webhooks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhooks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-webhooks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-webhooks-output-"))
   (webhooks common-lisp:nil :type
    (common-lisp:or webhook-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-output 'make-list-webhooks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhooks))
      (common-lisp:list
       (common-lisp:cons "webhooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhooks-output))
   common-lisp:nil))
(common-lisp:deftype match-equals () 'common-lisp:string)
(common-lisp:deftype max-batch-size () 'common-lisp:integer)
(common-lisp:deftype max-pipelines () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-action-type-artifact-count () 'common-lisp:integer)
(common-lisp:deftype maximum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype minimum-action-type-artifact-count () 'common-lisp:integer)
(common-lisp:deftype minimum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-latest-pipeline-execution-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'not-latest-pipeline-execution-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (output-artifact (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-artifact-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or artifact-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-artifact 'make-output-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-artifact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-artifact-list ()
   '(trivial-types:proper-list output-artifact))
 (common-lisp:defun |make-output-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype output-variables-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype output-variables-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-output-variables-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition output-variables-size-exceeded-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       output-variables-size-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'output-variables-size-exceeded-exception
                    'output-variables-size-exceeded-exception-message)))
(common-lisp:deftype output-variables-value () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype pipeline-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-context-"))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage common-lisp:nil :type
    (common-lisp:or stage-context common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or action-context common-lisp:null))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-context 'make-pipeline-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-declaration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (artifact-store common-lisp:nil :type
    (common-lisp:or artifact-store common-lisp:null))
   (artifact-stores common-lisp:nil :type
    (common-lisp:or artifact-store-map common-lisp:null))
   (stages (common-lisp:error ":stages is required") :type
    (common-lisp:or pipeline-stage-declaration-list common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-declaration 'make-pipeline-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-store))
      (common-lisp:list
       (common-lisp:cons "artifactStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-stores))
      (common-lisp:list
       (common-lisp:cons "artifactStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-"))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (status-summary common-lisp:nil :type
    (common-lisp:or pipeline-execution-status-summary common-lisp:null))
   (artifact-revisions common-lisp:nil :type
    (common-lisp:or artifact-revision-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution 'make-pipeline-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-version))
      (common-lisp:list
       (common-lisp:cons "pipelineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-summary))
      (common-lisp:list
       (common-lisp:cons "statusSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-revisions))
      (common-lisp:list
       (common-lisp:cons "artifactRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-execution))
   common-lisp:nil))
(common-lisp:deftype pipeline-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition pipeline-execution-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition pipeline-execution-not-stoppable-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       pipeline-execution-not-stoppable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-not-stoppable-exception
                    'pipeline-execution-not-stoppable-exception-message)))
(common-lisp:deftype pipeline-execution-status () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-status-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-summary-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (source-revisions common-lisp:nil :type
    (common-lisp:or source-revision-list common-lisp:null))
   (trigger common-lisp:nil :type
    (common-lisp:or execution-trigger common-lisp:null))
   (stop-trigger common-lisp:nil :type
    (common-lisp:or stop-execution-trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-summary
                    'make-pipeline-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-revisions))
      (common-lisp:list
       (common-lisp:cons "sourceRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-trigger))
      (common-lisp:list
       (common-lisp:cons "stopTrigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-execution-summary-list ()
   '(trivial-types:proper-list pipeline-execution-summary))
 (common-lisp:defun |make-pipeline-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pipeline-list ()
   '(trivial-types:proper-list pipeline-summary))
 (common-lisp:defun |make-pipeline-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-metadata-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-metadata 'make-pipeline-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-metadata))
   common-lisp:nil))
(common-lisp:deftype pipeline-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition pipeline-name-in-use-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-name-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition pipeline-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype pipeline-stage-declaration-list ()
   '(trivial-types:proper-list stage-declaration))
 (common-lisp:defun |make-pipeline-stage-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-summary-"))
   (name common-lisp:nil :type (common-lisp:or pipeline-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-summary 'make-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated))
      (common-lisp:list
       (common-lisp:cons "updated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-summary))
   common-lisp:nil))
(common-lisp:deftype pipeline-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition pipeline-version-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'pipeline-version-not-found-exception)))
(common-lisp:deftype policy-statements-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-jobs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-jobs-input-"))
   (action-type-id (common-lisp:error ":actiontypeid is required") :type
    (common-lisp:or action-type-id common-lisp:null))
   (max-batch-size common-lisp:nil :type
    (common-lisp:or max-batch-size common-lisp:null))
   (query-param common-lisp:nil :type
    (common-lisp:or query-param-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-input 'make-poll-for-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-param))
      (common-lisp:list
       (common-lisp:cons "queryParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-jobs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-jobs-output-"))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-output 'make-poll-for-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input poll-for-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-third-party-jobs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-third-party-jobs-input-"))
   (action-type-id (common-lisp:error ":actiontypeid is required") :type
    (common-lisp:or action-type-id common-lisp:null))
   (max-batch-size common-lisp:nil :type
    (common-lisp:or max-batch-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-input
                    'make-poll-for-third-party-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-third-party-jobs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-poll-for-third-party-jobs-output-"))
   (jobs common-lisp:nil :type
    (common-lisp:or third-party-job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-output
                    'make-poll-for-third-party-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          poll-for-third-party-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype polling-account-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-polling-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype polling-service-principal-list ()
   '(trivial-types:proper-list service-principal))
 (common-lisp:defun |make-polling-service-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-action-revision-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-action-revision-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage-name (common-lisp:error ":stagename is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or action-name common-lisp:null))
   (action-revision (common-lisp:error ":actionrevision is required") :type
    (common-lisp:or action-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-input
                    'make-put-action-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-revision))
      (common-lisp:list
       (common-lisp:cons "actionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-action-revision-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-action-revision-output-"))
   (new-revision common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-output
                    'make-put-action-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-revision))
      (common-lisp:list
       (common-lisp:cons "newRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-action-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-approval-result-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-approval-result-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage-name (common-lisp:error ":stagename is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or action-name common-lisp:null))
   (result (common-lisp:error ":result is required") :type
    (common-lisp:or approval-result common-lisp:null))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or approval-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-input
                    'make-put-approval-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-approval-result-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-approval-result-output-"))
   (approved-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-output
                    'make-put-approval-result-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-at))
      (common-lisp:list
       (common-lisp:cons "approvedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-approval-result-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-failure-result-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-job-failure-result-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (failure-details (common-lisp:error ":failuredetails is required") :type
    (common-lisp:or failure-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-job-failure-result-input
                    'make-put-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "failureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-failure-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-success-result-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-job-success-result-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or current-revision common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null))
   (output-variables common-lisp:nil :type
    (common-lisp:or output-variables-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-job-success-result-input
                    'make-put-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-variables))
      (common-lisp:list
       (common-lisp:cons "outputVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-job-success-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-third-party-job-failure-result-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-third-party-job-failure-result-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (failure-details (common-lisp:error ":failuredetails is required") :type
    (common-lisp:or failure-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-failure-result-input
                    'make-put-third-party-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "failureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-failure-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-third-party-job-success-result-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-third-party-job-success-result-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or current-revision common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-success-result-input
                    'make-put-third-party-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision))
      (common-lisp:list
       (common-lisp:cons "currentRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-third-party-job-success-result-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-webhook-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-webhook-input-"))
   (webhook (common-lisp:error ":webhook is required") :type
    (common-lisp:or webhook-definition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-webhook-input 'make-put-webhook-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-webhook-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-webhook-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-webhook-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-webhook-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-webhook-output-"))
   (webhook common-lisp:nil :type
    (common-lisp:or list-webhook-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-webhook-output 'make-put-webhook-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-webhook-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-webhook-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-webhook-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-param-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-param-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (register-webhook-with-third-party-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-webhook-with-third-party-input-"))
   (webhook-name common-lisp:nil :type
    (common-lisp:or webhook-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-webhook-with-third-party-input
                    'make-register-webhook-with-third-party-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-name))
      (common-lisp:list
       (common-lisp:cons "webhookName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-webhook-with-third-party-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-webhook-with-third-party-output-")))
 (common-lisp:export
  (common-lisp:list 'register-webhook-with-third-party-output
                    'make-register-webhook-with-third-party-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-webhook-with-third-party-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-failed-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-failed-exception
                    'request-failed-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resolved-action-configuration-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-resolved-action-configuration-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-stage-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-stage-execution-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage-name (common-lisp:error ":stagename is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (pipeline-execution-id
    (common-lisp:error ":pipelineexecutionid is required") :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (retry-mode (common-lisp:error ":retrymode is required") :type
    (common-lisp:or stage-retry-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-input
                    'make-retry-stage-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-mode))
      (common-lisp:list
       (common-lisp:cons "retryMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-stage-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-stage-execution-output-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-output
                    'make-retry-stage-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-stage-execution-output))
   common-lisp:nil))
(common-lisp:deftype revision () 'common-lisp:string)
(common-lisp:deftype revision-change-identifier () 'common-lisp:string)
(common-lisp:deftype revision-summary () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3artifact-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3artifact-location-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (object-key (common-lisp:error ":objectkey is required") :type
    (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3artifact-location 'make-s3artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3artifact-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3artifact-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "objectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3artifact-location))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype secret-access-key () 'common-lisp:string)
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-revision-"))
   (action-name (common-lisp:error ":actionname is required") :type
    (common-lisp:or action-name common-lisp:null))
   (revision-id common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (revision-summary common-lisp:nil :type
    (common-lisp:or revision-summary common-lisp:null))
   (revision-url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-revision 'make-source-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-summary))
      (common-lisp:list
       (common-lisp:cons "revisionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-url))
      (common-lisp:list
       (common-lisp:cons "revisionUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-revision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-revision-list ()
   '(trivial-types:proper-list source-revision))
 (common-lisp:defun |make-source-revision-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-action-declaration-list ()
   '(trivial-types:proper-list action-declaration))
 (common-lisp:defun |make-stage-action-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-blocker-declaration-list ()
   '(trivial-types:proper-list blocker-declaration))
 (common-lisp:defun |make-stage-blocker-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blocker-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stage-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-stage-context-"))
   (name common-lisp:nil :type (common-lisp:or stage-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-context 'make-stage-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stage-declaration (:copier common-lisp:nil)
      (:conc-name "struct-shape-stage-declaration-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or stage-name common-lisp:null))
   (blockers common-lisp:nil :type
    (common-lisp:or stage-blocker-declaration-list common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or stage-action-declaration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stage-declaration 'make-stage-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blockers))
      (common-lisp:list
       (common-lisp:cons "blockers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stage-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-stage-execution-"))
   (pipeline-execution-id
    (common-lisp:error ":pipelineexecutionid is required") :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or stage-execution-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-execution 'make-stage-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-execution))
   common-lisp:nil))
(common-lisp:deftype stage-execution-status () 'common-lisp:string)
(common-lisp:deftype stage-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition stage-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stage-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition stage-not-retryable-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stage-not-retryable-exception)))
(common-lisp:deftype stage-retry-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stage-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-stage-state-"))
   (stage-name common-lisp:nil :type
    (common-lisp:or stage-name common-lisp:null))
   (inbound-execution common-lisp:nil :type
    (common-lisp:or stage-execution common-lisp:null))
   (inbound-transition-state common-lisp:nil :type
    (common-lisp:or transition-state common-lisp:null))
   (action-states common-lisp:nil :type
    (common-lisp:or action-state-list common-lisp:null))
   (latest-execution common-lisp:nil :type
    (common-lisp:or stage-execution common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-state 'make-stage-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "stageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-execution))
      (common-lisp:list
       (common-lisp:cons "inboundExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-transition-state))
      (common-lisp:list
       (common-lisp:cons "inboundTransitionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-states))
      (common-lisp:list
       (common-lisp:cons "actionStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-execution))
      (common-lisp:list
       (common-lisp:cons "latestExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stage-state-list ()
   '(trivial-types:proper-list stage-state))
 (common-lisp:defun |make-stage-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stage-transition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-pipeline-execution-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-input
                    'make-start-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-pipeline-execution-output-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-output
                    'make-start-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-execution-trigger (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-execution-trigger-"))
   (reason common-lisp:nil :type
    (common-lisp:or stop-pipeline-execution-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-execution-trigger 'make-stop-execution-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-execution-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-pipeline-execution-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-pipeline-execution-input-"))
   (pipeline-name (common-lisp:error ":pipelinename is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-execution-id
    (common-lisp:error ":pipelineexecutionid is required") :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (abandon common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or stop-pipeline-execution-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-input
                    'make-stop-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "pipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abandon))
      (common-lisp:list
       (common-lisp:cons "abandon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-pipeline-execution-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-pipeline-execution-output-"))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-output
                    'make-stop-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-id))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-output))
   common-lisp:nil))
(common-lisp:deftype stop-pipeline-execution-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-job-"))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'third-party-job 'make-third-party-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input third-party-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input third-party-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input third-party-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-job-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-job-data-"))
   (action-type-id common-lisp:nil :type
    (common-lisp:or action-type-id common-lisp:null))
   (action-configuration common-lisp:nil :type
    (common-lisp:or action-configuration common-lisp:null))
   (pipeline-context common-lisp:nil :type
    (common-lisp:or pipeline-context common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (artifact-credentials common-lisp:nil :type
    (common-lisp:or awssession-credentials common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-job-data 'make-third-party-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input third-party-job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input third-party-job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type-id))
      (common-lisp:list
       (common-lisp:cons "actionTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-configuration))
      (common-lisp:list
       (common-lisp:cons "actionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-context))
      (common-lisp:list
       (common-lisp:cons "pipelineContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "inputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "outputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifact-credentials))
      (common-lisp:list
       (common-lisp:cons "artifactCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "continuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input third-party-job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-job-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-job-details-"))
   (id common-lisp:nil :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or third-party-job-data common-lisp:null))
   (nonce common-lisp:nil :type (common-lisp:or nonce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-job-details 'make-third-party-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nonce))
      (common-lisp:list
       (common-lisp:cons "nonce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-job-details))
   common-lisp:nil))
(common-lisp:deftype third-party-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype third-party-job-list ()
   '(trivial-types:proper-list third-party-job))
 (common-lisp:defun |make-third-party-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list third-party-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (codepipeline-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transition-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-transition-state-"))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (last-changed-by common-lisp:nil :type
    (common-lisp:or last-changed-by common-lisp:null))
   (last-changed-at common-lisp:nil :type
    (common-lisp:or last-changed-at common-lisp:null))
   (disabled-reason common-lisp:nil :type
    (common-lisp:or disabled-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transition-state 'make-transition-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-by))
      (common-lisp:list
       (common-lisp:cons "lastChangedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-changed-at))
      (common-lisp:list
       (common-lisp:cons "lastChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "disabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition-state))
   common-lisp:nil))
(common-lisp:deftype trigger-detail () 'common-lisp:string)
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-type-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-type-input-"))
   (action-type (common-lisp:error ":actiontype is required") :type
    (common-lisp:or action-type-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-action-type-input 'make-update-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-input-"))
   (pipeline (common-lisp:error ":pipeline is required") :type
    (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-input 'make-update-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-output-"))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-output 'make-update-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype url-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype webhook-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (webhook-auth-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-webhook-auth-configuration-"))
   (allowed-iprange common-lisp:nil :type
    (common-lisp:or webhook-auth-configuration-allowed-iprange
                    common-lisp:null))
   (secret-token common-lisp:nil :type
    (common-lisp:or webhook-auth-configuration-secret-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'webhook-auth-configuration
                    'make-webhook-auth-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-iprange))
      (common-lisp:list
       (common-lisp:cons "AllowedIPRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-token))
      (common-lisp:list
       (common-lisp:cons "SecretToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webhook-auth-configuration))
   common-lisp:nil))
(common-lisp:deftype webhook-auth-configuration-allowed-iprange ()
  'common-lisp:string)
(common-lisp:deftype webhook-auth-configuration-secret-token ()
  'common-lisp:string)
(common-lisp:deftype webhook-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (webhook-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-webhook-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or webhook-name common-lisp:null))
   (target-pipeline (common-lisp:error ":targetpipeline is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (target-action (common-lisp:error ":targetaction is required") :type
    (common-lisp:or action-name common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or webhook-filters common-lisp:null))
   (authentication (common-lisp:error ":authentication is required") :type
    (common-lisp:or webhook-authentication-type common-lisp:null))
   (authentication-configuration
    (common-lisp:error ":authenticationconfiguration is required") :type
    (common-lisp:or webhook-auth-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'webhook-definition 'make-webhook-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input webhook-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input webhook-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-pipeline))
      (common-lisp:list
       (common-lisp:cons "targetPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "targetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication))
      (common-lisp:list
       (common-lisp:cons "authentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "authenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input webhook-definition))
   common-lisp:nil))
(common-lisp:deftype webhook-error-code () 'common-lisp:string)
(common-lisp:deftype webhook-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (webhook-filter-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-webhook-filter-rule-"))
   (json-path (common-lisp:error ":jsonpath is required") :type
    (common-lisp:or json-path common-lisp:null))
   (match-equals common-lisp:nil :type
    (common-lisp:or match-equals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'webhook-filter-rule 'make-webhook-filter-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "jsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-equals))
      (common-lisp:list
       (common-lisp:cons "matchEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input webhook-filter-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype webhook-filters ()
   '(trivial-types:proper-list webhook-filter-rule))
 (common-lisp:defun |make-webhook-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list webhook-filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype webhook-last-triggered () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype webhook-list ()
   '(trivial-types:proper-list list-webhook-item))
 (common-lisp:defun |make-webhook-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-webhook-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype webhook-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition webhook-not-found-exception
     (codepipeline-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'webhook-not-found-exception)))
(common-lisp:deftype webhook-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun acknowledge-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce)
   (common-lisp:declare (common-lisp:ignorable job-id nonce))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-acknowledge-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcknowledgeJob"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'acknowledge-job))
(common-lisp:progn
 (common-lisp:defun acknowledge-third-party-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce client-token)
   (common-lisp:declare (common-lisp:ignorable job-id nonce client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-acknowledge-third-party-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcknowledgeThirdPartyJob"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'acknowledge-third-party-job))
(common-lisp:progn
 (common-lisp:defun create-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version settings
                     configuration-properties input-artifact-details
                     output-artifact-details tags)
   (common-lisp:declare
    (common-lisp:ignorable category provider version settings
     configuration-properties input-artifact-details output-artifact-details
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomActionType"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-action-type))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline tags)
   (common-lisp:declare (common-lisp:ignorable pipeline tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePipeline"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version)
   (common-lisp:declare (common-lisp:ignorable category provider version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomActionType"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-action-type))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePipeline"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-webhook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWebhook"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-webhook))
(common-lisp:progn
 (common-lisp:defun deregister-webhook-with-third-party
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-name)
   (common-lisp:declare (common-lisp:ignorable webhook-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-webhook-with-third-party-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterWebhookWithThirdParty"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-webhook-with-third-party))
(common-lisp:progn
 (common-lisp:defun disable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableStageTransition"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-stage-transition))
(common-lisp:progn
 (common-lisp:defun enable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableStageTransition"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-stage-transition))
(common-lisp:progn
 (common-lisp:defun get-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category owner provider version)
   (common-lisp:declare
    (common-lisp:ignorable category owner provider version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActionType"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-action-type))
(common-lisp:progn
 (common-lisp:defun get-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-details-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobDetails"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-details))
(common-lisp:progn
 (common-lisp:defun get-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipeline"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-pipeline))
(common-lisp:progn
 (common-lisp:defun get-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-execution-id)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipelineExecution"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun get-pipeline-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPipelineState"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-pipeline-state))
(common-lisp:progn
 (common-lisp:defun get-third-party-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token)
   (common-lisp:declare (common-lisp:ignorable job-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-third-party-job-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetThirdPartyJobDetails"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-third-party-job-details))
(common-lisp:progn
 (common-lisp:defun list-action-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name filter max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-action-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActionExecutions"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-action-executions))
(common-lisp:progn
 (common-lisp:defun list-action-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-owner-filter next-token
                     region-filter)
   (common-lisp:declare
    (common-lisp:ignorable action-owner-filter next-token region-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-action-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActionTypes"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-action-types))
(common-lisp:progn
 (common-lisp:defun list-pipeline-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipeline-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelineExecutions"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipeline-executions))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelines"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-webhooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-webhooks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWebhooks"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-webhooks))
(common-lisp:progn
 (common-lisp:defun poll-for-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size
                     query-param)
   (common-lisp:declare
    (common-lisp:ignorable action-type-id max-batch-size query-param))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForJobs"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'poll-for-jobs))
(common-lisp:progn
 (common-lisp:defun poll-for-third-party-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size)
   (common-lisp:declare (common-lisp:ignorable action-type-id max-batch-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-third-party-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PollForThirdPartyJobs"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'poll-for-third-party-jobs))
(common-lisp:progn
 (common-lisp:defun put-action-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     action-revision)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name
     action-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-action-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutActionRevision"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-action-revision))
(common-lisp:progn
 (common-lisp:defun put-approval-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     result token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name result token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-approval-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutApprovalResult"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-approval-result))
(common-lisp:progn
 (common-lisp:defun put-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id failure-details)
   (common-lisp:declare (common-lisp:ignorable job-id failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-failure-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutJobFailureResult"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id current-revision
                     continuation-token execution-details output-variables)
   (common-lisp:declare
    (common-lisp:ignorable job-id current-revision continuation-token
     execution-details output-variables))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-success-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutJobSuccessResult"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-job-success-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token failure-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-failure-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutThirdPartyJobFailureResult"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-third-party-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token current-revision
                     continuation-token execution-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token current-revision
     continuation-token execution-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-success-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutThirdPartyJobSuccessResult"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-third-party-job-success-result))
(common-lisp:progn
 (common-lisp:defun put-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook tags)
   (common-lisp:declare (common-lisp:ignorable webhook tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-webhook-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutWebhook"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-webhook))
(common-lisp:progn
 (common-lisp:defun register-webhook-with-third-party
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-name)
   (common-lisp:declare (common-lisp:ignorable webhook-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-webhook-with-third-party-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterWebhookWithThirdParty"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-webhook-with-third-party))
(common-lisp:progn
 (common-lisp:defun retry-stage-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name
                     pipeline-execution-id retry-mode)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name pipeline-execution-id
     retry-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-stage-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RetryStageExecution"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retry-stage-execution))
(common-lisp:progn
 (common-lisp:defun start-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name client-request-token)
   (common-lisp:declare (common-lisp:ignorable name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartPipelineExecution"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun stop-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-execution-id
                     abandon reason)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-id abandon reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopPipelineExecution"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type)
   (common-lisp:declare (common-lisp:ignorable action-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateActionType"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-action-type))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline)
   (common-lisp:declare (common-lisp:ignorable pipeline))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codepipeline-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePipeline"
                                                        "2015-07-09"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline))
