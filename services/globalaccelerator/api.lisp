;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/globalaccelerator/api
  (:use)
  (:nicknames #:aws/globalaccelerator)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/globalaccelerator/api)
(common-lisp:progn
 (common-lisp:defclass globalaccelerator-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "globalaccelerator"))
 (common-lisp:export 'globalaccelerator-request))
(common-lisp:progn
 (common-lisp:define-condition globalaccelerator-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'globalaccelerator-error))
(common-lisp:defvar *error-map*
  '(("AcceleratorNotDisabledException" . accelerator-not-disabled-exception)
    ("AcceleratorNotFoundException" . accelerator-not-found-exception)
    ("AccessDeniedException" . access-denied-exception)
    ("AssociatedEndpointGroupFoundException"
     . associated-endpoint-group-found-exception)
    ("AssociatedListenerFoundException" . associated-listener-found-exception)
    ("ByoipCidrNotFoundException" . byoip-cidr-not-found-exception)
    ("ConflictException" . conflict-exception)
    ("EndpointAlreadyExistsException" . endpoint-already-exists-exception)
    ("EndpointGroupAlreadyExistsException"
     . endpoint-group-already-exists-exception)
    ("EndpointGroupNotFoundException" . endpoint-group-not-found-exception)
    ("EndpointNotFoundException" . endpoint-not-found-exception)
    ("IncorrectCidrStateException" . incorrect-cidr-state-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidPortRangeException" . invalid-port-range-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("TransactionInProgressException" . transaction-in-progress-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accelerator (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerator-"))
   (accelerator-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (ip-sets common-lisp:nil :type (common-lisp:or ip-sets common-lisp:null))
   (dns-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or accelerator-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (dual-stack-dns-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or accelerator-events common-lisp:null)))
 (common-lisp:export (common-lisp:list 'accelerator 'make-accelerator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dual-stack-dns-name))
      (common-lisp:list
       (common-lisp:cons "DualStackDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accelerator-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerator-attributes-"))
   (flow-logs-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (flow-logs-s3bucket common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-s3prefix common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accelerator-attributes 'make-accelerator-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerator-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accelerator-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerator-event-"))
   (message common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accelerator-event 'make-accelerator-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accelerator-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accelerator-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accelerator-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype accelerator-events ()
   '(trivial-types:proper-list accelerator-event))
 (common-lisp:defun |make-accelerator-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition accelerator-not-disabled-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       accelerator-not-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'accelerator-not-disabled-exception
                    'accelerator-not-disabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition accelerator-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       accelerator-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'accelerator-not-found-exception
                    'accelerator-not-found-exception-message)))
(common-lisp:deftype accelerator-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accelerators () '(trivial-types:proper-list accelerator))
 (common-lisp:defun |make-accelerators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-custom-routing-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-custom-routing-endpoints-request-"))
   (endpoint-configurations
    (common-lisp:error ":endpoint-configurations is required") :type
    (common-lisp:or custom-routing-endpoint-configurations common-lisp:null))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-custom-routing-endpoints-request
                    'make-add-custom-routing-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-custom-routing-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-custom-routing-endpoints-response-"))
   (endpoint-descriptions common-lisp:nil :type
    (common-lisp:or custom-routing-endpoint-descriptions common-lisp:null))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-custom-routing-endpoints-response
                    'make-add-custom-routing-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-custom-routing-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-endpoints-request-"))
   (endpoint-configurations
    (common-lisp:error ":endpoint-configurations is required") :type
    (common-lisp:or endpoint-configurations common-lisp:null))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-endpoints-request 'make-add-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-endpoints-response-"))
   (endpoint-descriptions common-lisp:nil :type
    (common-lisp:or endpoint-descriptions common-lisp:null))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-endpoints-response 'make-add-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (advertise-byoip-cidr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-advertise-byoip-cidr-request-"))
   (cidr (common-lisp:error ":cidr is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advertise-byoip-cidr-request
                    'make-advertise-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (advertise-byoip-cidr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-advertise-byoip-cidr-response-"))
   (byoip-cidr common-lisp:nil :type
    (common-lisp:or byoip-cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advertise-byoip-cidr-response
                    'make-advertise-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advertise-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allow-custom-routing-traffic-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-custom-routing-traffic-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-addresses common-lisp:nil :type
    (common-lisp:or destination-addresses common-lisp:null))
   (destination-ports common-lisp:nil :type
    (common-lisp:or destination-ports common-lisp:null))
   (allow-all-traffic-to-endpoint common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allow-custom-routing-traffic-request
                    'make-allow-custom-routing-traffic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-addresses))
      (common-lisp:list
       (common-lisp:cons "DestinationAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-all-traffic-to-endpoint))
      (common-lisp:list
       (common-lisp:cons "AllowAllTrafficToEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allow-custom-routing-traffic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition associated-endpoint-group-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       associated-endpoint-group-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'associated-endpoint-group-found-exception
                    'associated-endpoint-group-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition associated-listener-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       associated-listener-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'associated-listener-found-exception
                    'associated-listener-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (byoip-cidr (:copier common-lisp:nil)
      (:conc-name "struct-shape-byoip-cidr-"))
   (cidr common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or byoip-cidr-state common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or byoip-cidr-events common-lisp:null)))
 (common-lisp:export (common-lisp:list 'byoip-cidr 'make-byoip-cidr))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byoip-cidr))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byoip-cidr))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byoip-cidr))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (byoip-cidr-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-byoip-cidr-event-"))
   (message common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'byoip-cidr-event 'make-byoip-cidr-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byoip-cidr-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype byoip-cidr-events ()
   '(trivial-types:proper-list byoip-cidr-event))
 (common-lisp:defun |make-byoip-cidr-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byoip-cidr-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition byoip-cidr-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       byoip-cidr-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'byoip-cidr-not-found-exception
                    'byoip-cidr-not-found-exception-message)))
(common-lisp:deftype byoip-cidr-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype byoip-cidrs () '(trivial-types:proper-list byoip-cidr))
 (common-lisp:defun |make-byoip-cidrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byoip-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cidr-authorization-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-cidr-authorization-context-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (signature (common-lisp:error ":signature is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cidr-authorization-context
                    'make-cidr-authorization-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cidr-authorization-context))
   common-lisp:nil))
(common-lisp:deftype client-affinity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-accelerator-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (ip-addresses common-lisp:nil :type
    (common-lisp:or ip-addresses common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-accelerator-request
                    'make-create-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-accelerator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-accelerator-response
                    'make-create-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-routing-accelerator-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (ip-addresses common-lisp:nil :type
    (common-lisp:or ip-addresses common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-accelerator-request
                    'make-create-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-accelerator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-routing-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-accelerator-response
                    'make-create-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-custom-routing-endpoint-group-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-region
    (common-lisp:error ":endpoint-group-region is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-configurations
    (common-lisp:error ":destination-configurations is required") :type
    (common-lisp:or custom-routing-destination-configurations
                    common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-endpoint-group-request
                    'make-create-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-custom-routing-endpoint-group-response-"))
   (endpoint-group common-lisp:nil :type
    (common-lisp:or custom-routing-endpoint-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-endpoint-group-response
                    'make-create-custom-routing-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-routing-listener-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges (common-lisp:error ":port-ranges is required") :type
    (common-lisp:or port-ranges common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-listener-request
                    'make-create-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-routing-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-routing-listener-response-"))
   (listener common-lisp:nil :type
    (common-lisp:or custom-routing-listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-routing-listener-response
                    'make-create-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-group-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-region
    (common-lisp:error ":endpoint-group-region is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-configurations common-lisp:nil :type
    (common-lisp:or endpoint-configurations common-lisp:null))
   (traffic-dial-percentage common-lisp:nil :type
    (common-lisp:or traffic-dial-percentage common-lisp:null))
   (health-check-port common-lisp:nil :type
    (common-lisp:or health-check-port common-lisp:null))
   (health-check-protocol common-lisp:nil :type
    (common-lisp:or health-check-protocol common-lisp:null))
   (health-check-path common-lisp:nil :type
    (common-lisp:or health-check-path common-lisp:null))
   (health-check-interval-seconds common-lisp:nil :type
    (common-lisp:or health-check-interval-seconds common-lisp:null))
   (threshold-count common-lisp:nil :type
    (common-lisp:or threshold-count common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null))
   (port-overrides common-lisp:nil :type
    (common-lisp:or port-overrides common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-group-request
                    'make-create-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-group-response-"))
   (endpoint-group common-lisp:nil :type
    (common-lisp:or endpoint-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-group-response
                    'make-create-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-listener-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges (common-lisp:error ":port-ranges is required") :type
    (common-lisp:or port-ranges common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or protocol common-lisp:null))
   (client-affinity common-lisp:nil :type
    (common-lisp:or client-affinity common-lisp:null))
   (idempotency-token (common-lisp:error ":idempotency-token is required")
    :type (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-listener-request 'make-create-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-listener-response-"))
   (listener common-lisp:nil :type (common-lisp:or listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-listener-response 'make-create-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-accelerator (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-accelerator-"))
   (accelerator-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (ip-sets common-lisp:nil :type (common-lisp:or ip-sets common-lisp:null))
   (dns-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-accelerator
                    'make-custom-routing-accelerator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-accelerator-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-accelerator-attributes-"))
   (flow-logs-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (flow-logs-s3bucket common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-s3prefix common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-accelerator-attributes
                    'make-custom-routing-accelerator-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-accelerator-attributes))
   common-lisp:nil))
(common-lisp:deftype custom-routing-accelerator-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-routing-accelerators ()
   '(trivial-types:proper-list custom-routing-accelerator))
 (common-lisp:defun |make-custom-routing-accelerators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-destination-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-destination-configuration-"))
   (from-port (common-lisp:error ":from-port is required") :type
    (common-lisp:or port-number common-lisp:null))
   (to-port (common-lisp:error ":to-port is required") :type
    (common-lisp:or port-number common-lisp:null))
   (protocols (common-lisp:error ":protocols is required") :type
    (common-lisp:or custom-routing-protocols common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-destination-configuration
                    'make-custom-routing-destination-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-destination-configurations ()
   '(trivial-types:proper-list custom-routing-destination-configuration))
 (common-lisp:defun |make-custom-routing-destination-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-destination-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-destination-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-destination-description-"))
   (from-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (to-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-destination-description
                    'make-custom-routing-destination-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-destination-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-destination-descriptions ()
   '(trivial-types:proper-list custom-routing-destination-description))
 (common-lisp:defun |make-custom-routing-destination-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-destination-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-routing-destination-traffic-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-endpoint-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-endpoint-configuration-"))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-configuration
                    'make-custom-routing-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-configurations ()
   '(trivial-types:proper-list custom-routing-endpoint-configuration))
 (common-lisp:defun |make-custom-routing-endpoint-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-endpoint-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-endpoint-description-"))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-description
                    'make-custom-routing-endpoint-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-descriptions ()
   '(trivial-types:proper-list custom-routing-endpoint-description))
 (common-lisp:defun |make-custom-routing-endpoint-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-endpoint-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-endpoint-group-"))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-descriptions common-lisp:nil :type
    (common-lisp:or custom-routing-destination-descriptions common-lisp:null))
   (endpoint-descriptions common-lisp:nil :type
    (common-lisp:or custom-routing-endpoint-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-endpoint-group
                    'make-custom-routing-endpoint-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-descriptions))
      (common-lisp:list
       (common-lisp:cons "DestinationDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-endpoint-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-endpoint-groups ()
   '(trivial-types:proper-list custom-routing-endpoint-group))
 (common-lisp:defun |make-custom-routing-endpoint-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-routing-endpoint-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-routing-listener (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-routing-listener-"))
   (listener-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges common-lisp:nil :type
    (common-lisp:or port-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-routing-listener 'make-custom-routing-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-routing-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-routing-listeners ()
   '(trivial-types:proper-list custom-routing-listener))
 (common-lisp:defun |make-custom-routing-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-routing-listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-routing-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-routing-protocols ()
   '(trivial-types:proper-list custom-routing-protocol))
 (common-lisp:defun |make-custom-routing-protocols|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-routing-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-accelerator-request
                    'make-delete-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-routing-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-routing-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-accelerator-request
                    'make-delete-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-routing-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-custom-routing-endpoint-group-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-endpoint-group-request
                    'make-delete-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-routing-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-routing-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-routing-listener-request
                    'make-delete-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-group-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-group-request
                    'make-delete-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-listener-request 'make-delete-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deny-custom-routing-traffic-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deny-custom-routing-traffic-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-addresses common-lisp:nil :type
    (common-lisp:or destination-addresses common-lisp:null))
   (destination-ports common-lisp:nil :type
    (common-lisp:or destination-ports common-lisp:null))
   (deny-all-traffic-to-endpoint common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deny-custom-routing-traffic-request
                    'make-deny-custom-routing-traffic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-addresses))
      (common-lisp:list
       (common-lisp:cons "DestinationAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-all-traffic-to-endpoint))
      (common-lisp:list
       (common-lisp:cons "DenyAllTrafficToEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deny-custom-routing-traffic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprovision-byoip-cidr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprovision-byoip-cidr-request-"))
   (cidr (common-lisp:error ":cidr is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprovision-byoip-cidr-request
                    'make-deprovision-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprovision-byoip-cidr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprovision-byoip-cidr-response-"))
   (byoip-cidr common-lisp:nil :type
    (common-lisp:or byoip-cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprovision-byoip-cidr-response
                    'make-deprovision-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deprovision-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-accelerator-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-accelerator-attributes-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-attributes-request
                    'make-describe-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-accelerator-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-accelerator-attributes-response-"))
   (accelerator-attributes common-lisp:nil :type
    (common-lisp:or accelerator-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-attributes-response
                    'make-describe-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-request
                    'make-describe-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-accelerator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-accelerator-response
                    'make-describe-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-accelerator-attributes-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-custom-routing-accelerator-attributes-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-attributes-request
                    'make-describe-custom-routing-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-accelerator-attributes-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-custom-routing-accelerator-attributes-response-"))
   (accelerator-attributes common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-attributes-response
                    'make-describe-custom-routing-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-routing-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-request
                    'make-describe-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-accelerator-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-custom-routing-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-accelerator-response
                    'make-describe-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-custom-routing-endpoint-group-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-endpoint-group-request
                    'make-describe-custom-routing-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-custom-routing-endpoint-group-response-"))
   (endpoint-group common-lisp:nil :type
    (common-lisp:or custom-routing-endpoint-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-endpoint-group-response
                    'make-describe-custom-routing-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-routing-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-listener-request
                    'make-describe-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-routing-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-routing-listener-response-"))
   (listener common-lisp:nil :type
    (common-lisp:or custom-routing-listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-routing-listener-response
                    'make-describe-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-group-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-group-request
                    'make-describe-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-group-response-"))
   (endpoint-group common-lisp:nil :type
    (common-lisp:or endpoint-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-group-response
                    'make-describe-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-listener-request
                    'make-describe-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-listener-response-"))
   (listener common-lisp:nil :type (common-lisp:or listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-listener-response
                    'make-describe-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-addresses ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-destination-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-port-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-port-mapping-"))
   (accelerator-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (accelerator-socket-addresses common-lisp:nil :type
    (common-lisp:or socket-addresses common-lisp:null))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-socket-address common-lisp:nil :type
    (common-lisp:or socket-address common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (destination-traffic-state common-lisp:nil :type
    (common-lisp:or custom-routing-destination-traffic-state
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-port-mapping 'make-destination-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-socket-addresses))
      (common-lisp:list
       (common-lisp:cons "AcceleratorSocketAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-socket-address))
      (common-lisp:list
       (common-lisp:cons "DestinationSocketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-traffic-state))
      (common-lisp:list
       (common-lisp:cons "DestinationTrafficState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-port-mappings ()
   '(trivial-types:proper-list destination-port-mapping))
 (common-lisp:defun |make-destination-port-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype destination-ports ()
   '(trivial-types:proper-list port-number))
 (common-lisp:defun |make-destination-ports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-already-exists-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-already-exists-exception
                    'endpoint-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-configuration-"))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or endpoint-weight common-lisp:null))
   (client-ippreservation-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-configuration 'make-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-configurations ()
   '(trivial-types:proper-list endpoint-configuration))
 (common-lisp:defun |make-endpoint-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-description-"))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or endpoint-weight common-lisp:null))
   (health-state common-lisp:nil :type
    (common-lisp:or health-state common-lisp:null))
   (health-reason common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (client-ippreservation-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-description 'make-endpoint-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-state))
      (common-lisp:list
       (common-lisp:cons "HealthState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-reason))
      (common-lisp:list
       (common-lisp:cons "HealthReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-descriptions ()
   '(trivial-types:proper-list endpoint-description))
 (common-lisp:defun |make-endpoint-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-group-"))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-descriptions common-lisp:nil :type
    (common-lisp:or endpoint-descriptions common-lisp:null))
   (traffic-dial-percentage common-lisp:nil :type
    (common-lisp:or traffic-dial-percentage common-lisp:null))
   (health-check-port common-lisp:nil :type
    (common-lisp:or health-check-port common-lisp:null))
   (health-check-protocol common-lisp:nil :type
    (common-lisp:or health-check-protocol common-lisp:null))
   (health-check-path common-lisp:nil :type
    (common-lisp:or health-check-path common-lisp:null))
   (health-check-interval-seconds common-lisp:nil :type
    (common-lisp:or health-check-interval-seconds common-lisp:null))
   (threshold-count common-lisp:nil :type
    (common-lisp:or threshold-count common-lisp:null))
   (port-overrides common-lisp:nil :type
    (common-lisp:or port-overrides common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint-group 'make-endpoint-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-group-region))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-descriptions))
      (common-lisp:list
       (common-lisp:cons "EndpointDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition endpoint-group-already-exists-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-group-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-group-already-exists-exception
                    'endpoint-group-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition endpoint-group-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-group-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-group-not-found-exception
                    'endpoint-group-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype endpoint-groups ()
   '(trivial-types:proper-list endpoint-group))
 (common-lisp:defun |make-endpoint-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-identifier-"))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (client-ippreservation-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-identifier 'make-endpoint-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-ippreservation-enabled))
      (common-lisp:list
       (common-lisp:cons "ClientIPPreservationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-identifiers ()
   '(trivial-types:proper-list endpoint-identifier))
 (common-lisp:defun |make-endpoint-identifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype endpoint-ids ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-endpoint-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition endpoint-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       endpoint-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'endpoint-not-found-exception
                    'endpoint-not-found-exception-message)))
(common-lisp:deftype endpoint-weight () 'common-lisp:integer)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype generic-boolean () 'common-lisp:boolean)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:deftype health-check-interval-seconds () 'common-lisp:integer)
(common-lisp:deftype health-check-path () 'common-lisp:string)
(common-lisp:deftype health-check-port () 'common-lisp:integer)
(common-lisp:deftype health-check-protocol () 'common-lisp:string)
(common-lisp:deftype health-state () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incorrect-cidr-state-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-cidr-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-cidr-state-exception
                    'incorrect-cidr-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-port-range-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-port-range-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-port-range-exception
                    'invalid-port-range-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-family () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-addresses () '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-set (:copier common-lisp:nil) (:conc-name "struct-shape-ip-set-"))
   (ip-family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-addresses common-lisp:nil :type
    (common-lisp:or ip-addresses common-lisp:null))
   (ip-address-family common-lisp:nil :type
    (common-lisp:or ip-address-family common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-set 'make-ip-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-family))
      (common-lisp:list
       (common-lisp:cons "IpFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-family))
      (common-lisp:list
       (common-lisp:cons "IpAddressFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-sets () '(trivial-types:proper-list ip-set))
 (common-lisp:defun |make-ip-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-accelerators-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accelerators-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accelerators-request
                    'make-list-accelerators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-accelerators-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accelerators-response-"))
   (accelerators common-lisp:nil :type
    (common-lisp:or accelerators common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accelerators-response
                    'make-list-accelerators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerators))
      (common-lisp:list
       (common-lisp:cons "Accelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accelerators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-byoip-cidrs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-byoip-cidrs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-byoip-cidrs-request 'make-list-byoip-cidrs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-byoip-cidrs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-byoip-cidrs-response-"))
   (byoip-cidrs common-lisp:nil :type
    (common-lisp:or byoip-cidrs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-byoip-cidrs-response
                    'make-list-byoip-cidrs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidrs))
      (common-lisp:list
       (common-lisp:cons "ByoipCidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byoip-cidrs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-accelerators-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-accelerators-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-accelerators-request
                    'make-list-custom-routing-accelerators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-accelerators-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-accelerators-response-"))
   (accelerators common-lisp:nil :type
    (common-lisp:or custom-routing-accelerators common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-accelerators-response
                    'make-list-custom-routing-accelerators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerators))
      (common-lisp:list
       (common-lisp:cons "Accelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-accelerators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-endpoint-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-endpoint-groups-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-endpoint-groups-request
                    'make-list-custom-routing-endpoint-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-endpoint-groups-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-custom-routing-endpoint-groups-response-"))
   (endpoint-groups common-lisp:nil :type
    (common-lisp:or custom-routing-endpoint-groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-endpoint-groups-response
                    'make-list-custom-routing-endpoint-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-groups))
      (common-lisp:list
       (common-lisp:cons "EndpointGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-listeners-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-listeners-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-listeners-request
                    'make-list-custom-routing-listeners-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-listeners-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-listeners-response-"))
   (listeners common-lisp:nil :type
    (common-lisp:or custom-routing-listeners common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-listeners-response
                    'make-list-custom-routing-listeners-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-listeners-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-port-mappings-by-destination-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-custom-routing-port-mappings-by-destination-request-"))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-address (common-lisp:error ":destination-address is required")
    :type (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or port-mappings-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-by-destination-request
                    'make-list-custom-routing-port-mappings-by-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-address))
      (common-lisp:list
       (common-lisp:cons "DestinationAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-port-mappings-by-destination-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-custom-routing-port-mappings-by-destination-response-"))
   (destination-port-mappings common-lisp:nil :type
    (common-lisp:or destination-port-mappings common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-by-destination-response
                    'make-list-custom-routing-port-mappings-by-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-port-mappings))
      (common-lisp:list
       (common-lisp:cons "DestinationPortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-by-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-port-mappings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-port-mappings-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or port-mappings-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-request
                    'make-list-custom-routing-port-mappings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-routing-port-mappings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-routing-port-mappings-response-"))
   (port-mappings common-lisp:nil :type
    (common-lisp:or port-mappings common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-routing-port-mappings-response
                    'make-list-custom-routing-port-mappings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "PortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-routing-port-mappings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-groups-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-groups-request
                    'make-list-endpoint-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-groups-response-"))
   (endpoint-groups common-lisp:nil :type
    (common-lisp:or endpoint-groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-groups-response
                    'make-list-endpoint-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-groups))
      (common-lisp:list
       (common-lisp:cons "EndpointGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-listeners-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-listeners-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-listeners-request 'make-list-listeners-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-listeners-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-listeners-response-"))
   (listeners common-lisp:nil :type
    (common-lisp:or listeners common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-listeners-response 'make-list-listeners-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-listeners-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener (:copier common-lisp:nil) (:conc-name "struct-shape-listener-"))
   (listener-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges common-lisp:nil :type
    (common-lisp:or port-ranges common-lisp:null))
   (protocol common-lisp:nil :type (common-lisp:or protocol common-lisp:null))
   (client-affinity common-lisp:nil :type
    (common-lisp:or client-affinity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       listener-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'listener-not-found-exception
                    'listener-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun |make-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (port-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-mapping-"))
   (accelerator-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (endpoint-group-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (endpoint-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (destination-socket-address common-lisp:nil :type
    (common-lisp:or socket-address common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or custom-routing-protocols common-lisp:null))
   (destination-traffic-state common-lisp:nil :type
    (common-lisp:or custom-routing-destination-traffic-state
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-port))
      (common-lisp:list
       (common-lisp:cons "AcceleratorPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-socket-address))
      (common-lisp:list
       (common-lisp:cons "DestinationSocketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-traffic-state))
      (common-lisp:list
       (common-lisp:cons "DestinationTrafficState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-mappings ()
   '(trivial-types:proper-list port-mapping))
 (common-lisp:defun |make-port-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-mappings-max-results () 'common-lisp:integer)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (port-override (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-override-"))
   (listener-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (endpoint-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-override 'make-port-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-port))
      (common-lisp:list
       (common-lisp:cons "ListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-port))
      (common-lisp:list
       (common-lisp:cons "EndpointPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-overrides ()
   '(trivial-types:proper-list port-override))
 (common-lisp:defun |make-port-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (port-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-"))
   (from-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null))
   (to-port common-lisp:nil :type
    (common-lisp:or port-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-ranges () '(trivial-types:proper-list port-range))
 (common-lisp:defun |make-port-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocols|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provision-byoip-cidr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-provision-byoip-cidr-request-"))
   (cidr (common-lisp:error ":cidr is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (cidr-authorization-context
    (common-lisp:error ":cidr-authorization-context is required") :type
    (common-lisp:or cidr-authorization-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provision-byoip-cidr-request
                    'make-provision-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cidr-authorization-context))
      (common-lisp:list
       (common-lisp:cons "CidrAuthorizationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provision-byoip-cidr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-provision-byoip-cidr-response-"))
   (byoip-cidr common-lisp:nil :type
    (common-lisp:or byoip-cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provision-byoip-cidr-response
                    'make-provision-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provision-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-custom-routing-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-custom-routing-endpoints-request-"))
   (endpoint-ids (common-lisp:error ":endpoint-ids is required") :type
    (common-lisp:or endpoint-ids common-lisp:null))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-custom-routing-endpoints-request
                    'make-remove-custom-routing-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "EndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-custom-routing-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-endpoints-request-"))
   (endpoint-identifiers
    (common-lisp:error ":endpoint-identifiers is required") :type
    (common-lisp:or endpoint-identifiers common-lisp:null))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-endpoints-request 'make-remove-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-identifiers))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-endpoints-request))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (socket-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-socket-address-"))
   (ip-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'socket-address 'make-socket-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype socket-addresses ()
   '(trivial-types:proper-list socket-address))
 (common-lisp:defun |make-socket-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list socket-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype threshold-count () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype traffic-dial-percentage () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:define-condition transaction-in-progress-exception
     (globalaccelerator-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-in-progress-exception
                    'transaction-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-accelerator-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-accelerator-attributes-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (flow-logs-s3bucket common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-s3prefix common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-attributes-request
                    'make-update-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-accelerator-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-accelerator-attributes-response-"))
   (accelerator-attributes common-lisp:nil :type
    (common-lisp:or accelerator-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-attributes-response
                    'make-update-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-request
                    'make-update-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-accelerator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-accelerator-response
                    'make-update-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-accelerator-attributes-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-custom-routing-accelerator-attributes-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (flow-logs-s3bucket common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (flow-logs-s3prefix common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-attributes-request
                    'make-update-custom-routing-accelerator-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "FlowLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3bucket))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-logs-s3prefix))
      (common-lisp:list
       (common-lisp:cons "FlowLogsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-accelerator-attributes-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-custom-routing-accelerator-attributes-response-"))
   (accelerator-attributes common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-attributes-response
                    'make-update-custom-routing-accelerator-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-attributes))
      (common-lisp:list
       (common-lisp:cons "AcceleratorAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-accelerator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-routing-accelerator-request-"))
   (accelerator-arn (common-lisp:error ":accelerator-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-request
                    'make-update-custom-routing-accelerator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-arn))
      (common-lisp:list
       (common-lisp:cons "AcceleratorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-accelerator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-routing-accelerator-response-"))
   (accelerator common-lisp:nil :type
    (common-lisp:or custom-routing-accelerator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-accelerator-response
                    'make-update-custom-routing-accelerator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-accelerator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-routing-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges (common-lisp:error ":port-ranges is required") :type
    (common-lisp:or port-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-listener-request
                    'make-update-custom-routing-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-routing-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-routing-listener-response-"))
   (listener common-lisp:nil :type
    (common-lisp:or custom-routing-listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-routing-listener-response
                    'make-update-custom-routing-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-routing-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-group-request-"))
   (endpoint-group-arn (common-lisp:error ":endpoint-group-arn is required")
    :type (common-lisp:or generic-string common-lisp:null))
   (endpoint-configurations common-lisp:nil :type
    (common-lisp:or endpoint-configurations common-lisp:null))
   (traffic-dial-percentage common-lisp:nil :type
    (common-lisp:or traffic-dial-percentage common-lisp:null))
   (health-check-port common-lisp:nil :type
    (common-lisp:or health-check-port common-lisp:null))
   (health-check-protocol common-lisp:nil :type
    (common-lisp:or health-check-protocol common-lisp:null))
   (health-check-path common-lisp:nil :type
    (common-lisp:or health-check-path common-lisp:null))
   (health-check-interval-seconds common-lisp:nil :type
    (common-lisp:or health-check-interval-seconds common-lisp:null))
   (threshold-count common-lisp:nil :type
    (common-lisp:or threshold-count common-lisp:null))
   (port-overrides common-lisp:nil :type
    (common-lisp:or port-overrides common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-group-request
                    'make-update-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-dial-percentage))
      (common-lisp:list
       (common-lisp:cons "TrafficDialPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-count))
      (common-lisp:list
       (common-lisp:cons "ThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-overrides))
      (common-lisp:list
       (common-lisp:cons "PortOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-group-response-"))
   (endpoint-group common-lisp:nil :type
    (common-lisp:or endpoint-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-group-response
                    'make-update-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-group))
      (common-lisp:list
       (common-lisp:cons "EndpointGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-listener-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-listener-request-"))
   (listener-arn (common-lisp:error ":listener-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (port-ranges common-lisp:nil :type
    (common-lisp:or port-ranges common-lisp:null))
   (protocol common-lisp:nil :type (common-lisp:or protocol common-lisp:null))
   (client-affinity common-lisp:nil :type
    (common-lisp:or client-affinity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-listener-request 'make-update-listener-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-affinity))
      (common-lisp:list
       (common-lisp:cons "ClientAffinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-listener-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-listener-response-"))
   (listener common-lisp:nil :type (common-lisp:or listener common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-listener-response 'make-update-listener-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-listener-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (withdraw-byoip-cidr-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-withdraw-byoip-cidr-request-"))
   (cidr (common-lisp:error ":cidr is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'withdraw-byoip-cidr-request
                    'make-withdraw-byoip-cidr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (withdraw-byoip-cidr-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-withdraw-byoip-cidr-response-"))
   (byoip-cidr common-lisp:nil :type
    (common-lisp:or byoip-cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'withdraw-byoip-cidr-response
                    'make-withdraw-byoip-cidr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byoip-cidr))
      (common-lisp:list
       (common-lisp:cons "ByoipCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          withdraw-byoip-cidr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-custom-routing-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-configurations
                     endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-configurations endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-custom-routing-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AddCustomRoutingEndpoints" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-custom-routing-endpoints))
(common-lisp:progn
 (common-lisp:defun add-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-configurations
                     endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-configurations endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AddEndpoints" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-endpoints))
(common-lisp:progn
 (common-lisp:defun advertise-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-advertise-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AdvertiseByoipCidr" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'advertise-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun allow-custom-routing-traffic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn endpoint-id
                     destination-addresses destination-ports
                     allow-all-traffic-to-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-id destination-addresses
     destination-ports allow-all-traffic-to-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allow-custom-routing-traffic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "AllowCustomRoutingTraffic" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'allow-custom-routing-traffic))
(common-lisp:progn
 (common-lisp:defun create-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ip-address-type ip-addresses enabled
                     idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name ip-address-type ip-addresses enabled
     idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-accelerator))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ip-address-type ip-addresses enabled
                     idempotency-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name ip-address-type ip-addresses enabled
     idempotency-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn endpoint-group-region
                     destination-configurations idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn endpoint-group-region
     destination-configurations idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn port-ranges
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn port-ranges idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomRoutingListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun create-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn endpoint-group-region
                     endpoint-configurations traffic-dial-percentage
                     health-check-port health-check-protocol health-check-path
                     health-check-interval-seconds threshold-count
                     idempotency-token port-overrides)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn endpoint-group-region
     endpoint-configurations traffic-dial-percentage health-check-port
     health-check-protocol health-check-path health-check-interval-seconds
     threshold-count idempotency-token port-overrides))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn port-ranges protocol
                     client-affinity idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn port-ranges protocol client-affinity
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "CreateListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-listener))
(common-lisp:progn
 (common-lisp:defun delete-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-accelerator))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomRoutingListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun delete-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-listener))
(common-lisp:progn
 (common-lisp:defun deny-custom-routing-traffic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn endpoint-id
                     destination-addresses destination-ports
                     deny-all-traffic-to-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-id destination-addresses
     destination-ports deny-all-traffic-to-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deny-custom-routing-traffic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DenyCustomRoutingTraffic" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deny-custom-routing-traffic))
(common-lisp:progn
 (common-lisp:defun deprovision-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprovision-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DeprovisionByoipCidr" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deprovision-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun describe-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-accelerator))
(common-lisp:progn
 (common-lisp:defun describe-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeAcceleratorAttributes" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn)
   (common-lisp:declare (common-lisp:ignorable accelerator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingAcceleratorAttributes" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-routing-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-routing-endpoint-group))
(common-lisp:progn
 (common-lisp:defun describe-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeCustomRoutingListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoint-group))
(common-lisp:progn
 (common-lisp:defun describe-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-listener))
(common-lisp:progn
 (common-lisp:defun list-accelerators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accelerators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListAccelerators" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accelerators))
(common-lisp:progn
 (common-lisp:defun list-byoip-cidrs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-byoip-cidrs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListByoipCidrs" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-byoip-cidrs))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-accelerators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-accelerators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingAccelerators" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-routing-accelerators))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-endpoint-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingEndpointGroups" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-routing-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-listeners-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingListeners" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-routing-listeners))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-port-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn endpoint-group-arn
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn endpoint-group-arn max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-port-mappings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingPortMappings" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-routing-port-mappings))
(common-lisp:progn
 (common-lisp:defun list-custom-routing-port-mappings-by-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-id destination-address
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-id destination-address max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-routing-port-mappings-by-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomRoutingPortMappingsByDestination" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-routing-port-mappings-by-destination))
(common-lisp:progn
 (common-lisp:defun list-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoint-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListEndpointGroups" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-listeners-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListListeners" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-listeners))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ListTagsForResource" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provision-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr cidr-authorization-context)
   (common-lisp:declare
    (common-lisp:ignorable cidr cidr-authorization-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provision-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "ProvisionByoipCidr" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'provision-byoip-cidr))
(common-lisp:progn
 (common-lisp:defun remove-custom-routing-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-ids endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-ids endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-custom-routing-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "RemoveCustomRoutingEndpoints" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-custom-routing-endpoints))
(common-lisp:progn
 (common-lisp:defun remove-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-identifiers endpoint-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-identifiers endpoint-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "RemoveEndpoints" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-endpoints))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "TagResource" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UntagResource" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn name ip-address-type
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn name ip-address-type enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-accelerator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-accelerator))
(common-lisp:progn
 (common-lisp:defun update-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn flow-logs-enabled
                     flow-logs-s3bucket flow-logs-s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn flow-logs-enabled flow-logs-s3bucket
     flow-logs-s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateAcceleratorAttributes" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn name ip-address-type
                     enabled)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn name ip-address-type enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-accelerator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingAccelerator" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-custom-routing-accelerator))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-accelerator-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accelerator-arn flow-logs-enabled
                     flow-logs-s3bucket flow-logs-s3prefix)
   (common-lisp:declare
    (common-lisp:ignorable accelerator-arn flow-logs-enabled flow-logs-s3bucket
     flow-logs-s3prefix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-accelerator-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingAcceleratorAttributes" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-custom-routing-accelerator-attributes))
(common-lisp:progn
 (common-lisp:defun update-custom-routing-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port-ranges)
   (common-lisp:declare (common-lisp:ignorable listener-arn port-ranges))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-routing-listener-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomRoutingListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-custom-routing-listener))
(common-lisp:progn
 (common-lisp:defun update-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-group-arn
                     endpoint-configurations traffic-dial-percentage
                     health-check-port health-check-protocol health-check-path
                     health-check-interval-seconds threshold-count
                     port-overrides)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-group-arn endpoint-configurations
     traffic-dial-percentage health-check-port health-check-protocol
     health-check-path health-check-interval-seconds threshold-count
     port-overrides))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateEndpointGroup" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint-group))
(common-lisp:progn
 (common-lisp:defun update-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port-ranges protocol
                     client-affinity)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn port-ranges protocol client-affinity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-listener-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateListener" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-listener))
(common-lisp:progn
 (common-lisp:defun withdraw-byoip-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr)
   (common-lisp:declare (common-lisp:ignorable cidr))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-withdraw-byoip-cidr-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'globalaccelerator-request aws-sdk/generator/operation::input "POST"
        "/" "WithdrawByoipCidr" "2018-08-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'withdraw-byoip-cidr))
