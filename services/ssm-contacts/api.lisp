;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ssm-contacts/api
  (:use)
  (:nicknames #:aws/ssm-contacts)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ssm-contacts/api)
(common-lisp:progn
 (common-lisp:defclass ssm-contacts-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "ssm-contacts"))
 (common-lisp:export 'ssm-contacts-request))
(common-lisp:progn
 (common-lisp:define-condition ssm-contacts-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ssm-contacts-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DataEncryptionException" . data-encryption-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype accept-code () 'common-lisp:string)
(common-lisp:deftype accept-code-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (accept-page-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-page-request-"))
   (page-id (common-lisp:error ":page-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-channel-id common-lisp:nil :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (accept-type (common-lisp:error ":accept-type is required") :type
    (common-lisp:or accept-type common-lisp:null))
   (note common-lisp:nil :type (common-lisp:or receipt-info common-lisp:null))
   (accept-code (common-lisp:error ":accept-code is required") :type
    (common-lisp:or accept-code common-lisp:null))
   (accept-code-validation common-lisp:nil :type
    (common-lisp:or accept-code-validation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-page-request 'make-accept-page-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-type))
      (common-lisp:list
       (common-lisp:cons "AcceptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-code))
      (common-lisp:list
       (common-lisp:cons "AcceptCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accept-code-validation))
      (common-lisp:list
       (common-lisp:cons "AcceptCodeValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-page-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-page-result-")))
 (common-lisp:export
  (common-lisp:list 'accept-page-result 'make-accept-page-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-page-result))
   common-lisp:nil))
(common-lisp:deftype accept-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (activate-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-contact-channel-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null))
   (activation-code (common-lisp:error ":activation-code is required") :type
    (common-lisp:or activation-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-contact-channel-request
                    'make-activate-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "ActivationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activate-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-activate-contact-channel-result-")))
 (common-lisp:export
  (common-lisp:list 'activate-contact-channel-result
                    'make-activate-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   common-lisp:nil))
(common-lisp:deftype activation-code () 'common-lisp:string)
(common-lisp:deftype activation-status () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-target-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-target-info-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null))
   (retry-interval-in-minutes common-lisp:nil :type
    (common-lisp:or retry-interval-in-minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-target-info 'make-channel-target-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-target-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-target-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-interval-in-minutes))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-target-info))
   common-lisp:nil))
(common-lisp:deftype channel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (contact (:copier common-lisp:nil) (:conc-name "struct-shape-contact-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or contact-alias common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or contact-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or contact-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact 'make-contact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact))
   common-lisp:nil))
(common-lisp:deftype contact-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-channel-"))
   (contact-channel-arn (common-lisp:error ":contact-channel-arn is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or channel-type common-lisp:null))
   (delivery-address (common-lisp:error ":delivery-address is required") :type
    (common-lisp:or contact-channel-address common-lisp:null))
   (activation-status (common-lisp:error ":activation-status is required")
    :type (common-lisp:or activation-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact-channel 'make-contact-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-status))
      (common-lisp:list
       (common-lisp:cons "ActivationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-channel-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-channel-address-"))
   (simple-address common-lisp:nil :type
    (common-lisp:or simple-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-channel-address 'make-contact-channel-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-address))
      (common-lisp:list
       (common-lisp:cons "SimpleAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-channel-list ()
   '(trivial-types:proper-list contact-channel))
 (common-lisp:defun |make-contact-channel-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-target-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-target-info-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (is-essential (common-lisp:error ":is-essential is required") :type
    (common-lisp:or is-essential common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-target-info 'make-contact-target-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-target-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-target-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-essential))
      (common-lisp:list
       (common-lisp:cons "IsEssential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-target-info))
   common-lisp:nil))
(common-lisp:deftype contact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contacts-list () '(trivial-types:proper-list contact))
 (common-lisp:defun |make-contacts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-channel-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or channel-type common-lisp:null))
   (delivery-address (common-lisp:error ":delivery-address is required") :type
    (common-lisp:or contact-channel-address common-lisp:null))
   (defer-activation common-lisp:nil :type
    (common-lisp:or defer-activation common-lisp:null))
   (idempotency-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-channel-request
                    'make-create-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defer-activation))
      (common-lisp:list
       (common-lisp:cons "DeferActivation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-channel-result-"))
   (contact-channel-arn (common-lisp:error ":contact-channel-arn is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-channel-result
                    'make-create-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-request-"))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or contact-alias common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or contact-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or contact-type common-lisp:null))
   (plan (common-lisp:error ":plan is required") :type
    (common-lisp:or plan common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-list common-lisp:null))
   (idempotency-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-request 'make-create-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-result-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-result 'make-create-contact-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-encryption-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'data-encryption-exception
                    'data-encryption-exception-message)))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-contact-channel-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-contact-channel-request
                    'make-deactivate-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-contact-channel-result-")))
 (common-lisp:export
  (common-lisp:list 'deactivate-contact-channel-result
                    'make-deactivate-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   common-lisp:nil))
(common-lisp:deftype defer-activation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-channel-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-channel-request
                    'make-delete-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-channel-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-contact-channel-result
                    'make-delete-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-request 'make-delete-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-contact-result 'make-delete-contact-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engagement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engagement-request-"))
   (engagement-id (common-lisp:error ":engagement-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engagement-request
                    'make-describe-engagement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engagement-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engagement-result-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (engagement-arn (common-lisp:error ":engagement-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (sender (common-lisp:error ":sender is required") :type
    (common-lisp:or sender common-lisp:null))
   (subject (common-lisp:error ":subject is required") :type
    (common-lisp:or subject common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content common-lisp:null))
   (public-subject common-lisp:nil :type
    (common-lisp:or public-subject common-lisp:null))
   (public-content common-lisp:nil :type
    (common-lisp:or public-content common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (stop-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engagement-result
                    'make-describe-engagement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "StopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-page-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-page-request-"))
   (page-id (common-lisp:error ":page-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-page-request 'make-describe-page-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-page-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-page-result-"))
   (page-arn (common-lisp:error ":page-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (engagement-arn (common-lisp:error ":engagement-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (sender (common-lisp:error ":sender is required") :type
    (common-lisp:or sender common-lisp:null))
   (subject (common-lisp:error ":subject is required") :type
    (common-lisp:or subject common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content common-lisp:null))
   (public-subject common-lisp:nil :type
    (common-lisp:or public-subject common-lisp:null))
   (public-content common-lisp:nil :type
    (common-lisp:or public-content common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (sent-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (read-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (delivery-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-page-result 'make-describe-page-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-page-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-arn))
      (common-lisp:list
       (common-lisp:cons "PageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sent-time))
      (common-lisp:list
       (common-lisp:cons "SentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-time))
      (common-lisp:list
       (common-lisp:cons "ReadTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-time))
      (common-lisp:list
       (common-lisp:cons "DeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-page-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (engagement (:copier common-lisp:nil)
      (:conc-name "struct-shape-engagement-"))
   (engagement-arn (common-lisp:error ":engagement-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (sender (common-lisp:error ":sender is required") :type
    (common-lisp:or sender common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (stop-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'engagement 'make-engagement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engagement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engagement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "StopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engagement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engagements-list ()
   '(trivial-types:proper-list engagement))
 (common-lisp:defun |make-engagements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engagement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-channel-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-channel-request
                    'make-get-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-channel-result-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-channel-arn (common-lisp:error ":contact-channel-arn is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or channel-type common-lisp:null))
   (delivery-address (common-lisp:error ":delivery-address is required") :type
    (common-lisp:or contact-channel-address common-lisp:null))
   (activation-status common-lisp:nil :type
    (common-lisp:or activation-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-channel-result
                    'make-get-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-status))
      (common-lisp:list
       (common-lisp:cons "ActivationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-policy-request-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-policy-request
                    'make-get-contact-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-policy-result-"))
   (contact-arn common-lisp:nil :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-policy-result
                    'make-get-contact-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-request 'make-get-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-result-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or contact-alias common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or contact-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or contact-type common-lisp:null))
   (plan (common-lisp:error ":plan is required") :type
    (common-lisp:or plan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-result 'make-get-contact-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-result))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype incident-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype is-essential () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-channels-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-channels-request
                    'make-list-contact-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contact-channels-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contact-channels-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (contact-channels (common-lisp:error ":contact-channels is required") :type
    (common-lisp:or contact-channel-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contact-channels-result
                    'make-list-contact-channels-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channels))
      (common-lisp:list
       (common-lisp:cons "ContactChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contacts-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (alias-prefix common-lisp:nil :type
    (common-lisp:or contact-alias common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or contact-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-request 'make-list-contacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-prefix))
      (common-lisp:list
       (common-lisp:cons "AliasPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contacts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contacts-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (contacts common-lisp:nil :type
    (common-lisp:or contacts-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-result 'make-list-contacts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-contacts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-contacts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contacts))
      (common-lisp:list
       (common-lisp:cons "Contacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-contacts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-engagements-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-engagements-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (time-range-value common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-engagements-request 'make-list-engagements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-value))
      (common-lisp:list
       (common-lisp:cons "TimeRangeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-engagements-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-engagements-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (engagements (common-lisp:error ":engagements is required") :type
    (common-lisp:or engagements-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-engagements-result 'make-list-engagements-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagements))
      (common-lisp:list
       (common-lisp:cons "Engagements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-page-receipts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-page-receipts-request-"))
   (page-id (common-lisp:error ":page-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-page-receipts-request
                    'make-list-page-receipts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-page-receipts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-page-receipts-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (receipts common-lisp:nil :type
    (common-lisp:or receipts-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-page-receipts-result
                    'make-list-page-receipts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipts))
      (common-lisp:list
       (common-lisp:cons "Receipts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pages-by-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pages-by-contact-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-contact-request
                    'make-list-pages-by-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pages-by-contact-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pages-by-contact-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (pages (common-lisp:error ":pages is required") :type
    (common-lisp:or pages-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-contact-result
                    'make-list-pages-by-contact-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pages-by-engagement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pages-by-engagement-request-"))
   (engagement-id (common-lisp:error ":engagement-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-engagement-request
                    'make-list-pages-by-engagement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pages-by-engagement-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pages-by-engagement-result-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (pages (common-lisp:error ":pages is required") :type
    (common-lisp:or pages-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-engagement-result
                    'make-list-pages-by-engagement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (tags common-lisp:nil :type (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (page (:copier common-lisp:nil) (:conc-name "struct-shape-page-"))
   (page-arn (common-lisp:error ":page-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (engagement-arn (common-lisp:error ":engagement-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (sender (common-lisp:error ":sender is required") :type
    (common-lisp:or sender common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (sent-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (delivery-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (read-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-arn))
      (common-lisp:list
       (common-lisp:cons "PageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sent-time))
      (common-lisp:list
       (common-lisp:cons "SentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-time))
      (common-lisp:list
       (common-lisp:cons "DeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-time))
      (common-lisp:list
       (common-lisp:cons "ReadTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages-list () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (plan (:copier common-lisp:nil) (:conc-name "struct-shape-plan-"))
   (stages (common-lisp:error ":stages is required") :type
    (common-lisp:or stages-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'plan 'make-plan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plan))
   common-lisp:nil))
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype public-content () 'common-lisp:string)
(common-lisp:deftype public-subject () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-contact-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-contact-policy-request-"))
   (contact-arn (common-lisp:error ":contact-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-contact-policy-request
                    'make-put-contact-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-contact-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-contact-policy-result-")))
 (common-lisp:export
  (common-lisp:list 'put-contact-policy-result
                    'make-put-contact-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (receipt (:copier common-lisp:nil) (:conc-name "struct-shape-receipt-"))
   (contact-channel-arn common-lisp:nil :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (receipt-type (common-lisp:error ":receipt-type is required") :type
    (common-lisp:or receipt-type common-lisp:null))
   (receipt-info common-lisp:nil :type
    (common-lisp:or receipt-info common-lisp:null))
   (receipt-time (common-lisp:error ":receipt-time is required") :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'receipt 'make-receipt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-type))
      (common-lisp:list
       (common-lisp:cons "ReceiptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-info))
      (common-lisp:list
       (common-lisp:cons "ReceiptInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-time))
      (common-lisp:list
       (common-lisp:cons "ReceiptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt))
   common-lisp:nil))
(common-lisp:deftype receipt-info () 'common-lisp:string)
(common-lisp:deftype receipt-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype receipts-list () '(trivial-types:proper-list receipt))
 (common-lisp:defun |make-receipts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype retry-interval-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (send-activation-code-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-activation-code-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-activation-code-request
                    'make-send-activation-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-activation-code-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-activation-code-result-")))
 (common-lisp:export
  (common-lisp:list 'send-activation-code-result
                    'make-send-activation-code-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   common-lisp:nil))
(common-lisp:deftype sender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype simple-address () 'common-lisp:string)
(common-lisp:deftype ssm-contacts-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stage (:copier common-lisp:nil) (:conc-name "struct-shape-stage-"))
   (duration-in-minutes (common-lisp:error ":duration-in-minutes is required")
    :type (common-lisp:or stage-duration-in-mins common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or targets-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage 'make-stage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage))
   common-lisp:nil))
(common-lisp:deftype stage-duration-in-mins () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype stages-list () '(trivial-types:proper-list stage))
 (common-lisp:defun |make-stages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-engagement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-engagement-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (sender (common-lisp:error ":sender is required") :type
    (common-lisp:or sender common-lisp:null))
   (subject (common-lisp:error ":subject is required") :type
    (common-lisp:or subject common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content common-lisp:null))
   (public-subject common-lisp:nil :type
    (common-lisp:or public-subject common-lisp:null))
   (public-content common-lisp:nil :type
    (common-lisp:or public-content common-lisp:null))
   (incident-id common-lisp:nil :type
    (common-lisp:or incident-id common-lisp:null))
   (idempotency-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-engagement-request 'make-start-engagement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-engagement-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-engagement-result-"))
   (engagement-arn (common-lisp:error ":engagement-arn is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-engagement-result 'make-start-engagement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-engagement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-engagement-request-"))
   (engagement-id (common-lisp:error ":engagement-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or stop-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-engagement-request 'make-stop-engagement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-engagement-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-engagement-result-")))
 (common-lisp:export
  (common-lisp:list 'stop-engagement-result 'make-stop-engagement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   common-lisp:nil))
(common-lisp:deftype stop-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target (:copier common-lisp:nil) (:conc-name "struct-shape-target-"))
   (channel-target-info common-lisp:nil :type
    (common-lisp:or channel-target-info common-lisp:null))
   (contact-target-info common-lisp:nil :type
    (common-lisp:or contact-target-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-target-info))
      (common-lisp:list
       (common-lisp:cons "ChannelTargetInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-target-info))
      (common-lisp:list
       (common-lisp:cons "ContactTargetInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype targets-list () '(trivial-types:proper-list target))
 (common-lisp:defun |make-targets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-"))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-channel-request-"))
   (contact-channel-id (common-lisp:error ":contact-channel-id is required")
    :type (common-lisp:or ssm-contacts-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null))
   (delivery-address common-lisp:nil :type
    (common-lisp:or contact-channel-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-channel-request
                    'make-update-contact-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-channel-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-channel-result-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-channel-result
                    'make-update-contact-channel-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-request-"))
   (contact-id (common-lisp:error ":contact-id is required") :type
    (common-lisp:or ssm-contacts-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or contact-name common-lisp:null))
   (plan common-lisp:nil :type (common-lisp:or plan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-contact-request 'make-update-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-contact-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-contact-result-")))
 (common-lisp:export
  (common-lisp:list 'update-contact-result 'make-update-contact-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-page
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id contact-channel-id accept-type
                     note accept-code accept-code-validation)
   (common-lisp:declare
    (common-lisp:ignorable page-id contact-channel-id accept-type note
     accept-code accept-code-validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-page-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "AcceptPage"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-page))
(common-lisp:progn
 (common-lisp:defun activate-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id activation-code)
   (common-lisp:declare
    (common-lisp:ignorable contact-channel-id activation-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ActivateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-contact-channel))
(common-lisp:progn
 (common-lisp:defun create-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias display-name type plan tags
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable alias display-name type plan tags
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact))
(common-lisp:progn
 (common-lisp:defun create-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id name type delivery-address
                     defer-activation idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id name type delivery-address
     defer-activation idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact-channel))
(common-lisp:progn
 (common-lisp:defun deactivate-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deactivate-contact-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeactivateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-contact-channel))
(common-lisp:progn
 (common-lisp:defun delete-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact))
(common-lisp:progn
 (common-lisp:defun delete-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-channel))
(common-lisp:progn
 (common-lisp:defun describe-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id)
   (common-lisp:declare (common-lisp:ignorable engagement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-engagement))
(common-lisp:progn
 (common-lisp:defun describe-page
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id)
   (common-lisp:declare (common-lisp:ignorable page-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-page-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePage"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-page))
(common-lisp:progn
 (common-lisp:defun get-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact))
(common-lisp:progn
 (common-lisp:defun get-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-channel))
(common-lisp:progn
 (common-lisp:defun get-contact-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContactPolicy"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-policy))
(common-lisp:progn
 (common-lisp:defun list-contact-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable contact-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contact-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListContactChannels"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-channels))
(common-lisp:progn
 (common-lisp:defun list-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results alias-prefix type)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results alias-prefix type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListContacts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contacts))
(common-lisp:progn
 (common-lisp:defun list-engagements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results incident-id
                     time-range-value)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results incident-id
     time-range-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-engagements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEngagements"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-engagements))
(common-lisp:progn
 (common-lisp:defun list-page-receipts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable page-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-page-receipts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPageReceipts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-page-receipts))
(common-lisp:progn
 (common-lisp:defun list-pages-by-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable contact-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pages-by-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPagesByContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pages-by-contact))
(common-lisp:progn
 (common-lisp:defun list-pages-by-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable engagement-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pages-by-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPagesByEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pages-by-engagement))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-contact-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn policy)
   (common-lisp:declare (common-lisp:ignorable contact-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-contact-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutContactPolicy"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-contact-policy))
(common-lisp:progn
 (common-lisp:defun send-activation-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-activation-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendActivationCode"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-activation-code))
(common-lisp:progn
 (common-lisp:defun start-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id sender subject content
                     public-subject public-content incident-id
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id sender subject content public-subject
     public-content incident-id idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-engagement))
(common-lisp:progn
 (common-lisp:defun stop-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id reason)
   (common-lisp:declare (common-lisp:ignorable engagement-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-engagement))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id display-name plan)
   (common-lisp:declare (common-lisp:ignorable contact-id display-name plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact))
(common-lisp:progn
 (common-lisp:defun update-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id name delivery-address)
   (common-lisp:declare
    (common-lisp:ignorable contact-channel-id name delivery-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-channel))
