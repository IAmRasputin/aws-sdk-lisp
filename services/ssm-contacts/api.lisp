;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ssm-contacts/api
  (:use)
  (:nicknames #:aws/ssm-contacts)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ssm-contacts/api)
(common-lisp:progn
 (common-lisp:defclass ssm-contacts-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "ssm-contacts" :protocol
                        :json))
 (common-lisp:export 'ssm-contacts-request))
(common-lisp:progn
 (common-lisp:define-condition ssm-contacts-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ssm-contacts-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DataEncryptionException" . data-encryption-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype accept-code () 'common-lisp:string)
(common-lisp:deftype accept-code-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accept-page-request common-lisp:nil
                       ((accept-code-validation :initarg
                         :accept-code-validation :type
                         (common-lisp:or accept-code-validation
                                         common-lisp:null)
                         :accessor %accept-page-request-accept-code-validation
                         :initform common-lisp:nil)
                        (accept-code :initarg :accept-code :type
                         (common-lisp:or accept-code common-lisp:null)
                         :accessor %accept-page-request-accept-code :initform
                         (common-lisp:error ":accept-code is required"))
                        (note :initarg :note :type
                         (common-lisp:or receipt-info common-lisp:null)
                         :accessor %accept-page-request-note :initform
                         common-lisp:nil)
                        (accept-type :initarg :accept-type :type
                         (common-lisp:or accept-type common-lisp:null)
                         :accessor %accept-page-request-accept-type :initform
                         (common-lisp:error ":accept-type is required"))
                        (contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %accept-page-request-contact-channel-id
                         :initform common-lisp:nil)
                        (page-id :initarg :page-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %accept-page-request-page-id :initform
                         (common-lisp:error ":page-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-page-request 'make-accept-page-request))
 (common-lisp:defun make-accept-page-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept-code-validation accept-code note
                     accept-type contact-channel-id page-id)
   (common-lisp:apply #'common-lisp:make-instance 'accept-page-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-type))
      (common-lisp:list
       (common-lisp:cons "AcceptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-code))
      (common-lisp:list
       (common-lisp:cons "AcceptCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accept-code-validation))
      (common-lisp:list
       (common-lisp:cons "AcceptCodeValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-page-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-page-result 'make-accept-page-result))
 (common-lisp:defun make-accept-page-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'accept-page-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-page-result))
   common-lisp:nil))
(common-lisp:deftype accept-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass activate-contact-channel-request common-lisp:nil
                       ((activation-code :initarg :activation-code :type
                         (common-lisp:or activation-code common-lisp:null)
                         :accessor
                         %activate-contact-channel-request-activation-code
                         :initform
                         (common-lisp:error ":activation-code is required"))
                        (contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %activate-contact-channel-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-contact-channel-request
                    'make-activate-contact-channel-request))
 (common-lisp:defun make-activate-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-code contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "ActivationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-contact-channel-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'activate-contact-channel-result
                    'make-activate-contact-channel-result))
 (common-lisp:defun make-activate-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-contact-channel-result))
   common-lisp:nil))
(common-lisp:deftype activation-code () 'common-lisp:string)
(common-lisp:deftype activation-status () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-target-info common-lisp:nil
                       ((retry-interval-in-minutes :initarg
                         :retry-interval-in-minutes :type
                         (common-lisp:or retry-interval-in-minutes
                                         common-lisp:null)
                         :accessor
                         %channel-target-info-retry-interval-in-minutes
                         :initform common-lisp:nil)
                        (contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %channel-target-info-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'channel-target-info 'make-channel-target-info))
 (common-lisp:defun make-channel-target-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retry-interval-in-minutes
                     contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'channel-target-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-target-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-target-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-interval-in-minutes))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-target-info))
   common-lisp:nil))
(common-lisp:deftype channel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (dependent-entities :initarg :dependent-entities :initform
       common-lisp:nil :reader conflict-exception-dependent-entities)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type
                    'conflict-exception-dependent-entities)))
(common-lisp:progn
 (common-lisp:defclass contact common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %contact-type :initform
                         (common-lisp:error ":type is required"))
                        (display-name :initarg :display-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %contact-display-name :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or contact-alias common-lisp:null)
                         :accessor %contact-alias :initform
                         (common-lisp:error ":alias is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %contact-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export (common-lisp:list 'contact 'make-contact))
 (common-lisp:defun make-contact
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type display-name alias contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'contact
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact))
   common-lisp:nil))
(common-lisp:deftype contact-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact-channel common-lisp:nil
                       ((activation-status :initarg :activation-status :type
                         (common-lisp:or activation-status common-lisp:null)
                         :accessor %contact-channel-activation-status :initform
                         (common-lisp:error ":activation-status is required"))
                        (delivery-address :initarg :delivery-address :type
                         (common-lisp:or contact-channel-address
                                         common-lisp:null)
                         :accessor %contact-channel-delivery-address :initform
                         (common-lisp:error ":delivery-address is required"))
                        (type :initarg :type :type
                         (common-lisp:or channel-type common-lisp:null)
                         :accessor %contact-channel-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor %contact-channel-name :initform
                         (common-lisp:error ":name is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %contact-channel-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))
                        (contact-channel-arn :initarg :contact-channel-arn
                         :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %contact-channel-contact-channel-arn
                         :initform
                         (common-lisp:error
                          ":contact-channel-arn is required"))))
 (common-lisp:export (common-lisp:list 'contact-channel 'make-contact-channel))
 (common-lisp:defun make-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-status delivery-address type
                     name contact-arn contact-channel-arn)
   (common-lisp:apply #'common-lisp:make-instance 'contact-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-status))
      (common-lisp:list
       (common-lisp:cons "ActivationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-channel-address common-lisp:nil
                       ((simple-address :initarg :simple-address :type
                         (common-lisp:or simple-address common-lisp:null)
                         :accessor %contact-channel-address-simple-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'contact-channel-address 'make-contact-channel-address))
 (common-lisp:defun make-contact-channel-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simple-address)
   (common-lisp:apply #'common-lisp:make-instance 'contact-channel-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-address))
      (common-lisp:list
       (common-lisp:cons "SimpleAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contact-channel-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-channel-list ()
   '(trivial-types:proper-list contact-channel))
 (common-lisp:defun |make-contact-channel-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact-target-info common-lisp:nil
                       ((is-essential :initarg :is-essential :type
                         (common-lisp:or is-essential common-lisp:null)
                         :accessor %contact-target-info-is-essential :initform
                         (common-lisp:error ":is-essential is required"))
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %contact-target-info-contact-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'contact-target-info 'make-contact-target-info))
 (common-lisp:defun make-contact-target-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-essential contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'contact-target-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-target-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-target-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-essential))
      (common-lisp:list
       (common-lisp:cons "IsEssential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-target-info))
   common-lisp:nil))
(common-lisp:deftype contact-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contacts-list () '(trivial-types:proper-list contact))
 (common-lisp:defun |make-contacts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass coverage-time common-lisp:nil
                       ((end :initarg :end :type
                         (common-lisp:or hand-off-time common-lisp:null)
                         :accessor %coverage-time-end :initform
                         common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or hand-off-time common-lisp:null)
                         :accessor %coverage-time-start :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'coverage-time 'make-coverage-time))
 (common-lisp:defun make-coverage-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end start)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype coverage-times ()
   '(trivial-types:proper-list coverage-time))
 (common-lisp:defun |make-coverage-times|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-contact-channel-request common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-contact-channel-request-idempotency-token
                         :initform common-lisp:nil)
                        (defer-activation :initarg :defer-activation :type
                         (common-lisp:or defer-activation common-lisp:null)
                         :accessor
                         %create-contact-channel-request-defer-activation
                         :initform common-lisp:nil)
                        (delivery-address :initarg :delivery-address :type
                         (common-lisp:or contact-channel-address
                                         common-lisp:null)
                         :accessor
                         %create-contact-channel-request-delivery-address
                         :initform
                         (common-lisp:error ":delivery-address is required"))
                        (type :initarg :type :type
                         (common-lisp:or channel-type common-lisp:null)
                         :accessor %create-contact-channel-request-type
                         :initform (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor %create-contact-channel-request-name
                         :initform (common-lisp:error ":name is required"))
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %create-contact-channel-request-contact-id
                         :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-contact-channel-request
                    'make-create-contact-channel-request))
 (common-lisp:defun make-create-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token defer-activation
                     delivery-address type name contact-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defer-activation))
      (common-lisp:list
       (common-lisp:cons "DeferActivation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-channel-result common-lisp:nil
                       ((contact-channel-arn :initarg :contact-channel-arn
                         :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %create-contact-channel-result-contact-channel-arn
                         :initform
                         (common-lisp:error
                          ":contact-channel-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-contact-channel-result
                    'make-create-contact-channel-result))
 (common-lisp:defun make-create-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channel-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-request common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %create-contact-request-idempotency-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         %create-contact-request-tags :initform
                         common-lisp:nil)
                        (plan :initarg :plan :type
                         (common-lisp:or plan common-lisp:null) :accessor
                         %create-contact-request-plan :initform
                         (common-lisp:error ":plan is required"))
                        (type :initarg :type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %create-contact-request-type :initform
                         (common-lisp:error ":type is required"))
                        (display-name :initarg :display-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %create-contact-request-display-name
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or contact-alias common-lisp:null)
                         :accessor %create-contact-request-alias :initform
                         (common-lisp:error ":alias is required"))))
 (common-lisp:export
  (common-lisp:list 'create-contact-request 'make-create-contact-request))
 (common-lisp:defun make-create-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token tags plan type
                     display-name alias)
   (common-lisp:apply #'common-lisp:make-instance 'create-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-result common-lisp:nil
                       ((contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %create-contact-result-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-contact-result 'make-create-contact-result))
 (common-lisp:defun make-create-contact-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-contact-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rotation-override-request common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %create-rotation-override-request-idempotency-token
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-rotation-override-request-end-time :initform
                         (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-rotation-override-request-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (new-contact-ids :initarg :new-contact-ids :type
                         (common-lisp:or rotation-override-contacts-arn-list
                                         common-lisp:null)
                         :accessor
                         %create-rotation-override-request-new-contact-ids
                         :initform
                         (common-lisp:error ":new-contact-ids is required"))
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %create-rotation-override-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rotation-override-request
                    'make-create-rotation-override-request))
 (common-lisp:defun make-create-rotation-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token end-time start-time
                     new-contact-ids rotation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-rotation-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-contact-ids))
      (common-lisp:list
       (common-lisp:cons "NewContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rotation-override-result common-lisp:nil
                       ((rotation-override-id :initarg :rotation-override-id
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %create-rotation-override-result-rotation-override-id
                         :initform
                         (common-lisp:error
                          ":rotation-override-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rotation-override-result
                    'make-create-rotation-override-result))
 (common-lisp:defun make-create-rotation-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-override-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-rotation-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-override-id))
      (common-lisp:list
       (common-lisp:cons "RotationOverrideId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rotation-request common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %create-rotation-request-idempotency-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         %create-rotation-request-tags :initform
                         common-lisp:nil)
                        (recurrence :initarg :recurrence :type
                         (common-lisp:or recurrence-settings common-lisp:null)
                         :accessor %create-rotation-request-recurrence
                         :initform
                         (common-lisp:error ":recurrence is required"))
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id common-lisp:null)
                         :accessor %create-rotation-request-time-zone-id
                         :initform
                         (common-lisp:error ":time-zone-id is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-rotation-request-start-time :initform
                         common-lisp:nil)
                        (contact-ids :initarg :contact-ids :type
                         (common-lisp:or rotation-contacts-arn-list
                                         common-lisp:null)
                         :accessor %create-rotation-request-contact-ids
                         :initform
                         (common-lisp:error ":contact-ids is required"))
                        (name :initarg :name :type
                         (common-lisp:or rotation-name common-lisp:null)
                         :accessor %create-rotation-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rotation-request 'make-create-rotation-request))
 (common-lisp:defun make-create-rotation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token tags recurrence
                     time-zone-id start-time contact-ids name)
   (common-lisp:apply #'common-lisp:make-instance 'create-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-ids))
      (common-lisp:list
       (common-lisp:cons "ContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rotation-result common-lisp:nil
                       ((rotation-arn :initarg :rotation-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %create-rotation-result-rotation-arn
                         :initform
                         (common-lisp:error ":rotation-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rotation-result 'make-create-rotation-result))
 (common-lisp:defun make-create-rotation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-rotation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-arn))
      (common-lisp:list
       (common-lisp:cons "RotationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rotation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype daily-settings ()
   '(trivial-types:proper-list hand-off-time))
 (common-lisp:defun |make-daily-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hand-off-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition data-encryption-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'data-encryption-exception
                    'data-encryption-exception-message)))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype day-of-month () 'common-lisp:integer)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deactivate-contact-channel-request common-lisp:nil
                       ((contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %deactivate-contact-channel-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-contact-channel-request
                    'make-deactivate-contact-channel-request))
 (common-lisp:defun make-deactivate-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-contact-channel-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivate-contact-channel-result
                    'make-deactivate-contact-channel-result))
 (common-lisp:defun make-deactivate-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-contact-channel-result))
   common-lisp:nil))
(common-lisp:deftype defer-activation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-contact-channel-request common-lisp:nil
                       ((contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %delete-contact-channel-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-contact-channel-request
                    'make-delete-contact-channel-request))
 (common-lisp:defun make-delete-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-channel-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-contact-channel-result
                    'make-delete-contact-channel-result))
 (common-lisp:defun make-delete-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-request common-lisp:nil
                       ((contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %delete-contact-request-contact-id :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-contact-request 'make-delete-contact-request))
 (common-lisp:defun make-delete-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-contact-result 'make-delete-contact-result))
 (common-lisp:defun make-delete-contact-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-contact-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rotation-override-request common-lisp:nil
                       ((rotation-override-id :initarg :rotation-override-id
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-rotation-override-request-rotation-override-id
                         :initform
                         (common-lisp:error
                          ":rotation-override-id is required"))
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %delete-rotation-override-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rotation-override-request
                    'make-delete-rotation-override-request))
 (common-lisp:defun make-delete-rotation-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-override-id rotation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-rotation-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-override-id))
      (common-lisp:list
       (common-lisp:cons "RotationOverrideId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rotation-override-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-rotation-override-result
                    'make-delete-rotation-override-result))
 (common-lisp:defun make-delete-rotation-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-rotation-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rotation-request common-lisp:nil
                       ((rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %delete-rotation-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rotation-request 'make-delete-rotation-request))
 (common-lisp:defun make-delete-rotation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rotation-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-rotation-result 'make-delete-rotation-result))
 (common-lisp:defun make-delete-rotation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rotation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rotation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dependent-entity common-lisp:nil
                       ((dependent-resource-ids :initarg
                         :dependent-resource-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %dependent-entity-dependent-resource-ids
                         :initform
                         (common-lisp:error
                          ":dependent-resource-ids is required"))
                        (relation-type :initarg :relation-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dependent-entity-relation-type :initform
                         (common-lisp:error ":relation-type is required"))))
 (common-lisp:export
  (common-lisp:list 'dependent-entity 'make-dependent-entity))
 (common-lisp:defun make-dependent-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dependent-resource-ids relation-type)
   (common-lisp:apply #'common-lisp:make-instance 'dependent-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dependent-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dependent-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relation-type))
      (common-lisp:list
       (common-lisp:cons "RelationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dependent-resource-ids))
      (common-lisp:list
       (common-lisp:cons "DependentResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dependent-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dependent-entity-list ()
   '(trivial-types:proper-list dependent-entity))
 (common-lisp:defun |make-dependent-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dependent-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-engagement-request common-lisp:nil
                       ((engagement-id :initarg :engagement-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-engagement-request-engagement-id
                         :initform
                         (common-lisp:error ":engagement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-engagement-request
                    'make-describe-engagement-request))
 (common-lisp:defun make-describe-engagement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engagement-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-engagement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engagement-result common-lisp:nil
                       ((stop-time :initarg :stop-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %describe-engagement-result-stop-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %describe-engagement-result-start-time :initform
                         common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %describe-engagement-result-incident-id
                         :initform common-lisp:nil)
                        (public-content :initarg :public-content :type
                         (common-lisp:or public-content common-lisp:null)
                         :accessor %describe-engagement-result-public-content
                         :initform common-lisp:nil)
                        (public-subject :initarg :public-subject :type
                         (common-lisp:or public-subject common-lisp:null)
                         :accessor %describe-engagement-result-public-subject
                         :initform common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or content common-lisp:null) :accessor
                         %describe-engagement-result-content :initform
                         (common-lisp:error ":content is required"))
                        (subject :initarg :subject :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %describe-engagement-result-subject :initform
                         (common-lisp:error ":subject is required"))
                        (sender :initarg :sender :type
                         (common-lisp:or sender common-lisp:null) :accessor
                         %describe-engagement-result-sender :initform
                         (common-lisp:error ":sender is required"))
                        (engagement-arn :initarg :engagement-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-engagement-result-engagement-arn
                         :initform
                         (common-lisp:error ":engagement-arn is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-engagement-result-contact-arn
                         :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-engagement-result
                    'make-describe-engagement-result))
 (common-lisp:defun make-describe-engagement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stop-time start-time incident-id
                     public-content public-subject content subject sender
                     engagement-arn contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-engagement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "StopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-page-request common-lisp:nil
                       ((page-id :initarg :page-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-page-request-page-id :initform
                         (common-lisp:error ":page-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-page-request 'make-describe-page-request))
 (common-lisp:defun make-describe-page-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-page-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-page-result common-lisp:nil
                       ((delivery-time :initarg :delivery-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %describe-page-result-delivery-time :initform
                         common-lisp:nil)
                        (read-time :initarg :read-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %describe-page-result-read-time :initform
                         common-lisp:nil)
                        (sent-time :initarg :sent-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %describe-page-result-sent-time :initform
                         common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %describe-page-result-incident-id :initform
                         common-lisp:nil)
                        (public-content :initarg :public-content :type
                         (common-lisp:or public-content common-lisp:null)
                         :accessor %describe-page-result-public-content
                         :initform common-lisp:nil)
                        (public-subject :initarg :public-subject :type
                         (common-lisp:or public-subject common-lisp:null)
                         :accessor %describe-page-result-public-subject
                         :initform common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or content common-lisp:null) :accessor
                         %describe-page-result-content :initform
                         (common-lisp:error ":content is required"))
                        (subject :initarg :subject :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %describe-page-result-subject :initform
                         (common-lisp:error ":subject is required"))
                        (sender :initarg :sender :type
                         (common-lisp:or sender common-lisp:null) :accessor
                         %describe-page-result-sender :initform
                         (common-lisp:error ":sender is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-page-result-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))
                        (engagement-arn :initarg :engagement-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-page-result-engagement-arn
                         :initform
                         (common-lisp:error ":engagement-arn is required"))
                        (page-arn :initarg :page-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %describe-page-result-page-arn :initform
                         (common-lisp:error ":page-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-page-result 'make-describe-page-result))
 (common-lisp:defun make-describe-page-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delivery-time read-time sent-time
                     incident-id public-content public-subject content subject
                     sender contact-arn engagement-arn page-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-page-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-page-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-arn))
      (common-lisp:list
       (common-lisp:cons "PageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sent-time))
      (common-lisp:list
       (common-lisp:cons "SentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-time))
      (common-lisp:list
       (common-lisp:cons "ReadTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-time))
      (common-lisp:list
       (common-lisp:cons "DeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-page-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engagement common-lisp:nil
                       ((stop-time :initarg :stop-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %engagement-stop-time :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %engagement-start-time :initform common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %engagement-incident-id :initform
                         common-lisp:nil)
                        (sender :initarg :sender :type
                         (common-lisp:or sender common-lisp:null) :accessor
                         %engagement-sender :initform
                         (common-lisp:error ":sender is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %engagement-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))
                        (engagement-arn :initarg :engagement-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %engagement-engagement-arn :initform
                         (common-lisp:error ":engagement-arn is required"))))
 (common-lisp:export (common-lisp:list 'engagement 'make-engagement))
 (common-lisp:defun make-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stop-time start-time incident-id sender
                     contact-arn engagement-arn)
   (common-lisp:apply #'common-lisp:make-instance 'engagement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engagement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engagement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "StopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engagement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engagements-list ()
   '(trivial-types:proper-list engagement))
 (common-lisp:defun |make-engagements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engagement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-contact-channel-request common-lisp:nil
                       ((contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %get-contact-channel-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-contact-channel-request
                    'make-get-contact-channel-request))
 (common-lisp:defun make-get-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-channel-result common-lisp:nil
                       ((activation-status :initarg :activation-status :type
                         (common-lisp:or activation-status common-lisp:null)
                         :accessor
                         %get-contact-channel-result-activation-status
                         :initform common-lisp:nil)
                        (delivery-address :initarg :delivery-address :type
                         (common-lisp:or contact-channel-address
                                         common-lisp:null)
                         :accessor %get-contact-channel-result-delivery-address
                         :initform
                         (common-lisp:error ":delivery-address is required"))
                        (type :initarg :type :type
                         (common-lisp:or channel-type common-lisp:null)
                         :accessor %get-contact-channel-result-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor %get-contact-channel-result-name :initform
                         (common-lisp:error ":name is required"))
                        (contact-channel-arn :initarg :contact-channel-arn
                         :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %get-contact-channel-result-contact-channel-arn
                         :initform
                         (common-lisp:error
                          ":contact-channel-arn is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-contact-channel-result-contact-arn
                         :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-contact-channel-result
                    'make-get-contact-channel-result))
 (common-lisp:defun make-get-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-status delivery-address type
                     name contact-channel-arn contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-status))
      (common-lisp:list
       (common-lisp:cons "ActivationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-policy-request common-lisp:nil
                       ((contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-contact-policy-request-contact-arn
                         :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-contact-policy-request
                    'make-get-contact-policy-request))
 (common-lisp:defun make-get-contact-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-policy-result common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-contact-policy-result-policy :initform
                         common-lisp:nil)
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-contact-policy-result-contact-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-contact-policy-result
                    'make-get-contact-policy-result))
 (common-lisp:defun make-get-contact-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-request common-lisp:nil
                       ((contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-contact-request-contact-id :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-contact-request 'make-get-contact-request))
 (common-lisp:defun make-get-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-result common-lisp:nil
                       ((plan :initarg :plan :type
                         (common-lisp:or plan common-lisp:null) :accessor
                         %get-contact-result-plan :initform
                         (common-lisp:error ":plan is required"))
                        (type :initarg :type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %get-contact-result-type :initform
                         (common-lisp:error ":type is required"))
                        (display-name :initarg :display-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %get-contact-result-display-name :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or contact-alias common-lisp:null)
                         :accessor %get-contact-result-alias :initform
                         (common-lisp:error ":alias is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-contact-result-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-contact-result 'make-get-contact-result))
 (common-lisp:defun make-get-contact-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key plan type display-name alias contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rotation-override-request common-lisp:nil
                       ((rotation-override-id :initarg :rotation-override-id
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %get-rotation-override-request-rotation-override-id
                         :initform
                         (common-lisp:error
                          ":rotation-override-id is required"))
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-rotation-override-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-rotation-override-request
                    'make-get-rotation-override-request))
 (common-lisp:defun make-get-rotation-override-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-override-id rotation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-rotation-override-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-override-id))
      (common-lisp:list
       (common-lisp:cons "RotationOverrideId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rotation-override-result common-lisp:nil
                       ((create-time :initarg :create-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-rotation-override-result-create-time :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-rotation-override-result-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-rotation-override-result-start-time :initform
                         common-lisp:nil)
                        (new-contact-ids :initarg :new-contact-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor
                         %get-rotation-override-result-new-contact-ids
                         :initform common-lisp:nil)
                        (rotation-arn :initarg :rotation-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-rotation-override-result-rotation-arn
                         :initform common-lisp:nil)
                        (rotation-override-id :initarg :rotation-override-id
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %get-rotation-override-result-rotation-override-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-rotation-override-result
                    'make-get-rotation-override-result))
 (common-lisp:defun make-get-rotation-override-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-time end-time start-time
                     new-contact-ids rotation-arn rotation-override-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-rotation-override-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-override-id))
      (common-lisp:list
       (common-lisp:cons "RotationOverrideId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-arn))
      (common-lisp:list
       (common-lisp:cons "RotationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-contact-ids))
      (common-lisp:list
       (common-lisp:cons "NewContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rotation-override-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rotation-request common-lisp:nil
                       ((rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-rotation-request-rotation-id :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-rotation-request 'make-get-rotation-request))
 (common-lisp:defun make-get-rotation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rotation-result common-lisp:nil
                       ((recurrence :initarg :recurrence :type
                         (common-lisp:or recurrence-settings common-lisp:null)
                         :accessor %get-rotation-result-recurrence :initform
                         (common-lisp:error ":recurrence is required"))
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id common-lisp:null)
                         :accessor %get-rotation-result-time-zone-id :initform
                         (common-lisp:error ":time-zone-id is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-rotation-result-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (contact-ids :initarg :contact-ids :type
                         (common-lisp:or rotation-contacts-arn-list
                                         common-lisp:null)
                         :accessor %get-rotation-result-contact-ids :initform
                         (common-lisp:error ":contact-ids is required"))
                        (name :initarg :name :type
                         (common-lisp:or rotation-name common-lisp:null)
                         :accessor %get-rotation-result-name :initform
                         (common-lisp:error ":name is required"))
                        (rotation-arn :initarg :rotation-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %get-rotation-result-rotation-arn :initform
                         (common-lisp:error ":rotation-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-rotation-result 'make-get-rotation-result))
 (common-lisp:defun make-get-rotation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurrence time-zone-id start-time
                     contact-ids name rotation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-rotation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rotation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-arn))
      (common-lisp:list
       (common-lisp:cons "RotationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-ids))
      (common-lisp:list
       (common-lisp:cons "ContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rotation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hand-off-time common-lisp:nil
                       ((minute-of-hour :initarg :minute-of-hour :type
                         (common-lisp:or minute-of-hour common-lisp:null)
                         :accessor %hand-off-time-minute-of-hour :initform
                         (common-lisp:error ":minute-of-hour is required"))
                        (hour-of-day :initarg :hour-of-day :type
                         (common-lisp:or hour-of-day common-lisp:null)
                         :accessor %hand-off-time-hour-of-day :initform
                         (common-lisp:error ":hour-of-day is required"))))
 (common-lisp:export (common-lisp:list 'hand-off-time 'make-hand-off-time))
 (common-lisp:defun make-hand-off-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minute-of-hour hour-of-day)
   (common-lisp:apply #'common-lisp:make-instance 'hand-off-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hand-off-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hand-off-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hour-of-day))
      (common-lisp:list
       (common-lisp:cons "HourOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minute-of-hour))
      (common-lisp:list
       (common-lisp:cons "MinuteOfHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hand-off-time))
   common-lisp:nil))
(common-lisp:deftype hour-of-day () 'common-lisp:integer)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:deftype incident-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype is-essential () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass list-contact-channels-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-contact-channels-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contact-channels-request-next-token
                         :initform common-lisp:nil)
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-contact-channels-request-contact-id
                         :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-contact-channels-request
                    'make-list-contact-channels-request))
 (common-lisp:defun make-list-contact-channels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token contact-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-contact-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contact-channels-result common-lisp:nil
                       ((contact-channels :initarg :contact-channels :type
                         (common-lisp:or contact-channel-list common-lisp:null)
                         :accessor
                         %list-contact-channels-result-contact-channels
                         :initform
                         (common-lisp:error ":contact-channels is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contact-channels-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-contact-channels-result
                    'make-list-contact-channels-result))
 (common-lisp:defun make-list-contact-channels-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channels next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-contact-channels-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channels))
      (common-lisp:list
       (common-lisp:cons "ContactChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contact-channels-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contacts-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %list-contacts-request-type :initform
                         common-lisp:nil)
                        (alias-prefix :initarg :alias-prefix :type
                         (common-lisp:or contact-alias common-lisp:null)
                         :accessor %list-contacts-request-alias-prefix
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-contacts-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contacts-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-request 'make-list-contacts-request))
 (common-lisp:defun make-list-contacts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type alias-prefix max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-contacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-prefix))
      (common-lisp:list
       (common-lisp:cons "AliasPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contacts-result common-lisp:nil
                       ((contacts :initarg :contacts :type
                         (common-lisp:or contacts-list common-lisp:null)
                         :accessor %list-contacts-result-contacts :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contacts-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-result 'make-list-contacts-result))
 (common-lisp:defun make-list-contacts-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contacts next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-contacts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-contacts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-contacts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contacts))
      (common-lisp:list
       (common-lisp:cons "Contacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-contacts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engagements-request common-lisp:nil
                       ((time-range-value :initarg :time-range-value :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %list-engagements-request-time-range-value :initform
                         common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %list-engagements-request-incident-id
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-engagements-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-engagements-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-engagements-request 'make-list-engagements-request))
 (common-lisp:defun make-list-engagements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range-value incident-id max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-engagements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-value))
      (common-lisp:list
       (common-lisp:cons "TimeRangeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-engagements-result common-lisp:nil
                       ((engagements :initarg :engagements :type
                         (common-lisp:or engagements-list common-lisp:null)
                         :accessor %list-engagements-result-engagements
                         :initform
                         (common-lisp:error ":engagements is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-engagements-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-engagements-result 'make-list-engagements-result))
 (common-lisp:defun make-list-engagements-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engagements next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-engagements-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagements))
      (common-lisp:list
       (common-lisp:cons "Engagements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-engagements-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-page-receipts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-page-receipts-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-page-receipts-request-next-token
                         :initform common-lisp:nil)
                        (page-id :initarg :page-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-page-receipts-request-page-id
                         :initform
                         (common-lisp:error ":page-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-page-receipts-request
                    'make-list-page-receipts-request))
 (common-lisp:defun make-list-page-receipts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token page-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-page-receipts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-page-receipts-result common-lisp:nil
                       ((receipts :initarg :receipts :type
                         (common-lisp:or receipts-list common-lisp:null)
                         :accessor %list-page-receipts-result-receipts
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-page-receipts-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-page-receipts-result
                    'make-list-page-receipts-result))
 (common-lisp:defun make-list-page-receipts-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key receipts next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-page-receipts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipts))
      (common-lisp:list
       (common-lisp:cons "Receipts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-receipts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-page-resolutions-request common-lisp:nil
                       ((page-id :initarg :page-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-page-resolutions-request-page-id
                         :initform (common-lisp:error ":page-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-page-resolutions-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-page-resolutions-request
                    'make-list-page-resolutions-request))
 (common-lisp:defun make-list-page-resolutions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-id next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-page-resolutions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-id))
      (common-lisp:list
       (common-lisp:cons "PageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-page-resolutions-result common-lisp:nil
                       ((page-resolutions :initarg :page-resolutions :type
                         (common-lisp:or resolution-list common-lisp:null)
                         :accessor
                         %list-page-resolutions-result-page-resolutions
                         :initform
                         (common-lisp:error ":page-resolutions is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-page-resolutions-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-page-resolutions-result
                    'make-list-page-resolutions-result))
 (common-lisp:defun make-list-page-resolutions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-resolutions next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-page-resolutions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-resolutions))
      (common-lisp:list
       (common-lisp:cons "PageResolutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-page-resolutions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pages-by-contact-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-pages-by-contact-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-pages-by-contact-request-next-token
                         :initform common-lisp:nil)
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-pages-by-contact-request-contact-id
                         :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-contact-request
                    'make-list-pages-by-contact-request))
 (common-lisp:defun make-list-pages-by-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token contact-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pages-by-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pages-by-contact-result common-lisp:nil
                       ((pages :initarg :pages :type
                         (common-lisp:or pages-list common-lisp:null) :accessor
                         %list-pages-by-contact-result-pages :initform
                         (common-lisp:error ":pages is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-pages-by-contact-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-contact-result
                    'make-list-pages-by-contact-result))
 (common-lisp:defun make-list-pages-by-contact-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pages next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-pages-by-contact-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pages-by-engagement-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-pages-by-engagement-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-pages-by-engagement-request-next-token
                         :initform common-lisp:nil)
                        (engagement-id :initarg :engagement-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %list-pages-by-engagement-request-engagement-id
                         :initform
                         (common-lisp:error ":engagement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-engagement-request
                    'make-list-pages-by-engagement-request))
 (common-lisp:defun make-list-pages-by-engagement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token engagement-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pages-by-engagement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-pages-by-engagement-result common-lisp:nil
                       ((pages :initarg :pages :type
                         (common-lisp:or pages-list common-lisp:null) :accessor
                         %list-pages-by-engagement-result-pages :initform
                         (common-lisp:error ":pages is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-pages-by-engagement-result-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-pages-by-engagement-result
                    'make-list-pages-by-engagement-result))
 (common-lisp:defun make-list-pages-by-engagement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pages next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-pages-by-engagement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pages-by-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-preview-rotation-shifts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-next-token
                         :initform common-lisp:nil)
                        (overrides :initarg :overrides :type
                         (common-lisp:or override-list common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-overrides
                         :initform common-lisp:nil)
                        (recurrence :initarg :recurrence :type
                         (common-lisp:or recurrence-settings common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-recurrence
                         :initform
                         (common-lisp:error ":recurrence is required"))
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-time-zone-id
                         :initform
                         (common-lisp:error ":time-zone-id is required"))
                        (members :initarg :members :type
                         (common-lisp:or rotation-preview-member-list
                                         common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-members
                         :initform (common-lisp:error ":members is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-preview-rotation-shifts-request-end-time
                         :initform (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-preview-rotation-shifts-request-start-time
                         :initform common-lisp:nil)
                        (rotation-start-time :initarg :rotation-start-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-request-rotation-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-preview-rotation-shifts-request
                    'make-list-preview-rotation-shifts-request))
 (common-lisp:defun make-list-preview-rotation-shifts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token overrides
                     recurrence time-zone-id members end-time start-time
                     rotation-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-preview-rotation-shifts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-start-time))
      (common-lisp:list
       (common-lisp:cons "RotationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-preview-rotation-shifts-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-result-next-token
                         :initform common-lisp:nil)
                        (rotation-shifts :initarg :rotation-shifts :type
                         (common-lisp:or rotation-shifts common-lisp:null)
                         :accessor
                         %list-preview-rotation-shifts-result-rotation-shifts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-preview-rotation-shifts-result
                    'make-list-preview-rotation-shifts-result))
 (common-lisp:defun make-list-preview-rotation-shifts-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rotation-shifts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-preview-rotation-shifts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-shifts))
      (common-lisp:list
       (common-lisp:cons "RotationShifts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-preview-rotation-shifts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotation-overrides-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-rotation-overrides-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotation-overrides-request-next-token
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-rotation-overrides-request-end-time :initform
                         (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-rotation-overrides-request-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-rotation-overrides-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-rotation-overrides-request
                    'make-list-rotation-overrides-request))
 (common-lisp:defun make-list-rotation-overrides-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token end-time
                     start-time rotation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rotation-overrides-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotation-overrides-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotation-overrides-result-next-token
                         :initform common-lisp:nil)
                        (rotation-overrides :initarg :rotation-overrides :type
                         (common-lisp:or rotation-overrides common-lisp:null)
                         :accessor
                         %list-rotation-overrides-result-rotation-overrides
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rotation-overrides-result
                    'make-list-rotation-overrides-result))
 (common-lisp:defun make-list-rotation-overrides-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rotation-overrides)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rotation-overrides-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-overrides))
      (common-lisp:list
       (common-lisp:cons "RotationOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-overrides-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotation-shifts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-rotation-shifts-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotation-shifts-request-next-token
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-rotation-shifts-request-end-time :initform
                         (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %list-rotation-shifts-request-start-time :initform
                         common-lisp:nil)
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %list-rotation-shifts-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-rotation-shifts-request
                    'make-list-rotation-shifts-request))
 (common-lisp:defun make-list-rotation-shifts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token end-time
                     start-time rotation-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-rotation-shifts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotation-shifts-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotation-shifts-result-next-token
                         :initform common-lisp:nil)
                        (rotation-shifts :initarg :rotation-shifts :type
                         (common-lisp:or rotation-shifts common-lisp:null)
                         :accessor %list-rotation-shifts-result-rotation-shifts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rotation-shifts-result
                    'make-list-rotation-shifts-result))
 (common-lisp:defun make-list-rotation-shifts-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rotation-shifts)
   (common-lisp:apply #'common-lisp:make-instance 'list-rotation-shifts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-shifts))
      (common-lisp:list
       (common-lisp:cons "RotationShifts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotation-shifts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotations-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-rotations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotations-request-next-token :initform
                         common-lisp:nil)
                        (rotation-name-prefix :initarg :rotation-name-prefix
                         :type (common-lisp:or rotation-name common-lisp:null)
                         :accessor %list-rotations-request-rotation-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rotations-request 'make-list-rotations-request))
 (common-lisp:defun make-list-rotations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     rotation-name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-rotations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-name-prefix))
      (common-lisp:list
       (common-lisp:cons "RotationNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rotations-result common-lisp:nil
                       ((rotations :initarg :rotations :type
                         (common-lisp:or rotations common-lisp:null) :accessor
                         %list-rotations-result-rotations :initform
                         (common-lisp:error ":rotations is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rotations-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rotations-result 'make-list-rotations-result))
 (common-lisp:defun make-list-rotations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotations next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-rotations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotations))
      (common-lisp:list
       (common-lisp:cons "Rotations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rotations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype member () 'common-lisp:string)
(common-lisp:deftype minute-of-hour () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass monthly-setting common-lisp:nil
                       ((hand-off-time :initarg :hand-off-time :type
                         (common-lisp:or hand-off-time common-lisp:null)
                         :accessor %monthly-setting-hand-off-time :initform
                         (common-lisp:error ":hand-off-time is required"))
                        (day-of-month :initarg :day-of-month :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor %monthly-setting-day-of-month :initform
                         (common-lisp:error ":day-of-month is required"))))
 (common-lisp:export (common-lisp:list 'monthly-setting 'make-monthly-setting))
 (common-lisp:defun make-monthly-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hand-off-time day-of-month)
   (common-lisp:apply #'common-lisp:make-instance 'monthly-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "DayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hand-off-time))
      (common-lisp:list
       (common-lisp:cons "HandOffTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monthly-settings ()
   '(trivial-types:proper-list monthly-setting))
 (common-lisp:defun |make-monthly-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monthly-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype number-of-on-calls () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype override-list ()
   '(trivial-types:proper-list preview-override))
 (common-lisp:defun |make-override-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list preview-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass page common-lisp:nil
                       ((read-time :initarg :read-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %page-read-time :initform common-lisp:nil)
                        (delivery-time :initarg :delivery-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %page-delivery-time :initform common-lisp:nil)
                        (sent-time :initarg :sent-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %page-sent-time :initform common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %page-incident-id :initform common-lisp:nil)
                        (sender :initarg :sender :type
                         (common-lisp:or sender common-lisp:null) :accessor
                         %page-sender :initform
                         (common-lisp:error ":sender is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %page-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))
                        (engagement-arn :initarg :engagement-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %page-engagement-arn :initform
                         (common-lisp:error ":engagement-arn is required"))
                        (page-arn :initarg :page-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %page-page-arn :initform
                         (common-lisp:error ":page-arn is required"))))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defun make-page
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-time delivery-time sent-time
                     incident-id sender contact-arn engagement-arn page-arn)
   (common-lisp:apply #'common-lisp:make-instance 'page
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-arn))
      (common-lisp:list
       (common-lisp:cons "PageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sent-time))
      (common-lisp:list
       (common-lisp:cons "SentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-time))
      (common-lisp:list
       (common-lisp:cons "DeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-time))
      (common-lisp:list
       (common-lisp:cons "ReadTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages-list () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass plan common-lisp:nil
                       ((rotation-ids :initarg :rotation-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %plan-rotation-ids :initform
                         common-lisp:nil)
                        (stages :initarg :stages :type
                         (common-lisp:or stages-list common-lisp:null)
                         :accessor %plan-stages :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'plan 'make-plan))
 (common-lisp:defun make-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rotation-ids stages)
   (common-lisp:apply #'common-lisp:make-instance 'plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-ids))
      (common-lisp:list
       (common-lisp:cons "RotationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plan))
   common-lisp:nil))
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass preview-override common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %preview-override-end-time :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %preview-override-start-time :initform
                         common-lisp:nil)
                        (new-members :initarg :new-members :type
                         (common-lisp:or rotation-override-preview-member-list
                                         common-lisp:null)
                         :accessor %preview-override-new-members :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'preview-override 'make-preview-override))
 (common-lisp:defun make-preview-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time new-members)
   (common-lisp:apply #'common-lisp:make-instance 'preview-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preview-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preview-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-members))
      (common-lisp:list
       (common-lisp:cons "NewMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preview-override))
   common-lisp:nil))
(common-lisp:deftype public-content () 'common-lisp:string)
(common-lisp:deftype public-subject () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-contact-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-contact-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %put-contact-policy-request-contact-arn
                         :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-contact-policy-request
                    'make-put-contact-policy-request))
 (common-lisp:defun make-put-contact-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-contact-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-contact-policy-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-contact-policy-result
                    'make-put-contact-policy-result))
 (common-lisp:defun make-put-contact-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-contact-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-contact-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass receipt common-lisp:nil
                       ((receipt-time :initarg :receipt-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %receipt-receipt-time :initform
                         (common-lisp:error ":receipt-time is required"))
                        (receipt-info :initarg :receipt-info :type
                         (common-lisp:or receipt-info common-lisp:null)
                         :accessor %receipt-receipt-info :initform
                         common-lisp:nil)
                        (receipt-type :initarg :receipt-type :type
                         (common-lisp:or receipt-type common-lisp:null)
                         :accessor %receipt-receipt-type :initform
                         (common-lisp:error ":receipt-type is required"))
                        (contact-channel-arn :initarg :contact-channel-arn
                         :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %receipt-contact-channel-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'receipt 'make-receipt))
 (common-lisp:defun make-receipt
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key receipt-time receipt-info receipt-type
                     contact-channel-arn)
   (common-lisp:apply #'common-lisp:make-instance 'receipt
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-arn))
      (common-lisp:list
       (common-lisp:cons "ContactChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-type))
      (common-lisp:list
       (common-lisp:cons "ReceiptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-info))
      (common-lisp:list
       (common-lisp:cons "ReceiptInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipt-time))
      (common-lisp:list
       (common-lisp:cons "ReceiptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt))
   common-lisp:nil))
(common-lisp:deftype receipt-info () 'common-lisp:string)
(common-lisp:deftype receipt-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype receipts-list () '(trivial-types:proper-list receipt))
 (common-lisp:defun |make-receipts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recurrence-multiplier () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass recurrence-settings common-lisp:nil
                       ((recurrence-multiplier :initarg :recurrence-multiplier
                         :type
                         (common-lisp:or recurrence-multiplier
                                         common-lisp:null)
                         :accessor %recurrence-settings-recurrence-multiplier
                         :initform
                         (common-lisp:error
                          ":recurrence-multiplier is required"))
                        (shift-coverages :initarg :shift-coverages :type
                         (common-lisp:or shift-coverages-map common-lisp:null)
                         :accessor %recurrence-settings-shift-coverages
                         :initform common-lisp:nil)
                        (number-of-on-calls :initarg :number-of-on-calls :type
                         (common-lisp:or number-of-on-calls common-lisp:null)
                         :accessor %recurrence-settings-number-of-on-calls
                         :initform
                         (common-lisp:error ":number-of-on-calls is required"))
                        (daily-settings :initarg :daily-settings :type
                         (common-lisp:or daily-settings common-lisp:null)
                         :accessor %recurrence-settings-daily-settings
                         :initform common-lisp:nil)
                        (weekly-settings :initarg :weekly-settings :type
                         (common-lisp:or weekly-settings common-lisp:null)
                         :accessor %recurrence-settings-weekly-settings
                         :initform common-lisp:nil)
                        (monthly-settings :initarg :monthly-settings :type
                         (common-lisp:or monthly-settings common-lisp:null)
                         :accessor %recurrence-settings-monthly-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recurrence-settings 'make-recurrence-settings))
 (common-lisp:defun make-recurrence-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurrence-multiplier shift-coverages
                     number-of-on-calls daily-settings weekly-settings
                     monthly-settings)
   (common-lisp:apply #'common-lisp:make-instance 'recurrence-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurrence-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurrence-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-settings))
      (common-lisp:list
       (common-lisp:cons "MonthlySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weekly-settings))
      (common-lisp:list
       (common-lisp:cons "WeeklySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-settings))
      (common-lisp:list
       (common-lisp:cons "DailySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-on-calls))
      (common-lisp:list
       (common-lisp:cons "NumberOfOnCalls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shift-coverages))
      (common-lisp:list
       (common-lisp:cons "ShiftCoverages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurrence-multiplier))
      (common-lisp:list
       (common-lisp:cons "RecurrenceMultiplier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurrence-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolution-contact common-lisp:nil
                       ((stage-index :initarg :stage-index :type
                         (common-lisp:or stage-index common-lisp:null)
                         :accessor %resolution-contact-stage-index :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %resolution-contact-type :initform
                         (common-lisp:error ":type is required"))
                        (contact-arn :initarg :contact-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %resolution-contact-contact-arn :initform
                         (common-lisp:error ":contact-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'resolution-contact 'make-resolution-contact))
 (common-lisp:defun make-resolution-contact
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage-index type contact-arn)
   (common-lisp:apply #'common-lisp:make-instance 'resolution-contact
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolution-contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolution-contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-index))
      (common-lisp:list
       (common-lisp:cons "StageIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolution-contact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolution-list ()
   '(trivial-types:proper-list resolution-contact))
 (common-lisp:defun |make-resolution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolution-contact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype retry-interval-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass rotation common-lisp:nil
                       ((recurrence :initarg :recurrence :type
                         (common-lisp:or recurrence-settings common-lisp:null)
                         :accessor %rotation-recurrence :initform
                         common-lisp:nil)
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id common-lisp:null)
                         :accessor %rotation-time-zone-id :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-start-time :initform common-lisp:nil)
                        (contact-ids :initarg :contact-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %rotation-contact-ids :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rotation-name common-lisp:null)
                         :accessor %rotation-name :initform
                         (common-lisp:error ":name is required"))
                        (rotation-arn :initarg :rotation-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %rotation-rotation-arn :initform
                         (common-lisp:error ":rotation-arn is required"))))
 (common-lisp:export (common-lisp:list 'rotation 'make-rotation))
 (common-lisp:defun make-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurrence time-zone-id start-time
                     contact-ids name rotation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'rotation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rotation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rotation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-arn))
      (common-lisp:list
       (common-lisp:cons "RotationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-ids))
      (common-lisp:list
       (common-lisp:cons "ContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rotation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rotation-contacts-arn-list ()
   '(trivial-types:proper-list ssm-contacts-arn))
 (common-lisp:defun |make-rotation-contacts-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssm-contacts-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rotation-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rotation-override common-lisp:nil
                       ((create-time :initarg :create-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-override-create-time :initform
                         (common-lisp:error ":create-time is required"))
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-override-end-time :initform
                         (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-override-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (new-contact-ids :initarg :new-contact-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %rotation-override-new-contact-ids :initform
                         (common-lisp:error ":new-contact-ids is required"))
                        (rotation-override-id :initarg :rotation-override-id
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %rotation-override-rotation-override-id :initform
                         (common-lisp:error
                          ":rotation-override-id is required"))))
 (common-lisp:export
  (common-lisp:list 'rotation-override 'make-rotation-override))
 (common-lisp:defun make-rotation-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-time end-time start-time
                     new-contact-ids rotation-override-id)
   (common-lisp:apply #'common-lisp:make-instance 'rotation-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rotation-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rotation-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-override-id))
      (common-lisp:list
       (common-lisp:cons "RotationOverrideId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-contact-ids))
      (common-lisp:list
       (common-lisp:cons "NewContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rotation-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rotation-override-contacts-arn-list ()
   '(trivial-types:proper-list ssm-contacts-arn))
 (common-lisp:defun |make-rotation-override-contacts-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssm-contacts-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rotation-override-preview-member-list ()
   '(trivial-types:proper-list member))
 (common-lisp:defun |make-rotation-override-preview-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rotation-overrides ()
   '(trivial-types:proper-list rotation-override))
 (common-lisp:defun |make-rotation-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rotation-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rotation-preview-member-list ()
   '(trivial-types:proper-list member))
 (common-lisp:defun |make-rotation-preview-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rotation-shift common-lisp:nil
                       ((shift-details :initarg :shift-details :type
                         (common-lisp:or shift-details common-lisp:null)
                         :accessor %rotation-shift-shift-details :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or shift-type common-lisp:null) :accessor
                         %rotation-shift-type :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-shift-end-time :initform
                         (common-lisp:error ":end-time is required"))
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %rotation-shift-start-time :initform
                         (common-lisp:error ":start-time is required"))
                        (contact-ids :initarg :contact-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %rotation-shift-contact-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rotation-shift 'make-rotation-shift))
 (common-lisp:defun make-rotation-shift
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shift-details type end-time start-time
                     contact-ids)
   (common-lisp:apply #'common-lisp:make-instance 'rotation-shift
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rotation-shift))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rotation-shift))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-ids))
      (common-lisp:list
       (common-lisp:cons "ContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shift-details))
      (common-lisp:list
       (common-lisp:cons "ShiftDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rotation-shift))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rotation-shifts ()
   '(trivial-types:proper-list rotation-shift))
 (common-lisp:defun |make-rotation-shifts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rotation-shift))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rotations () '(trivial-types:proper-list rotation))
 (common-lisp:defun |make-rotations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rotation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass send-activation-code-request common-lisp:nil
                       ((contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %send-activation-code-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'send-activation-code-request
                    'make-send-activation-code-request))
 (common-lisp:defun make-send-activation-code-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'send-activation-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-activation-code-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'send-activation-code-result
                    'make-send-activation-code-result))
 (common-lisp:defun make-send-activation-code-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'send-activation-code-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-activation-code-result))
   common-lisp:nil))
(common-lisp:deftype sender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:deftype shift-coverages-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-shift-coverages-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass shift-details common-lisp:nil
                       ((overridden-contact-ids :initarg
                         :overridden-contact-ids :type
                         (common-lisp:or ssm-contacts-arn-list
                                         common-lisp:null)
                         :accessor %shift-details-overridden-contact-ids
                         :initform
                         (common-lisp:error
                          ":overridden-contact-ids is required"))))
 (common-lisp:export (common-lisp:list 'shift-details 'make-shift-details))
 (common-lisp:defun make-shift-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overridden-contact-ids)
   (common-lisp:apply #'common-lisp:make-instance 'shift-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shift-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shift-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overridden-contact-ids))
      (common-lisp:list
       (common-lisp:cons "OverriddenContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shift-details))
   common-lisp:nil))
(common-lisp:deftype shift-type () 'common-lisp:string)
(common-lisp:deftype simple-address () 'common-lisp:string)
(common-lisp:deftype ssm-contacts-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-contacts-arn-list ()
   '(trivial-types:proper-list ssm-contacts-arn))
 (common-lisp:defun |make-ssm-contacts-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssm-contacts-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stage common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or targets-list common-lisp:null)
                         :accessor %stage-targets :initform
                         (common-lisp:error ":targets is required"))
                        (duration-in-minutes :initarg :duration-in-minutes
                         :type
                         (common-lisp:or stage-duration-in-mins
                                         common-lisp:null)
                         :accessor %stage-duration-in-minutes :initform
                         (common-lisp:error
                          ":duration-in-minutes is required"))))
 (common-lisp:export (common-lisp:list 'stage 'make-stage))
 (common-lisp:defun make-stage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets duration-in-minutes)
   (common-lisp:apply #'common-lisp:make-instance 'stage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stage))
   common-lisp:nil))
(common-lisp:deftype stage-duration-in-mins () 'common-lisp:integer)
(common-lisp:deftype stage-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype stages-list () '(trivial-types:proper-list stage))
 (common-lisp:defun |make-stages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-engagement-request common-lisp:nil
                       ((idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %start-engagement-request-idempotency-token
                         :initform common-lisp:nil)
                        (incident-id :initarg :incident-id :type
                         (common-lisp:or incident-id common-lisp:null)
                         :accessor %start-engagement-request-incident-id
                         :initform common-lisp:nil)
                        (public-content :initarg :public-content :type
                         (common-lisp:or public-content common-lisp:null)
                         :accessor %start-engagement-request-public-content
                         :initform common-lisp:nil)
                        (public-subject :initarg :public-subject :type
                         (common-lisp:or public-subject common-lisp:null)
                         :accessor %start-engagement-request-public-subject
                         :initform common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or content common-lisp:null) :accessor
                         %start-engagement-request-content :initform
                         (common-lisp:error ":content is required"))
                        (subject :initarg :subject :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %start-engagement-request-subject :initform
                         (common-lisp:error ":subject is required"))
                        (sender :initarg :sender :type
                         (common-lisp:or sender common-lisp:null) :accessor
                         %start-engagement-request-sender :initform
                         (common-lisp:error ":sender is required"))
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %start-engagement-request-contact-id
                         :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-engagement-request 'make-start-engagement-request))
 (common-lisp:defun make-start-engagement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idempotency-token incident-id
                     public-content public-subject content subject sender
                     contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-engagement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-subject))
      (common-lisp:list
       (common-lisp:cons "PublicSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-content))
      (common-lisp:list
       (common-lisp:cons "PublicContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-id))
      (common-lisp:list
       (common-lisp:cons "IncidentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-engagement-result common-lisp:nil
                       ((engagement-arn :initarg :engagement-arn :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %start-engagement-result-engagement-arn
                         :initform
                         (common-lisp:error ":engagement-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-engagement-result 'make-start-engagement-result))
 (common-lisp:defun make-start-engagement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engagement-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-engagement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-arn))
      (common-lisp:list
       (common-lisp:cons "EngagementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-engagement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-engagement-request common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or stop-reason common-lisp:null)
                         :accessor %stop-engagement-request-reason :initform
                         common-lisp:nil)
                        (engagement-id :initarg :engagement-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %stop-engagement-request-engagement-id
                         :initform
                         (common-lisp:error ":engagement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-engagement-request 'make-stop-engagement-request))
 (common-lisp:defun make-stop-engagement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason engagement-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-engagement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagement-id))
      (common-lisp:list
       (common-lisp:cons "EngagementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-engagement-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-engagement-result 'make-stop-engagement-result))
 (common-lisp:defun make-stop-engagement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-engagement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-engagement-result))
   common-lisp:nil))
(common-lisp:deftype stop-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defun make-tag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target common-lisp:nil
                       ((contact-target-info :initarg :contact-target-info
                         :type
                         (common-lisp:or contact-target-info common-lisp:null)
                         :accessor %target-contact-target-info :initform
                         common-lisp:nil)
                        (channel-target-info :initarg :channel-target-info
                         :type
                         (common-lisp:or channel-target-info common-lisp:null)
                         :accessor %target-channel-target-info :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defun make-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-target-info channel-target-info)
   (common-lisp:apply #'common-lisp:make-instance 'target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-target-info))
      (common-lisp:list
       (common-lisp:cons "ChannelTargetInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-target-info))
      (common-lisp:list
       (common-lisp:cons "ContactTargetInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype targets-list () '(trivial-types:proper-list target))
 (common-lisp:defun |make-targets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass time-range common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %time-range-end-time :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %time-range-start-time :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defun make-time-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time)
   (common-lisp:apply #'common-lisp:make-instance 'time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype time-zone-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defun make-untag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-channel-request common-lisp:nil
                       ((delivery-address :initarg :delivery-address :type
                         (common-lisp:or contact-channel-address
                                         common-lisp:null)
                         :accessor
                         %update-contact-channel-request-delivery-address
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor %update-contact-channel-request-name
                         :initform common-lisp:nil)
                        (contact-channel-id :initarg :contact-channel-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor
                         %update-contact-channel-request-contact-channel-id
                         :initform
                         (common-lisp:error
                          ":contact-channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-contact-channel-request
                    'make-update-contact-channel-request))
 (common-lisp:defun make-update-contact-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delivery-address name contact-channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-contact-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-channel-id))
      (common-lisp:list
       (common-lisp:cons "ContactChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-address))
      (common-lisp:list
       (common-lisp:cons "DeliveryAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-channel-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-contact-channel-result
                    'make-update-contact-channel-result))
 (common-lisp:defun make-update-contact-channel-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-contact-channel-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-channel-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-request common-lisp:nil
                       ((plan :initarg :plan :type
                         (common-lisp:or plan common-lisp:null) :accessor
                         %update-contact-request-plan :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %update-contact-request-display-name
                         :initform common-lisp:nil)
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %update-contact-request-contact-id :initform
                         (common-lisp:error ":contact-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-contact-request 'make-update-contact-request))
 (common-lisp:defun make-update-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key plan display-name contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plan))
      (common-lisp:list
       (common-lisp:cons "Plan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-contact-result 'make-update-contact-result))
 (common-lisp:defun make-update-contact-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-contact-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rotation-request common-lisp:nil
                       ((recurrence :initarg :recurrence :type
                         (common-lisp:or recurrence-settings common-lisp:null)
                         :accessor %update-rotation-request-recurrence
                         :initform
                         (common-lisp:error ":recurrence is required"))
                        (time-zone-id :initarg :time-zone-id :type
                         (common-lisp:or time-zone-id common-lisp:null)
                         :accessor %update-rotation-request-time-zone-id
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-rotation-request-start-time :initform
                         common-lisp:nil)
                        (contact-ids :initarg :contact-ids :type
                         (common-lisp:or rotation-contacts-arn-list
                                         common-lisp:null)
                         :accessor %update-rotation-request-contact-ids
                         :initform common-lisp:nil)
                        (rotation-id :initarg :rotation-id :type
                         (common-lisp:or ssm-contacts-arn common-lisp:null)
                         :accessor %update-rotation-request-rotation-id
                         :initform
                         (common-lisp:error ":rotation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-rotation-request 'make-update-rotation-request))
 (common-lisp:defun make-update-rotation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurrence time-zone-id start-time
                     contact-ids rotation-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-id))
      (common-lisp:list
       (common-lisp:cons "RotationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-ids))
      (common-lisp:list
       (common-lisp:cons "ContactIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone-id))
      (common-lisp:list
       (common-lisp:cons "TimeZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rotation-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-rotation-result 'make-update-rotation-result))
 (common-lisp:defun make-update-rotation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-rotation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rotation-result))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (ssm-contacts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass weekly-setting common-lisp:nil
                       ((hand-off-time :initarg :hand-off-time :type
                         (common-lisp:or hand-off-time common-lisp:null)
                         :accessor %weekly-setting-hand-off-time :initform
                         (common-lisp:error ":hand-off-time is required"))
                        (day-of-week :initarg :day-of-week :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor %weekly-setting-day-of-week :initform
                         (common-lisp:error ":day-of-week is required"))))
 (common-lisp:export (common-lisp:list 'weekly-setting 'make-weekly-setting))
 (common-lisp:defun make-weekly-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hand-off-time day-of-week)
   (common-lisp:apply #'common-lisp:make-instance 'weekly-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weekly-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weekly-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "DayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hand-off-time))
      (common-lisp:list
       (common-lisp:cons "HandOffTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weekly-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype weekly-settings ()
   '(trivial-types:proper-list weekly-setting))
 (common-lisp:defun |make-weekly-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list weekly-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun accept-page
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id contact-channel-id accept-type
                     note accept-code accept-code-validation)
   (common-lisp:declare
    (common-lisp:ignorable page-id contact-channel-id accept-type note
     accept-code accept-code-validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-page-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptPage"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-page))
(common-lisp:progn
 (common-lisp:defun activate-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id activation-code)
   (common-lisp:declare
    (common-lisp:ignorable contact-channel-id activation-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ActivateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-contact-channel))
(common-lisp:progn
 (common-lisp:defun create-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias display-name type plan tags
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable alias display-name type plan tags
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact))
(common-lisp:progn
 (common-lisp:defun create-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id name type delivery-address
                     defer-activation idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id name type delivery-address
     defer-activation idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact-channel))
(common-lisp:progn
 (common-lisp:defun create-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name contact-ids start-time time-zone-id
                     recurrence tags idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable name contact-ids start-time time-zone-id recurrence
     tags idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateRotation"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rotation))
(common-lisp:progn
 (common-lisp:defun create-rotation-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id new-contact-ids start-time
                     end-time idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id new-contact-ids start-time end-time
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rotation-override-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateRotationOverride"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rotation-override))
(common-lisp:progn
 (common-lisp:defun deactivate-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deactivate-contact-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeactivateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-contact-channel))
(common-lisp:progn
 (common-lisp:defun delete-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact))
(common-lisp:progn
 (common-lisp:defun delete-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-channel))
(common-lisp:progn
 (common-lisp:defun delete-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id)
   (common-lisp:declare (common-lisp:ignorable rotation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteRotation"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rotation))
(common-lisp:progn
 (common-lisp:defun delete-rotation-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id rotation-override-id)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id rotation-override-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rotation-override-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteRotationOverride"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rotation-override))
(common-lisp:progn
 (common-lisp:defun describe-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id)
   (common-lisp:declare (common-lisp:ignorable engagement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-engagement))
(common-lisp:progn
 (common-lisp:defun describe-page
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id)
   (common-lisp:declare (common-lisp:ignorable page-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-page-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePage"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-page))
(common-lisp:progn
 (common-lisp:defun get-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact))
(common-lisp:progn
 (common-lisp:defun get-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-channel))
(common-lisp:progn
 (common-lisp:defun get-contact-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetContactPolicy"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-policy))
(common-lisp:progn
 (common-lisp:defun get-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id)
   (common-lisp:declare (common-lisp:ignorable rotation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetRotation"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rotation))
(common-lisp:progn
 (common-lisp:defun get-rotation-override
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id rotation-override-id)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id rotation-override-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rotation-override-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetRotationOverride"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rotation-override))
(common-lisp:progn
 (common-lisp:defun list-contact-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable contact-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contact-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListContactChannels"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contact-channels))
(common-lisp:progn
 (common-lisp:defun list-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results alias-prefix type)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results alias-prefix type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListContacts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contacts))
(common-lisp:progn
 (common-lisp:defun list-engagements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results incident-id
                     time-range-value)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results incident-id
     time-range-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-engagements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEngagements"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-engagements))
(common-lisp:progn
 (common-lisp:defun list-page-receipts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable page-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-page-receipts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPageReceipts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-page-receipts))
(common-lisp:progn
 (common-lisp:defun list-page-resolutions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token page-id)
   (common-lisp:declare (common-lisp:ignorable next-token page-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-page-resolutions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPageResolutions"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-page-resolutions))
(common-lisp:progn
 (common-lisp:defun list-pages-by-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable contact-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pages-by-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPagesByContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pages-by-contact))
(common-lisp:progn
 (common-lisp:defun list-pages-by-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable engagement-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pages-by-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPagesByEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pages-by-engagement))
(common-lisp:progn
 (common-lisp:defun list-preview-rotation-shifts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-start-time start-time end-time
                     members time-zone-id recurrence overrides next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable rotation-start-time start-time end-time members
     time-zone-id recurrence overrides next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-preview-rotation-shifts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPreviewRotationShifts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-preview-rotation-shifts))
(common-lisp:progn
 (common-lisp:defun list-rotation-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id start-time end-time
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id start-time end-time next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rotation-overrides-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRotationOverrides"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rotation-overrides))
(common-lisp:progn
 (common-lisp:defun list-rotation-shifts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id start-time end-time
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id start-time end-time next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rotation-shifts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRotationShifts"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rotation-shifts))
(common-lisp:progn
 (common-lisp:defun list-rotations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-name-prefix next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable rotation-name-prefix next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rotations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRotations"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rotations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-contact-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn policy)
   (common-lisp:declare (common-lisp:ignorable contact-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-contact-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutContactPolicy"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-contact-policy))
(common-lisp:progn
 (common-lisp:defun send-activation-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id)
   (common-lisp:declare (common-lisp:ignorable contact-channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-activation-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendActivationCode"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-activation-code))
(common-lisp:progn
 (common-lisp:defun start-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id sender subject content
                     public-subject public-content incident-id
                     idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id sender subject content public-subject
     public-content incident-id idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-engagement))
(common-lisp:progn
 (common-lisp:defun stop-engagement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engagement-id reason)
   (common-lisp:declare (common-lisp:ignorable engagement-id reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-engagement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopEngagement"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-engagement))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id display-name plan)
   (common-lisp:declare (common-lisp:ignorable contact-id display-name plan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateContact"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact))
(common-lisp:progn
 (common-lisp:defun update-contact-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-channel-id name delivery-address)
   (common-lisp:declare
    (common-lisp:ignorable contact-channel-id name delivery-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateContactChannel"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-contact-channel))
(common-lisp:progn
 (common-lisp:defun update-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rotation-id contact-ids start-time
                     time-zone-id recurrence)
   (common-lisp:declare
    (common-lisp:ignorable rotation-id contact-ids start-time time-zone-id
     recurrence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-contacts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRotation"
                                                        "2021-05-03"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rotation))
