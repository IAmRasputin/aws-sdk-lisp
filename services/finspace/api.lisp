;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/finspace/api
  (:use)
  (:nicknames #:aws/finspace)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/finspace/api)
(common-lisp:progn
 (common-lisp:defclass finspace-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "finspace" :protocol
                        :rest-json))
 (common-lisp:export 'finspace-request))
(common-lisp:progn
 (common-lisp:define-condition finspace-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'finspace-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (finspace-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:deftype attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-attribute-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass create-environment-request common-lisp:nil
                       ((data-bundles :initarg :|dataBundles| :type
                         (common-lisp:or data-bundle-arns common-lisp:null)
                         :accessor %create-environment-request-data-bundles
                         :initform common-lisp:nil)
                        (superuser-parameters :initarg :|superuserParameters|
                         :type
                         (common-lisp:or superuser-parameters common-lisp:null)
                         :accessor
                         %create-environment-request-superuser-parameters
                         :initform common-lisp:nil)
                        (federation-parameters :initarg :|federationParameters|
                         :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor
                         %create-environment-request-federation-parameters
                         :initform common-lisp:nil)
                        (federation-mode :initarg :|federationMode| :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor %create-environment-request-federation-mode
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-environment-request-tags :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-environment-request-kms-key-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-environment-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %create-environment-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-environment-request
                    'make-create-environment-request))
 (common-lisp:defun make-create-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-bundles superuser-parameters
                     federation-parameters federation-mode tags kms-key-id
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superuser-parameters))
      (common-lisp:list
       (common-lisp:cons "superuserParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-bundles))
      (common-lisp:list
       (common-lisp:cons "dataBundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-response common-lisp:nil
                       ((environment-url :initarg :|environmentUrl| :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         %create-environment-response-environment-url :initform
                         common-lisp:nil)
                        (environment-arn :initarg :|environmentArn| :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %create-environment-response-environment-arn
                         :initform common-lisp:nil)
                        (environment-id :initarg :|environmentId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %create-environment-response-environment-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-environment-response
                    'make-create-environment-response))
 (common-lisp:defun make-create-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-url environment-arn
                     environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-url))
      (common-lisp:list
       (common-lisp:cons "environmentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-response))
   common-lisp:nil))
(common-lisp:deftype data-bundle-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-bundle-arns ()
   '(trivial-types:proper-list data-bundle-arn))
 (common-lisp:defun |make-data-bundle-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-bundle-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-environment-request common-lisp:nil
                       ((environment-id :initarg :|environmentId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %delete-environment-request-environment-id :initform
                         (common-lisp:error ":environmentid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-environment-request
                    'make-delete-environment-request))
 (common-lisp:defun make-delete-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-environment-response
                    'make-delete-environment-response))
 (common-lisp:defun make-delete-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype email-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((federation-parameters :initarg :|federationParameters|
                         :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor %environment-federation-parameters :initform
                         common-lisp:nil)
                        (federation-mode :initarg :|federationMode| :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor %environment-federation-mode :initform
                         common-lisp:nil)
                        (dedicated-service-account-id :initarg
                         :|dedicatedServiceAccountId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %environment-dedicated-service-account-id :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %environment-kms-key-id :initform common-lisp:nil)
                        (sage-maker-studio-domain-url :initarg
                         :|sageMakerStudioDomainUrl| :type
                         (common-lisp:or sms-domain-url common-lisp:null)
                         :accessor %environment-sage-maker-studio-domain-url
                         :initform common-lisp:nil)
                        (environment-arn :initarg :|environmentArn| :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %environment-environment-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %environment-description :initform
                         common-lisp:nil)
                        (environment-url :initarg :|environmentUrl| :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         %environment-environment-url :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or environment-status common-lisp:null)
                         :accessor %environment-status :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :|awsAccountId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %environment-aws-account-id :initform common-lisp:nil)
                        (environment-id :initarg :|environmentId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %environment-environment-id :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %environment-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defun make-environment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key federation-parameters federation-mode
                     dedicated-service-account-id kms-key-id
                     sage-maker-studio-domain-url environment-arn description
                     environment-url status aws-account-id environment-id name)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "environmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-url))
      (common-lisp:list
       (common-lisp:cons "environmentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "environmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-studio-domain-url))
      (common-lisp:list
       (common-lisp:cons "sageMakerStudioDomainUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-service-account-id))
      (common-lisp:list
       (common-lisp:cons "dedicatedServiceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-list ()
   '(trivial-types:proper-list environment))
 (common-lisp:defun |make-environment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:deftype environment-status () 'common-lisp:string)
(common-lisp:deftype federation-attribute-key () 'common-lisp:string)
(common-lisp:deftype federation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass federation-parameters common-lisp:nil
                       ((attribute-map :initarg :|attributeMap| :type
                         (common-lisp:or attribute-map common-lisp:null)
                         :accessor %federation-parameters-attribute-map
                         :initform common-lisp:nil)
                        (federation-provider-name :initarg
                         :|federationProviderName| :type
                         (common-lisp:or federation-provider-name
                                         common-lisp:null)
                         :accessor
                         %federation-parameters-federation-provider-name
                         :initform common-lisp:nil)
                        (federation-urn :initarg :|federationURN| :type
                         (common-lisp:or |urn| common-lisp:null) :accessor
                         %federation-parameters-federation-urn :initform
                         common-lisp:nil)
                        (application-call-back-url :initarg
                         :|applicationCallBackURL| :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         %federation-parameters-application-call-back-url
                         :initform common-lisp:nil)
                        (saml-metadata-url :initarg :|samlMetadataURL| :type
                         (common-lisp:or |url| common-lisp:null) :accessor
                         %federation-parameters-saml-metadata-url :initform
                         common-lisp:nil)
                        (saml-metadata-document :initarg
                         :|samlMetadataDocument| :type
                         (common-lisp:or saml-metadata-document
                                         common-lisp:null)
                         :accessor
                         %federation-parameters-saml-metadata-document
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'federation-parameters 'make-federation-parameters))
 (common-lisp:defun make-federation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-map federation-provider-name
                     federation-urn application-call-back-url saml-metadata-url
                     saml-metadata-document)
   (common-lisp:apply #'common-lisp:make-instance 'federation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saml-metadata-document))
      (common-lisp:list
       (common-lisp:cons "samlMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-metadata-url))
      (common-lisp:list
       (common-lisp:cons "samlMetadataURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-call-back-url))
      (common-lisp:list
       (common-lisp:cons "applicationCallBackURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-urn))
      (common-lisp:list
       (common-lisp:cons "federationURN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-provider-name))
      (common-lisp:list
       (common-lisp:cons "federationProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-map))
      (common-lisp:list
       (common-lisp:cons "attributeMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          federation-parameters))
   common-lisp:nil))
(common-lisp:deftype federation-provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-environment-request common-lisp:nil
                       ((environment-id :initarg :|environmentId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %get-environment-request-environment-id :initform
                         (common-lisp:error ":environmentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-environment-request 'make-get-environment-request))
 (common-lisp:defun make-get-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor %get-environment-response-environment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-environment-response 'make-get-environment-response))
 (common-lisp:defun make-get-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-response))
   common-lisp:nil))
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-environments-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor %list-environments-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-environments-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-environments-request
                    'make-list-environments-request))
 (common-lisp:defun make-list-environments-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-environments-response-next-token
                         :initform common-lisp:nil)
                        (environments :initarg :|environments| :type
                         (common-lisp:or environment-list common-lisp:null)
                         :accessor %list-environments-response-environments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-environments-response
                    'make-list-environments-response))
 (common-lisp:defun make-list-environments-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token environments)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype result-limit () 'common-lisp:integer)
(common-lisp:deftype saml-metadata-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sms-domain-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass superuser-parameters common-lisp:nil
                       ((last-name :initarg :|lastName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %superuser-parameters-last-name :initform
                         (common-lisp:error ":lastname is required"))
                        (first-name :initarg :|firstName| :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor %superuser-parameters-first-name :initform
                         (common-lisp:error ":firstname is required"))
                        (email-address :initarg :|emailAddress| :type
                         (common-lisp:or email-id common-lisp:null) :accessor
                         %superuser-parameters-email-address :initform
                         (common-lisp:error ":emailaddress is required"))))
 (common-lisp:export
  (common-lisp:list 'superuser-parameters 'make-superuser-parameters))
 (common-lisp:defun make-superuser-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-name first-name email-address)
   (common-lisp:apply #'common-lisp:make-instance 'superuser-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input superuser-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input superuser-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input superuser-parameters))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (finspace-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-request common-lisp:nil
                       ((federation-parameters :initarg :|federationParameters|
                         :type
                         (common-lisp:or federation-parameters
                                         common-lisp:null)
                         :accessor
                         %update-environment-request-federation-parameters
                         :initform common-lisp:nil)
                        (federation-mode :initarg :|federationMode| :type
                         (common-lisp:or federation-mode common-lisp:null)
                         :accessor %update-environment-request-federation-mode
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-environment-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or environment-name common-lisp:null)
                         :accessor %update-environment-request-name :initform
                         common-lisp:nil)
                        (environment-id :initarg :|environmentId| :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         %update-environment-request-environment-id :initform
                         (common-lisp:error ":environmentid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-environment-request
                    'make-update-environment-request))
 (common-lisp:defun make-update-environment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key federation-parameters federation-mode
                     description name environment-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federation-mode))
      (common-lisp:list
       (common-lisp:cons "federationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'federation-parameters))
      (common-lisp:list
       (common-lisp:cons "federationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor %update-environment-response-environment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-environment-response
                    'make-update-environment-response))
 (common-lisp:defun make-update-environment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (finspace-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |url| () 'common-lisp:string)
(common-lisp:deftype |urn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description kms-key-id tags
                     federation-mode federation-parameters superuser-parameters
                     data-bundles)
   (common-lisp:declare
    (common-lisp:ignorable name description kms-key-id tags federation-mode
     federation-parameters superuser-parameters data-bundles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/environment"
                                                        "CreateEnvironment"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "DeleteEnvironment"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id)
   (common-lisp:declare (common-lisp:ignorable environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "GetEnvironment"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/environment"
                                                        "ListEnvironments"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-id name description
                     federation-mode federation-parameters)
   (common-lisp:declare
    (common-lisp:ignorable environment-id name description federation-mode
     federation-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/environment/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-id))))
                                                        "UpdateEnvironment"
                                                        "2021-03-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-environment))
