;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudfront/api
  (:use)
  (:nicknames #:aws/cloudfront)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudfront/api)
(common-lisp:progn
 (common-lisp:defclass cloudfront-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cloudfront" :protocol
                        :rest-xml))
 (common-lisp:export 'cloudfront-request))
(common-lisp:progn
 (common-lisp:define-condition cloudfront-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudfront-error))
(common-lisp:defvar *error-map*
  '(("AccessDenied" . access-denied) ("BatchTooLarge" . batch-too-large)
    ("CNAMEAlreadyExists" . cnamealready-exists)
    ("CachePolicyAlreadyExists" . cache-policy-already-exists)
    ("CachePolicyInUse" . cache-policy-in-use)
    ("CannotChangeImmutablePublicKeyFields"
     . cannot-change-immutable-public-key-fields)
    ("CloudFrontOriginAccessIdentityAlreadyExists"
     . cloud-front-origin-access-identity-already-exists)
    ("CloudFrontOriginAccessIdentityInUse"
     . cloud-front-origin-access-identity-in-use)
    ("ContinuousDeploymentPolicyAlreadyExists"
     . continuous-deployment-policy-already-exists)
    ("ContinuousDeploymentPolicyInUse" . continuous-deployment-policy-in-use)
    ("DistributionAlreadyExists" . distribution-already-exists)
    ("DistributionNotDisabled" . distribution-not-disabled)
    ("FieldLevelEncryptionConfigAlreadyExists"
     . field-level-encryption-config-already-exists)
    ("FieldLevelEncryptionConfigInUse" . field-level-encryption-config-in-use)
    ("FieldLevelEncryptionProfileAlreadyExists"
     . field-level-encryption-profile-already-exists)
    ("FieldLevelEncryptionProfileInUse"
     . field-level-encryption-profile-in-use)
    ("FieldLevelEncryptionProfileSizeExceeded"
     . field-level-encryption-profile-size-exceeded)
    ("FunctionAlreadyExists" . function-already-exists)
    ("FunctionInUse" . function-in-use)
    ("FunctionSizeLimitExceeded" . function-size-limit-exceeded)
    ("IllegalDelete" . illegal-delete)
    ("IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior"
     . illegal-field-level-encryption-config-association-with-cache-behavior)
    ("IllegalOriginAccessConfiguration" . illegal-origin-access-configuration)
    ("IllegalUpdate" . illegal-update)
    ("InconsistentQuantities" . inconsistent-quantities)
    ("InvalidArgument" . invalid-argument)
    ("InvalidDefaultRootObject" . invalid-default-root-object)
    ("InvalidDomainNameForOriginAccessControl"
     . invalid-domain-name-for-origin-access-control)
    ("InvalidErrorCode" . invalid-error-code)
    ("InvalidForwardCookies" . invalid-forward-cookies)
    ("InvalidFunctionAssociation" . invalid-function-association)
    ("InvalidGeoRestrictionParameter" . invalid-geo-restriction-parameter)
    ("InvalidHeadersForS3Origin" . invalid-headers-for-s3origin)
    ("InvalidIfMatchVersion" . invalid-if-match-version)
    ("InvalidLambdaFunctionAssociation" . invalid-lambda-function-association)
    ("InvalidLocationCode" . invalid-location-code)
    ("InvalidMinimumProtocolVersion" . invalid-minimum-protocol-version)
    ("InvalidOrigin" . invalid-origin)
    ("InvalidOriginAccessControl" . invalid-origin-access-control)
    ("InvalidOriginAccessIdentity" . invalid-origin-access-identity)
    ("InvalidOriginKeepaliveTimeout" . invalid-origin-keepalive-timeout)
    ("InvalidOriginReadTimeout" . invalid-origin-read-timeout)
    ("InvalidProtocolSettings" . invalid-protocol-settings)
    ("InvalidQueryStringParameters" . invalid-query-string-parameters)
    ("InvalidRelativePath" . invalid-relative-path)
    ("InvalidRequiredProtocol" . invalid-required-protocol)
    ("InvalidResponseCode" . invalid-response-code)
    ("InvalidTTLOrder" . invalid-ttlorder) ("InvalidTagging" . invalid-tagging)
    ("InvalidViewerCertificate" . invalid-viewer-certificate)
    ("InvalidWebACLId" . invalid-web-aclid)
    ("KeyGroupAlreadyExists" . key-group-already-exists)
    ("MissingBody" . missing-body)
    ("MonitoringSubscriptionAlreadyExists"
     . monitoring-subscription-already-exists)
    ("NoSuchCachePolicy" . no-such-cache-policy)
    ("NoSuchCloudFrontOriginAccessIdentity"
     . no-such-cloud-front-origin-access-identity)
    ("NoSuchContinuousDeploymentPolicy" . no-such-continuous-deployment-policy)
    ("NoSuchDistribution" . no-such-distribution)
    ("NoSuchFieldLevelEncryptionConfig"
     . no-such-field-level-encryption-config)
    ("NoSuchFieldLevelEncryptionProfile"
     . no-such-field-level-encryption-profile)
    ("NoSuchFunctionExists" . no-such-function-exists)
    ("NoSuchInvalidation" . no-such-invalidation)
    ("NoSuchMonitoringSubscription" . no-such-monitoring-subscription)
    ("NoSuchOrigin" . no-such-origin)
    ("NoSuchOriginAccessControl" . no-such-origin-access-control)
    ("NoSuchOriginRequestPolicy" . no-such-origin-request-policy)
    ("NoSuchPublicKey" . no-such-public-key)
    ("NoSuchRealtimeLogConfig" . no-such-realtime-log-config)
    ("NoSuchResource" . no-such-resource)
    ("NoSuchResponseHeadersPolicy" . no-such-response-headers-policy)
    ("NoSuchStreamingDistribution" . no-such-streaming-distribution)
    ("OriginAccessControlAlreadyExists" . origin-access-control-already-exists)
    ("OriginAccessControlInUse" . origin-access-control-in-use)
    ("OriginRequestPolicyAlreadyExists" . origin-request-policy-already-exists)
    ("OriginRequestPolicyInUse" . origin-request-policy-in-use)
    ("PreconditionFailed" . precondition-failed)
    ("PublicKeyAlreadyExists" . public-key-already-exists)
    ("PublicKeyInUse" . public-key-in-use)
    ("QueryArgProfileEmpty" . query-arg-profile-empty)
    ("RealtimeLogConfigAlreadyExists" . realtime-log-config-already-exists)
    ("RealtimeLogConfigInUse" . realtime-log-config-in-use)
    ("RealtimeLogConfigOwnerMismatch" . realtime-log-config-owner-mismatch)
    ("ResourceInUse" . resource-in-use)
    ("ResponseHeadersPolicyAlreadyExists"
     . response-headers-policy-already-exists)
    ("ResponseHeadersPolicyInUse" . response-headers-policy-in-use)
    ("StagingDistributionInUse" . staging-distribution-in-use)
    ("StreamingDistributionAlreadyExists"
     . streaming-distribution-already-exists)
    ("StreamingDistributionNotDisabled" . streaming-distribution-not-disabled)
    ("TestFunctionFailed" . test-function-failed)
    ("TooLongCSPInResponseHeadersPolicy"
     . too-long-cspin-response-headers-policy)
    ("TooManyCacheBehaviors" . too-many-cache-behaviors)
    ("TooManyCachePolicies" . too-many-cache-policies)
    ("TooManyCertificates" . too-many-certificates)
    ("TooManyCloudFrontOriginAccessIdentities"
     . too-many-cloud-front-origin-access-identities)
    ("TooManyContinuousDeploymentPolicies"
     . too-many-continuous-deployment-policies)
    ("TooManyCookieNamesInWhiteList" . too-many-cookie-names-in-white-list)
    ("TooManyCookiesInCachePolicy" . too-many-cookies-in-cache-policy)
    ("TooManyCookiesInOriginRequestPolicy"
     . too-many-cookies-in-origin-request-policy)
    ("TooManyCustomHeadersInResponseHeadersPolicy"
     . too-many-custom-headers-in-response-headers-policy)
    ("TooManyDistributionCNAMEs" . too-many-distribution-cnames)
    ("TooManyDistributions" . too-many-distributions)
    ("TooManyDistributionsAssociatedToCachePolicy"
     . too-many-distributions-associated-to-cache-policy)
    ("TooManyDistributionsAssociatedToFieldLevelEncryptionConfig"
     . too-many-distributions-associated-to-field-level-encryption-config)
    ("TooManyDistributionsAssociatedToKeyGroup"
     . too-many-distributions-associated-to-key-group)
    ("TooManyDistributionsAssociatedToOriginAccessControl"
     . too-many-distributions-associated-to-origin-access-control)
    ("TooManyDistributionsAssociatedToOriginRequestPolicy"
     . too-many-distributions-associated-to-origin-request-policy)
    ("TooManyDistributionsAssociatedToResponseHeadersPolicy"
     . too-many-distributions-associated-to-response-headers-policy)
    ("TooManyDistributionsWithFunctionAssociations"
     . too-many-distributions-with-function-associations)
    ("TooManyDistributionsWithLambdaAssociations"
     . too-many-distributions-with-lambda-associations)
    ("TooManyDistributionsWithSingleFunctionARN"
     . too-many-distributions-with-single-function-arn)
    ("TooManyFieldLevelEncryptionConfigs"
     . too-many-field-level-encryption-configs)
    ("TooManyFieldLevelEncryptionContentTypeProfiles"
     . too-many-field-level-encryption-content-type-profiles)
    ("TooManyFieldLevelEncryptionEncryptionEntities"
     . too-many-field-level-encryption-encryption-entities)
    ("TooManyFieldLevelEncryptionFieldPatterns"
     . too-many-field-level-encryption-field-patterns)
    ("TooManyFieldLevelEncryptionProfiles"
     . too-many-field-level-encryption-profiles)
    ("TooManyFieldLevelEncryptionQueryArgProfiles"
     . too-many-field-level-encryption-query-arg-profiles)
    ("TooManyFunctionAssociations" . too-many-function-associations)
    ("TooManyFunctions" . too-many-functions)
    ("TooManyHeadersInCachePolicy" . too-many-headers-in-cache-policy)
    ("TooManyHeadersInForwardedValues" . too-many-headers-in-forwarded-values)
    ("TooManyHeadersInOriginRequestPolicy"
     . too-many-headers-in-origin-request-policy)
    ("TooManyInvalidationsInProgress" . too-many-invalidations-in-progress)
    ("TooManyKeyGroups" . too-many-key-groups)
    ("TooManyKeyGroupsAssociatedToDistribution"
     . too-many-key-groups-associated-to-distribution)
    ("TooManyLambdaFunctionAssociations"
     . too-many-lambda-function-associations)
    ("TooManyOriginAccessControls" . too-many-origin-access-controls)
    ("TooManyOriginCustomHeaders" . too-many-origin-custom-headers)
    ("TooManyOriginGroupsPerDistribution"
     . too-many-origin-groups-per-distribution)
    ("TooManyOriginRequestPolicies" . too-many-origin-request-policies)
    ("TooManyOrigins" . too-many-origins)
    ("TooManyPublicKeys" . too-many-public-keys)
    ("TooManyPublicKeysInKeyGroup" . too-many-public-keys-in-key-group)
    ("TooManyQueryStringParameters" . too-many-query-string-parameters)
    ("TooManyQueryStringsInCachePolicy"
     . too-many-query-strings-in-cache-policy)
    ("TooManyQueryStringsInOriginRequestPolicy"
     . too-many-query-strings-in-origin-request-policy)
    ("TooManyRealtimeLogConfigs" . too-many-realtime-log-configs)
    ("TooManyRemoveHeadersInResponseHeadersPolicy"
     . too-many-remove-headers-in-response-headers-policy)
    ("TooManyResponseHeadersPolicies" . too-many-response-headers-policies)
    ("TooManyStreamingDistributionCNAMEs"
     . too-many-streaming-distribution-cnames)
    ("TooManyStreamingDistributions" . too-many-streaming-distributions)
    ("TooManyTrustedSigners" . too-many-trusted-signers)
    ("TrustedKeyGroupDoesNotExist" . trusted-key-group-does-not-exist)
    ("TrustedSignerDoesNotExist" . trusted-signer-does-not-exist)
    ("UnsupportedOperation" . unsupported-operation)))
(common-lisp:progn
 (common-lisp:deftype access-control-allow-headers-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-access-control-allow-headers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-control-allow-methods-list ()
   '(trivial-types:proper-list
     response-headers-policy-access-control-allow-methods-values))
 (common-lisp:defun |make-access-control-allow-methods-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-headers-policy-access-control-allow-methods-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-control-allow-origins-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-access-control-allow-origins-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-control-expose-headers-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-access-control-expose-headers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition access-denied
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-message)))
 (common-lisp:export (common-lisp:list 'access-denied 'access-denied-message)))
(common-lisp:progn
 (common-lisp:defclass active-trusted-key-groups common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or kgkey-pair-ids-list common-lisp:null)
                         :accessor %active-trusted-key-groups-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %active-trusted-key-groups-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %active-trusted-key-groups-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'active-trusted-key-groups
                    'make-active-trusted-key-groups))
 (common-lisp:defun make-active-trusted-key-groups
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity enabled)
   (common-lisp:apply #'common-lisp:make-instance 'active-trusted-key-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-key-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-key-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-key-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass active-trusted-signers common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or signer-list common-lisp:null)
                         :accessor %active-trusted-signers-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %active-trusted-signers-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %active-trusted-signers-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'active-trusted-signers 'make-active-trusted-signers))
 (common-lisp:defun make-active-trusted-signers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity enabled)
   (common-lisp:apply #'common-lisp:make-instance 'active-trusted-signers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-signers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-signers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-trusted-signers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass alias-icprecordal common-lisp:nil
                       ((icprecordal-status :initarg :icprecordal-status :type
                         (common-lisp:or icprecordal-status common-lisp:null)
                         :accessor %alias-icprecordal-icprecordal-status
                         :initform common-lisp:nil)
                        (cname :initarg :cname :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %alias-icprecordal-cname :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'alias-icprecordal 'make-alias-icprecordal))
 (common-lisp:defun make-alias-icprecordal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key icprecordal-status cname)
   (common-lisp:apply #'common-lisp:make-instance 'alias-icprecordal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-icprecordal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-icprecordal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cname))
      (common-lisp:list
       (common-lisp:cons "CNAME"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icprecordal-status))
      (common-lisp:list
       (common-lisp:cons "ICPRecordalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-icprecordal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alias-icprecordals ()
   '(trivial-types:proper-list alias-icprecordal))
 (common-lisp:defun |make-alias-icprecordals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-icprecordal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype alias-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aliases common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or alias-list common-lisp:null) :accessor
                         %aliases-items :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %aliases-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'aliases 'make-aliases))
 (common-lisp:defun make-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'aliases
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aliases))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aliases))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aliases))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allowed-methods common-lisp:nil
                       ((cached-methods :initarg :cached-methods :type
                         (common-lisp:or cached-methods common-lisp:null)
                         :accessor %allowed-methods-cached-methods :initform
                         common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or methods-list common-lisp:null)
                         :accessor %allowed-methods-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %allowed-methods-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'allowed-methods 'make-allowed-methods))
 (common-lisp:defun make-allowed-methods
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cached-methods items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'allowed-methods
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed-methods))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed-methods))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cached-methods))
      (common-lisp:list
       (common-lisp:cons "CachedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed-methods))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-alias-request common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %associate-alias-request-alias :initform
                         (common-lisp:error ":alias is required"))
                        (target-distribution-id :initarg
                         :target-distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %associate-alias-request-target-distribution-id
                         :initform
                         (common-lisp:error
                          ":target-distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-alias-request 'make-associate-alias-request))
 (common-lisp:defun make-associate-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias target-distribution-id)
   (common-lisp:apply #'common-lisp:make-instance 'associate-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-account-number-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-aws-account-number-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition batch-too-large
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       batch-too-large-message)))
 (common-lisp:export
  (common-lisp:list 'batch-too-large 'batch-too-large-message)))
(common-lisp:progn
 (common-lisp:define-condition cnamealready-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cnamealready-exists-message)))
 (common-lisp:export
  (common-lisp:list 'cnamealready-exists 'cnamealready-exists-message)))
(common-lisp:progn
 (common-lisp:defclass cache-behavior common-lisp:nil
                       ((max-ttl :initarg :max-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-behavior-max-ttl :initform
                         common-lisp:nil)
                        (default-ttl :initarg :default-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-behavior-default-ttl :initform
                         common-lisp:nil)
                        (min-ttl :initarg :min-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-behavior-min-ttl :initform
                         common-lisp:nil)
                        (forwarded-values :initarg :forwarded-values :type
                         (common-lisp:or forwarded-values common-lisp:null)
                         :accessor %cache-behavior-forwarded-values :initform
                         common-lisp:nil)
                        (response-headers-policy-id :initarg
                         :response-headers-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-response-headers-policy-id
                         :initform common-lisp:nil)
                        (origin-request-policy-id :initarg
                         :origin-request-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-origin-request-policy-id
                         :initform common-lisp:nil)
                        (cache-policy-id :initarg :cache-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-cache-policy-id :initform
                         common-lisp:nil)
                        (realtime-log-config-arn :initarg
                         :realtime-log-config-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-realtime-log-config-arn
                         :initform common-lisp:nil)
                        (field-level-encryption-id :initarg
                         :field-level-encryption-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-field-level-encryption-id
                         :initform common-lisp:nil)
                        (function-associations :initarg :function-associations
                         :type
                         (common-lisp:or function-associations
                                         common-lisp:null)
                         :accessor %cache-behavior-function-associations
                         :initform common-lisp:nil)
                        (lambda-function-associations :initarg
                         :lambda-function-associations :type
                         (common-lisp:or lambda-function-associations
                                         common-lisp:null)
                         :accessor %cache-behavior-lambda-function-associations
                         :initform common-lisp:nil)
                        (compress :initarg :compress :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %cache-behavior-compress :initform
                         common-lisp:nil)
                        (smooth-streaming :initarg :smooth-streaming :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %cache-behavior-smooth-streaming :initform
                         common-lisp:nil)
                        (allowed-methods :initarg :allowed-methods :type
                         (common-lisp:or allowed-methods common-lisp:null)
                         :accessor %cache-behavior-allowed-methods :initform
                         common-lisp:nil)
                        (viewer-protocol-policy :initarg
                         :viewer-protocol-policy :type
                         (common-lisp:or viewer-protocol-policy
                                         common-lisp:null)
                         :accessor %cache-behavior-viewer-protocol-policy
                         :initform
                         (common-lisp:error
                          ":viewer-protocol-policy is required"))
                        (trusted-key-groups :initarg :trusted-key-groups :type
                         (common-lisp:or trusted-key-groups common-lisp:null)
                         :accessor %cache-behavior-trusted-key-groups :initform
                         common-lisp:nil)
                        (trusted-signers :initarg :trusted-signers :type
                         (common-lisp:or trusted-signers common-lisp:null)
                         :accessor %cache-behavior-trusted-signers :initform
                         common-lisp:nil)
                        (target-origin-id :initarg :target-origin-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-target-origin-id :initform
                         (common-lisp:error ":target-origin-id is required"))
                        (path-pattern :initarg :path-pattern :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-behavior-path-pattern :initform
                         (common-lisp:error ":path-pattern is required"))))
 (common-lisp:export (common-lisp:list 'cache-behavior 'make-cache-behavior))
 (common-lisp:defun make-cache-behavior
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-ttl default-ttl min-ttl
                     forwarded-values response-headers-policy-id
                     origin-request-policy-id cache-policy-id
                     realtime-log-config-arn field-level-encryption-id
                     function-associations lambda-function-associations
                     compress smooth-streaming allowed-methods
                     viewer-protocol-policy trusted-key-groups trusted-signers
                     target-origin-id path-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'cache-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-pattern))
      (common-lisp:list
       (common-lisp:cons "PathPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-origin-id))
      (common-lisp:list
       (common-lisp:cons "TargetOriginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-signers))
      (common-lisp:list
       (common-lisp:cons "TrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-key-groups))
      (common-lisp:list
       (common-lisp:cons "TrustedKeyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-methods))
      (common-lisp:list
       (common-lisp:cons "AllowedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smooth-streaming))
      (common-lisp:list
       (common-lisp:cons "SmoothStreaming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compress))
      (common-lisp:list
       (common-lisp:cons "Compress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-associations))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-associations))
      (common-lisp:list
       (common-lisp:cons "FunctionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-id))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-log-config-arn))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-id))
      (common-lisp:list
       (common-lisp:cons "CachePolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-id))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-id))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-values))
      (common-lisp:list
       (common-lisp:cons "ForwardedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-ttl))
      (common-lisp:list
       (common-lisp:cons "MinTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ttl))
      (common-lisp:list
       (common-lisp:cons "DefaultTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-ttl))
      (common-lisp:list
       (common-lisp:cons "MaxTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-behavior-list ()
   '(trivial-types:proper-list cache-behavior))
 (common-lisp:defun |make-cache-behavior-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-behavior))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cache-behaviors common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or cache-behavior-list common-lisp:null)
                         :accessor %cache-behaviors-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-behaviors-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'cache-behaviors 'make-cache-behaviors))
 (common-lisp:defun make-cache-behaviors
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'cache-behaviors
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-behaviors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-behaviors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-behaviors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-policy common-lisp:nil
                       ((cache-policy-config :initarg :cache-policy-config
                         :type
                         (common-lisp:or cache-policy-config common-lisp:null)
                         :accessor %cache-policy-cache-policy-config :initform
                         (common-lisp:error
                          ":cache-policy-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-policy-last-modified-time :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-policy-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'cache-policy 'make-cache-policy))
 (common-lisp:defun make-cache-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-policy-config last-modified-time
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-config))
      (common-lisp:list
       (common-lisp:cons "CachePolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-policy-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cache-policy-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'cache-policy-already-exists
                    'cache-policy-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass cache-policy-config common-lisp:nil
                       ((parameters-in-cache-key-and-forwarded-to-origin
                         :initarg
                         :parameters-in-cache-key-and-forwarded-to-origin :type
                         (common-lisp:or
                          parameters-in-cache-key-and-forwarded-to-origin
                          common-lisp:null)
                         :accessor
                         %cache-policy-config-parameters-in-cache-key-and-forwarded-to-origin
                         :initform common-lisp:nil)
                        (min-ttl :initarg :min-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-policy-config-min-ttl :initform
                         (common-lisp:error ":min-ttl is required"))
                        (max-ttl :initarg :max-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-policy-config-max-ttl :initform
                         common-lisp:nil)
                        (default-ttl :initarg :default-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-policy-config-default-ttl :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-policy-config-name :initform
                         (common-lisp:error ":name is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-policy-config-comment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cache-policy-config 'make-cache-policy-config))
 (common-lisp:defun make-cache-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     parameters-in-cache-key-and-forwarded-to-origin min-ttl
                     max-ttl default-ttl name comment)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ttl))
      (common-lisp:list
       (common-lisp:cons "DefaultTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-ttl))
      (common-lisp:list
       (common-lisp:cons "MaxTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-ttl))
      (common-lisp:list
       (common-lisp:cons "MinTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameters-in-cache-key-and-forwarded-to-origin))
      (common-lisp:list
       (common-lisp:cons "ParametersInCacheKeyAndForwardedToOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-policy-config))
   common-lisp:nil))
(common-lisp:deftype cache-policy-cookie-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cache-policy-cookies-config common-lisp:nil
                       ((cookies :initarg :cookies :type
                         (common-lisp:or cookie-names common-lisp:null)
                         :accessor %cache-policy-cookies-config-cookies
                         :initform common-lisp:nil)
                        (cookie-behavior :initarg :cookie-behavior :type
                         (common-lisp:or cache-policy-cookie-behavior
                                         common-lisp:null)
                         :accessor %cache-policy-cookies-config-cookie-behavior
                         :initform
                         (common-lisp:error ":cookie-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'cache-policy-cookies-config
                    'make-cache-policy-cookies-config))
 (common-lisp:defun make-cache-policy-cookies-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookies cookie-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy-cookies-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-cookies-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-cookies-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-behavior))
      (common-lisp:list
       (common-lisp:cons "CookieBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies))
      (common-lisp:list
       (common-lisp:cons "Cookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-cookies-config))
   common-lisp:nil))
(common-lisp:deftype cache-policy-header-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cache-policy-headers-config common-lisp:nil
                       ((headers :initarg :headers :type
                         (common-lisp:or headers common-lisp:null) :accessor
                         %cache-policy-headers-config-headers :initform
                         common-lisp:nil)
                        (header-behavior :initarg :header-behavior :type
                         (common-lisp:or cache-policy-header-behavior
                                         common-lisp:null)
                         :accessor %cache-policy-headers-config-header-behavior
                         :initform
                         (common-lisp:error ":header-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'cache-policy-headers-config
                    'make-cache-policy-headers-config))
 (common-lisp:defun make-cache-policy-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key headers header-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-behavior))
      (common-lisp:list
       (common-lisp:cons "HeaderBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cache-policy-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cache-policy-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'cache-policy-in-use 'cache-policy-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass cache-policy-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or cache-policy-summary-list
                                         common-lisp:null)
                         :accessor %cache-policy-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-policy-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cache-policy-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cache-policy-list-next-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cache-policy-list 'make-cache-policy-list))
 (common-lisp:defun make-cache-policy-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-policy-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-policy-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-policy-list))
   common-lisp:nil))
(common-lisp:deftype cache-policy-query-string-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cache-policy-query-strings-config common-lisp:nil
                       ((query-strings :initarg :query-strings :type
                         (common-lisp:or query-string-names common-lisp:null)
                         :accessor
                         %cache-policy-query-strings-config-query-strings
                         :initform common-lisp:nil)
                        (query-string-behavior :initarg :query-string-behavior
                         :type
                         (common-lisp:or cache-policy-query-string-behavior
                                         common-lisp:null)
                         :accessor
                         %cache-policy-query-strings-config-query-string-behavior
                         :initform
                         (common-lisp:error
                          ":query-string-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'cache-policy-query-strings-config
                    'make-cache-policy-query-strings-config))
 (common-lisp:defun make-cache-policy-query-strings-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-strings query-string-behavior)
   (common-lisp:apply #'common-lisp:make-instance
                      'cache-policy-query-strings-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-query-strings-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-query-strings-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-behavior))
      (common-lisp:list
       (common-lisp:cons "QueryStringBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-strings))
      (common-lisp:list
       (common-lisp:cons "QueryStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-policy-query-strings-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cache-policy-summary common-lisp:nil
                       ((cache-policy :initarg :cache-policy :type
                         (common-lisp:or cache-policy common-lisp:null)
                         :accessor %cache-policy-summary-cache-policy :initform
                         (common-lisp:error ":cache-policy is required"))
                        (type :initarg :type :type
                         (common-lisp:or cache-policy-type common-lisp:null)
                         :accessor %cache-policy-summary-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'cache-policy-summary 'make-cache-policy-summary))
 (common-lisp:defun make-cache-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-policy type)
   (common-lisp:apply #'common-lisp:make-instance 'cache-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy))
      (common-lisp:list
       (common-lisp:cons "CachePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-policy-summary-list ()
   '(trivial-types:proper-list cache-policy-summary))
 (common-lisp:defun |make-cache-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cache-policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cached-methods common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or methods-list common-lisp:null)
                         :accessor %cached-methods-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cached-methods-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'cached-methods 'make-cached-methods))
 (common-lisp:defun make-cached-methods
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'cached-methods
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cached-methods))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cached-methods))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cached-methods))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cannot-change-immutable-public-key-fields
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cannot-change-immutable-public-key-fields-message)))
 (common-lisp:export
  (common-lisp:list 'cannot-change-immutable-public-key-fields
                    'cannot-change-immutable-public-key-fields-message)))
(common-lisp:deftype certificate-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-front-origin-access-identity common-lisp:nil
                       ((cloud-front-origin-access-identity-config :initarg
                         :cloud-front-origin-access-identity-config :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-config
                          common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-cloud-front-origin-access-identity-config
                         :initform common-lisp:nil)
                        (s3canonical-user-id :initarg :s3canonical-user-id
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-s3canonical-user-id
                         :initform
                         (common-lisp:error
                          ":s3canonical-user-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %cloud-front-origin-access-identity-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity
                    'make-cloud-front-origin-access-identity))
 (common-lisp:defun make-cloud-front-origin-access-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-front-origin-access-identity-config
                     s3canonical-user-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-front-origin-access-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3canonical-user-id))
      (common-lisp:list
       (common-lisp:cons "S3CanonicalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity-config))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cloud-front-origin-access-identity-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-front-origin-access-identity-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity-already-exists
                    'cloud-front-origin-access-identity-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass cloud-front-origin-access-identity-config
                       common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-config-comment
                         :initform (common-lisp:error ":comment is required"))
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity-config
                    'make-cloud-front-origin-access-identity-config))
 (common-lisp:defun make-cloud-front-origin-access-identity-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment caller-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-front-origin-access-identity-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cloud-front-origin-access-identity-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-front-origin-access-identity-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity-in-use
                    'cloud-front-origin-access-identity-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass cloud-front-origin-access-identity-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-summary-list
                          common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-is-truncated
                         :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-next-marker
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-list-marker
                         :initform (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity-list
                    'make-cloud-front-origin-access-identity-list))
 (common-lisp:defun make-cloud-front-origin-access-identity-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-front-origin-access-identity-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-front-origin-access-identity-summary
                       common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-summary-comment
                         :initform (common-lisp:error ":comment is required"))
                        (s3canonical-user-id :initarg :s3canonical-user-id
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-summary-s3canonical-user-id
                         :initform
                         (common-lisp:error
                          ":s3canonical-user-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %cloud-front-origin-access-identity-summary-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-front-origin-access-identity-summary
                    'make-cloud-front-origin-access-identity-summary))
 (common-lisp:defun make-cloud-front-origin-access-identity-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment s3canonical-user-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-front-origin-access-identity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3canonical-user-id))
      (common-lisp:list
       (common-lisp:cons "S3CanonicalUserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-front-origin-access-identity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-front-origin-access-identity-summary-list ()
   '(trivial-types:proper-list cloud-front-origin-access-identity-summary))
 (common-lisp:defun |make-cloud-front-origin-access-identity-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-front-origin-access-identity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype comment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conflicting-alias common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %conflicting-alias-account-id :initform
                         common-lisp:nil)
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %conflicting-alias-distribution-id :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %conflicting-alias-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conflicting-alias 'make-conflicting-alias))
 (common-lisp:defun make-conflicting-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id distribution-id alias)
   (common-lisp:apply #'common-lisp:make-instance 'conflicting-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conflicting-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conflicting-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-id))
      (common-lisp:list
       (common-lisp:cons "DistributionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conflicting-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conflicting-aliases ()
   '(trivial-types:proper-list conflicting-alias))
 (common-lisp:defun |make-conflicting-aliases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conflicting-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conflicting-aliases-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or conflicting-aliases common-lisp:null)
                         :accessor %conflicting-aliases-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %conflicting-aliases-list-quantity :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %conflicting-aliases-list-max-items
                         :initform common-lisp:nil)
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %conflicting-aliases-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conflicting-aliases-list 'make-conflicting-aliases-list))
 (common-lisp:defun make-conflicting-aliases-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'conflicting-aliases-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conflicting-aliases-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conflicting-aliases-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conflicting-aliases-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass content-type-profile common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %content-type-profile-content-type :initform
                         (common-lisp:error ":content-type is required"))
                        (profile-id :initarg :profile-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %content-type-profile-profile-id :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or format common-lisp:null) :accessor
                         %content-type-profile-format :initform
                         (common-lisp:error ":format is required"))))
 (common-lisp:export
  (common-lisp:list 'content-type-profile 'make-content-type-profile))
 (common-lisp:defun make-content-type-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type profile-id format)
   (common-lisp:apply #'common-lisp:make-instance 'content-type-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-type-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-type-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-type-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass content-type-profile-config common-lisp:nil
                       ((content-type-profiles :initarg :content-type-profiles
                         :type
                         (common-lisp:or content-type-profiles
                                         common-lisp:null)
                         :accessor
                         %content-type-profile-config-content-type-profiles
                         :initform common-lisp:nil)
                        (forward-when-content-type-is-unknown :initarg
                         :forward-when-content-type-is-unknown :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %content-type-profile-config-forward-when-content-type-is-unknown
                         :initform
                         (common-lisp:error
                          ":forward-when-content-type-is-unknown is required"))))
 (common-lisp:export
  (common-lisp:list 'content-type-profile-config
                    'make-content-type-profile-config))
 (common-lisp:defun make-content-type-profile-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type-profiles
                     forward-when-content-type-is-unknown)
   (common-lisp:apply #'common-lisp:make-instance 'content-type-profile-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profile-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profile-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forward-when-content-type-is-unknown))
      (common-lisp:list
       (common-lisp:cons "ForwardWhenContentTypeIsUnknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-type-profiles))
      (common-lisp:list
       (common-lisp:cons "ContentTypeProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profile-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-type-profile-list ()
   '(trivial-types:proper-list content-type-profile))
 (common-lisp:defun |make-content-type-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-type-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass content-type-profiles common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or content-type-profile-list
                                         common-lisp:null)
                         :accessor %content-type-profiles-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %content-type-profiles-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'content-type-profiles 'make-content-type-profiles))
 (common-lisp:defun make-content-type-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'content-type-profiles
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profiles))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profiles))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-type-profiles))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-policy common-lisp:nil
                       ((continuous-deployment-policy-config :initarg
                         :continuous-deployment-policy-config :type
                         (common-lisp:or continuous-deployment-policy-config
                                         common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-continuous-deployment-policy-config
                         :initform
                         (common-lisp:error
                          ":continuous-deployment-policy-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %continuous-deployment-policy-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy
                    'make-continuous-deployment-policy))
 (common-lisp:defun make-continuous-deployment-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key continuous-deployment-policy-config
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance 'continuous-deployment-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-config))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition continuous-deployment-policy-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       continuous-deployment-policy-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy-already-exists
                    'continuous-deployment-policy-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-policy-config common-lisp:nil
                       ((traffic-config :initarg :traffic-config :type
                         (common-lisp:or traffic-config common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-config-traffic-config
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %continuous-deployment-policy-config-enabled
                         :initform (common-lisp:error ":enabled is required"))
                        (staging-distribution-dns-names :initarg
                         :staging-distribution-dns-names :type
                         (common-lisp:or staging-distribution-dns-names
                                         common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-config-staging-distribution-dns-names
                         :initform
                         (common-lisp:error
                          ":staging-distribution-dns-names is required"))))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy-config
                    'make-continuous-deployment-policy-config))
 (common-lisp:defun make-continuous-deployment-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-config enabled
                     staging-distribution-dns-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-deployment-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-distribution-dns-names))
      (common-lisp:list
       (common-lisp:cons "StagingDistributionDnsNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-config))
      (common-lisp:list
       (common-lisp:cons "TrafficConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition continuous-deployment-policy-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       continuous-deployment-policy-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy-in-use
                    'continuous-deployment-policy-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-policy-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          continuous-deployment-policy-summary-list
                          common-lisp:null)
                         :accessor %continuous-deployment-policy-list-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %continuous-deployment-policy-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %continuous-deployment-policy-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy-list
                    'make-continuous-deployment-policy-list))
 (common-lisp:defun make-continuous-deployment-policy-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-deployment-policy-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-policy-summary common-lisp:nil
                       ((continuous-deployment-policy :initarg
                         :continuous-deployment-policy :type
                         (common-lisp:or continuous-deployment-policy
                                         common-lisp:null)
                         :accessor
                         %continuous-deployment-policy-summary-continuous-deployment-policy
                         :initform
                         (common-lisp:error
                          ":continuous-deployment-policy is required"))))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-policy-summary
                    'make-continuous-deployment-policy-summary))
 (common-lisp:defun make-continuous-deployment-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key continuous-deployment-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-deployment-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype continuous-deployment-policy-summary-list ()
   '(trivial-types:proper-list continuous-deployment-policy-summary))
 (common-lisp:defun |make-continuous-deployment-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            continuous-deployment-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype continuous-deployment-policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-single-header-config
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %continuous-deployment-single-header-config-value
                         :initform (common-lisp:error ":value is required"))
                        (header :initarg :header :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %continuous-deployment-single-header-config-header
                         :initform (common-lisp:error ":header is required"))))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-single-header-config
                    'make-continuous-deployment-single-header-config))
 (common-lisp:defun make-continuous-deployment-single-header-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value header)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-deployment-single-header-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-header-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-header-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-header-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass continuous-deployment-single-weight-config
                       common-lisp:nil
                       ((session-stickiness-config :initarg
                         :session-stickiness-config :type
                         (common-lisp:or session-stickiness-config
                                         common-lisp:null)
                         :accessor
                         %continuous-deployment-single-weight-config-session-stickiness-config
                         :initform common-lisp:nil)
                        (weight :initarg :weight :type
                         (common-lisp:or common-lisp:single-float
                                         common-lisp:null)
                         :accessor
                         %continuous-deployment-single-weight-config-weight
                         :initform (common-lisp:error ":weight is required"))))
 (common-lisp:export
  (common-lisp:list 'continuous-deployment-single-weight-config
                    'make-continuous-deployment-single-weight-config))
 (common-lisp:defun make-continuous-deployment-single-weight-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-stickiness-config weight)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-deployment-single-weight-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-weight-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-weight-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-stickiness-config))
      (common-lisp:list
       (common-lisp:cons "SessionStickinessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-deployment-single-weight-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cookie-name-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-cookie-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cookie-names common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or cookie-name-list common-lisp:null)
                         :accessor %cookie-names-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %cookie-names-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'cookie-names 'make-cookie-names))
 (common-lisp:defun make-cookie-names
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'cookie-names
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-names))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cookie-preference common-lisp:nil
                       ((whitelisted-names :initarg :whitelisted-names :type
                         (common-lisp:or cookie-names common-lisp:null)
                         :accessor %cookie-preference-whitelisted-names
                         :initform common-lisp:nil)
                        (forward :initarg :forward :type
                         (common-lisp:or item-selection common-lisp:null)
                         :accessor %cookie-preference-forward :initform
                         (common-lisp:error ":forward is required"))))
 (common-lisp:export
  (common-lisp:list 'cookie-preference 'make-cookie-preference))
 (common-lisp:defun make-cookie-preference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelisted-names forward)
   (common-lisp:apply #'common-lisp:make-instance 'cookie-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forward))
      (common-lisp:list
       (common-lisp:cons "Forward"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelisted-names))
      (common-lisp:list
       (common-lisp:cons "WhitelistedNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-distribution-request common-lisp:nil
                       ((caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-distribution-request-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))
                        (if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-distribution-request-if-match
                         :initform common-lisp:nil)
                        (staging :initarg :staging :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %copy-distribution-request-staging :initform
                         common-lisp:nil)
                        (primary-distribution-id :initarg
                         :primary-distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %copy-distribution-request-primary-distribution-id
                         :initform
                         (common-lisp:error
                          ":primary-distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-distribution-request
                    'make-copy-distribution-request))
 (common-lisp:defun make-copy-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key caller-reference if-match staging
                     primary-distribution-id)
   (common-lisp:apply #'common-lisp:make-instance 'copy-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging))
      (common-lisp:cons "Staging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-distribution-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %copy-distribution-result-location :initform
                         common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor %copy-distribution-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-distribution-result 'make-copy-distribution-result))
 (common-lisp:defun make-copy-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location distribution)
   (common-lisp:apply #'common-lisp:make-instance 'copy-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-cache-policy-request common-lisp:nil
                       ((cache-policy-config :initarg :cache-policy-config
                         :type
                         (common-lisp:or cache-policy-config common-lisp:null)
                         :accessor
                         %create-cache-policy-request-cache-policy-config
                         :initform
                         (common-lisp:error
                          ":cache-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cache-policy-request
                    'make-create-cache-policy-request))
 (common-lisp:defun make-create-cache-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-policy-config)
   (common-lisp:apply #'common-lisp:make-instance 'create-cache-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-config))
      (common-lisp:list
       (common-lisp:cons "CachePolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-cache-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-cache-policy-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-cache-policy-result-location
                         :initform common-lisp:nil)
                        (cache-policy :initarg :cache-policy :type
                         (common-lisp:or cache-policy common-lisp:null)
                         :accessor %create-cache-policy-result-cache-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cache-policy-result
                    'make-create-cache-policy-result))
 (common-lisp:defun make-create-cache-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location cache-policy)
   (common-lisp:apply #'common-lisp:make-instance 'create-cache-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy))
      (common-lisp:list
       (common-lisp:cons "CachePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cache-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicy" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-cloud-front-origin-access-identity-request
                       common-lisp:nil
                       ((cloud-front-origin-access-identity-config :initarg
                         :cloud-front-origin-access-identity-config :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-config
                          common-lisp:null)
                         :accessor
                         %create-cloud-front-origin-access-identity-request-cloud-front-origin-access-identity-config
                         :initform
                         (common-lisp:error
                          ":cloud-front-origin-access-identity-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cloud-front-origin-access-identity-request
                    'make-create-cloud-front-origin-access-identity-request))
 (common-lisp:defun make-create-cloud-front-origin-access-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     cloud-front-origin-access-identity-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-front-origin-access-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity-config))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentityConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-cloud-front-origin-access-identity-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-cloud-front-origin-access-identity-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-cloud-front-origin-access-identity-result-location
                         :initform common-lisp:nil)
                        (cloud-front-origin-access-identity :initarg
                         :cloud-front-origin-access-identity :type
                         (common-lisp:or cloud-front-origin-access-identity
                                         common-lisp:null)
                         :accessor
                         %create-cloud-front-origin-access-identity-result-cloud-front-origin-access-identity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cloud-front-origin-access-identity-result
                    'make-create-cloud-front-origin-access-identity-result))
 (common-lisp:defun make-create-cloud-front-origin-access-identity-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location
                     cloud-front-origin-access-identity)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-front-origin-access-identity-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-front-origin-access-identity-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentity" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-continuous-deployment-policy-request
                       common-lisp:nil
                       ((continuous-deployment-policy-config :initarg
                         :continuous-deployment-policy-config :type
                         (common-lisp:or continuous-deployment-policy-config
                                         common-lisp:null)
                         :accessor
                         %create-continuous-deployment-policy-request-continuous-deployment-policy-config
                         :initform
                         (common-lisp:error
                          ":continuous-deployment-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-continuous-deployment-policy-request
                    'make-create-continuous-deployment-policy-request))
 (common-lisp:defun make-create-continuous-deployment-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key continuous-deployment-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-continuous-deployment-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-config))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicyConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-continuous-deployment-policy-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-continuous-deployment-policy-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-continuous-deployment-policy-result-location
                         :initform common-lisp:nil)
                        (continuous-deployment-policy :initarg
                         :continuous-deployment-policy :type
                         (common-lisp:or continuous-deployment-policy
                                         common-lisp:null)
                         :accessor
                         %create-continuous-deployment-policy-result-continuous-deployment-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-continuous-deployment-policy-result
                    'make-create-continuous-deployment-policy-result))
 (common-lisp:defun make-create-continuous-deployment-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location
                     continuous-deployment-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-continuous-deployment-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-continuous-deployment-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-distribution-request common-lisp:nil
                       ((distribution-config :initarg :distribution-config
                         :type
                         (common-lisp:or distribution-config common-lisp:null)
                         :accessor
                         %create-distribution-request-distribution-config
                         :initform
                         (common-lisp:error
                          ":distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-distribution-request
                    'make-create-distribution-request))
 (common-lisp:defun make-create-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-config)
   (common-lisp:apply #'common-lisp:make-instance 'create-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-config))
      (common-lisp:list
       (common-lisp:cons "DistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-distribution-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-distribution-result-location
                         :initform common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor %create-distribution-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-result
                    'make-create-distribution-result))
 (common-lisp:defun make-create-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location distribution)
   (common-lisp:apply #'common-lisp:make-instance 'create-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-distribution-with-tags-request common-lisp:nil
                       ((distribution-config-with-tags :initarg
                         :distribution-config-with-tags :type
                         (common-lisp:or distribution-config-with-tags
                                         common-lisp:null)
                         :accessor
                         %create-distribution-with-tags-request-distribution-config-with-tags
                         :initform
                         (common-lisp:error
                          ":distribution-config-with-tags is required"))))
 (common-lisp:export
  (common-lisp:list 'create-distribution-with-tags-request
                    'make-create-distribution-with-tags-request))
 (common-lisp:defun make-create-distribution-with-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-config-with-tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-distribution-with-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-config-with-tags))
      (common-lisp:list
       (common-lisp:cons "DistributionConfigWithTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionConfigWithTags" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-distribution-with-tags-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-distribution-with-tags-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-distribution-with-tags-result-location
                         :initform common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor
                         %create-distribution-with-tags-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-with-tags-result
                    'make-create-distribution-with-tags-result))
 (common-lisp:defun make-create-distribution-with-tags-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-distribution-with-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-with-tags-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-field-level-encryption-config-request
                       common-lisp:nil
                       ((field-level-encryption-config :initarg
                         :field-level-encryption-config :type
                         (common-lisp:or field-level-encryption-config
                                         common-lisp:null)
                         :accessor
                         %create-field-level-encryption-config-request-field-level-encryption-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-field-level-encryption-config-request
                    'make-create-field-level-encryption-config-request))
 (common-lisp:defun make-create-field-level-encryption-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-field-level-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-field-level-encryption-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-field-level-encryption-config-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-field-level-encryption-config-result-location
                         :initform common-lisp:nil)
                        (field-level-encryption :initarg
                         :field-level-encryption :type
                         (common-lisp:or field-level-encryption
                                         common-lisp:null)
                         :accessor
                         %create-field-level-encryption-config-result-field-level-encryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-field-level-encryption-config-result
                    'make-create-field-level-encryption-config-result))
 (common-lisp:defun make-create-field-level-encryption-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location field-level-encryption)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-field-level-encryption-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryption" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-field-level-encryption-profile-request
                       common-lisp:nil
                       ((field-level-encryption-profile-config :initarg
                         :field-level-encryption-profile-config :type
                         (common-lisp:or field-level-encryption-profile-config
                                         common-lisp:null)
                         :accessor
                         %create-field-level-encryption-profile-request-field-level-encryption-profile-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-profile-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-field-level-encryption-profile-request
                    'make-create-field-level-encryption-profile-request))
 (common-lisp:defun make-create-field-level-encryption-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-profile-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-field-level-encryption-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfileConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-field-level-encryption-profile-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-field-level-encryption-profile-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-field-level-encryption-profile-result-location
                         :initform common-lisp:nil)
                        (field-level-encryption-profile :initarg
                         :field-level-encryption-profile :type
                         (common-lisp:or field-level-encryption-profile
                                         common-lisp:null)
                         :accessor
                         %create-field-level-encryption-profile-result-field-level-encryption-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-field-level-encryption-profile-result
                    'make-create-field-level-encryption-profile-result))
 (common-lisp:defun make-create-field-level-encryption-profile-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location
                     field-level-encryption-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-field-level-encryption-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-field-level-encryption-profile-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfile" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-function-request common-lisp:nil
                       ((function-code :initarg :function-code :type
                         (common-lisp:or function-blob common-lisp:null)
                         :accessor %create-function-request-function-code
                         :initform
                         (common-lisp:error ":function-code is required"))
                        (function-config :initarg :function-config :type
                         (common-lisp:or function-config common-lisp:null)
                         :accessor %create-function-request-function-config
                         :initform
                         (common-lisp:error ":function-config is required"))
                        (name :initarg :name :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor %create-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-function-request 'make-create-function-request))
 (common-lisp:defun make-create-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-code function-config name)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-config))
      (common-lisp:list
       (common-lisp:cons "FunctionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-code))
      (common-lisp:list
       (common-lisp:cons "FunctionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-function-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-function-result-location :initform
                         common-lisp:nil)
                        (function-summary :initarg :function-summary :type
                         (common-lisp:or function-summary common-lisp:null)
                         :accessor %create-function-result-function-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-function-result 'make-create-function-result))
 (common-lisp:defun make-create-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location function-summary)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-summary))
      (common-lisp:list
       (common-lisp:cons "FunctionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionSummary" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-invalidation-request common-lisp:nil
                       ((invalidation-batch :initarg :invalidation-batch :type
                         (common-lisp:or invalidation-batch common-lisp:null)
                         :accessor
                         %create-invalidation-request-invalidation-batch
                         :initform
                         (common-lisp:error ":invalidation-batch is required"))
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-invalidation-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-invalidation-request
                    'make-create-invalidation-request))
 (common-lisp:defun make-create-invalidation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalidation-batch distribution-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-invalidation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalidation-batch))
      (common-lisp:list
       (common-lisp:cons "InvalidationBatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("InvalidationBatch" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-invalidation-result common-lisp:nil
                       ((invalidation :initarg :invalidation :type
                         (common-lisp:or invalidation common-lisp:null)
                         :accessor %create-invalidation-result-invalidation
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-invalidation-result-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-invalidation-result
                    'make-create-invalidation-result))
 (common-lisp:defun make-create-invalidation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalidation location)
   (common-lisp:apply #'common-lisp:make-instance 'create-invalidation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalidation))
      (common-lisp:list
       (common-lisp:cons "Invalidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-invalidation-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Invalidation" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-key-group-request common-lisp:nil
                       ((key-group-config :initarg :key-group-config :type
                         (common-lisp:or key-group-config common-lisp:null)
                         :accessor %create-key-group-request-key-group-config
                         :initform
                         (common-lisp:error ":key-group-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-key-group-request 'make-create-key-group-request))
 (common-lisp:defun make-create-key-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-group-config)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-config))
      (common-lisp:list
       (common-lisp:cons "KeyGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroupConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-key-group-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-key-group-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-key-group-result-location :initform
                         common-lisp:nil)
                        (key-group :initarg :key-group :type
                         (common-lisp:or key-group common-lisp:null) :accessor
                         %create-key-group-result-key-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-key-group-result 'make-create-key-group-result))
 (common-lisp:defun make-create-key-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location key-group)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group))
      (common-lisp:list
       (common-lisp:cons "KeyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-group-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroup" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-monitoring-subscription-request common-lisp:nil
                       ((monitoring-subscription :initarg
                         :monitoring-subscription :type
                         (common-lisp:or monitoring-subscription
                                         common-lisp:null)
                         :accessor
                         %create-monitoring-subscription-request-monitoring-subscription
                         :initform
                         (common-lisp:error
                          ":monitoring-subscription is required"))
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-monitoring-subscription-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-monitoring-subscription-request
                    'make-create-monitoring-subscription-request))
 (common-lisp:defun make-create-monitoring-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring-subscription distribution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-monitoring-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-subscription))
      (common-lisp:list
       (common-lisp:cons "MonitoringSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MonitoringSubscription" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-monitoring-subscription-result common-lisp:nil
                       ((monitoring-subscription :initarg
                         :monitoring-subscription :type
                         (common-lisp:or monitoring-subscription
                                         common-lisp:null)
                         :accessor
                         %create-monitoring-subscription-result-monitoring-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-monitoring-subscription-result
                    'make-create-monitoring-subscription-result))
 (common-lisp:defun make-create-monitoring-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-monitoring-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-subscription))
      (common-lisp:list
       (common-lisp:cons "MonitoringSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-subscription-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MonitoringSubscription" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-origin-access-control-request common-lisp:nil
                       ((origin-access-control-config :initarg
                         :origin-access-control-config :type
                         (common-lisp:or origin-access-control-config
                                         common-lisp:null)
                         :accessor
                         %create-origin-access-control-request-origin-access-control-config
                         :initform
                         (common-lisp:error
                          ":origin-access-control-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-origin-access-control-request
                    'make-create-origin-access-control-request))
 (common-lisp:defun make-create-origin-access-control-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-origin-access-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-config))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControlConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-origin-access-control-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-origin-access-control-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-origin-access-control-result-location
                         :initform common-lisp:nil)
                        (origin-access-control :initarg :origin-access-control
                         :type
                         (common-lisp:or origin-access-control
                                         common-lisp:null)
                         :accessor
                         %create-origin-access-control-result-origin-access-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-origin-access-control-result
                    'make-create-origin-access-control-result))
 (common-lisp:defun make-create-origin-access-control-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location origin-access-control)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-origin-access-control-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-access-control-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControl" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-origin-request-policy-request common-lisp:nil
                       ((origin-request-policy-config :initarg
                         :origin-request-policy-config :type
                         (common-lisp:or origin-request-policy-config
                                         common-lisp:null)
                         :accessor
                         %create-origin-request-policy-request-origin-request-policy-config
                         :initform
                         (common-lisp:error
                          ":origin-request-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-origin-request-policy-request
                    'make-create-origin-request-policy-request))
 (common-lisp:defun make-create-origin-request-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-request-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-origin-request-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-config))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-origin-request-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-origin-request-policy-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-origin-request-policy-result-location
                         :initform common-lisp:nil)
                        (origin-request-policy :initarg :origin-request-policy
                         :type
                         (common-lisp:or origin-request-policy
                                         common-lisp:null)
                         :accessor
                         %create-origin-request-policy-result-origin-request-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-origin-request-policy-result
                    'make-create-origin-request-policy-result))
 (common-lisp:defun make-create-origin-request-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location origin-request-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-origin-request-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-origin-request-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-public-key-request common-lisp:nil
                       ((public-key-config :initarg :public-key-config :type
                         (common-lisp:or public-key-config common-lisp:null)
                         :accessor %create-public-key-request-public-key-config
                         :initform
                         (common-lisp:error
                          ":public-key-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-public-key-request
                    'make-create-public-key-request))
 (common-lisp:defun make-create-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-key-config)
   (common-lisp:apply #'common-lisp:make-instance 'create-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-config))
      (common-lisp:list
       (common-lisp:cons "PublicKeyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKeyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-public-key-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-public-key-result-etag :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-public-key-result-location :initform
                         common-lisp:nil)
                        (public-key :initarg :public-key :type
                         (common-lisp:or public-key common-lisp:null) :accessor
                         %create-public-key-result-public-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-public-key-result 'make-create-public-key-result))
 (common-lisp:defun make-create-public-key-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location public-key)
   (common-lisp:apply #'common-lisp:make-instance 'create-public-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-key-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKey" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-realtime-log-config-request common-lisp:nil
                       ((sampling-rate :initarg :sampling-rate :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %create-realtime-log-config-request-sampling-rate
                         :initform
                         (common-lisp:error ":sampling-rate is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-realtime-log-config-request-name
                         :initform (common-lisp:error ":name is required"))
                        (fields :initarg :fields :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         %create-realtime-log-config-request-fields :initform
                         (common-lisp:error ":fields is required"))
                        (end-points :initarg :end-points :type
                         (common-lisp:or end-point-list common-lisp:null)
                         :accessor
                         %create-realtime-log-config-request-end-points
                         :initform
                         (common-lisp:error ":end-points is required"))))
 (common-lisp:export
  (common-lisp:list 'create-realtime-log-config-request
                    'make-create-realtime-log-config-request))
 (common-lisp:defun make-create-realtime-log-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sampling-rate name fields end-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-realtime-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-points))
      (common-lisp:list
       (common-lisp:cons "EndPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "SamplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-realtime-log-config-result common-lisp:nil
                       ((realtime-log-config :initarg :realtime-log-config
                         :type
                         (common-lisp:or realtime-log-config common-lisp:null)
                         :accessor
                         %create-realtime-log-config-result-realtime-log-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-realtime-log-config-result
                    'make-create-realtime-log-config-result))
 (common-lisp:defun make-create-realtime-log-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-log-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-realtime-log-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realtime-log-config))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-realtime-log-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-response-headers-policy-request common-lisp:nil
                       ((response-headers-policy-config :initarg
                         :response-headers-policy-config :type
                         (common-lisp:or response-headers-policy-config
                                         common-lisp:null)
                         :accessor
                         %create-response-headers-policy-request-response-headers-policy-config
                         :initform
                         (common-lisp:error
                          ":response-headers-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-response-headers-policy-request
                    'make-create-response-headers-policy-request))
 (common-lisp:defun make-create-response-headers-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-response-headers-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-config))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-response-headers-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-response-headers-policy-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-response-headers-policy-result-location
                         :initform common-lisp:nil)
                        (response-headers-policy :initarg
                         :response-headers-policy :type
                         (common-lisp:or response-headers-policy
                                         common-lisp:null)
                         :accessor
                         %create-response-headers-policy-result-response-headers-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-response-headers-policy-result
                    'make-create-response-headers-policy-result))
 (common-lisp:defun make-create-response-headers-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location response-headers-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-response-headers-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-response-headers-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-streaming-distribution-request common-lisp:nil
                       ((streaming-distribution-config :initarg
                         :streaming-distribution-config :type
                         (common-lisp:or streaming-distribution-config
                                         common-lisp:null)
                         :accessor
                         %create-streaming-distribution-request-streaming-distribution-config
                         :initform
                         (common-lisp:error
                          ":streaming-distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'create-streaming-distribution-request
                    'make-create-streaming-distribution-request))
 (common-lisp:defun make-create-streaming-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistributionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-streaming-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-streaming-distribution-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-streaming-distribution-result-location
                         :initform common-lisp:nil)
                        (streaming-distribution :initarg
                         :streaming-distribution :type
                         (common-lisp:or streaming-distribution
                                         common-lisp:null)
                         :accessor
                         %create-streaming-distribution-result-streaming-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-distribution-result
                    'make-create-streaming-distribution-result))
 (common-lisp:defun make-create-streaming-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location streaming-distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution))
      (common-lisp:list
       (common-lisp:cons "StreamingDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistribution" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-streaming-distribution-with-tags-request
                       common-lisp:nil
                       ((streaming-distribution-config-with-tags :initarg
                         :streaming-distribution-config-with-tags :type
                         (common-lisp:or
                          streaming-distribution-config-with-tags
                          common-lisp:null)
                         :accessor
                         %create-streaming-distribution-with-tags-request-streaming-distribution-config-with-tags
                         :initform
                         (common-lisp:error
                          ":streaming-distribution-config-with-tags is required"))))
 (common-lisp:export
  (common-lisp:list 'create-streaming-distribution-with-tags-request
                    'make-create-streaming-distribution-with-tags-request))
 (common-lisp:defun make-create-streaming-distribution-with-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-distribution-config-with-tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-distribution-with-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config-with-tags))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfigWithTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistributionConfigWithTags"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-streaming-distribution-with-tags-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-streaming-distribution-with-tags-result-etag
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %create-streaming-distribution-with-tags-result-location
                         :initform common-lisp:nil)
                        (streaming-distribution :initarg
                         :streaming-distribution :type
                         (common-lisp:or streaming-distribution
                                         common-lisp:null)
                         :accessor
                         %create-streaming-distribution-with-tags-result-streaming-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-distribution-with-tags-result
                    'make-create-streaming-distribution-with-tags-result))
 (common-lisp:defun make-create-streaming-distribution-with-tags-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag location streaming-distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-streaming-distribution-with-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution))
      (common-lisp:list
       (common-lisp:cons "StreamingDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-distribution-with-tags-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistribution" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass custom-error-response common-lisp:nil
                       ((error-caching-min-ttl :initarg :error-caching-min-ttl
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-error-response-error-caching-min-ttl
                         :initform common-lisp:nil)
                        (response-code :initarg :response-code :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %custom-error-response-response-code
                         :initform common-lisp:nil)
                        (response-page-path :initarg :response-page-path :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %custom-error-response-response-page-path
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-error-response-error-code :initform
                         (common-lisp:error ":error-code is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-error-response 'make-custom-error-response))
 (common-lisp:defun make-custom-error-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-caching-min-ttl response-code
                     response-page-path error-code)
   (common-lisp:apply #'common-lisp:make-instance 'custom-error-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-page-path))
      (common-lisp:list
       (common-lisp:cons "ResponsePagePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-caching-min-ttl))
      (common-lisp:list
       (common-lisp:cons "ErrorCachingMinTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-error-response-list ()
   '(trivial-types:proper-list custom-error-response))
 (common-lisp:defun |make-custom-error-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-error-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-error-responses common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or custom-error-response-list
                                         common-lisp:null)
                         :accessor %custom-error-responses-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-error-responses-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-error-responses 'make-custom-error-responses))
 (common-lisp:defun make-custom-error-responses
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'custom-error-responses
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-responses))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-responses))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-error-responses))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-headers common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-custom-headers-list
                                         common-lisp:null)
                         :accessor %custom-headers-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-headers-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'custom-headers 'make-custom-headers))
 (common-lisp:defun make-custom-headers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'custom-headers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-headers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-origin-config common-lisp:nil
                       ((origin-keepalive-timeout :initarg
                         :origin-keepalive-timeout :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %custom-origin-config-origin-keepalive-timeout
                         :initform common-lisp:nil)
                        (origin-read-timeout :initarg :origin-read-timeout
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-origin-config-origin-read-timeout
                         :initform common-lisp:nil)
                        (origin-ssl-protocols :initarg :origin-ssl-protocols
                         :type
                         (common-lisp:or origin-ssl-protocols common-lisp:null)
                         :accessor %custom-origin-config-origin-ssl-protocols
                         :initform common-lisp:nil)
                        (origin-protocol-policy :initarg
                         :origin-protocol-policy :type
                         (common-lisp:or origin-protocol-policy
                                         common-lisp:null)
                         :accessor %custom-origin-config-origin-protocol-policy
                         :initform
                         (common-lisp:error
                          ":origin-protocol-policy is required"))
                        (httpsport :initarg :httpsport :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-origin-config-httpsport :initform
                         (common-lisp:error ":httpsport is required"))
                        (httpport :initarg :httpport :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %custom-origin-config-httpport :initform
                         (common-lisp:error ":httpport is required"))))
 (common-lisp:export
  (common-lisp:list 'custom-origin-config 'make-custom-origin-config))
 (common-lisp:defun make-custom-origin-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-keepalive-timeout
                     origin-read-timeout origin-ssl-protocols
                     origin-protocol-policy httpsport httpport)
   (common-lisp:apply #'common-lisp:make-instance 'custom-origin-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpport))
      (common-lisp:list
       (common-lisp:cons "HTTPPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpsport))
      (common-lisp:list
       (common-lisp:cons "HTTPSPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "OriginProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-ssl-protocols))
      (common-lisp:list
       (common-lisp:cons "OriginSslProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-read-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginReadTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-keepalive-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginKeepaliveTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-origin-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-cache-behavior common-lisp:nil
                       ((max-ttl :initarg :max-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %default-cache-behavior-max-ttl :initform
                         common-lisp:nil)
                        (default-ttl :initarg :default-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %default-cache-behavior-default-ttl
                         :initform common-lisp:nil)
                        (min-ttl :initarg :min-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %default-cache-behavior-min-ttl :initform
                         common-lisp:nil)
                        (forwarded-values :initarg :forwarded-values :type
                         (common-lisp:or forwarded-values common-lisp:null)
                         :accessor %default-cache-behavior-forwarded-values
                         :initform common-lisp:nil)
                        (response-headers-policy-id :initarg
                         :response-headers-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %default-cache-behavior-response-headers-policy-id
                         :initform common-lisp:nil)
                        (origin-request-policy-id :initarg
                         :origin-request-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %default-cache-behavior-origin-request-policy-id
                         :initform common-lisp:nil)
                        (cache-policy-id :initarg :cache-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %default-cache-behavior-cache-policy-id
                         :initform common-lisp:nil)
                        (realtime-log-config-arn :initarg
                         :realtime-log-config-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %default-cache-behavior-realtime-log-config-arn
                         :initform common-lisp:nil)
                        (field-level-encryption-id :initarg
                         :field-level-encryption-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %default-cache-behavior-field-level-encryption-id
                         :initform common-lisp:nil)
                        (function-associations :initarg :function-associations
                         :type
                         (common-lisp:or function-associations
                                         common-lisp:null)
                         :accessor
                         %default-cache-behavior-function-associations
                         :initform common-lisp:nil)
                        (lambda-function-associations :initarg
                         :lambda-function-associations :type
                         (common-lisp:or lambda-function-associations
                                         common-lisp:null)
                         :accessor
                         %default-cache-behavior-lambda-function-associations
                         :initform common-lisp:nil)
                        (compress :initarg :compress :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %default-cache-behavior-compress :initform
                         common-lisp:nil)
                        (smooth-streaming :initarg :smooth-streaming :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %default-cache-behavior-smooth-streaming
                         :initform common-lisp:nil)
                        (allowed-methods :initarg :allowed-methods :type
                         (common-lisp:or allowed-methods common-lisp:null)
                         :accessor %default-cache-behavior-allowed-methods
                         :initform common-lisp:nil)
                        (viewer-protocol-policy :initarg
                         :viewer-protocol-policy :type
                         (common-lisp:or viewer-protocol-policy
                                         common-lisp:null)
                         :accessor
                         %default-cache-behavior-viewer-protocol-policy
                         :initform
                         (common-lisp:error
                          ":viewer-protocol-policy is required"))
                        (trusted-key-groups :initarg :trusted-key-groups :type
                         (common-lisp:or trusted-key-groups common-lisp:null)
                         :accessor %default-cache-behavior-trusted-key-groups
                         :initform common-lisp:nil)
                        (trusted-signers :initarg :trusted-signers :type
                         (common-lisp:or trusted-signers common-lisp:null)
                         :accessor %default-cache-behavior-trusted-signers
                         :initform common-lisp:nil)
                        (target-origin-id :initarg :target-origin-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %default-cache-behavior-target-origin-id
                         :initform
                         (common-lisp:error ":target-origin-id is required"))))
 (common-lisp:export
  (common-lisp:list 'default-cache-behavior 'make-default-cache-behavior))
 (common-lisp:defun make-default-cache-behavior
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-ttl default-ttl min-ttl
                     forwarded-values response-headers-policy-id
                     origin-request-policy-id cache-policy-id
                     realtime-log-config-arn field-level-encryption-id
                     function-associations lambda-function-associations
                     compress smooth-streaming allowed-methods
                     viewer-protocol-policy trusted-key-groups trusted-signers
                     target-origin-id)
   (common-lisp:apply #'common-lisp:make-instance 'default-cache-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-origin-id))
      (common-lisp:list
       (common-lisp:cons "TargetOriginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-signers))
      (common-lisp:list
       (common-lisp:cons "TrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-key-groups))
      (common-lisp:list
       (common-lisp:cons "TrustedKeyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-methods))
      (common-lisp:list
       (common-lisp:cons "AllowedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smooth-streaming))
      (common-lisp:list
       (common-lisp:cons "SmoothStreaming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compress))
      (common-lisp:list
       (common-lisp:cons "Compress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-associations))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-associations))
      (common-lisp:list
       (common-lisp:cons "FunctionAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-id))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-log-config-arn))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-id))
      (common-lisp:list
       (common-lisp:cons "CachePolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-id))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-id))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-values))
      (common-lisp:list
       (common-lisp:cons "ForwardedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-ttl))
      (common-lisp:list
       (common-lisp:cons "MinTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ttl))
      (common-lisp:list
       (common-lisp:cons "DefaultTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-ttl))
      (common-lisp:list
       (common-lisp:cons "MaxTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cache-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-cache-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-cache-policy-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cache-policy-request
                    'make-delete-cache-policy-request))
 (common-lisp:defun make-delete-cache-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cache-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cache-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cloud-front-origin-access-identity-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-cloud-front-origin-access-identity-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-cloud-front-origin-access-identity-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cloud-front-origin-access-identity-request
                    'make-delete-cloud-front-origin-access-identity-request))
 (common-lisp:defun make-delete-cloud-front-origin-access-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cloud-front-origin-access-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cloud-front-origin-access-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cloud-front-origin-access-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cloud-front-origin-access-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-continuous-deployment-policy-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-continuous-deployment-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-continuous-deployment-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-continuous-deployment-policy-request
                    'make-delete-continuous-deployment-policy-request))
 (common-lisp:defun make-delete-continuous-deployment-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-continuous-deployment-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-continuous-deployment-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-continuous-deployment-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-continuous-deployment-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-distribution-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-distribution-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-distribution-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-request
                    'make-delete-distribution-request))
 (common-lisp:defun make-delete-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-field-level-encryption-config-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-field-level-encryption-config-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-field-level-encryption-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-field-level-encryption-config-request
                    'make-delete-field-level-encryption-config-request))
 (common-lisp:defun make-delete-field-level-encryption-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-field-level-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-field-level-encryption-profile-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-field-level-encryption-profile-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-field-level-encryption-profile-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-field-level-encryption-profile-request
                    'make-delete-field-level-encryption-profile-request))
 (common-lisp:defun make-delete-field-level-encryption-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-field-level-encryption-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-field-level-encryption-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-function-request-if-match :initform
                         (common-lisp:error ":if-match is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-function-request 'make-delete-function-request))
 (common-lisp:defun make-delete-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-key-group-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-key-group-request-if-match :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-key-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-key-group-request 'make-delete-key-group-request))
 (common-lisp:defun make-delete-key-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-key-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-monitoring-subscription-request common-lisp:nil
                       ((distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-monitoring-subscription-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-monitoring-subscription-request
                    'make-delete-monitoring-subscription-request))
 (common-lisp:defun make-delete-monitoring-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-monitoring-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-monitoring-subscription-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-monitoring-subscription-result
                    'make-delete-monitoring-subscription-result))
 (common-lisp:defun make-delete-monitoring-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-monitoring-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-origin-access-control-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-origin-access-control-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-origin-access-control-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-origin-access-control-request
                    'make-delete-origin-access-control-request))
 (common-lisp:defun make-delete-origin-access-control-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-origin-access-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-access-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-access-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-access-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-origin-request-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-origin-request-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-origin-request-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-origin-request-policy-request
                    'make-delete-origin-request-policy-request))
 (common-lisp:defun make-delete-origin-request-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-origin-request-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-request-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-request-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-origin-request-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-public-key-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-public-key-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-public-key-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-public-key-request
                    'make-delete-public-key-request))
 (common-lisp:defun make-delete-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-realtime-log-config-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-realtime-log-config-request-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-realtime-log-config-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-realtime-log-config-request
                    'make-delete-realtime-log-config-request))
 (common-lisp:defun make-delete-realtime-log-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-realtime-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-realtime-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-response-headers-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-response-headers-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-response-headers-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-response-headers-policy-request
                    'make-delete-response-headers-policy-request))
 (common-lisp:defun make-delete-response-headers-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-response-headers-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-headers-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-headers-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-headers-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-streaming-distribution-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %delete-streaming-distribution-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %delete-streaming-distribution-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-streaming-distribution-request
                    'make-delete-streaming-distribution-request))
 (common-lisp:defun make-delete-streaming-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-streaming-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-streaming-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-function-request common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or function-stage common-lisp:null)
                         :accessor %describe-function-request-stage :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-function-request
                    'make-describe-function-request))
 (common-lisp:defun make-describe-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-function-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %describe-function-result-etag :initform
                         common-lisp:nil)
                        (function-summary :initarg :function-summary :type
                         (common-lisp:or function-summary common-lisp:null)
                         :accessor %describe-function-result-function-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-function-result 'make-describe-function-result))
 (common-lisp:defun make-describe-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag function-summary)
   (common-lisp:apply #'common-lisp:make-instance 'describe-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-summary))
      (common-lisp:list
       (common-lisp:cons "FunctionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionSummary" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass distribution common-lisp:nil
                       ((alias-icprecordals :initarg :alias-icprecordals :type
                         (common-lisp:or alias-icprecordals common-lisp:null)
                         :accessor %distribution-alias-icprecordals :initform
                         common-lisp:nil)
                        (distribution-config :initarg :distribution-config
                         :type
                         (common-lisp:or distribution-config common-lisp:null)
                         :accessor %distribution-distribution-config :initform
                         (common-lisp:error
                          ":distribution-config is required"))
                        (active-trusted-key-groups :initarg
                         :active-trusted-key-groups :type
                         (common-lisp:or active-trusted-key-groups
                                         common-lisp:null)
                         :accessor %distribution-active-trusted-key-groups
                         :initform common-lisp:nil)
                        (active-trusted-signers :initarg
                         :active-trusted-signers :type
                         (common-lisp:or active-trusted-signers
                                         common-lisp:null)
                         :accessor %distribution-active-trusted-signers
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-domain-name :initform
                         (common-lisp:error ":domain-name is required"))
                        (in-progress-invalidation-batches :initarg
                         :in-progress-invalidation-batches :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %distribution-in-progress-invalidation-batches
                         :initform
                         (common-lisp:error
                          ":in-progress-invalidation-batches is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-last-modified-time :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-status :initform
                         (common-lisp:error ":status is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'distribution 'make-distribution))
 (common-lisp:defun make-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-icprecordals distribution-config
                     active-trusted-key-groups active-trusted-signers
                     domain-name in-progress-invalidation-batches
                     last-modified-time status arn id)
   (common-lisp:apply #'common-lisp:make-instance 'distribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-invalidation-batches))
      (common-lisp:list
       (common-lisp:cons "InProgressInvalidationBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-trusted-signers))
      (common-lisp:list
       (common-lisp:cons "ActiveTrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-trusted-key-groups))
      (common-lisp:list
       (common-lisp:cons "ActiveTrustedKeyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-config))
      (common-lisp:list
       (common-lisp:cons "DistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-icprecordals))
      (common-lisp:list
       (common-lisp:cons "AliasICPRecordals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition distribution-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       distribution-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'distribution-already-exists
                    'distribution-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass distribution-config common-lisp:nil
                       ((staging :initarg :staging :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-config-staging :initform
                         common-lisp:nil)
                        (continuous-deployment-policy-id :initarg
                         :continuous-deployment-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %distribution-config-continuous-deployment-policy-id
                         :initform common-lisp:nil)
                        (is-ipv6enabled :initarg :is-ipv6enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-config-is-ipv6enabled
                         :initform common-lisp:nil)
                        (http-version :initarg :http-version :type
                         (common-lisp:or http-version common-lisp:null)
                         :accessor %distribution-config-http-version :initform
                         common-lisp:nil)
                        (web-aclid :initarg :web-aclid :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-config-web-aclid :initform
                         common-lisp:nil)
                        (restrictions :initarg :restrictions :type
                         (common-lisp:or restrictions common-lisp:null)
                         :accessor %distribution-config-restrictions :initform
                         common-lisp:nil)
                        (viewer-certificate :initarg :viewer-certificate :type
                         (common-lisp:or viewer-certificate common-lisp:null)
                         :accessor %distribution-config-viewer-certificate
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-config-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (price-class :initarg :price-class :type
                         (common-lisp:or price-class common-lisp:null)
                         :accessor %distribution-config-price-class :initform
                         common-lisp:nil)
                        (logging :initarg :logging :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %distribution-config-logging :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment-type common-lisp:null)
                         :accessor %distribution-config-comment :initform
                         (common-lisp:error ":comment is required"))
                        (custom-error-responses :initarg
                         :custom-error-responses :type
                         (common-lisp:or custom-error-responses
                                         common-lisp:null)
                         :accessor %distribution-config-custom-error-responses
                         :initform common-lisp:nil)
                        (cache-behaviors :initarg :cache-behaviors :type
                         (common-lisp:or cache-behaviors common-lisp:null)
                         :accessor %distribution-config-cache-behaviors
                         :initform common-lisp:nil)
                        (default-cache-behavior :initarg
                         :default-cache-behavior :type
                         (common-lisp:or default-cache-behavior
                                         common-lisp:null)
                         :accessor %distribution-config-default-cache-behavior
                         :initform
                         (common-lisp:error
                          ":default-cache-behavior is required"))
                        (origin-groups :initarg :origin-groups :type
                         (common-lisp:or origin-groups common-lisp:null)
                         :accessor %distribution-config-origin-groups :initform
                         common-lisp:nil)
                        (origins :initarg :origins :type
                         (common-lisp:or origins common-lisp:null) :accessor
                         %distribution-config-origins :initform
                         (common-lisp:error ":origins is required"))
                        (default-root-object :initarg :default-root-object
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-config-default-root-object
                         :initform common-lisp:nil)
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %distribution-config-aliases :initform
                         common-lisp:nil)
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'distribution-config 'make-distribution-config))
 (common-lisp:defun make-distribution-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key staging continuous-deployment-policy-id
                     is-ipv6enabled http-version web-aclid restrictions
                     viewer-certificate enabled price-class logging comment
                     custom-error-responses cache-behaviors
                     default-cache-behavior origin-groups origins
                     default-root-object aliases caller-reference)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-root-object))
      (common-lisp:list
       (common-lisp:cons "DefaultRootObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origins))
      (common-lisp:list
       (common-lisp:cons "Origins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-groups))
      (common-lisp:list
       (common-lisp:cons "OriginGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "DefaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "CacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-error-responses))
      (common-lisp:list
       (common-lisp:cons "CustomErrorResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-class))
      (common-lisp:list
       (common-lisp:cons "PriceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'viewer-certificate))
      (common-lisp:list
       (common-lisp:cons "ViewerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-version))
      (common-lisp:list
       (common-lisp:cons "HttpVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-ipv6enabled))
      (common-lisp:list
       (common-lisp:cons "IsIPV6Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-id))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging))
      (common-lisp:list
       (common-lisp:cons "Staging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass distribution-config-with-tags common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %distribution-config-with-tags-tags :initform
                         (common-lisp:error ":tags is required"))
                        (distribution-config :initarg :distribution-config
                         :type
                         (common-lisp:or distribution-config common-lisp:null)
                         :accessor
                         %distribution-config-with-tags-distribution-config
                         :initform
                         (common-lisp:error
                          ":distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'distribution-config-with-tags
                    'make-distribution-config-with-tags))
 (common-lisp:defun make-distribution-config-with-tags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'distribution-config-with-tags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribution-config-with-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribution-config-with-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-config))
      (common-lisp:list
       (common-lisp:cons "DistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribution-config-with-tags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass distribution-id-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or distribution-id-list-summary
                                         common-lisp:null)
                         :accessor %distribution-id-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %distribution-id-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-id-list-is-truncated :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %distribution-id-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-id-list-next-marker :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-id-list-marker :initform
                         (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'distribution-id-list 'make-distribution-id-list))
 (common-lisp:defun make-distribution-id-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-id-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-id-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-id-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-id-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-id-list-summary ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-distribution-id-list-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass distribution-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or distribution-summary-list
                                         common-lisp:null)
                         :accessor %distribution-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %distribution-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-list-is-truncated :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %distribution-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-list-next-marker :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-list-marker :initform
                         (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'distribution-list 'make-distribution-list))
 (common-lisp:defun make-distribution-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition distribution-not-disabled
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       distribution-not-disabled-message)))
 (common-lisp:export
  (common-lisp:list 'distribution-not-disabled
                    'distribution-not-disabled-message)))
(common-lisp:progn
 (common-lisp:defclass distribution-summary common-lisp:nil
                       ((staging :initarg :staging :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-summary-staging :initform
                         (common-lisp:error ":staging is required"))
                        (alias-icprecordals :initarg :alias-icprecordals :type
                         (common-lisp:or alias-icprecordals common-lisp:null)
                         :accessor %distribution-summary-alias-icprecordals
                         :initform common-lisp:nil)
                        (is-ipv6enabled :initarg :is-ipv6enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-summary-is-ipv6enabled
                         :initform
                         (common-lisp:error ":is-ipv6enabled is required"))
                        (http-version :initarg :http-version :type
                         (common-lisp:or http-version common-lisp:null)
                         :accessor %distribution-summary-http-version :initform
                         (common-lisp:error ":http-version is required"))
                        (web-aclid :initarg :web-aclid :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-web-aclid :initform
                         (common-lisp:error ":web-aclid is required"))
                        (restrictions :initarg :restrictions :type
                         (common-lisp:or restrictions common-lisp:null)
                         :accessor %distribution-summary-restrictions :initform
                         (common-lisp:error ":restrictions is required"))
                        (viewer-certificate :initarg :viewer-certificate :type
                         (common-lisp:or viewer-certificate common-lisp:null)
                         :accessor %distribution-summary-viewer-certificate
                         :initform
                         (common-lisp:error ":viewer-certificate is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %distribution-summary-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (price-class :initarg :price-class :type
                         (common-lisp:or price-class common-lisp:null)
                         :accessor %distribution-summary-price-class :initform
                         (common-lisp:error ":price-class is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-comment :initform
                         (common-lisp:error ":comment is required"))
                        (custom-error-responses :initarg
                         :custom-error-responses :type
                         (common-lisp:or custom-error-responses
                                         common-lisp:null)
                         :accessor %distribution-summary-custom-error-responses
                         :initform
                         (common-lisp:error
                          ":custom-error-responses is required"))
                        (cache-behaviors :initarg :cache-behaviors :type
                         (common-lisp:or cache-behaviors common-lisp:null)
                         :accessor %distribution-summary-cache-behaviors
                         :initform
                         (common-lisp:error ":cache-behaviors is required"))
                        (default-cache-behavior :initarg
                         :default-cache-behavior :type
                         (common-lisp:or default-cache-behavior
                                         common-lisp:null)
                         :accessor %distribution-summary-default-cache-behavior
                         :initform
                         (common-lisp:error
                          ":default-cache-behavior is required"))
                        (origin-groups :initarg :origin-groups :type
                         (common-lisp:or origin-groups common-lisp:null)
                         :accessor %distribution-summary-origin-groups
                         :initform common-lisp:nil)
                        (origins :initarg :origins :type
                         (common-lisp:or origins common-lisp:null) :accessor
                         %distribution-summary-origins :initform
                         (common-lisp:error ":origins is required"))
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %distribution-summary-aliases :initform
                         (common-lisp:error ":aliases is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-domain-name :initform
                         (common-lisp:error ":domain-name is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %distribution-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'distribution-summary 'make-distribution-summary))
 (common-lisp:defun make-distribution-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key staging alias-icprecordals is-ipv6enabled
                     http-version web-aclid restrictions viewer-certificate
                     enabled price-class comment custom-error-responses
                     cache-behaviors default-cache-behavior origin-groups
                     origins aliases domain-name last-modified-time status arn
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origins))
      (common-lisp:list
       (common-lisp:cons "Origins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-groups))
      (common-lisp:list
       (common-lisp:cons "OriginGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "DefaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "CacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-error-responses))
      (common-lisp:list
       (common-lisp:cons "CustomErrorResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-class))
      (common-lisp:list
       (common-lisp:cons "PriceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'viewer-certificate))
      (common-lisp:list
       (common-lisp:cons "ViewerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "Restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-version))
      (common-lisp:list
       (common-lisp:cons "HttpVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-ipv6enabled))
      (common-lisp:list
       (common-lisp:cons "IsIPV6Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-icprecordals))
      (common-lisp:list
       (common-lisp:cons "AliasICPRecordals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging))
      (common-lisp:list
       (common-lisp:cons "Staging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-summary-list ()
   '(trivial-types:proper-list distribution-summary))
 (common-lisp:defun |make-distribution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass encryption-entities common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or encryption-entity-list
                                         common-lisp:null)
                         :accessor %encryption-entities-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %encryption-entities-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-entities 'make-encryption-entities))
 (common-lisp:defun make-encryption-entities
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-entities
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-entities))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-entities))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-entities))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-entity common-lisp:nil
                       ((field-patterns :initarg :field-patterns :type
                         (common-lisp:or field-patterns common-lisp:null)
                         :accessor %encryption-entity-field-patterns :initform
                         (common-lisp:error ":field-patterns is required"))
                        (provider-id :initarg :provider-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %encryption-entity-provider-id :initform
                         (common-lisp:error ":provider-id is required"))
                        (public-key-id :initarg :public-key-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %encryption-entity-public-key-id :initform
                         (common-lisp:error ":public-key-id is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-entity 'make-encryption-entity))
 (common-lisp:defun make-encryption-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-patterns provider-id public-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-id))
      (common-lisp:list
       (common-lisp:cons "PublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-id))
      (common-lisp:list
       (common-lisp:cons "ProviderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-patterns))
      (common-lisp:list
       (common-lisp:cons "FieldPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype encryption-entity-list ()
   '(trivial-types:proper-list encryption-entity))
 (common-lisp:defun |make-encryption-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list encryption-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass end-point common-lisp:nil
                       ((kinesis-stream-config :initarg :kinesis-stream-config
                         :type
                         (common-lisp:or kinesis-stream-config
                                         common-lisp:null)
                         :accessor %end-point-kinesis-stream-config :initform
                         common-lisp:nil)
                        (stream-type :initarg :stream-type :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %end-point-stream-type :initform
                         (common-lisp:error ":stream-type is required"))))
 (common-lisp:export (common-lisp:list 'end-point 'make-end-point))
 (common-lisp:defun make-end-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kinesis-stream-config stream-type)
   (common-lisp:apply #'common-lisp:make-instance 'end-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-type))
      (common-lisp:list
       (common-lisp:cons "StreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-stream-config))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype end-point-list () '(trivial-types:proper-list end-point))
 (common-lisp:defun |make-end-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list end-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass field-level-encryption common-lisp:nil
                       ((field-level-encryption-config :initarg
                         :field-level-encryption-config :type
                         (common-lisp:or field-level-encryption-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-field-level-encryption-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption 'make-field-level-encryption))
 (common-lisp:defun make-field-level-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-config
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance 'field-level-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-config common-lisp:nil
                       ((content-type-profile-config :initarg
                         :content-type-profile-config :type
                         (common-lisp:or content-type-profile-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-config-content-type-profile-config
                         :initform common-lisp:nil)
                        (query-arg-profile-config :initarg
                         :query-arg-profile-config :type
                         (common-lisp:or query-arg-profile-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-config-query-arg-profile-config
                         :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-config-comment
                         :initform common-lisp:nil)
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-config
                    'make-field-level-encryption-config))
 (common-lisp:defun make-field-level-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type-profile-config
                     query-arg-profile-config comment caller-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-arg-profile-config))
      (common-lisp:list
       (common-lisp:cons "QueryArgProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-type-profile-config))
      (common-lisp:list
       (common-lisp:cons "ContentTypeProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition field-level-encryption-config-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       field-level-encryption-config-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-config-already-exists
                    'field-level-encryption-config-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition field-level-encryption-config-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       field-level-encryption-config-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-config-in-use
                    'field-level-encryption-config-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or field-level-encryption-summary-list
                                         common-lisp:null)
                         :accessor %field-level-encryption-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %field-level-encryption-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %field-level-encryption-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-list
                    'make-field-level-encryption-list))
 (common-lisp:defun make-field-level-encryption-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'field-level-encryption-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-profile common-lisp:nil
                       ((field-level-encryption-profile-config :initarg
                         :field-level-encryption-profile-config :type
                         (common-lisp:or field-level-encryption-profile-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-field-level-encryption-profile-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-profile-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-profile-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile
                    'make-field-level-encryption-profile))
 (common-lisp:defun make-field-level-encryption-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-profile-config
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition field-level-encryption-profile-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       field-level-encryption-profile-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-already-exists
                    'field-level-encryption-profile-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-profile-config common-lisp:nil
                       ((encryption-entities :initarg :encryption-entities
                         :type
                         (common-lisp:or encryption-entities common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-config-encryption-entities
                         :initform
                         (common-lisp:error
                          ":encryption-entities is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-config-comment
                         :initform common-lisp:nil)
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-profile-config-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-config
                    'make-field-level-encryption-profile-config))
 (common-lisp:defun make-field-level-encryption-profile-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-entities comment
                     caller-reference name)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-profile-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-entities))
      (common-lisp:list
       (common-lisp:cons "EncryptionEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition field-level-encryption-profile-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       field-level-encryption-profile-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-in-use
                    'field-level-encryption-profile-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-profile-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          field-level-encryption-profile-summary-list
                          common-lisp:null)
                         :accessor %field-level-encryption-profile-list-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-list
                    'make-field-level-encryption-profile-list))
 (common-lisp:defun make-field-level-encryption-profile-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-profile-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition field-level-encryption-profile-size-exceeded
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       field-level-encryption-profile-size-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-size-exceeded
                    'field-level-encryption-profile-size-exceeded-message)))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-profile-summary common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-summary-comment
                         :initform common-lisp:nil)
                        (encryption-entities :initarg :encryption-entities
                         :type
                         (common-lisp:or encryption-entities common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-summary-encryption-entities
                         :initform
                         (common-lisp:error
                          ":encryption-entities is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-profile-summary-name
                         :initform (common-lisp:error ":name is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-profile-summary-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-profile-summary-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-profile-summary
                    'make-field-level-encryption-profile-summary))
 (common-lisp:defun make-field-level-encryption-profile-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment encryption-entities name
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-entities))
      (common-lisp:list
       (common-lisp:cons "EncryptionEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-level-encryption-profile-summary-list ()
   '(trivial-types:proper-list field-level-encryption-profile-summary))
 (common-lisp:defun |make-field-level-encryption-profile-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-level-encryption-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-level-encryption-summary common-lisp:nil
                       ((content-type-profile-config :initarg
                         :content-type-profile-config :type
                         (common-lisp:or content-type-profile-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-summary-content-type-profile-config
                         :initform common-lisp:nil)
                        (query-arg-profile-config :initarg
                         :query-arg-profile-config :type
                         (common-lisp:or query-arg-profile-config
                                         common-lisp:null)
                         :accessor
                         %field-level-encryption-summary-query-arg-profile-config
                         :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-summary-comment
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %field-level-encryption-summary-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %field-level-encryption-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'field-level-encryption-summary
                    'make-field-level-encryption-summary))
 (common-lisp:defun make-field-level-encryption-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type-profile-config
                     query-arg-profile-config comment last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-level-encryption-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-arg-profile-config))
      (common-lisp:list
       (common-lisp:cons "QueryArgProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-type-profile-config))
      (common-lisp:list
       (common-lisp:cons "ContentTypeProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-level-encryption-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-level-encryption-summary-list ()
   '(trivial-types:proper-list field-level-encryption-summary))
 (common-lisp:defun |make-field-level-encryption-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-level-encryption-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype field-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype field-pattern-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-field-pattern-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-patterns common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or field-pattern-list common-lisp:null)
                         :accessor %field-patterns-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %field-patterns-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'field-patterns 'make-field-patterns))
 (common-lisp:defun make-field-patterns
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'field-patterns
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-patterns))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-patterns))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-patterns))
   common-lisp:nil))
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass forwarded-values common-lisp:nil
                       ((query-string-cache-keys :initarg
                         :query-string-cache-keys :type
                         (common-lisp:or query-string-cache-keys
                                         common-lisp:null)
                         :accessor %forwarded-values-query-string-cache-keys
                         :initform common-lisp:nil)
                        (headers :initarg :headers :type
                         (common-lisp:or headers common-lisp:null) :accessor
                         %forwarded-values-headers :initform common-lisp:nil)
                        (cookies :initarg :cookies :type
                         (common-lisp:or cookie-preference common-lisp:null)
                         :accessor %forwarded-values-cookies :initform
                         (common-lisp:error ":cookies is required"))
                        (query-string :initarg :query-string :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %forwarded-values-query-string :initform
                         (common-lisp:error ":query-string is required"))))
 (common-lisp:export
  (common-lisp:list 'forwarded-values 'make-forwarded-values))
 (common-lisp:defun make-forwarded-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string-cache-keys headers cookies
                     query-string)
   (common-lisp:apply #'common-lisp:make-instance 'forwarded-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forwarded-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forwarded-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies))
      (common-lisp:list
       (common-lisp:cons "Cookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-cache-keys))
      (common-lisp:list
       (common-lisp:cons "QueryStringCacheKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forwarded-values))
   common-lisp:nil))
(common-lisp:deftype frame-options-list () 'common-lisp:string)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition function-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       function-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'function-already-exists 'function-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass function-association common-lisp:nil
                       ((event-type :initarg :event-type :type
                         (common-lisp:or event-type common-lisp:null) :accessor
                         %function-association-event-type :initform
                         (common-lisp:error ":event-type is required"))
                        (function-arn :initarg :function-arn :type
                         (common-lisp:or function-arn common-lisp:null)
                         :accessor %function-association-function-arn :initform
                         (common-lisp:error ":function-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'function-association 'make-function-association))
 (common-lisp:defun make-function-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-type function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'function-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype function-association-list ()
   '(trivial-types:proper-list function-association))
 (common-lisp:defun |make-function-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass function-associations common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or function-association-list
                                         common-lisp:null)
                         :accessor %function-associations-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %function-associations-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'function-associations 'make-function-associations))
 (common-lisp:defun make-function-associations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'function-associations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-associations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-associations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-associations))
   common-lisp:nil))
(common-lisp:deftype function-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass function-config common-lisp:nil
                       ((runtime :initarg :runtime :type
                         (common-lisp:or function-runtime common-lisp:null)
                         :accessor %function-config-runtime :initform
                         (common-lisp:error ":runtime is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-config-comment :initform
                         (common-lisp:error ":comment is required"))))
 (common-lisp:export (common-lisp:list 'function-config 'make-function-config))
 (common-lisp:defun make-function-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime comment)
   (common-lisp:apply #'common-lisp:make-instance 'function-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-config))
   common-lisp:nil))
(common-lisp:deftype function-event-object ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype function-execution-log-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-function-execution-log-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition function-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       function-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'function-in-use 'function-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass function-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or function-summary-list
                                         common-lisp:null)
                         :accessor %function-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %function-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %function-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-list-next-marker :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'function-list 'make-function-list))
 (common-lisp:defun make-function-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'function-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-metadata common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-metadata-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-metadata-created-time :initform
                         common-lisp:nil)
                        (stage :initarg :stage :type
                         (common-lisp:or function-stage common-lisp:null)
                         :accessor %function-metadata-stage :initform
                         common-lisp:nil)
                        (function-arn :initarg :function-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-metadata-function-arn :initform
                         (common-lisp:error ":function-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'function-metadata 'make-function-metadata))
 (common-lisp:defun make-function-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time created-time stage
                     function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'function-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-metadata))
   common-lisp:nil))
(common-lisp:deftype function-name () 'common-lisp:string)
(common-lisp:deftype function-runtime () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition function-size-limit-exceeded
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       function-size-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'function-size-limit-exceeded
                    'function-size-limit-exceeded-message)))
(common-lisp:deftype function-stage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass function-summary common-lisp:nil
                       ((function-metadata :initarg :function-metadata :type
                         (common-lisp:or function-metadata common-lisp:null)
                         :accessor %function-summary-function-metadata
                         :initform
                         (common-lisp:error ":function-metadata is required"))
                        (function-config :initarg :function-config :type
                         (common-lisp:or function-config common-lisp:null)
                         :accessor %function-summary-function-config :initform
                         (common-lisp:error ":function-config is required"))
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %function-summary-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or function-name common-lisp:null)
                         :accessor %function-summary-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'function-summary 'make-function-summary))
 (common-lisp:defun make-function-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-metadata function-config status
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'function-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-config))
      (common-lisp:list
       (common-lisp:cons "FunctionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-metadata))
      (common-lisp:list
       (common-lisp:cons "FunctionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype function-summary-list ()
   '(trivial-types:proper-list function-summary))
 (common-lisp:defun |make-function-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass geo-restriction common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor %geo-restriction-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %geo-restriction-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (restriction-type :initarg :restriction-type :type
                         (common-lisp:or geo-restriction-type common-lisp:null)
                         :accessor %geo-restriction-restriction-type :initform
                         (common-lisp:error ":restriction-type is required"))))
 (common-lisp:export (common-lisp:list 'geo-restriction 'make-geo-restriction))
 (common-lisp:defun make-geo-restriction
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity restriction-type)
   (common-lisp:apply #'common-lisp:make-instance 'geo-restriction
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-restriction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-restriction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restriction-type))
      (common-lisp:list
       (common-lisp:cons "RestrictionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-restriction))
   common-lisp:nil))
(common-lisp:deftype geo-restriction-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-cache-policy-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-cache-policy-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cache-policy-config-request
                    'make-get-cache-policy-config-request))
 (common-lisp:defun make-get-cache-policy-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cache-policy-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cache-policy-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-cache-policy-config-result-etag
                         :initform common-lisp:nil)
                        (cache-policy-config :initarg :cache-policy-config
                         :type
                         (common-lisp:or cache-policy-config common-lisp:null)
                         :accessor
                         %get-cache-policy-config-result-cache-policy-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cache-policy-config-result
                    'make-get-cache-policy-config-result))
 (common-lisp:defun make-get-cache-policy-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag cache-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cache-policy-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-config))
      (common-lisp:list
       (common-lisp:cons "CachePolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicyConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-cache-policy-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-cache-policy-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cache-policy-request 'make-get-cache-policy-request))
 (common-lisp:defun make-get-cache-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-cache-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cache-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-cache-policy-result-etag :initform
                         common-lisp:nil)
                        (cache-policy :initarg :cache-policy :type
                         (common-lisp:or cache-policy common-lisp:null)
                         :accessor %get-cache-policy-result-cache-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cache-policy-result 'make-get-cache-policy-result))
 (common-lisp:defun make-get-cache-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag cache-policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-cache-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy))
      (common-lisp:list
       (common-lisp:cons "CachePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cache-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicy" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-cloud-front-origin-access-identity-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cloud-front-origin-access-identity-config-request
                    'make-get-cloud-front-origin-access-identity-config-request))
 (common-lisp:defun make-get-cloud-front-origin-access-identity-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-front-origin-access-identity-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-front-origin-access-identity-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-config-result-etag
                         :initform common-lisp:nil)
                        (cloud-front-origin-access-identity-config :initarg
                         :cloud-front-origin-access-identity-config :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-config
                          common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-config-result-cloud-front-origin-access-identity-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cloud-front-origin-access-identity-config-result
                    'make-get-cloud-front-origin-access-identity-config-result))
 (common-lisp:defun make-get-cloud-front-origin-access-identity-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag
                     cloud-front-origin-access-identity-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-front-origin-access-identity-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity-config))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentityConfig"
                              common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-cloud-front-origin-access-identity-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cloud-front-origin-access-identity-request
                    'make-get-cloud-front-origin-access-identity-request))
 (common-lisp:defun make-get-cloud-front-origin-access-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-front-origin-access-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-front-origin-access-identity-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-result-etag
                         :initform common-lisp:nil)
                        (cloud-front-origin-access-identity :initarg
                         :cloud-front-origin-access-identity :type
                         (common-lisp:or cloud-front-origin-access-identity
                                         common-lisp:null)
                         :accessor
                         %get-cloud-front-origin-access-identity-result-cloud-front-origin-access-identity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cloud-front-origin-access-identity-result
                    'make-get-cloud-front-origin-access-identity-result))
 (common-lisp:defun make-get-cloud-front-origin-access-identity-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag cloud-front-origin-access-identity)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-front-origin-access-identity-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-front-origin-access-identity-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentity" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-continuous-deployment-policy-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-continuous-deployment-policy-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-continuous-deployment-policy-config-request
                    'make-get-continuous-deployment-policy-config-request))
 (common-lisp:defun make-get-continuous-deployment-policy-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-continuous-deployment-policy-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-continuous-deployment-policy-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-continuous-deployment-policy-config-result-etag
                         :initform common-lisp:nil)
                        (continuous-deployment-policy-config :initarg
                         :continuous-deployment-policy-config :type
                         (common-lisp:or continuous-deployment-policy-config
                                         common-lisp:null)
                         :accessor
                         %get-continuous-deployment-policy-config-result-continuous-deployment-policy-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-continuous-deployment-policy-config-result
                    'make-get-continuous-deployment-policy-config-result))
 (common-lisp:defun make-get-continuous-deployment-policy-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag continuous-deployment-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-continuous-deployment-policy-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-config))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicyConfig"
                              common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-continuous-deployment-policy-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-continuous-deployment-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-continuous-deployment-policy-request
                    'make-get-continuous-deployment-policy-request))
 (common-lisp:defun make-get-continuous-deployment-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-continuous-deployment-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-continuous-deployment-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-continuous-deployment-policy-result-etag
                         :initform common-lisp:nil)
                        (continuous-deployment-policy :initarg
                         :continuous-deployment-policy :type
                         (common-lisp:or continuous-deployment-policy
                                         common-lisp:null)
                         :accessor
                         %get-continuous-deployment-policy-result-continuous-deployment-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-continuous-deployment-policy-result
                    'make-get-continuous-deployment-policy-result))
 (common-lisp:defun make-get-continuous-deployment-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag continuous-deployment-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-continuous-deployment-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-continuous-deployment-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-distribution-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-distribution-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-distribution-config-request
                    'make-get-distribution-config-request))
 (common-lisp:defun make-get-distribution-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-distribution-config-result-etag
                         :initform common-lisp:nil)
                        (distribution-config :initarg :distribution-config
                         :type
                         (common-lisp:or distribution-config common-lisp:null)
                         :accessor
                         %get-distribution-config-result-distribution-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-config-result
                    'make-get-distribution-config-result))
 (common-lisp:defun make-get-distribution-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-config))
      (common-lisp:list
       (common-lisp:cons "DistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-distribution-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-distribution-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-distribution-request 'make-get-distribution-request))
 (common-lisp:defun make-get-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-distribution-result-etag :initform
                         common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor %get-distribution-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-result 'make-get-distribution-result))
 (common-lisp:defun make-get-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag distribution)
   (common-lisp:apply #'common-lisp:make-instance 'get-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-config-request
                    'make-get-field-level-encryption-config-request))
 (common-lisp:defun make-get-field-level-encryption-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-config-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption-config :initarg
                         :field-level-encryption-config :type
                         (common-lisp:or field-level-encryption-config
                                         common-lisp:null)
                         :accessor
                         %get-field-level-encryption-config-result-field-level-encryption-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-config-result
                    'make-get-field-level-encryption-config-result))
 (common-lisp:defun make-get-field-level-encryption-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag field-level-encryption-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-profile-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-profile-config-request
                    'make-get-field-level-encryption-profile-config-request))
 (common-lisp:defun make-get-field-level-encryption-profile-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-profile-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-profile-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-config-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption-profile-config :initarg
                         :field-level-encryption-profile-config :type
                         (common-lisp:or field-level-encryption-profile-config
                                         common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-config-result-field-level-encryption-profile-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-profile-config-result
                    'make-get-field-level-encryption-profile-config-result))
 (common-lisp:defun make-get-field-level-encryption-profile-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag
                     field-level-encryption-profile-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-profile-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfileConfig"
                              common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-profile-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-profile-request
                    'make-get-field-level-encryption-profile-request))
 (common-lisp:defun make-get-field-level-encryption-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-profile-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption-profile :initarg
                         :field-level-encryption-profile :type
                         (common-lisp:or field-level-encryption-profile
                                         common-lisp:null)
                         :accessor
                         %get-field-level-encryption-profile-result-field-level-encryption-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-profile-result
                    'make-get-field-level-encryption-profile-result))
 (common-lisp:defun make-get-field-level-encryption-profile-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag field-level-encryption-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-profile-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfile" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-field-level-encryption-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-request
                    'make-get-field-level-encryption-request))
 (common-lisp:defun make-get-field-level-encryption-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-field-level-encryption-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-field-level-encryption-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption :initarg
                         :field-level-encryption :type
                         (common-lisp:or field-level-encryption
                                         common-lisp:null)
                         :accessor
                         %get-field-level-encryption-result-field-level-encryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-field-level-encryption-result
                    'make-get-field-level-encryption-result))
 (common-lisp:defun make-get-field-level-encryption-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag field-level-encryption)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-field-level-encryption-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-field-level-encryption-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryption" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-function-request common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or function-stage common-lisp:null)
                         :accessor %get-function-request-stage :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-function-request 'make-get-function-request))
 (common-lisp:defun make-get-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage name)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-result common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-function-result-content-type :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-function-result-etag :initform
                         common-lisp:nil)
                        (function-code :initarg :function-code :type
                         (common-lisp:or function-blob common-lisp:null)
                         :accessor %get-function-result-function-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-function-result 'make-get-function-result))
 (common-lisp:defun make-get-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type etag function-code)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-code))
      (common-lisp:list
       (common-lisp:cons "FunctionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionCode" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-invalidation-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-invalidation-request-id :initform
                         (common-lisp:error ":id is required"))
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-invalidation-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-invalidation-request 'make-get-invalidation-request))
 (common-lisp:defun make-get-invalidation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id distribution-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-invalidation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invalidation-result common-lisp:nil
                       ((invalidation :initarg :invalidation :type
                         (common-lisp:or invalidation common-lisp:null)
                         :accessor %get-invalidation-result-invalidation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-invalidation-result 'make-get-invalidation-result))
 (common-lisp:defun make-get-invalidation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalidation)
   (common-lisp:apply #'common-lisp:make-instance 'get-invalidation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalidation))
      (common-lisp:list
       (common-lisp:cons "Invalidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invalidation-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Invalidation" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-key-group-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-key-group-config-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-key-group-config-request
                    'make-get-key-group-config-request))
 (common-lisp:defun make-get-key-group-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-group-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-group-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-key-group-config-result-etag :initform
                         common-lisp:nil)
                        (key-group-config :initarg :key-group-config :type
                         (common-lisp:or key-group-config common-lisp:null)
                         :accessor
                         %get-key-group-config-result-key-group-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-key-group-config-result
                    'make-get-key-group-config-result))
 (common-lisp:defun make-get-key-group-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag key-group-config)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-group-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-config))
      (common-lisp:list
       (common-lisp:cons "KeyGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroupConfig" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-key-group-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-key-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-key-group-request 'make-get-key-group-request))
 (common-lisp:defun make-get-key-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-group-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-key-group-result-etag :initform
                         common-lisp:nil)
                        (key-group :initarg :key-group :type
                         (common-lisp:or key-group common-lisp:null) :accessor
                         %get-key-group-result-key-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-key-group-result 'make-get-key-group-result))
 (common-lisp:defun make-get-key-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag key-group)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group))
      (common-lisp:list
       (common-lisp:cons "KeyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-group-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroup" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-monitoring-subscription-request common-lisp:nil
                       ((distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-monitoring-subscription-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-monitoring-subscription-request
                    'make-get-monitoring-subscription-request))
 (common-lisp:defun make-get-monitoring-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-monitoring-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-monitoring-subscription-result common-lisp:nil
                       ((monitoring-subscription :initarg
                         :monitoring-subscription :type
                         (common-lisp:or monitoring-subscription
                                         common-lisp:null)
                         :accessor
                         %get-monitoring-subscription-result-monitoring-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-monitoring-subscription-result
                    'make-get-monitoring-subscription-result))
 (common-lisp:defun make-get-monitoring-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-monitoring-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-subscription))
      (common-lisp:list
       (common-lisp:cons "MonitoringSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-monitoring-subscription-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MonitoringSubscription" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-origin-access-control-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-access-control-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-origin-access-control-config-request
                    'make-get-origin-access-control-config-request))
 (common-lisp:defun make-get-origin-access-control-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-access-control-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-origin-access-control-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-origin-access-control-config-result-etag
                         :initform common-lisp:nil)
                        (origin-access-control-config :initarg
                         :origin-access-control-config :type
                         (common-lisp:or origin-access-control-config
                                         common-lisp:null)
                         :accessor
                         %get-origin-access-control-config-result-origin-access-control-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-origin-access-control-config-result
                    'make-get-origin-access-control-config-result))
 (common-lisp:defun make-get-origin-access-control-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-access-control-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-access-control-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-config))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControlConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-origin-access-control-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-access-control-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-origin-access-control-request
                    'make-get-origin-access-control-request))
 (common-lisp:defun make-get-origin-access-control-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-access-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-origin-access-control-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-access-control-result-etag
                         :initform common-lisp:nil)
                        (origin-access-control :initarg :origin-access-control
                         :type
                         (common-lisp:or origin-access-control
                                         common-lisp:null)
                         :accessor
                         %get-origin-access-control-result-origin-access-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-origin-access-control-result
                    'make-get-origin-access-control-result))
 (common-lisp:defun make-get-origin-access-control-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-access-control)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-access-control-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-access-control-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControl" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-origin-request-policy-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-request-policy-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-origin-request-policy-config-request
                    'make-get-origin-request-policy-config-request))
 (common-lisp:defun make-get-origin-request-policy-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-request-policy-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-origin-request-policy-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-origin-request-policy-config-result-etag
                         :initform common-lisp:nil)
                        (origin-request-policy-config :initarg
                         :origin-request-policy-config :type
                         (common-lisp:or origin-request-policy-config
                                         common-lisp:null)
                         :accessor
                         %get-origin-request-policy-config-result-origin-request-policy-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-origin-request-policy-config-result
                    'make-get-origin-request-policy-config-result))
 (common-lisp:defun make-get-origin-request-policy-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-request-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-request-policy-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-config))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicyConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-origin-request-policy-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-request-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-origin-request-policy-request
                    'make-get-origin-request-policy-request))
 (common-lisp:defun make-get-origin-request-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-request-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-origin-request-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-origin-request-policy-result-etag
                         :initform common-lisp:nil)
                        (origin-request-policy :initarg :origin-request-policy
                         :type
                         (common-lisp:or origin-request-policy
                                         common-lisp:null)
                         :accessor
                         %get-origin-request-policy-result-origin-request-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-origin-request-policy-result
                    'make-get-origin-request-policy-result))
 (common-lisp:defun make-get-origin-request-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-request-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-origin-request-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-origin-request-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-public-key-config-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-public-key-config-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-public-key-config-request
                    'make-get-public-key-config-request))
 (common-lisp:defun make-get-public-key-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-key-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-key-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-public-key-config-result-etag :initform
                         common-lisp:nil)
                        (public-key-config :initarg :public-key-config :type
                         (common-lisp:or public-key-config common-lisp:null)
                         :accessor
                         %get-public-key-config-result-public-key-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-public-key-config-result
                    'make-get-public-key-config-result))
 (common-lisp:defun make-get-public-key-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag public-key-config)
   (common-lisp:apply #'common-lisp:make-instance 'get-public-key-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-config))
      (common-lisp:list
       (common-lisp:cons "PublicKeyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKeyConfig" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-public-key-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-public-key-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-public-key-request 'make-get-public-key-request))
 (common-lisp:defun make-get-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-key-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-public-key-result-etag :initform
                         common-lisp:nil)
                        (public-key :initarg :public-key :type
                         (common-lisp:or public-key common-lisp:null) :accessor
                         %get-public-key-result-public-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-public-key-result 'make-get-public-key-result))
 (common-lisp:defun make-get-public-key-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag public-key)
   (common-lisp:apply #'common-lisp:make-instance 'get-public-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKey" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-realtime-log-config-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-realtime-log-config-request-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-realtime-log-config-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-realtime-log-config-request
                    'make-get-realtime-log-config-request))
 (common-lisp:defun make-get-realtime-log-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-realtime-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-realtime-log-config-result common-lisp:nil
                       ((realtime-log-config :initarg :realtime-log-config
                         :type
                         (common-lisp:or realtime-log-config common-lisp:null)
                         :accessor
                         %get-realtime-log-config-result-realtime-log-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-realtime-log-config-result
                    'make-get-realtime-log-config-result))
 (common-lisp:defun make-get-realtime-log-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-log-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-realtime-log-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realtime-log-config))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-realtime-log-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-response-headers-policy-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-response-headers-policy-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-response-headers-policy-config-request
                    'make-get-response-headers-policy-config-request))
 (common-lisp:defun make-get-response-headers-policy-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-response-headers-policy-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-response-headers-policy-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-response-headers-policy-config-result-etag
                         :initform common-lisp:nil)
                        (response-headers-policy-config :initarg
                         :response-headers-policy-config :type
                         (common-lisp:or response-headers-policy-config
                                         common-lisp:null)
                         :accessor
                         %get-response-headers-policy-config-result-response-headers-policy-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-response-headers-policy-config-result
                    'make-get-response-headers-policy-config-result))
 (common-lisp:defun make-get-response-headers-policy-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag response-headers-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-response-headers-policy-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-config))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicyConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-response-headers-policy-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-response-headers-policy-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-response-headers-policy-request
                    'make-get-response-headers-policy-request))
 (common-lisp:defun make-get-response-headers-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-response-headers-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-response-headers-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-response-headers-policy-result-etag
                         :initform common-lisp:nil)
                        (response-headers-policy :initarg
                         :response-headers-policy :type
                         (common-lisp:or response-headers-policy
                                         common-lisp:null)
                         :accessor
                         %get-response-headers-policy-result-response-headers-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-response-headers-policy-result
                    'make-get-response-headers-policy-result))
 (common-lisp:defun make-get-response-headers-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag response-headers-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-response-headers-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-headers-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-streaming-distribution-config-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-streaming-distribution-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-distribution-config-request
                    'make-get-streaming-distribution-config-request))
 (common-lisp:defun make-get-streaming-distribution-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-distribution-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-distribution-config-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-streaming-distribution-config-result-etag
                         :initform common-lisp:nil)
                        (streaming-distribution-config :initarg
                         :streaming-distribution-config :type
                         (common-lisp:or streaming-distribution-config
                                         common-lisp:null)
                         :accessor
                         %get-streaming-distribution-config-result-streaming-distribution-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-distribution-config-result
                    'make-get-streaming-distribution-config-result))
 (common-lisp:defun make-get-streaming-distribution-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag streaming-distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-distribution-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistributionConfig" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-streaming-distribution-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-streaming-distribution-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-streaming-distribution-request
                    'make-get-streaming-distribution-request))
 (common-lisp:defun make-get-streaming-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-streaming-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-streaming-distribution-result-etag
                         :initform common-lisp:nil)
                        (streaming-distribution :initarg
                         :streaming-distribution :type
                         (common-lisp:or streaming-distribution
                                         common-lisp:null)
                         :accessor
                         %get-streaming-distribution-result-streaming-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-streaming-distribution-result
                    'make-get-streaming-distribution-result))
 (common-lisp:defun make-get-streaming-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag streaming-distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-streaming-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution))
      (common-lisp:list
       (common-lisp:cons "StreamingDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-streaming-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistribution" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:deftype header-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-header-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass headers common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or header-list common-lisp:null)
                         :accessor %headers-items :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %headers-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'headers 'make-headers))
 (common-lisp:defun make-headers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'headers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input headers))
   common-lisp:nil))
(common-lisp:deftype http-version () 'common-lisp:string)
(common-lisp:deftype icprecordal-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition illegal-delete
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-delete-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-delete 'illegal-delete-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-field-level-encryption-config-association-with-cache-behavior
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-field-level-encryption-config-association-with-cache-behavior-message)))
 (common-lisp:export
  (common-lisp:list
   'illegal-field-level-encryption-config-association-with-cache-behavior
   'illegal-field-level-encryption-config-association-with-cache-behavior-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-origin-access-configuration
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-origin-access-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-origin-access-configuration
                    'illegal-origin-access-configuration-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-update
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-update-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-update 'illegal-update-message)))
(common-lisp:progn
 (common-lisp:define-condition inconsistent-quantities
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       inconsistent-quantities-message)))
 (common-lisp:export
  (common-lisp:list 'inconsistent-quantities 'inconsistent-quantities-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument 'invalid-argument-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-default-root-object
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-default-root-object-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-default-root-object
                    'invalid-default-root-object-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-domain-name-for-origin-access-control
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-domain-name-for-origin-access-control-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-domain-name-for-origin-access-control
                    'invalid-domain-name-for-origin-access-control-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-error-code
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-error-code-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-error-code 'invalid-error-code-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-forward-cookies
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-forward-cookies-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-forward-cookies 'invalid-forward-cookies-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-function-association
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-function-association-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-function-association
                    'invalid-function-association-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-geo-restriction-parameter
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-geo-restriction-parameter-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-geo-restriction-parameter
                    'invalid-geo-restriction-parameter-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-headers-for-s3origin
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-headers-for-s3origin-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-headers-for-s3origin
                    'invalid-headers-for-s3origin-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-if-match-version
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-if-match-version-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-if-match-version
                    'invalid-if-match-version-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lambda-function-association
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-lambda-function-association-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-lambda-function-association
                    'invalid-lambda-function-association-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-location-code
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-location-code-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-location-code 'invalid-location-code-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-minimum-protocol-version
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-minimum-protocol-version-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-minimum-protocol-version
                    'invalid-minimum-protocol-version-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-origin
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-origin-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-origin 'invalid-origin-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-origin-access-control
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-origin-access-control-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-origin-access-control
                    'invalid-origin-access-control-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-origin-access-identity
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-origin-access-identity-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-origin-access-identity
                    'invalid-origin-access-identity-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-origin-keepalive-timeout
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-origin-keepalive-timeout-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-origin-keepalive-timeout
                    'invalid-origin-keepalive-timeout-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-origin-read-timeout
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-origin-read-timeout-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-origin-read-timeout
                    'invalid-origin-read-timeout-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-protocol-settings
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-protocol-settings-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-protocol-settings
                    'invalid-protocol-settings-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-query-string-parameters
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-query-string-parameters-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-query-string-parameters
                    'invalid-query-string-parameters-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-relative-path
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-relative-path-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-relative-path 'invalid-relative-path-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-required-protocol
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-required-protocol-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-required-protocol
                    'invalid-required-protocol-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-response-code
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-response-code-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-response-code 'invalid-response-code-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ttlorder
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ttlorder-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-ttlorder 'invalid-ttlorder-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tagging
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tagging-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tagging 'invalid-tagging-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-viewer-certificate
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-viewer-certificate-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-viewer-certificate
                    'invalid-viewer-certificate-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-web-aclid
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-web-aclid-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-web-aclid 'invalid-web-aclid-message)))
(common-lisp:progn
 (common-lisp:defclass invalidation common-lisp:nil
                       ((invalidation-batch :initarg :invalidation-batch :type
                         (common-lisp:or invalidation-batch common-lisp:null)
                         :accessor %invalidation-invalidation-batch :initform
                         (common-lisp:error ":invalidation-batch is required"))
                        (create-time :initarg :create-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-create-time :initform
                         (common-lisp:error ":create-time is required"))
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-status :initform
                         (common-lisp:error ":status is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'invalidation 'make-invalidation))
 (common-lisp:defun make-invalidation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalidation-batch create-time status id)
   (common-lisp:apply #'common-lisp:make-instance 'invalidation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalidation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalidation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalidation-batch))
      (common-lisp:list
       (common-lisp:cons "InvalidationBatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalidation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalidation-batch common-lisp:nil
                       ((caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-batch-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))
                        (paths :initarg :paths :type
                         (common-lisp:or paths common-lisp:null) :accessor
                         %invalidation-batch-paths :initform
                         (common-lisp:error ":paths is required"))))
 (common-lisp:export
  (common-lisp:list 'invalidation-batch 'make-invalidation-batch))
 (common-lisp:defun make-invalidation-batch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key caller-reference paths)
   (common-lisp:apply #'common-lisp:make-instance 'invalidation-batch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalidation-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalidation-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalidation-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalidation-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or invalidation-summary-list
                                         common-lisp:null)
                         :accessor %invalidation-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %invalidation-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %invalidation-list-is-truncated :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %invalidation-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-list-next-marker :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-list-marker :initform
                         (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'invalidation-list 'make-invalidation-list))
 (common-lisp:defun make-invalidation-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance 'invalidation-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalidation-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalidation-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalidation-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalidation-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (create-time :initarg :create-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-summary-create-time :initform
                         (common-lisp:error ":create-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalidation-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'invalidation-summary 'make-invalidation-summary))
 (common-lisp:defun make-invalidation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status create-time id)
   (common-lisp:apply #'common-lisp:make-instance 'invalidation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalidation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalidation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalidation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalidation-summary-list ()
   '(trivial-types:proper-list invalidation-summary))
 (common-lisp:defun |make-invalidation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invalidation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype item-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kgkey-pair-ids common-lisp:nil
                       ((key-pair-ids :initarg :key-pair-ids :type
                         (common-lisp:or key-pair-ids common-lisp:null)
                         :accessor %kgkey-pair-ids-key-pair-ids :initform
                         common-lisp:nil)
                        (key-group-id :initarg :key-group-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %kgkey-pair-ids-key-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kgkey-pair-ids 'make-kgkey-pair-ids))
 (common-lisp:defun make-kgkey-pair-ids
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-pair-ids key-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'kgkey-pair-ids
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kgkey-pair-ids))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kgkey-pair-ids))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-id))
      (common-lisp:list
       (common-lisp:cons "KeyGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-ids))
      (common-lisp:list
       (common-lisp:cons "KeyPairIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kgkey-pair-ids))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kgkey-pair-ids-list ()
   '(trivial-types:proper-list kgkey-pair-ids))
 (common-lisp:defun |make-kgkey-pair-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kgkey-pair-ids))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass key-group common-lisp:nil
                       ((key-group-config :initarg :key-group-config :type
                         (common-lisp:or key-group-config common-lisp:null)
                         :accessor %key-group-key-group-config :initform
                         (common-lisp:error ":key-group-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %key-group-last-modified-time :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %key-group-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'key-group 'make-key-group))
 (common-lisp:defun make-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-group-config last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance 'key-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-config))
      (common-lisp:list
       (common-lisp:cons "KeyGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition key-group-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       key-group-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'key-group-already-exists
                    'key-group-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass key-group-config common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %key-group-config-comment :initform
                         common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or public-key-id-list common-lisp:null)
                         :accessor %key-group-config-items :initform
                         (common-lisp:error ":items is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %key-group-config-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'key-group-config 'make-key-group-config))
 (common-lisp:defun make-key-group-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment items name)
   (common-lisp:apply #'common-lisp:make-instance 'key-group-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-group-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-group-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-group-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-group-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or key-group-summary-list
                                         common-lisp:null)
                         :accessor %key-group-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %key-group-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %key-group-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %key-group-list-next-marker :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'key-group-list 'make-key-group-list))
 (common-lisp:defun make-key-group-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'key-group-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-group-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-group-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-group-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-group-summary common-lisp:nil
                       ((key-group :initarg :key-group :type
                         (common-lisp:or key-group common-lisp:null) :accessor
                         %key-group-summary-key-group :initform
                         (common-lisp:error ":key-group is required"))))
 (common-lisp:export
  (common-lisp:list 'key-group-summary 'make-key-group-summary))
 (common-lisp:defun make-key-group-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-group)
   (common-lisp:apply #'common-lisp:make-instance 'key-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group))
      (common-lisp:list
       (common-lisp:cons "KeyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-group-summary-list ()
   '(trivial-types:proper-list key-group-summary))
 (common-lisp:defun |make-key-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype key-pair-id-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-key-pair-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass key-pair-ids common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or key-pair-id-list common-lisp:null)
                         :accessor %key-pair-ids-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %key-pair-ids-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'key-pair-ids 'make-key-pair-ids))
 (common-lisp:defun make-key-pair-ids
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'key-pair-ids
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair-ids))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair-ids))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair-ids))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kinesis-stream-config common-lisp:nil
                       ((stream-arn :initarg :stream-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %kinesis-stream-config-stream-arn :initform
                         (common-lisp:error ":stream-arn is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %kinesis-stream-config-role-arn :initform
                         (common-lisp:error ":role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-stream-config 'make-kinesis-stream-config))
 (common-lisp:defun make-kinesis-stream-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-arn role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-stream-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-stream-config))
   common-lisp:nil))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function-association common-lisp:nil
                       ((include-body :initarg :include-body :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %lambda-function-association-include-body
                         :initform common-lisp:nil)
                        (event-type :initarg :event-type :type
                         (common-lisp:or event-type common-lisp:null) :accessor
                         %lambda-function-association-event-type :initform
                         (common-lisp:error ":event-type is required"))
                        (lambda-function-arn :initarg :lambda-function-arn
                         :type
                         (common-lisp:or lambda-function-arn common-lisp:null)
                         :accessor
                         %lambda-function-association-lambda-function-arn
                         :initform
                         (common-lisp:error
                          ":lambda-function-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'lambda-function-association
                    'make-lambda-function-association))
 (common-lisp:defun make-lambda-function-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-body event-type
                     lambda-function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-body))
      (common-lisp:list
       (common-lisp:cons "IncludeBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-function-association-list ()
   '(trivial-types:proper-list lambda-function-association))
 (common-lisp:defun |make-lambda-function-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lambda-function-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lambda-function-associations common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or lambda-function-association-list
                                         common-lisp:null)
                         :accessor %lambda-function-associations-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %lambda-function-associations-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'lambda-function-associations
                    'make-lambda-function-associations))
 (common-lisp:defun make-lambda-function-associations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function-associations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-associations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-associations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-associations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cache-policies-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-cache-policies-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-cache-policies-request-marker
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or cache-policy-type common-lisp:null)
                         :accessor %list-cache-policies-request-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cache-policies-request
                    'make-list-cache-policies-request))
 (common-lisp:defun make-list-cache-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker type)
   (common-lisp:apply #'common-lisp:make-instance 'list-cache-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cache-policies-result common-lisp:nil
                       ((cache-policy-list :initarg :cache-policy-list :type
                         (common-lisp:or cache-policy-list common-lisp:null)
                         :accessor
                         %list-cache-policies-result-cache-policy-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cache-policies-result
                    'make-list-cache-policies-result))
 (common-lisp:defun make-list-cache-policies-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-policy-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-cache-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-list))
      (common-lisp:list
       (common-lisp:cons "CachePolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cache-policies-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicyList" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-cloud-front-origin-access-identities-request
                       common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-cloud-front-origin-access-identities-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-cloud-front-origin-access-identities-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cloud-front-origin-access-identities-request
                    'make-list-cloud-front-origin-access-identities-request))
 (common-lisp:defun make-list-cloud-front-origin-access-identities-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cloud-front-origin-access-identities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cloud-front-origin-access-identities-result
                       common-lisp:nil
                       ((cloud-front-origin-access-identity-list :initarg
                         :cloud-front-origin-access-identity-list :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-list
                          common-lisp:null)
                         :accessor
                         %list-cloud-front-origin-access-identities-result-cloud-front-origin-access-identity-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cloud-front-origin-access-identities-result
                    'make-list-cloud-front-origin-access-identities-result))
 (common-lisp:defun make-list-cloud-front-origin-access-identities-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-front-origin-access-identity-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cloud-front-origin-access-identities-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity-list))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cloud-front-origin-access-identities-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentityList"
                              common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-conflicting-aliases-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or
                          |listConflictingAliasesMaxItemsInteger|
                          common-lisp:null)
                         :accessor %list-conflicting-aliases-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-conflicting-aliases-request-marker
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or |aliasString| common-lisp:null)
                         :accessor %list-conflicting-aliases-request-alias
                         :initform (common-lisp:error ":alias is required"))
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or |distributionIdString|
                                         common-lisp:null)
                         :accessor
                         %list-conflicting-aliases-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-conflicting-aliases-request
                    'make-list-conflicting-aliases-request))
 (common-lisp:defun make-list-conflicting-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker alias distribution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conflicting-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conflicting-aliases-result common-lisp:nil
                       ((conflicting-aliases-list :initarg
                         :conflicting-aliases-list :type
                         (common-lisp:or conflicting-aliases-list
                                         common-lisp:null)
                         :accessor
                         %list-conflicting-aliases-result-conflicting-aliases-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-conflicting-aliases-result
                    'make-list-conflicting-aliases-result))
 (common-lisp:defun make-list-conflicting-aliases-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conflicting-aliases-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conflicting-aliases-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflicting-aliases-list))
      (common-lisp:list
       (common-lisp:cons "ConflictingAliasesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conflicting-aliases-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ConflictingAliasesList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-continuous-deployment-policies-request
                       common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-continuous-deployment-policies-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-continuous-deployment-policies-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-continuous-deployment-policies-request
                    'make-list-continuous-deployment-policies-request))
 (common-lisp:defun make-list-continuous-deployment-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-continuous-deployment-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-continuous-deployment-policies-result
                       common-lisp:nil
                       ((continuous-deployment-policy-list :initarg
                         :continuous-deployment-policy-list :type
                         (common-lisp:or continuous-deployment-policy-list
                                         common-lisp:null)
                         :accessor
                         %list-continuous-deployment-policies-result-continuous-deployment-policy-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-continuous-deployment-policies-result
                    'make-list-continuous-deployment-policies-result))
 (common-lisp:defun make-list-continuous-deployment-policies-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key continuous-deployment-policy-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-continuous-deployment-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-list))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-continuous-deployment-policies-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicyList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-cache-policy-id-request
                       common-lisp:nil
                       ((cache-policy-id :initarg :cache-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-cache-policy-id-request-cache-policy-id
                         :initform
                         (common-lisp:error ":cache-policy-id is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-cache-policy-id-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-cache-policy-id-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-cache-policy-id-request
                    'make-list-distributions-by-cache-policy-id-request))
 (common-lisp:defun make-list-distributions-by-cache-policy-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cache-policy-id max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-cache-policy-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-cache-policy-id-result
                       common-lisp:nil
                       ((distribution-id-list :initarg :distribution-id-list
                         :type
                         (common-lisp:or distribution-id-list common-lisp:null)
                         :accessor
                         %list-distributions-by-cache-policy-id-result-distribution-id-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-cache-policy-id-result
                    'make-list-distributions-by-cache-policy-id-result))
 (common-lisp:defun make-list-distributions-by-cache-policy-id-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-cache-policy-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-id-list))
      (common-lisp:list
       (common-lisp:cons "DistributionIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-cache-policy-id-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionIdList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-key-group-request common-lisp:nil
                       ((key-group-id :initarg :key-group-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-key-group-request-key-group-id
                         :initform
                         (common-lisp:error ":key-group-id is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-key-group-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-key-group-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-key-group-request
                    'make-list-distributions-by-key-group-request))
 (common-lisp:defun make-list-distributions-by-key-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-group-id max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-key-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-key-group-result common-lisp:nil
                       ((distribution-id-list :initarg :distribution-id-list
                         :type
                         (common-lisp:or distribution-id-list common-lisp:null)
                         :accessor
                         %list-distributions-by-key-group-result-distribution-id-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-key-group-result
                    'make-list-distributions-by-key-group-result))
 (common-lisp:defun make-list-distributions-by-key-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-key-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-id-list))
      (common-lisp:list
       (common-lisp:cons "DistributionIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-key-group-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionIdList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-origin-request-policy-id-request
                       common-lisp:nil
                       ((origin-request-policy-id :initarg
                         :origin-request-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-origin-request-policy-id-request-origin-request-policy-id
                         :initform
                         (common-lisp:error
                          ":origin-request-policy-id is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-origin-request-policy-id-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-origin-request-policy-id-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-origin-request-policy-id-request
                    'make-list-distributions-by-origin-request-policy-id-request))
 (common-lisp:defun make-list-distributions-by-origin-request-policy-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-request-policy-id max-items
                     marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-origin-request-policy-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-origin-request-policy-id-result
                       common-lisp:nil
                       ((distribution-id-list :initarg :distribution-id-list
                         :type
                         (common-lisp:or distribution-id-list common-lisp:null)
                         :accessor
                         %list-distributions-by-origin-request-policy-id-result-distribution-id-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-origin-request-policy-id-result
                    'make-list-distributions-by-origin-request-policy-id-result))
 (common-lisp:defun make-list-distributions-by-origin-request-policy-id-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-origin-request-policy-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-id-list))
      (common-lisp:list
       (common-lisp:cons "DistributionIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-origin-request-policy-id-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionIdList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-realtime-log-config-request
                       common-lisp:nil
                       ((realtime-log-config-arn :initarg
                         :realtime-log-config-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-realtime-log-config-request-realtime-log-config-arn
                         :initform common-lisp:nil)
                        (realtime-log-config-name :initarg
                         :realtime-log-config-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-realtime-log-config-request-realtime-log-config-name
                         :initform common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-realtime-log-config-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-realtime-log-config-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-realtime-log-config-request
                    'make-list-distributions-by-realtime-log-config-request))
 (common-lisp:defun make-list-distributions-by-realtime-log-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-log-config-arn
                     realtime-log-config-name max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-realtime-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-log-config-name))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-log-config-arn))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-realtime-log-config-result
                       common-lisp:nil
                       ((distribution-list :initarg :distribution-list :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor
                         %list-distributions-by-realtime-log-config-result-distribution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-realtime-log-config-result
                    'make-list-distributions-by-realtime-log-config-result))
 (common-lisp:defun make-list-distributions-by-realtime-log-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-realtime-log-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-list))
      (common-lisp:list
       (common-lisp:cons "DistributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-realtime-log-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-response-headers-policy-id-request
                       common-lisp:nil
                       ((response-headers-policy-id :initarg
                         :response-headers-policy-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-response-headers-policy-id-request-response-headers-policy-id
                         :initform
                         (common-lisp:error
                          ":response-headers-policy-id is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-response-headers-policy-id-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-response-headers-policy-id-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-response-headers-policy-id-request
                    'make-list-distributions-by-response-headers-policy-id-request))
 (common-lisp:defun make-list-distributions-by-response-headers-policy-id-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers-policy-id max-items
                     marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-response-headers-policy-id-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-response-headers-policy-id-result
                       common-lisp:nil
                       ((distribution-id-list :initarg :distribution-id-list
                         :type
                         (common-lisp:or distribution-id-list common-lisp:null)
                         :accessor
                         %list-distributions-by-response-headers-policy-id-result-distribution-id-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-response-headers-policy-id-result
                    'make-list-distributions-by-response-headers-policy-id-result))
 (common-lisp:defun make-list-distributions-by-response-headers-policy-id-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-id-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-response-headers-policy-id-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-id-list))
      (common-lisp:list
       (common-lisp:cons "DistributionIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-response-headers-policy-id-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionIdList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-web-aclid-request common-lisp:nil
                       ((web-aclid :initarg :web-aclid :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-web-aclid-request-web-aclid
                         :initform
                         (common-lisp:error ":web-aclid is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-web-aclid-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-distributions-by-web-aclid-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-web-aclid-request
                    'make-list-distributions-by-web-aclid-request))
 (common-lisp:defun make-list-distributions-by-web-aclid-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-aclid max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-web-aclid-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-by-web-aclid-result common-lisp:nil
                       ((distribution-list :initarg :distribution-list :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor
                         %list-distributions-by-web-aclid-result-distribution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-by-web-aclid-result
                    'make-list-distributions-by-web-aclid-result))
 (common-lisp:defun make-list-distributions-by-web-aclid-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distributions-by-web-aclid-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-list))
      (common-lisp:list
       (common-lisp:cons "DistributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-by-web-aclid-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-distributions-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-distributions-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-distributions-request-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-request
                    'make-list-distributions-request))
 (common-lisp:defun make-list-distributions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance 'list-distributions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distributions-result common-lisp:nil
                       ((distribution-list :initarg :distribution-list :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor %list-distributions-result-distribution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distributions-result
                    'make-list-distributions-result))
 (common-lisp:defun make-list-distributions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-distributions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-list))
      (common-lisp:list
       (common-lisp:cons "DistributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distributions-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-field-level-encryption-configs-request
                       common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-field-level-encryption-configs-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-field-level-encryption-configs-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-field-level-encryption-configs-request
                    'make-list-field-level-encryption-configs-request))
 (common-lisp:defun make-list-field-level-encryption-configs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-field-level-encryption-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-field-level-encryption-configs-result
                       common-lisp:nil
                       ((field-level-encryption-list :initarg
                         :field-level-encryption-list :type
                         (common-lisp:or field-level-encryption-list
                                         common-lisp:null)
                         :accessor
                         %list-field-level-encryption-configs-result-field-level-encryption-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-field-level-encryption-configs-result
                    'make-list-field-level-encryption-configs-result))
 (common-lisp:defun make-list-field-level-encryption-configs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-field-level-encryption-configs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-list))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-configs-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-field-level-encryption-profiles-request
                       common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-field-level-encryption-profiles-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-field-level-encryption-profiles-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-field-level-encryption-profiles-request
                    'make-list-field-level-encryption-profiles-request))
 (common-lisp:defun make-list-field-level-encryption-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-field-level-encryption-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-field-level-encryption-profiles-result
                       common-lisp:nil
                       ((field-level-encryption-profile-list :initarg
                         :field-level-encryption-profile-list :type
                         (common-lisp:or field-level-encryption-profile-list
                                         common-lisp:null)
                         :accessor
                         %list-field-level-encryption-profiles-result-field-level-encryption-profile-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-field-level-encryption-profiles-result
                    'make-list-field-level-encryption-profiles-result))
 (common-lisp:defun make-list-field-level-encryption-profiles-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-level-encryption-profile-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-field-level-encryption-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile-list))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-field-level-encryption-profiles-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfileList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-functions-request common-lisp:nil
                       ((stage :initarg :stage :type
                         (common-lisp:or function-stage common-lisp:null)
                         :accessor %list-functions-request-stage :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-functions-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-functions-request-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-functions-request 'make-list-functions-request))
 (common-lisp:defun make-list-functions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage max-items marker)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-result common-lisp:nil
                       ((function-list :initarg :function-list :type
                         (common-lisp:or function-list common-lisp:null)
                         :accessor %list-functions-result-function-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-functions-result 'make-list-functions-result))
 (common-lisp:defun make-list-functions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-list))
      (common-lisp:list
       (common-lisp:cons "FunctionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionList" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-invalidations-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-invalidations-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-invalidations-request-marker :initform
                         common-lisp:nil)
                        (distribution-id :initarg :distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-invalidations-request-distribution-id
                         :initform
                         (common-lisp:error ":distribution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-invalidations-request
                    'make-list-invalidations-request))
 (common-lisp:defun make-list-invalidations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker distribution-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-invalidations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invalidations-result common-lisp:nil
                       ((invalidation-list :initarg :invalidation-list :type
                         (common-lisp:or invalidation-list common-lisp:null)
                         :accessor %list-invalidations-result-invalidation-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-invalidations-result
                    'make-list-invalidations-result))
 (common-lisp:defun make-list-invalidations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalidation-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-invalidations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalidation-list))
      (common-lisp:list
       (common-lisp:cons "InvalidationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invalidations-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("InvalidationList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-key-groups-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-key-groups-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-key-groups-request-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-key-groups-request 'make-list-key-groups-request))
 (common-lisp:defun make-list-key-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance 'list-key-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-key-groups-result common-lisp:nil
                       ((key-group-list :initarg :key-group-list :type
                         (common-lisp:or key-group-list common-lisp:null)
                         :accessor %list-key-groups-result-key-group-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-key-groups-result 'make-list-key-groups-result))
 (common-lisp:defun make-list-key-groups-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-group-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-key-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-list))
      (common-lisp:list
       (common-lisp:cons "KeyGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-groups-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroupList" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-origin-access-controls-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-origin-access-controls-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-origin-access-controls-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-origin-access-controls-request
                    'make-list-origin-access-controls-request))
 (common-lisp:defun make-list-origin-access-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-origin-access-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-origin-access-controls-result common-lisp:nil
                       ((origin-access-control-list :initarg
                         :origin-access-control-list :type
                         (common-lisp:or origin-access-control-list
                                         common-lisp:null)
                         :accessor
                         %list-origin-access-controls-result-origin-access-control-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-origin-access-controls-result
                    'make-list-origin-access-controls-result))
 (common-lisp:defun make-list-origin-access-controls-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-origin-access-controls-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-list))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-access-controls-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControlList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-origin-request-policies-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-origin-request-policies-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-origin-request-policies-request-marker
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or origin-request-policy-type
                                         common-lisp:null)
                         :accessor %list-origin-request-policies-request-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-origin-request-policies-request
                    'make-list-origin-request-policies-request))
 (common-lisp:defun make-list-origin-request-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-origin-request-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-origin-request-policies-result common-lisp:nil
                       ((origin-request-policy-list :initarg
                         :origin-request-policy-list :type
                         (common-lisp:or origin-request-policy-list
                                         common-lisp:null)
                         :accessor
                         %list-origin-request-policies-result-origin-request-policy-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-origin-request-policies-result
                    'make-list-origin-request-policies-result))
 (common-lisp:defun make-list-origin-request-policies-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-request-policy-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-origin-request-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-list))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-origin-request-policies-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicyList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-public-keys-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-public-keys-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-public-keys-request-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-public-keys-request 'make-list-public-keys-request))
 (common-lisp:defun make-list-public-keys-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance 'list-public-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-public-keys-result common-lisp:nil
                       ((public-key-list :initarg :public-key-list :type
                         (common-lisp:or public-key-list common-lisp:null)
                         :accessor %list-public-keys-result-public-key-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-public-keys-result 'make-list-public-keys-result))
 (common-lisp:defun make-list-public-keys-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-key-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-public-keys-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-list))
      (common-lisp:list
       (common-lisp:cons "PublicKeyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKeyList" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-realtime-log-configs-request common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-realtime-log-configs-request-marker
                         :initform common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-realtime-log-configs-request-max-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-realtime-log-configs-request
                    'make-list-realtime-log-configs-request))
 (common-lisp:defun make-list-realtime-log-configs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-realtime-log-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-realtime-log-configs-result common-lisp:nil
                       ((realtime-log-configs :initarg :realtime-log-configs
                         :type
                         (common-lisp:or realtime-log-configs common-lisp:null)
                         :accessor
                         %list-realtime-log-configs-result-realtime-log-configs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-realtime-log-configs-result
                    'make-list-realtime-log-configs-result))
 (common-lisp:defun make-list-realtime-log-configs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-log-configs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-realtime-log-configs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-log-configs))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-realtime-log-configs-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("RealtimeLogConfigs" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-response-headers-policies-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-response-headers-policies-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-response-headers-policies-request-marker
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or response-headers-policy-type
                                         common-lisp:null)
                         :accessor %list-response-headers-policies-request-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-response-headers-policies-request
                    'make-list-response-headers-policies-request))
 (common-lisp:defun make-list-response-headers-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-response-headers-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-response-headers-policies-result common-lisp:nil
                       ((response-headers-policy-list :initarg
                         :response-headers-policy-list :type
                         (common-lisp:or response-headers-policy-list
                                         common-lisp:null)
                         :accessor
                         %list-response-headers-policies-result-response-headers-policy-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-response-headers-policies-result
                    'make-list-response-headers-policies-result))
 (common-lisp:defun make-list-response-headers-policies-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers-policy-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-response-headers-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-list))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-response-headers-policies-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicyList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-streaming-distributions-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %list-streaming-distributions-request-max-items
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %list-streaming-distributions-request-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-distributions-request
                    'make-list-streaming-distributions-request))
 (common-lisp:defun make-list-streaming-distributions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-distributions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-streaming-distributions-result common-lisp:nil
                       ((streaming-distribution-list :initarg
                         :streaming-distribution-list :type
                         (common-lisp:or streaming-distribution-list
                                         common-lisp:null)
                         :accessor
                         %list-streaming-distributions-result-streaming-distribution-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-streaming-distributions-result
                    'make-list-streaming-distributions-result))
 (common-lisp:defun make-list-streaming-distributions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-distribution-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-streaming-distributions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-list))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-streaming-distributions-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistributionList" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource :initarg :resource :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource
                         :initform
                         (common-lisp:error ":resource is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Tags" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:deftype location-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging-config common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %logging-config-prefix :initform
                         (common-lisp:error ":prefix is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %logging-config-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (include-cookies :initarg :include-cookies :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %logging-config-include-cookies :initform
                         (common-lisp:error ":include-cookies is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %logging-config-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'logging-config 'make-logging-config))
 (common-lisp:defun make-logging-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket include-cookies enabled)
   (common-lisp:apply #'common-lisp:make-instance 'logging-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-cookies))
      (common-lisp:list
       (common-lisp:cons "IncludeCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-config))
   common-lisp:nil))
(common-lisp:deftype method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype methods-list () '(trivial-types:proper-list method))
 (common-lisp:defun |make-methods-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype minimum-protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition missing-body
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-body-message)))
 (common-lisp:export (common-lisp:list 'missing-body 'missing-body-message)))
(common-lisp:progn
 (common-lisp:defclass monitoring-subscription common-lisp:nil
                       ((realtime-metrics-subscription-config :initarg
                         :realtime-metrics-subscription-config :type
                         (common-lisp:or realtime-metrics-subscription-config
                                         common-lisp:null)
                         :accessor
                         %monitoring-subscription-realtime-metrics-subscription-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'monitoring-subscription 'make-monitoring-subscription))
 (common-lisp:defun make-monitoring-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-metrics-subscription-config)
   (common-lisp:apply #'common-lisp:make-instance 'monitoring-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-metrics-subscription-config))
      (common-lisp:list
       (common-lisp:cons "RealtimeMetricsSubscriptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition monitoring-subscription-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       monitoring-subscription-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'monitoring-subscription-already-exists
                    'monitoring-subscription-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-cache-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-cache-policy-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-cache-policy 'no-such-cache-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-cloud-front-origin-access-identity
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-cloud-front-origin-access-identity-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-cloud-front-origin-access-identity
                    'no-such-cloud-front-origin-access-identity-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-continuous-deployment-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-continuous-deployment-policy-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-continuous-deployment-policy
                    'no-such-continuous-deployment-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-distribution
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-distribution-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-distribution 'no-such-distribution-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-field-level-encryption-config
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-field-level-encryption-config-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-field-level-encryption-config
                    'no-such-field-level-encryption-config-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-field-level-encryption-profile
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-field-level-encryption-profile-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-field-level-encryption-profile
                    'no-such-field-level-encryption-profile-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-function-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-function-exists-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-function-exists 'no-such-function-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-invalidation
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-invalidation-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-invalidation 'no-such-invalidation-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-monitoring-subscription
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-monitoring-subscription-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-monitoring-subscription
                    'no-such-monitoring-subscription-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-origin
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-origin-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-origin 'no-such-origin-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-origin-access-control
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-origin-access-control-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-origin-access-control
                    'no-such-origin-access-control-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-origin-request-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-origin-request-policy-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-origin-request-policy
                    'no-such-origin-request-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-public-key
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-public-key-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-public-key 'no-such-public-key-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-realtime-log-config
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-realtime-log-config-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-realtime-log-config
                    'no-such-realtime-log-config-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-resource
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-resource-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-resource 'no-such-resource-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-response-headers-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-response-headers-policy-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-response-headers-policy
                    'no-such-response-headers-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition no-such-streaming-distribution
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-streaming-distribution-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-streaming-distribution
                    'no-such-streaming-distribution-message)))
(common-lisp:progn
 (common-lisp:defclass origin common-lisp:nil
                       ((origin-access-control-id :initarg
                         :origin-access-control-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-origin-access-control-id :initform
                         common-lisp:nil)
                        (origin-shield :initarg :origin-shield :type
                         (common-lisp:or origin-shield common-lisp:null)
                         :accessor %origin-origin-shield :initform
                         common-lisp:nil)
                        (connection-timeout :initarg :connection-timeout :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-connection-timeout :initform
                         common-lisp:nil)
                        (connection-attempts :initarg :connection-attempts
                         :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-connection-attempts :initform
                         common-lisp:nil)
                        (custom-origin-config :initarg :custom-origin-config
                         :type
                         (common-lisp:or custom-origin-config common-lisp:null)
                         :accessor %origin-custom-origin-config :initform
                         common-lisp:nil)
                        (s3origin-config :initarg :s3origin-config :type
                         (common-lisp:or s3origin-config common-lisp:null)
                         :accessor %origin-s3origin-config :initform
                         common-lisp:nil)
                        (custom-headers :initarg :custom-headers :type
                         (common-lisp:or custom-headers common-lisp:null)
                         :accessor %origin-custom-headers :initform
                         common-lisp:nil)
                        (origin-path :initarg :origin-path :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-origin-path :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-domain-name :initform
                         (common-lisp:error ":domain-name is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'origin 'make-origin))
 (common-lisp:defun make-origin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-id origin-shield
                     connection-timeout connection-attempts
                     custom-origin-config s3origin-config custom-headers
                     origin-path domain-name id)
   (common-lisp:apply #'common-lisp:make-instance 'origin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-path))
      (common-lisp:list
       (common-lisp:cons "OriginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-headers))
      (common-lisp:list
       (common-lisp:cons "CustomHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3origin-config))
      (common-lisp:list
       (common-lisp:cons "S3OriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-origin-config))
      (common-lisp:list
       (common-lisp:cons "CustomOriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-attempts))
      (common-lisp:list
       (common-lisp:cons "ConnectionAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-shield))
      (common-lisp:list
       (common-lisp:cons "OriginShield"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-id))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass origin-access-control common-lisp:nil
                       ((origin-access-control-config :initarg
                         :origin-access-control-config :type
                         (common-lisp:or origin-access-control-config
                                         common-lisp:null)
                         :accessor
                         %origin-access-control-origin-access-control-config
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-access-control 'make-origin-access-control))
 (common-lisp:defun make-origin-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-config id)
   (common-lisp:apply #'common-lisp:make-instance 'origin-access-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-config))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition origin-access-control-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       origin-access-control-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'origin-access-control-already-exists
                    'origin-access-control-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass origin-access-control-config common-lisp:nil
                       ((origin-access-control-origin-type :initarg
                         :origin-access-control-origin-type :type
                         (common-lisp:or origin-access-control-origin-types
                                         common-lisp:null)
                         :accessor
                         %origin-access-control-config-origin-access-control-origin-type
                         :initform
                         (common-lisp:error
                          ":origin-access-control-origin-type is required"))
                        (signing-behavior :initarg :signing-behavior :type
                         (common-lisp:or
                          origin-access-control-signing-behaviors
                          common-lisp:null)
                         :accessor
                         %origin-access-control-config-signing-behavior
                         :initform
                         (common-lisp:error ":signing-behavior is required"))
                        (signing-protocol :initarg :signing-protocol :type
                         (common-lisp:or
                          origin-access-control-signing-protocols
                          common-lisp:null)
                         :accessor
                         %origin-access-control-config-signing-protocol
                         :initform
                         (common-lisp:error ":signing-protocol is required"))
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-config-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-config-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-access-control-config
                    'make-origin-access-control-config))
 (common-lisp:defun make-origin-access-control-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-origin-type
                     signing-behavior signing-protocol description name)
   (common-lisp:apply #'common-lisp:make-instance 'origin-access-control-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-protocol))
      (common-lisp:list
       (common-lisp:cons "SigningProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-behavior))
      (common-lisp:list
       (common-lisp:cons "SigningBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-origin-type))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlOriginType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition origin-access-control-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       origin-access-control-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'origin-access-control-in-use
                    'origin-access-control-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass origin-access-control-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-access-control-summary-list
                                         common-lisp:null)
                         :accessor %origin-access-control-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-access-control-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %origin-access-control-list-is-truncated
                         :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-access-control-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-list-next-marker
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-list-marker :initform
                         (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-access-control-list
                    'make-origin-access-control-list))
 (common-lisp:defun make-origin-access-control-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance 'origin-access-control-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-list))
   common-lisp:nil))
(common-lisp:deftype origin-access-control-origin-types () 'common-lisp:string)
(common-lisp:deftype origin-access-control-signing-behaviors ()
  'common-lisp:string)
(common-lisp:deftype origin-access-control-signing-protocols ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-access-control-summary common-lisp:nil
                       ((origin-access-control-origin-type :initarg
                         :origin-access-control-origin-type :type
                         (common-lisp:or origin-access-control-origin-types
                                         common-lisp:null)
                         :accessor
                         %origin-access-control-summary-origin-access-control-origin-type
                         :initform
                         (common-lisp:error
                          ":origin-access-control-origin-type is required"))
                        (signing-behavior :initarg :signing-behavior :type
                         (common-lisp:or
                          origin-access-control-signing-behaviors
                          common-lisp:null)
                         :accessor
                         %origin-access-control-summary-signing-behavior
                         :initform
                         (common-lisp:error ":signing-behavior is required"))
                        (signing-protocol :initarg :signing-protocol :type
                         (common-lisp:or
                          origin-access-control-signing-protocols
                          common-lisp:null)
                         :accessor
                         %origin-access-control-summary-signing-protocol
                         :initform
                         (common-lisp:error ":signing-protocol is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-summary-name
                         :initform (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-summary-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-access-control-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-access-control-summary
                    'make-origin-access-control-summary))
 (common-lisp:defun make-origin-access-control-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-control-origin-type
                     signing-behavior signing-protocol name description id)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-access-control-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-protocol))
      (common-lisp:list
       (common-lisp:cons "SigningProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-behavior))
      (common-lisp:list
       (common-lisp:cons "SigningBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-origin-type))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlOriginType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-access-control-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-access-control-summary-list ()
   '(trivial-types:proper-list origin-access-control-summary))
 (common-lisp:defun |make-origin-access-control-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            origin-access-control-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass origin-custom-header common-lisp:nil
                       ((header-value :initarg :header-value :type
                         (common-lisp:or |sensitiveStringType|
                                         common-lisp:null)
                         :accessor %origin-custom-header-header-value :initform
                         (common-lisp:error ":header-value is required"))
                        (header-name :initarg :header-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-custom-header-header-name :initform
                         (common-lisp:error ":header-name is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-custom-header 'make-origin-custom-header))
 (common-lisp:defun make-origin-custom-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key header-value header-name)
   (common-lisp:apply #'common-lisp:make-instance 'origin-custom-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-custom-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-custom-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-name))
      (common-lisp:list
       (common-lisp:cons "HeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-value))
      (common-lisp:list
       (common-lisp:cons "HeaderValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-custom-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-custom-headers-list ()
   '(trivial-types:proper-list origin-custom-header))
 (common-lisp:defun |make-origin-custom-headers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin-custom-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass origin-group common-lisp:nil
                       ((members :initarg :members :type
                         (common-lisp:or origin-group-members common-lisp:null)
                         :accessor %origin-group-members :initform
                         (common-lisp:error ":members is required"))
                        (failover-criteria :initarg :failover-criteria :type
                         (common-lisp:or origin-group-failover-criteria
                                         common-lisp:null)
                         :accessor %origin-group-failover-criteria :initform
                         (common-lisp:error ":failover-criteria is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-group-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'origin-group 'make-origin-group))
 (common-lisp:defun make-origin-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key members failover-criteria id)
   (common-lisp:apply #'common-lisp:make-instance 'origin-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-criteria))
      (common-lisp:list
       (common-lisp:cons "FailoverCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass origin-group-failover-criteria common-lisp:nil
                       ((status-codes :initarg :status-codes :type
                         (common-lisp:or status-codes common-lisp:null)
                         :accessor %origin-group-failover-criteria-status-codes
                         :initform
                         (common-lisp:error ":status-codes is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-group-failover-criteria
                    'make-origin-group-failover-criteria))
 (common-lisp:defun make-origin-group-failover-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-codes)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-group-failover-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-group-failover-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-group-failover-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-codes))
      (common-lisp:list
       (common-lisp:cons "StatusCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-group-failover-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-group-list ()
   '(trivial-types:proper-list origin-group))
 (common-lisp:defun |make-origin-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass origin-group-member common-lisp:nil
                       ((origin-id :initarg :origin-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-group-member-origin-id :initform
                         (common-lisp:error ":origin-id is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-group-member 'make-origin-group-member))
 (common-lisp:defun make-origin-group-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-id)
   (common-lisp:apply #'common-lisp:make-instance 'origin-group-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-group-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-group-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-id))
      (common-lisp:list
       (common-lisp:cons "OriginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-group-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-group-member-list ()
   '(trivial-types:proper-list origin-group-member))
 (common-lisp:defun |make-origin-group-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin-group-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass origin-group-members common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-group-member-list
                                         common-lisp:null)
                         :accessor %origin-group-members-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-group-members-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-group-members 'make-origin-group-members))
 (common-lisp:defun make-origin-group-members
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'origin-group-members
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-group-members))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-group-members))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-group-members))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass origin-groups common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-group-list common-lisp:null)
                         :accessor %origin-groups-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-groups-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'origin-groups 'make-origin-groups))
 (common-lisp:defun make-origin-groups
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'origin-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-list () '(trivial-types:proper-list origin))
 (common-lisp:defun |make-origin-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list origin))
   aws-sdk/generator/shape::members))
(common-lisp:deftype origin-protocol-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-request-policy common-lisp:nil
                       ((origin-request-policy-config :initarg
                         :origin-request-policy-config :type
                         (common-lisp:or origin-request-policy-config
                                         common-lisp:null)
                         :accessor
                         %origin-request-policy-origin-request-policy-config
                         :initform
                         (common-lisp:error
                          ":origin-request-policy-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-request-policy-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-request-policy-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy 'make-origin-request-policy))
 (common-lisp:defun make-origin-request-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-request-policy-config
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance 'origin-request-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-config))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition origin-request-policy-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       origin-request-policy-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-already-exists
                    'origin-request-policy-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-config common-lisp:nil
                       ((query-strings-config :initarg :query-strings-config
                         :type
                         (common-lisp:or
                          origin-request-policy-query-strings-config
                          common-lisp:null)
                         :accessor
                         %origin-request-policy-config-query-strings-config
                         :initform
                         (common-lisp:error
                          ":query-strings-config is required"))
                        (cookies-config :initarg :cookies-config :type
                         (common-lisp:or origin-request-policy-cookies-config
                                         common-lisp:null)
                         :accessor %origin-request-policy-config-cookies-config
                         :initform
                         (common-lisp:error ":cookies-config is required"))
                        (headers-config :initarg :headers-config :type
                         (common-lisp:or origin-request-policy-headers-config
                                         common-lisp:null)
                         :accessor %origin-request-policy-config-headers-config
                         :initform
                         (common-lisp:error ":headers-config is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-request-policy-config-name :initform
                         (common-lisp:error ":name is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-request-policy-config-comment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-config
                    'make-origin-request-policy-config))
 (common-lisp:defun make-origin-request-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-strings-config cookies-config
                     headers-config name comment)
   (common-lisp:apply #'common-lisp:make-instance 'origin-request-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-config))
      (common-lisp:list
       (common-lisp:cons "HeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies-config))
      (common-lisp:list
       (common-lisp:cons "CookiesConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-strings-config))
      (common-lisp:list
       (common-lisp:cons "QueryStringsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-config))
   common-lisp:nil))
(common-lisp:deftype origin-request-policy-cookie-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-cookies-config common-lisp:nil
                       ((cookies :initarg :cookies :type
                         (common-lisp:or cookie-names common-lisp:null)
                         :accessor
                         %origin-request-policy-cookies-config-cookies
                         :initform common-lisp:nil)
                        (cookie-behavior :initarg :cookie-behavior :type
                         (common-lisp:or origin-request-policy-cookie-behavior
                                         common-lisp:null)
                         :accessor
                         %origin-request-policy-cookies-config-cookie-behavior
                         :initform
                         (common-lisp:error ":cookie-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-cookies-config
                    'make-origin-request-policy-cookies-config))
 (common-lisp:defun make-origin-request-policy-cookies-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookies cookie-behavior)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-request-policy-cookies-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-cookies-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-cookies-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-behavior))
      (common-lisp:list
       (common-lisp:cons "CookieBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies))
      (common-lisp:list
       (common-lisp:cons "Cookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-cookies-config))
   common-lisp:nil))
(common-lisp:deftype origin-request-policy-header-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-headers-config common-lisp:nil
                       ((headers :initarg :headers :type
                         (common-lisp:or headers common-lisp:null) :accessor
                         %origin-request-policy-headers-config-headers
                         :initform common-lisp:nil)
                        (header-behavior :initarg :header-behavior :type
                         (common-lisp:or origin-request-policy-header-behavior
                                         common-lisp:null)
                         :accessor
                         %origin-request-policy-headers-config-header-behavior
                         :initform
                         (common-lisp:error ":header-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-headers-config
                    'make-origin-request-policy-headers-config))
 (common-lisp:defun make-origin-request-policy-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key headers header-behavior)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-request-policy-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-behavior))
      (common-lisp:list
       (common-lisp:cons "HeaderBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition origin-request-policy-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       origin-request-policy-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-in-use
                    'origin-request-policy-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-request-policy-summary-list
                                         common-lisp:null)
                         :accessor %origin-request-policy-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-request-policy-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-request-policy-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %origin-request-policy-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-list
                    'make-origin-request-policy-list))
 (common-lisp:defun make-origin-request-policy-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'origin-request-policy-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-list))
   common-lisp:nil))
(common-lisp:deftype origin-request-policy-query-string-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-query-strings-config
                       common-lisp:nil
                       ((query-strings :initarg :query-strings :type
                         (common-lisp:or query-string-names common-lisp:null)
                         :accessor
                         %origin-request-policy-query-strings-config-query-strings
                         :initform common-lisp:nil)
                        (query-string-behavior :initarg :query-string-behavior
                         :type
                         (common-lisp:or
                          origin-request-policy-query-string-behavior
                          common-lisp:null)
                         :accessor
                         %origin-request-policy-query-strings-config-query-string-behavior
                         :initform
                         (common-lisp:error
                          ":query-string-behavior is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-query-strings-config
                    'make-origin-request-policy-query-strings-config))
 (common-lisp:defun make-origin-request-policy-query-strings-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-strings query-string-behavior)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-request-policy-query-strings-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-query-strings-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-query-strings-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-behavior))
      (common-lisp:list
       (common-lisp:cons "QueryStringBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-strings))
      (common-lisp:list
       (common-lisp:cons "QueryStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-query-strings-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass origin-request-policy-summary common-lisp:nil
                       ((origin-request-policy :initarg :origin-request-policy
                         :type
                         (common-lisp:or origin-request-policy
                                         common-lisp:null)
                         :accessor
                         %origin-request-policy-summary-origin-request-policy
                         :initform
                         (common-lisp:error
                          ":origin-request-policy is required"))
                        (type :initarg :type :type
                         (common-lisp:or origin-request-policy-type
                                         common-lisp:null)
                         :accessor %origin-request-policy-summary-type
                         :initform (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-request-policy-summary
                    'make-origin-request-policy-summary))
 (common-lisp:defun make-origin-request-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-request-policy type)
   (common-lisp:apply #'common-lisp:make-instance
                      'origin-request-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          origin-request-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype origin-request-policy-summary-list ()
   '(trivial-types:proper-list origin-request-policy-summary))
 (common-lisp:defun |make-origin-request-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            origin-request-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype origin-request-policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-shield common-lisp:nil
                       ((origin-shield-region :initarg :origin-shield-region
                         :type
                         (common-lisp:or origin-shield-region common-lisp:null)
                         :accessor %origin-shield-origin-shield-region
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %origin-shield-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'origin-shield 'make-origin-shield))
 (common-lisp:defun make-origin-shield
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-shield-region enabled)
   (common-lisp:apply #'common-lisp:make-instance 'origin-shield
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-shield))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-shield))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-shield-region))
      (common-lisp:list
       (common-lisp:cons "OriginShieldRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-shield))
   common-lisp:nil))
(common-lisp:deftype origin-shield-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass origin-ssl-protocols common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or ssl-protocols-list common-lisp:null)
                         :accessor %origin-ssl-protocols-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origin-ssl-protocols-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'origin-ssl-protocols 'make-origin-ssl-protocols))
 (common-lisp:defun make-origin-ssl-protocols
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'origin-ssl-protocols
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin-ssl-protocols))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin-ssl-protocols))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin-ssl-protocols))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass origins common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or origin-list common-lisp:null)
                         :accessor %origins-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %origins-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'origins 'make-origins))
 (common-lisp:defun make-origins
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'origins
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origins))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origins))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origins))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameters-in-cache-key-and-forwarded-to-origin
                       common-lisp:nil
                       ((query-strings-config :initarg :query-strings-config
                         :type
                         (common-lisp:or cache-policy-query-strings-config
                                         common-lisp:null)
                         :accessor
                         %parameters-in-cache-key-and-forwarded-to-origin-query-strings-config
                         :initform
                         (common-lisp:error
                          ":query-strings-config is required"))
                        (cookies-config :initarg :cookies-config :type
                         (common-lisp:or cache-policy-cookies-config
                                         common-lisp:null)
                         :accessor
                         %parameters-in-cache-key-and-forwarded-to-origin-cookies-config
                         :initform
                         (common-lisp:error ":cookies-config is required"))
                        (headers-config :initarg :headers-config :type
                         (common-lisp:or cache-policy-headers-config
                                         common-lisp:null)
                         :accessor
                         %parameters-in-cache-key-and-forwarded-to-origin-headers-config
                         :initform
                         (common-lisp:error ":headers-config is required"))
                        (enable-accept-encoding-brotli :initarg
                         :enable-accept-encoding-brotli :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %parameters-in-cache-key-and-forwarded-to-origin-enable-accept-encoding-brotli
                         :initform common-lisp:nil)
                        (enable-accept-encoding-gzip :initarg
                         :enable-accept-encoding-gzip :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %parameters-in-cache-key-and-forwarded-to-origin-enable-accept-encoding-gzip
                         :initform
                         (common-lisp:error
                          ":enable-accept-encoding-gzip is required"))))
 (common-lisp:export
  (common-lisp:list 'parameters-in-cache-key-and-forwarded-to-origin
                    'make-parameters-in-cache-key-and-forwarded-to-origin))
 (common-lisp:defun make-parameters-in-cache-key-and-forwarded-to-origin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-strings-config cookies-config
                     headers-config enable-accept-encoding-brotli
                     enable-accept-encoding-gzip)
   (common-lisp:apply #'common-lisp:make-instance
                      'parameters-in-cache-key-and-forwarded-to-origin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameters-in-cache-key-and-forwarded-to-origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameters-in-cache-key-and-forwarded-to-origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-accept-encoding-gzip))
      (common-lisp:list
       (common-lisp:cons "EnableAcceptEncodingGzip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-accept-encoding-brotli))
      (common-lisp:list
       (common-lisp:cons "EnableAcceptEncodingBrotli"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-config))
      (common-lisp:list
       (common-lisp:cons "HeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies-config))
      (common-lisp:list
       (common-lisp:cons "CookiesConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-strings-config))
      (common-lisp:list
       (common-lisp:cons "QueryStringsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameters-in-cache-key-and-forwarded-to-origin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass paths common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         %paths-items :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %paths-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'paths 'make-paths))
 (common-lisp:defun make-paths
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'paths
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input paths))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input paths))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input paths))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition precondition-failed
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-failed-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed 'precondition-failed-message)))
(common-lisp:deftype price-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass public-key common-lisp:nil
                       ((public-key-config :initarg :public-key-config :type
                         (common-lisp:or public-key-config common-lisp:null)
                         :accessor %public-key-public-key-config :initform
                         (common-lisp:error ":public-key-config is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'public-key 'make-public-key))
 (common-lisp:defun make-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-key-config created-time id)
   (common-lisp:apply #'common-lisp:make-instance 'public-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-config))
      (common-lisp:list
       (common-lisp:cons "PublicKeyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition public-key-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       public-key-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'public-key-already-exists
                    'public-key-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass public-key-config common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-config-comment :initform
                         common-lisp:nil)
                        (encoded-key :initarg :encoded-key :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-config-encoded-key :initform
                         (common-lisp:error ":encoded-key is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-config-name :initform
                         (common-lisp:error ":name is required"))
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'public-key-config 'make-public-key-config))
 (common-lisp:defun make-public-key-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment encoded-key name
                     caller-reference)
   (common-lisp:apply #'common-lisp:make-instance 'public-key-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-key-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-key-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-key))
      (common-lisp:list
       (common-lisp:cons "EncodedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-key-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-key-id-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-public-key-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition public-key-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       public-key-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'public-key-in-use 'public-key-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass public-key-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or public-key-summary-list
                                         common-lisp:null)
                         :accessor %public-key-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %public-key-list-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %public-key-list-max-items :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-list-next-marker :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'public-key-list 'make-public-key-list))
 (common-lisp:defun make-public-key-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'public-key-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-key-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-key-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-key-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass public-key-summary common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-summary-comment :initform
                         common-lisp:nil)
                        (encoded-key :initarg :encoded-key :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-summary-encoded-key :initform
                         (common-lisp:error ":encoded-key is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-summary-created-time :initform
                         (common-lisp:error ":created-time is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %public-key-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'public-key-summary 'make-public-key-summary))
 (common-lisp:defun make-public-key-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment encoded-key created-time name id)
   (common-lisp:apply #'common-lisp:make-instance 'public-key-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-key-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-key-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoded-key))
      (common-lisp:list
       (common-lisp:cons "EncodedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-key-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-key-summary-list ()
   '(trivial-types:proper-list public-key-summary))
 (common-lisp:defun |make-public-key-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list public-key-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass publish-function-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %publish-function-request-if-match :initform
                         (common-lisp:error ":if-match is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %publish-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'publish-function-request 'make-publish-function-request))
 (common-lisp:defun make-publish-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match name)
   (common-lisp:apply #'common-lisp:make-instance 'publish-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-function-result common-lisp:nil
                       ((function-summary :initarg :function-summary :type
                         (common-lisp:or function-summary common-lisp:null)
                         :accessor %publish-function-result-function-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'publish-function-result 'make-publish-function-result))
 (common-lisp:defun make-publish-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-summary)
   (common-lisp:apply #'common-lisp:make-instance 'publish-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-summary))
      (common-lisp:list
       (common-lisp:cons "FunctionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionSummary" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass query-arg-profile common-lisp:nil
                       ((profile-id :initarg :profile-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %query-arg-profile-profile-id :initform
                         (common-lisp:error ":profile-id is required"))
                        (query-arg :initarg :query-arg :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %query-arg-profile-query-arg :initform
                         (common-lisp:error ":query-arg is required"))))
 (common-lisp:export
  (common-lisp:list 'query-arg-profile 'make-query-arg-profile))
 (common-lisp:defun make-query-arg-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-id query-arg)
   (common-lisp:apply #'common-lisp:make-instance 'query-arg-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-arg-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-arg-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-arg))
      (common-lisp:list
       (common-lisp:cons "QueryArg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-arg-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-arg-profile-config common-lisp:nil
                       ((query-arg-profiles :initarg :query-arg-profiles :type
                         (common-lisp:or query-arg-profiles common-lisp:null)
                         :accessor %query-arg-profile-config-query-arg-profiles
                         :initform common-lisp:nil)
                        (forward-when-query-arg-profile-is-unknown :initarg
                         :forward-when-query-arg-profile-is-unknown :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %query-arg-profile-config-forward-when-query-arg-profile-is-unknown
                         :initform
                         (common-lisp:error
                          ":forward-when-query-arg-profile-is-unknown is required"))))
 (common-lisp:export
  (common-lisp:list 'query-arg-profile-config 'make-query-arg-profile-config))
 (common-lisp:defun make-query-arg-profile-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-arg-profiles
                     forward-when-query-arg-profile-is-unknown)
   (common-lisp:apply #'common-lisp:make-instance 'query-arg-profile-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-arg-profile-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-arg-profile-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forward-when-query-arg-profile-is-unknown))
      (common-lisp:list
       (common-lisp:cons "ForwardWhenQueryArgProfileIsUnknown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-arg-profiles))
      (common-lisp:list
       (common-lisp:cons "QueryArgProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-arg-profile-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition query-arg-profile-empty
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       query-arg-profile-empty-message)))
 (common-lisp:export
  (common-lisp:list 'query-arg-profile-empty 'query-arg-profile-empty-message)))
(common-lisp:progn
 (common-lisp:deftype query-arg-profile-list ()
   '(trivial-types:proper-list query-arg-profile))
 (common-lisp:defun |make-query-arg-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-arg-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-arg-profiles common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or query-arg-profile-list
                                         common-lisp:null)
                         :accessor %query-arg-profiles-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %query-arg-profiles-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'query-arg-profiles 'make-query-arg-profiles))
 (common-lisp:defun make-query-arg-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'query-arg-profiles
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-arg-profiles))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-arg-profiles))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-arg-profiles))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-string-cache-keys common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or query-string-cache-keys-list
                                         common-lisp:null)
                         :accessor %query-string-cache-keys-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %query-string-cache-keys-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'query-string-cache-keys 'make-query-string-cache-keys))
 (common-lisp:defun make-query-string-cache-keys
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'query-string-cache-keys
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-string-cache-keys))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-string-cache-keys))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-string-cache-keys))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-string-cache-keys-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-query-string-cache-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-string-names common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or query-string-names-list
                                         common-lisp:null)
                         :accessor %query-string-names-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %query-string-names-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'query-string-names 'make-query-string-names))
 (common-lisp:defun make-query-string-names
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'query-string-names
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-string-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-string-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-string-names))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-string-names-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-query-string-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass realtime-log-config common-lisp:nil
                       ((fields :initarg :fields :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         %realtime-log-config-fields :initform
                         (common-lisp:error ":fields is required"))
                        (end-points :initarg :end-points :type
                         (common-lisp:or end-point-list common-lisp:null)
                         :accessor %realtime-log-config-end-points :initform
                         (common-lisp:error ":end-points is required"))
                        (sampling-rate :initarg :sampling-rate :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %realtime-log-config-sampling-rate :initform
                         (common-lisp:error ":sampling-rate is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %realtime-log-config-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %realtime-log-config-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'realtime-log-config 'make-realtime-log-config))
 (common-lisp:defun make-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fields end-points sampling-rate name arn)
   (common-lisp:apply #'common-lisp:make-instance 'realtime-log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input realtime-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input realtime-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "SamplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-points))
      (common-lisp:list
       (common-lisp:cons "EndPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input realtime-log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition realtime-log-config-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       realtime-log-config-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'realtime-log-config-already-exists
                    'realtime-log-config-already-exists-message)))
(common-lisp:progn
 (common-lisp:define-condition realtime-log-config-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       realtime-log-config-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'realtime-log-config-in-use
                    'realtime-log-config-in-use-message)))
(common-lisp:progn
 (common-lisp:deftype realtime-log-config-list ()
   '(trivial-types:proper-list realtime-log-config))
 (common-lisp:defun |make-realtime-log-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list realtime-log-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition realtime-log-config-owner-mismatch
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       realtime-log-config-owner-mismatch-message)))
 (common-lisp:export
  (common-lisp:list 'realtime-log-config-owner-mismatch
                    'realtime-log-config-owner-mismatch-message)))
(common-lisp:progn
 (common-lisp:defclass realtime-log-configs common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %realtime-log-configs-next-marker :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %realtime-log-configs-marker :initform
                         (common-lisp:error ":marker is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %realtime-log-configs-is-truncated :initform
                         (common-lisp:error ":is-truncated is required"))
                        (items :initarg :items :type
                         (common-lisp:or realtime-log-config-list
                                         common-lisp:null)
                         :accessor %realtime-log-configs-items :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %realtime-log-configs-max-items :initform
                         (common-lisp:error ":max-items is required"))))
 (common-lisp:export
  (common-lisp:list 'realtime-log-configs 'make-realtime-log-configs))
 (common-lisp:defun make-realtime-log-configs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker marker is-truncated items
                     max-items)
   (common-lisp:apply #'common-lisp:make-instance 'realtime-log-configs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input realtime-log-configs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input realtime-log-configs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input realtime-log-configs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass realtime-metrics-subscription-config common-lisp:nil
                       ((realtime-metrics-subscription-status :initarg
                         :realtime-metrics-subscription-status :type
                         (common-lisp:or realtime-metrics-subscription-status
                                         common-lisp:null)
                         :accessor
                         %realtime-metrics-subscription-config-realtime-metrics-subscription-status
                         :initform
                         (common-lisp:error
                          ":realtime-metrics-subscription-status is required"))))
 (common-lisp:export
  (common-lisp:list 'realtime-metrics-subscription-config
                    'make-realtime-metrics-subscription-config))
 (common-lisp:defun make-realtime-metrics-subscription-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-metrics-subscription-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'realtime-metrics-subscription-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          realtime-metrics-subscription-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          realtime-metrics-subscription-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'realtime-metrics-subscription-status))
      (common-lisp:list
       (common-lisp:cons "RealtimeMetricsSubscriptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          realtime-metrics-subscription-config))
   common-lisp:nil))
(common-lisp:deftype realtime-metrics-subscription-status ()
  'common-lisp:string)
(common-lisp:deftype referrer-policy-list () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use 'resource-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy common-lisp:nil
                       ((response-headers-policy-config :initarg
                         :response-headers-policy-config :type
                         (common-lisp:or response-headers-policy-config
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-response-headers-policy-config
                         :initform
                         (common-lisp:error
                          ":response-headers-policy-config is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy 'make-response-headers-policy))
 (common-lisp:defun make-response-headers-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers-policy-config
                     last-modified-time id)
   (common-lisp:apply #'common-lisp:make-instance 'response-headers-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-config))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-access-control-allow-headers
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or access-control-allow-headers-list
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-headers-items
                         :initform (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-headers-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-access-control-allow-headers
                    'make-response-headers-policy-access-control-allow-headers))
 (common-lisp:defun make-response-headers-policy-access-control-allow-headers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-access-control-allow-headers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-headers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-access-control-allow-methods
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or access-control-allow-methods-list
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-methods-items
                         :initform (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-methods-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-access-control-allow-methods
                    'make-response-headers-policy-access-control-allow-methods))
 (common-lisp:defun make-response-headers-policy-access-control-allow-methods
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-access-control-allow-methods
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-methods))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-methods))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-methods))
   common-lisp:nil))
(common-lisp:deftype response-headers-policy-access-control-allow-methods-values
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-access-control-allow-origins
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or access-control-allow-origins-list
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-origins-items
                         :initform (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-allow-origins-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-access-control-allow-origins
                    'make-response-headers-policy-access-control-allow-origins))
 (common-lisp:defun make-response-headers-policy-access-control-allow-origins
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-access-control-allow-origins
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-origins))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-origins))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-allow-origins))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-access-control-expose-headers
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or access-control-expose-headers-list
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-expose-headers-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-access-control-expose-headers-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-access-control-expose-headers
                    'make-response-headers-policy-access-control-expose-headers))
 (common-lisp:defun make-response-headers-policy-access-control-expose-headers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-access-control-expose-headers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-expose-headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-expose-headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-access-control-expose-headers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition response-headers-policy-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       response-headers-policy-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-already-exists
                    'response-headers-policy-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-config common-lisp:nil
                       ((remove-headers-config :initarg :remove-headers-config
                         :type
                         (common-lisp:or
                          response-headers-policy-remove-headers-config
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-config-remove-headers-config
                         :initform common-lisp:nil)
                        (custom-headers-config :initarg :custom-headers-config
                         :type
                         (common-lisp:or
                          response-headers-policy-custom-headers-config
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-config-custom-headers-config
                         :initform common-lisp:nil)
                        (server-timing-headers-config :initarg
                         :server-timing-headers-config :type
                         (common-lisp:or
                          response-headers-policy-server-timing-headers-config
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-config-server-timing-headers-config
                         :initform common-lisp:nil)
                        (security-headers-config :initarg
                         :security-headers-config :type
                         (common-lisp:or
                          response-headers-policy-security-headers-config
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-config-security-headers-config
                         :initform common-lisp:nil)
                        (cors-config :initarg :cors-config :type
                         (common-lisp:or response-headers-policy-cors-config
                                         common-lisp:null)
                         :accessor %response-headers-policy-config-cors-config
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-config-name
                         :initform (common-lisp:error ":name is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-config-comment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-config
                    'make-response-headers-policy-config))
 (common-lisp:defun make-response-headers-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-headers-config
                     custom-headers-config server-timing-headers-config
                     security-headers-config cors-config name comment)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors-config))
      (common-lisp:list
       (common-lisp:cons "CorsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-headers-config))
      (common-lisp:list
       (common-lisp:cons "SecurityHeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-timing-headers-config))
      (common-lisp:list
       (common-lisp:cons "ServerTimingHeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-headers-config))
      (common-lisp:list
       (common-lisp:cons "CustomHeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-headers-config))
      (common-lisp:list
       (common-lisp:cons "RemoveHeadersConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-content-security-policy
                       common-lisp:nil
                       ((content-security-policy :initarg
                         :content-security-policy :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %response-headers-policy-content-security-policy-content-security-policy
                         :initform
                         (common-lisp:error
                          ":content-security-policy is required"))
                        (override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-content-security-policy-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-content-security-policy
                    'make-response-headers-policy-content-security-policy))
 (common-lisp:defun make-response-headers-policy-content-security-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-security-policy override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-content-security-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-security-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-security-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-security-policy))
      (common-lisp:list
       (common-lisp:cons "ContentSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-security-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-content-type-options
                       common-lisp:nil
                       ((override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-content-type-options-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-content-type-options
                    'make-response-headers-policy-content-type-options))
 (common-lisp:defun make-response-headers-policy-content-type-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-content-type-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-type-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-type-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-content-type-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-cors-config common-lisp:nil
                       ((origin-override :initarg :origin-override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-origin-override
                         :initform
                         (common-lisp:error ":origin-override is required"))
                        (access-control-max-age-sec :initarg
                         :access-control-max-age-sec :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-max-age-sec
                         :initform common-lisp:nil)
                        (access-control-expose-headers :initarg
                         :access-control-expose-headers :type
                         (common-lisp:or
                          response-headers-policy-access-control-expose-headers
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-expose-headers
                         :initform common-lisp:nil)
                        (access-control-allow-credentials :initarg
                         :access-control-allow-credentials :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-allow-credentials
                         :initform
                         (common-lisp:error
                          ":access-control-allow-credentials is required"))
                        (access-control-allow-methods :initarg
                         :access-control-allow-methods :type
                         (common-lisp:or
                          response-headers-policy-access-control-allow-methods
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-allow-methods
                         :initform
                         (common-lisp:error
                          ":access-control-allow-methods is required"))
                        (access-control-allow-headers :initarg
                         :access-control-allow-headers :type
                         (common-lisp:or
                          response-headers-policy-access-control-allow-headers
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-allow-headers
                         :initform
                         (common-lisp:error
                          ":access-control-allow-headers is required"))
                        (access-control-allow-origins :initarg
                         :access-control-allow-origins :type
                         (common-lisp:or
                          response-headers-policy-access-control-allow-origins
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-cors-config-access-control-allow-origins
                         :initform
                         (common-lisp:error
                          ":access-control-allow-origins is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-cors-config
                    'make-response-headers-policy-cors-config))
 (common-lisp:defun make-response-headers-policy-cors-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-override
                     access-control-max-age-sec access-control-expose-headers
                     access-control-allow-credentials
                     access-control-allow-methods access-control-allow-headers
                     access-control-allow-origins)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-cors-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-cors-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-cors-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-allow-origins))
      (common-lisp:list
       (common-lisp:cons "AccessControlAllowOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-allow-headers))
      (common-lisp:list
       (common-lisp:cons "AccessControlAllowHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-allow-methods))
      (common-lisp:list
       (common-lisp:cons "AccessControlAllowMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-allow-credentials))
      (common-lisp:list
       (common-lisp:cons "AccessControlAllowCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-expose-headers))
      (common-lisp:list
       (common-lisp:cons "AccessControlExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-max-age-sec))
      (common-lisp:list
       (common-lisp:cons "AccessControlMaxAgeSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-override))
      (common-lisp:list
       (common-lisp:cons "OriginOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-cors-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-custom-header common-lisp:nil
                       ((override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-custom-header-override
                         :initform (common-lisp:error ":override is required"))
                        (value :initarg :value :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-custom-header-value
                         :initform (common-lisp:error ":value is required"))
                        (header :initarg :header :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %response-headers-policy-custom-header-header
                         :initform (common-lisp:error ":header is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-custom-header
                    'make-response-headers-policy-custom-header))
 (common-lisp:defun make-response-headers-policy-custom-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key override value header)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-custom-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-headers-policy-custom-header-list ()
   '(trivial-types:proper-list response-headers-policy-custom-header))
 (common-lisp:defun |make-response-headers-policy-custom-header-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-headers-policy-custom-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-custom-headers-config
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          response-headers-policy-custom-header-list
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-custom-headers-config-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-custom-headers-config-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-custom-headers-config
                    'make-response-headers-policy-custom-headers-config))
 (common-lisp:defun make-response-headers-policy-custom-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-custom-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-custom-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-frame-options common-lisp:nil
                       ((frame-option :initarg :frame-option :type
                         (common-lisp:or frame-options-list common-lisp:null)
                         :accessor
                         %response-headers-policy-frame-options-frame-option
                         :initform
                         (common-lisp:error ":frame-option is required"))
                        (override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-frame-options-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-frame-options
                    'make-response-headers-policy-frame-options))
 (common-lisp:defun make-response-headers-policy-frame-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key frame-option override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-frame-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-frame-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-frame-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-option))
      (common-lisp:list
       (common-lisp:cons "FrameOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-frame-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition response-headers-policy-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       response-headers-policy-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-in-use
                    'response-headers-policy-in-use-message)))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or response-headers-policy-summary-list
                                         common-lisp:null)
                         :accessor %response-headers-policy-list-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %response-headers-policy-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %response-headers-policy-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %response-headers-policy-list-next-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-list
                    'make-response-headers-policy-list))
 (common-lisp:defun make-response-headers-policy-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity max-items next-marker)
   (common-lisp:apply #'common-lisp:make-instance 'response-headers-policy-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-referrer-policy common-lisp:nil
                       ((referrer-policy :initarg :referrer-policy :type
                         (common-lisp:or referrer-policy-list common-lisp:null)
                         :accessor
                         %response-headers-policy-referrer-policy-referrer-policy
                         :initform
                         (common-lisp:error ":referrer-policy is required"))
                        (override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-referrer-policy-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-referrer-policy
                    'make-response-headers-policy-referrer-policy))
 (common-lisp:defun make-response-headers-policy-referrer-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key referrer-policy override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-referrer-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-referrer-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-referrer-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'referrer-policy))
      (common-lisp:list
       (common-lisp:cons "ReferrerPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-referrer-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-remove-header common-lisp:nil
                       ((header :initarg :header :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %response-headers-policy-remove-header-header
                         :initform (common-lisp:error ":header is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-remove-header
                    'make-response-headers-policy-remove-header))
 (common-lisp:defun make-response-headers-policy-remove-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key header)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-remove-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-headers-policy-remove-header-list ()
   '(trivial-types:proper-list response-headers-policy-remove-header))
 (common-lisp:defun |make-response-headers-policy-remove-header-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-headers-policy-remove-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-remove-headers-config
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          response-headers-policy-remove-header-list
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-remove-headers-config-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-remove-headers-config-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-remove-headers-config
                    'make-response-headers-policy-remove-headers-config))
 (common-lisp:defun make-response-headers-policy-remove-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-remove-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-remove-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-security-headers-config
                       common-lisp:nil
                       ((strict-transport-security :initarg
                         :strict-transport-security :type
                         (common-lisp:or
                          response-headers-policy-strict-transport-security
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-strict-transport-security
                         :initform common-lisp:nil)
                        (content-type-options :initarg :content-type-options
                         :type
                         (common-lisp:or
                          response-headers-policy-content-type-options
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-content-type-options
                         :initform common-lisp:nil)
                        (content-security-policy :initarg
                         :content-security-policy :type
                         (common-lisp:or
                          response-headers-policy-content-security-policy
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-content-security-policy
                         :initform common-lisp:nil)
                        (referrer-policy :initarg :referrer-policy :type
                         (common-lisp:or
                          response-headers-policy-referrer-policy
                          common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-referrer-policy
                         :initform common-lisp:nil)
                        (frame-options :initarg :frame-options :type
                         (common-lisp:or response-headers-policy-frame-options
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-frame-options
                         :initform common-lisp:nil)
                        (xssprotection :initarg :xssprotection :type
                         (common-lisp:or response-headers-policy-xssprotection
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-security-headers-config-xssprotection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-security-headers-config
                    'make-response-headers-policy-security-headers-config))
 (common-lisp:defun make-response-headers-policy-security-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strict-transport-security
                     content-type-options content-security-policy
                     referrer-policy frame-options xssprotection)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-security-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-security-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-security-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xssprotection))
      (common-lisp:list
       (common-lisp:cons "XSSProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-options))
      (common-lisp:list
       (common-lisp:cons "FrameOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'referrer-policy))
      (common-lisp:list
       (common-lisp:cons "ReferrerPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-security-policy))
      (common-lisp:list
       (common-lisp:cons "ContentSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-type-options))
      (common-lisp:list
       (common-lisp:cons "ContentTypeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strict-transport-security))
      (common-lisp:list
       (common-lisp:cons "StrictTransportSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-security-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-server-timing-headers-config
                       common-lisp:nil
                       ((sampling-rate :initarg :sampling-rate :type
                         (common-lisp:or sampling-rate common-lisp:null)
                         :accessor
                         %response-headers-policy-server-timing-headers-config-sampling-rate
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-server-timing-headers-config-enabled
                         :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-server-timing-headers-config
                    'make-response-headers-policy-server-timing-headers-config))
 (common-lisp:defun make-response-headers-policy-server-timing-headers-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sampling-rate enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-server-timing-headers-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-server-timing-headers-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-server-timing-headers-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "SamplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-server-timing-headers-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-strict-transport-security
                       common-lisp:nil
                       ((access-control-max-age-sec :initarg
                         :access-control-max-age-sec :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %response-headers-policy-strict-transport-security-access-control-max-age-sec
                         :initform
                         (common-lisp:error
                          ":access-control-max-age-sec is required"))
                        (preload :initarg :preload :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-strict-transport-security-preload
                         :initform common-lisp:nil)
                        (include-subdomains :initarg :include-subdomains :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-strict-transport-security-include-subdomains
                         :initform common-lisp:nil)
                        (override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-strict-transport-security-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-strict-transport-security
                    'make-response-headers-policy-strict-transport-security))
 (common-lisp:defun make-response-headers-policy-strict-transport-security
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-control-max-age-sec preload
                     include-subdomains override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-strict-transport-security
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-strict-transport-security))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-strict-transport-security))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-subdomains))
      (common-lisp:list
       (common-lisp:cons "IncludeSubdomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preload))
      (common-lisp:list
       (common-lisp:cons "Preload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-max-age-sec))
      (common-lisp:list
       (common-lisp:cons "AccessControlMaxAgeSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-strict-transport-security))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-summary common-lisp:nil
                       ((response-headers-policy :initarg
                         :response-headers-policy :type
                         (common-lisp:or response-headers-policy
                                         common-lisp:null)
                         :accessor
                         %response-headers-policy-summary-response-headers-policy
                         :initform
                         (common-lisp:error
                          ":response-headers-policy is required"))
                        (type :initarg :type :type
                         (common-lisp:or response-headers-policy-type
                                         common-lisp:null)
                         :accessor %response-headers-policy-summary-type
                         :initform (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-summary
                    'make-response-headers-policy-summary))
 (common-lisp:defun make-response-headers-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers-policy type)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-headers-policy-summary-list ()
   '(trivial-types:proper-list response-headers-policy-summary))
 (common-lisp:defun |make-response-headers-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-headers-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype response-headers-policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-headers-policy-xssprotection common-lisp:nil
                       ((report-uri :initarg :report-uri :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %response-headers-policy-xssprotection-report-uri
                         :initform common-lisp:nil)
                        (mode-block :initarg :mode-block :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-xssprotection-mode-block
                         :initform common-lisp:nil)
                        (protection :initarg :protection :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-xssprotection-protection
                         :initform
                         (common-lisp:error ":protection is required"))
                        (override :initarg :override :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %response-headers-policy-xssprotection-override
                         :initform
                         (common-lisp:error ":override is required"))))
 (common-lisp:export
  (common-lisp:list 'response-headers-policy-xssprotection
                    'make-response-headers-policy-xssprotection))
 (common-lisp:defun make-response-headers-policy-xssprotection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-uri mode-block protection
                     override)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-headers-policy-xssprotection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-xssprotection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-xssprotection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override))
      (common-lisp:list
       (common-lisp:cons "Override"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection))
      (common-lisp:list
       (common-lisp:cons "Protection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode-block))
      (common-lisp:list
       (common-lisp:cons "ModeBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-uri))
      (common-lisp:list
       (common-lisp:cons "ReportUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-headers-policy-xssprotection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restrictions common-lisp:nil
                       ((geo-restriction :initarg :geo-restriction :type
                         (common-lisp:or geo-restriction common-lisp:null)
                         :accessor %restrictions-geo-restriction :initform
                         (common-lisp:error ":geo-restriction is required"))))
 (common-lisp:export (common-lisp:list 'restrictions 'make-restrictions))
 (common-lisp:defun make-restrictions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-restriction)
   (common-lisp:apply #'common-lisp:make-instance 'restrictions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-restriction))
      (common-lisp:list
       (common-lisp:cons "GeoRestriction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3origin common-lisp:nil
                       ((origin-access-identity :initarg
                         :origin-access-identity :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %s3origin-origin-access-identity :initform
                         (common-lisp:error
                          ":origin-access-identity is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %s3origin-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export (common-lisp:list 's3origin 'make-s3origin))
 (common-lisp:defun make-s3origin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-identity domain-name)
   (common-lisp:apply #'common-lisp:make-instance 's3origin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "OriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3origin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3origin-config common-lisp:nil
                       ((origin-access-identity :initarg
                         :origin-access-identity :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %s3origin-config-origin-access-identity
                         :initform
                         (common-lisp:error
                          ":origin-access-identity is required"))))
 (common-lisp:export (common-lisp:list 's3origin-config 'make-s3origin-config))
 (common-lisp:defun make-s3origin-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-identity)
   (common-lisp:apply #'common-lisp:make-instance 's3origin-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "OriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3origin-config))
   common-lisp:nil))
(common-lisp:deftype sslsupport-method () 'common-lisp:string)
(common-lisp:deftype sampling-rate () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass session-stickiness-config common-lisp:nil
                       ((maximum-ttl :initarg :maximum-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %session-stickiness-config-maximum-ttl
                         :initform
                         (common-lisp:error ":maximum-ttl is required"))
                        (idle-ttl :initarg :idle-ttl :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %session-stickiness-config-idle-ttl
                         :initform
                         (common-lisp:error ":idle-ttl is required"))))
 (common-lisp:export
  (common-lisp:list 'session-stickiness-config
                    'make-session-stickiness-config))
 (common-lisp:defun make-session-stickiness-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-ttl idle-ttl)
   (common-lisp:apply #'common-lisp:make-instance 'session-stickiness-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-stickiness-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-stickiness-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-ttl))
      (common-lisp:list
       (common-lisp:cons "IdleTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-ttl))
      (common-lisp:list
       (common-lisp:cons "MaximumTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-stickiness-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signer common-lisp:nil
                       ((key-pair-ids :initarg :key-pair-ids :type
                         (common-lisp:or key-pair-ids common-lisp:null)
                         :accessor %signer-key-pair-ids :initform
                         common-lisp:nil)
                        (aws-account-number :initarg :aws-account-number :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %signer-aws-account-number :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'signer 'make-signer))
 (common-lisp:defun make-signer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-pair-ids aws-account-number)
   (common-lisp:apply #'common-lisp:make-instance 'signer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-number))
      (common-lisp:list
       (common-lisp:cons "AwsAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-ids))
      (common-lisp:list
       (common-lisp:cons "KeyPairIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype signer-list () '(trivial-types:proper-list signer))
 (common-lisp:defun |make-signer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssl-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssl-protocols-list ()
   '(trivial-types:proper-list ssl-protocol))
 (common-lisp:defun |make-ssl-protocols-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype staging-distribution-dns-name-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-staging-distribution-dns-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass staging-distribution-dns-names common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or staging-distribution-dns-name-list
                                         common-lisp:null)
                         :accessor %staging-distribution-dns-names-items
                         :initform common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %staging-distribution-dns-names-quantity
                         :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export
  (common-lisp:list 'staging-distribution-dns-names
                    'make-staging-distribution-dns-names))
 (common-lisp:defun make-staging-distribution-dns-names
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance
                      'staging-distribution-dns-names
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          staging-distribution-dns-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          staging-distribution-dns-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          staging-distribution-dns-names))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition staging-distribution-in-use
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       staging-distribution-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'staging-distribution-in-use
                    'staging-distribution-in-use-message)))
(common-lisp:progn
 (common-lisp:deftype status-code-list ()
   '(trivial-types:proper-list common-lisp:integer))
 (common-lisp:defun |make-status-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass status-codes common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or status-code-list common-lisp:null)
                         :accessor %status-codes-items :initform
                         (common-lisp:error ":items is required"))
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %status-codes-quantity :initform
                         (common-lisp:error ":quantity is required"))))
 (common-lisp:export (common-lisp:list 'status-codes 'make-status-codes))
 (common-lisp:defun make-status-codes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity)
   (common-lisp:apply #'common-lisp:make-instance 'status-codes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-codes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-codes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-distribution common-lisp:nil
                       ((streaming-distribution-config :initarg
                         :streaming-distribution-config :type
                         (common-lisp:or streaming-distribution-config
                                         common-lisp:null)
                         :accessor
                         %streaming-distribution-streaming-distribution-config
                         :initform
                         (common-lisp:error
                          ":streaming-distribution-config is required"))
                        (active-trusted-signers :initarg
                         :active-trusted-signers :type
                         (common-lisp:or active-trusted-signers
                                         common-lisp:null)
                         :accessor
                         %streaming-distribution-active-trusted-signers
                         :initform
                         (common-lisp:error
                          ":active-trusted-signers is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-last-modified-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-status :initform
                         (common-lisp:error ":status is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution 'make-streaming-distribution))
 (common-lisp:defun make-streaming-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-distribution-config
                     active-trusted-signers domain-name last-modified-time
                     status arn id)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-distribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-trusted-signers))
      (common-lisp:list
       (common-lisp:cons "ActiveTrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition streaming-distribution-already-exists
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       streaming-distribution-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-already-exists
                    'streaming-distribution-already-exists-message)))
(common-lisp:progn
 (common-lisp:defclass streaming-distribution-config common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %streaming-distribution-config-enabled
                         :initform (common-lisp:error ":enabled is required"))
                        (price-class :initarg :price-class :type
                         (common-lisp:or price-class common-lisp:null)
                         :accessor %streaming-distribution-config-price-class
                         :initform common-lisp:nil)
                        (trusted-signers :initarg :trusted-signers :type
                         (common-lisp:or trusted-signers common-lisp:null)
                         :accessor
                         %streaming-distribution-config-trusted-signers
                         :initform
                         (common-lisp:error ":trusted-signers is required"))
                        (logging :initarg :logging :type
                         (common-lisp:or streaming-logging-config
                                         common-lisp:null)
                         :accessor %streaming-distribution-config-logging
                         :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-config-comment
                         :initform (common-lisp:error ":comment is required"))
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %streaming-distribution-config-aliases :initform
                         common-lisp:nil)
                        (s3origin :initarg :s3origin :type
                         (common-lisp:or s3origin common-lisp:null) :accessor
                         %streaming-distribution-config-s3origin :initform
                         (common-lisp:error ":s3origin is required"))
                        (caller-reference :initarg :caller-reference :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %streaming-distribution-config-caller-reference
                         :initform
                         (common-lisp:error ":caller-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-config
                    'make-streaming-distribution-config))
 (common-lisp:defun make-streaming-distribution-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled price-class trusted-signers
                     logging comment aliases s3origin caller-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-distribution-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-reference))
      (common-lisp:list
       (common-lisp:cons "CallerReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3origin))
      (common-lisp:list
       (common-lisp:cons "S3Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-signers))
      (common-lisp:list
       (common-lisp:cons "TrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-class))
      (common-lisp:list
       (common-lisp:cons "PriceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-distribution-config-with-tags common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %streaming-distribution-config-with-tags-tags
                         :initform (common-lisp:error ":tags is required"))
                        (streaming-distribution-config :initarg
                         :streaming-distribution-config :type
                         (common-lisp:or streaming-distribution-config
                                         common-lisp:null)
                         :accessor
                         %streaming-distribution-config-with-tags-streaming-distribution-config
                         :initform
                         (common-lisp:error
                          ":streaming-distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-config-with-tags
                    'make-streaming-distribution-config-with-tags))
 (common-lisp:defun make-streaming-distribution-config-with-tags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags streaming-distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-distribution-config-with-tags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config-with-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config-with-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-config-with-tags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-distribution-list common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or streaming-distribution-summary-list
                                         common-lisp:null)
                         :accessor %streaming-distribution-list-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %streaming-distribution-list-quantity
                         :initform (common-lisp:error ":quantity is required"))
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %streaming-distribution-list-is-truncated
                         :initform
                         (common-lisp:error ":is-truncated is required"))
                        (max-items :initarg :max-items :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %streaming-distribution-list-max-items
                         :initform
                         (common-lisp:error ":max-items is required"))
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-list-next-marker
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-list-marker
                         :initform (common-lisp:error ":marker is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-list
                    'make-streaming-distribution-list))
 (common-lisp:defun make-streaming-distribution-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity is-truncated max-items
                     next-marker marker)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-distribution-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition streaming-distribution-not-disabled
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       streaming-distribution-not-disabled-message)))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-not-disabled
                    'streaming-distribution-not-disabled-message)))
(common-lisp:progn
 (common-lisp:defclass streaming-distribution-summary common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %streaming-distribution-summary-enabled
                         :initform (common-lisp:error ":enabled is required"))
                        (price-class :initarg :price-class :type
                         (common-lisp:or price-class common-lisp:null)
                         :accessor %streaming-distribution-summary-price-class
                         :initform
                         (common-lisp:error ":price-class is required"))
                        (comment :initarg :comment :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-summary-comment
                         :initform (common-lisp:error ":comment is required"))
                        (trusted-signers :initarg :trusted-signers :type
                         (common-lisp:or trusted-signers common-lisp:null)
                         :accessor
                         %streaming-distribution-summary-trusted-signers
                         :initform
                         (common-lisp:error ":trusted-signers is required"))
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %streaming-distribution-summary-aliases :initform
                         (common-lisp:error ":aliases is required"))
                        (s3origin :initarg :s3origin :type
                         (common-lisp:or s3origin common-lisp:null) :accessor
                         %streaming-distribution-summary-s3origin :initform
                         (common-lisp:error ":s3origin is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-summary-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %streaming-distribution-summary-last-modified-time
                         :initform
                         (common-lisp:error ":last-modified-time is required"))
                        (status :initarg :status :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-summary-status
                         :initform (common-lisp:error ":status is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-summary-arn
                         :initform (common-lisp:error ":arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-distribution-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-distribution-summary
                    'make-streaming-distribution-summary))
 (common-lisp:defun make-streaming-distribution-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled price-class comment
                     trusted-signers aliases s3origin domain-name
                     last-modified-time status arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-distribution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3origin))
      (common-lisp:list
       (common-lisp:cons "S3Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusted-signers))
      (common-lisp:list
       (common-lisp:cons "TrustedSigners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-class))
      (common-lisp:list
       (common-lisp:cons "PriceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-distribution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streaming-distribution-summary-list ()
   '(trivial-types:proper-list streaming-distribution-summary))
 (common-lisp:defun |make-streaming-distribution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            streaming-distribution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass streaming-logging-config common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-logging-config-prefix :initform
                         (common-lisp:error ":prefix is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %streaming-logging-config-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %streaming-logging-config-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'streaming-logging-config 'make-streaming-logging-config))
 (common-lisp:defun make-streaming-logging-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket enabled)
   (common-lisp:apply #'common-lisp:make-instance 'streaming-logging-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-logging-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-logging-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-logging-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-keys common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %tag-keys-items :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-keys 'make-tag-keys))
 (common-lisp:defun make-tag-keys
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items)
   (common-lisp:apply #'common-lisp:make-instance 'tag-keys
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-keys))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-keys))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-keys))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource :initform
                         (common-lisp:error ":resource is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Tags" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tags common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tags-items :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tags 'make-tags))
 (common-lisp:defun make-tags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items)
   (common-lisp:apply #'common-lisp:make-instance 'tags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition test-function-failed
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       test-function-failed-message)))
 (common-lisp:export
  (common-lisp:list 'test-function-failed 'test-function-failed-message)))
(common-lisp:progn
 (common-lisp:defclass test-function-request common-lisp:nil
                       ((event-object :initarg :event-object :type
                         (common-lisp:or function-event-object
                                         common-lisp:null)
                         :accessor %test-function-request-event-object
                         :initform
                         (common-lisp:error ":event-object is required"))
                        (stage :initarg :stage :type
                         (common-lisp:or function-stage common-lisp:null)
                         :accessor %test-function-request-stage :initform
                         common-lisp:nil)
                        (if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %test-function-request-if-match :initform
                         (common-lisp:error ":if-match is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %test-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'test-function-request 'make-test-function-request))
 (common-lisp:defun make-test-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-object stage if-match name)
   (common-lisp:apply #'common-lisp:make-instance 'test-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-object))
      (common-lisp:list
       (common-lisp:cons "EventObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-function-result common-lisp:nil
                       ((test-result :initarg :test-result :type
                         (common-lisp:or test-result common-lisp:null)
                         :accessor %test-function-result-test-result :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-function-result 'make-test-function-result))
 (common-lisp:defun make-test-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key test-result)
   (common-lisp:apply #'common-lisp:make-instance 'test-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-function-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-result))
      (common-lisp:list
       (common-lisp:cons "TestResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("TestResult" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass test-result common-lisp:nil
                       ((function-output :initarg :function-output :type
                         (common-lisp:or |sensitiveStringType|
                                         common-lisp:null)
                         :accessor %test-result-function-output :initform
                         common-lisp:nil)
                        (function-error-message :initarg
                         :function-error-message :type
                         (common-lisp:or |sensitiveStringType|
                                         common-lisp:null)
                         :accessor %test-result-function-error-message
                         :initform common-lisp:nil)
                        (function-execution-logs :initarg
                         :function-execution-logs :type
                         (common-lisp:or function-execution-log-list
                                         common-lisp:null)
                         :accessor %test-result-function-execution-logs
                         :initform common-lisp:nil)
                        (compute-utilization :initarg :compute-utilization
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %test-result-compute-utilization :initform
                         common-lisp:nil)
                        (function-summary :initarg :function-summary :type
                         (common-lisp:or function-summary common-lisp:null)
                         :accessor %test-result-function-summary :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'test-result 'make-test-result))
 (common-lisp:defun make-test-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-output function-error-message
                     function-execution-logs compute-utilization
                     function-summary)
   (common-lisp:apply #'common-lisp:make-instance 'test-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-summary))
      (common-lisp:list
       (common-lisp:cons "FunctionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-utilization))
      (common-lisp:list
       (common-lisp:cons "ComputeUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-execution-logs))
      (common-lisp:list
       (common-lisp:cons "FunctionExecutionLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-error-message))
      (common-lisp:list
       (common-lisp:cons "FunctionErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-output))
      (common-lisp:list
       (common-lisp:cons "FunctionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-long-cspin-response-headers-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-long-cspin-response-headers-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-long-cspin-response-headers-policy
                    'too-long-cspin-response-headers-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cache-behaviors
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cache-behaviors-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cache-behaviors
                    'too-many-cache-behaviors-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cache-policies
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cache-policies-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cache-policies 'too-many-cache-policies-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-certificates
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-certificates-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-certificates 'too-many-certificates-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cloud-front-origin-access-identities
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cloud-front-origin-access-identities-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cloud-front-origin-access-identities
                    'too-many-cloud-front-origin-access-identities-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-continuous-deployment-policies
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-continuous-deployment-policies-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-continuous-deployment-policies
                    'too-many-continuous-deployment-policies-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cookie-names-in-white-list
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cookie-names-in-white-list-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cookie-names-in-white-list
                    'too-many-cookie-names-in-white-list-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cookies-in-cache-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cookies-in-cache-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cookies-in-cache-policy
                    'too-many-cookies-in-cache-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-cookies-in-origin-request-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-cookies-in-origin-request-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-cookies-in-origin-request-policy
                    'too-many-cookies-in-origin-request-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-custom-headers-in-response-headers-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-custom-headers-in-response-headers-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-custom-headers-in-response-headers-policy
                    'too-many-custom-headers-in-response-headers-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distribution-cnames
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distribution-cnames-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distribution-cnames
                    'too-many-distribution-cnames-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions 'too-many-distributions-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-cache-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-cache-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-associated-to-cache-policy
                    'too-many-distributions-associated-to-cache-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-field-level-encryption-config
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-field-level-encryption-config-message)))
 (common-lisp:export
  (common-lisp:list
   'too-many-distributions-associated-to-field-level-encryption-config
   'too-many-distributions-associated-to-field-level-encryption-config-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-key-group
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-key-group-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-associated-to-key-group
                    'too-many-distributions-associated-to-key-group-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-origin-access-control
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-origin-access-control-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-associated-to-origin-access-control
                    'too-many-distributions-associated-to-origin-access-control-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-origin-request-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-origin-request-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-associated-to-origin-request-policy
                    'too-many-distributions-associated-to-origin-request-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-associated-to-response-headers-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-associated-to-response-headers-policy-message)))
 (common-lisp:export
  (common-lisp:list
   'too-many-distributions-associated-to-response-headers-policy
   'too-many-distributions-associated-to-response-headers-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-with-function-associations
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-with-function-associations-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-with-function-associations
                    'too-many-distributions-with-function-associations-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-with-lambda-associations
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-with-lambda-associations-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-with-lambda-associations
                    'too-many-distributions-with-lambda-associations-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-distributions-with-single-function-arn
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-distributions-with-single-function-arn-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-distributions-with-single-function-arn
                    'too-many-distributions-with-single-function-arn-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-configs
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-configs-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-configs
                    'too-many-field-level-encryption-configs-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-content-type-profiles
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-content-type-profiles-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-content-type-profiles
                    'too-many-field-level-encryption-content-type-profiles-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-encryption-entities
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-encryption-entities-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-encryption-entities
                    'too-many-field-level-encryption-encryption-entities-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-field-patterns
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-field-patterns-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-field-patterns
                    'too-many-field-level-encryption-field-patterns-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-profiles
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-profiles-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-profiles
                    'too-many-field-level-encryption-profiles-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-field-level-encryption-query-arg-profiles
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-field-level-encryption-query-arg-profiles-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-field-level-encryption-query-arg-profiles
                    'too-many-field-level-encryption-query-arg-profiles-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-function-associations
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-function-associations-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-function-associations
                    'too-many-function-associations-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-functions
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-functions-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-functions 'too-many-functions-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-headers-in-cache-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-headers-in-cache-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-headers-in-cache-policy
                    'too-many-headers-in-cache-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-headers-in-forwarded-values
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-headers-in-forwarded-values-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-headers-in-forwarded-values
                    'too-many-headers-in-forwarded-values-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-headers-in-origin-request-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-headers-in-origin-request-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-headers-in-origin-request-policy
                    'too-many-headers-in-origin-request-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-invalidations-in-progress
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-invalidations-in-progress-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-invalidations-in-progress
                    'too-many-invalidations-in-progress-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-key-groups
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-key-groups-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-key-groups 'too-many-key-groups-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-key-groups-associated-to-distribution
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-key-groups-associated-to-distribution-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-key-groups-associated-to-distribution
                    'too-many-key-groups-associated-to-distribution-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-lambda-function-associations
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-lambda-function-associations-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-lambda-function-associations
                    'too-many-lambda-function-associations-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-origin-access-controls
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-origin-access-controls-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-origin-access-controls
                    'too-many-origin-access-controls-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-origin-custom-headers
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-origin-custom-headers-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-origin-custom-headers
                    'too-many-origin-custom-headers-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-origin-groups-per-distribution
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-origin-groups-per-distribution-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-origin-groups-per-distribution
                    'too-many-origin-groups-per-distribution-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-origin-request-policies
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-origin-request-policies-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-origin-request-policies
                    'too-many-origin-request-policies-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-origins
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-origins-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-origins 'too-many-origins-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-public-keys
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-public-keys-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-public-keys 'too-many-public-keys-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-public-keys-in-key-group
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-public-keys-in-key-group-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-public-keys-in-key-group
                    'too-many-public-keys-in-key-group-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-query-string-parameters
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-query-string-parameters-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-query-string-parameters
                    'too-many-query-string-parameters-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-query-strings-in-cache-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-query-strings-in-cache-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-query-strings-in-cache-policy
                    'too-many-query-strings-in-cache-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-query-strings-in-origin-request-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-query-strings-in-origin-request-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-query-strings-in-origin-request-policy
                    'too-many-query-strings-in-origin-request-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-realtime-log-configs
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-realtime-log-configs-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-realtime-log-configs
                    'too-many-realtime-log-configs-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-remove-headers-in-response-headers-policy
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-remove-headers-in-response-headers-policy-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-remove-headers-in-response-headers-policy
                    'too-many-remove-headers-in-response-headers-policy-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-response-headers-policies
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-response-headers-policies-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-response-headers-policies
                    'too-many-response-headers-policies-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-streaming-distribution-cnames
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-streaming-distribution-cnames-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-streaming-distribution-cnames
                    'too-many-streaming-distribution-cnames-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-streaming-distributions
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-streaming-distributions-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-streaming-distributions
                    'too-many-streaming-distributions-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-trusted-signers
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-trusted-signers-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-trusted-signers
                    'too-many-trusted-signers-message)))
(common-lisp:progn
 (common-lisp:defclass traffic-config common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or continuous-deployment-policy-type
                                         common-lisp:null)
                         :accessor %traffic-config-type :initform
                         (common-lisp:error ":type is required"))
                        (single-header-config :initarg :single-header-config
                         :type
                         (common-lisp:or
                          continuous-deployment-single-header-config
                          common-lisp:null)
                         :accessor %traffic-config-single-header-config
                         :initform common-lisp:nil)
                        (single-weight-config :initarg :single-weight-config
                         :type
                         (common-lisp:or
                          continuous-deployment-single-weight-config
                          common-lisp:null)
                         :accessor %traffic-config-single-weight-config
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'traffic-config 'make-traffic-config))
 (common-lisp:defun make-traffic-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type single-header-config
                     single-weight-config)
   (common-lisp:apply #'common-lisp:make-instance 'traffic-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-weight-config))
      (common-lisp:list
       (common-lisp:cons "SingleWeightConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-header-config))
      (common-lisp:list
       (common-lisp:cons "SingleHeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition trusted-key-group-does-not-exist
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       trusted-key-group-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'trusted-key-group-does-not-exist
                    'trusted-key-group-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:deftype trusted-key-group-id-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-trusted-key-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trusted-key-groups common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or trusted-key-group-id-list
                                         common-lisp:null)
                         :accessor %trusted-key-groups-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %trusted-key-groups-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %trusted-key-groups-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-key-groups 'make-trusted-key-groups))
 (common-lisp:defun make-trusted-key-groups
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity enabled)
   (common-lisp:apply #'common-lisp:make-instance 'trusted-key-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trusted-key-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trusted-key-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trusted-key-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition trusted-signer-does-not-exist
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       trusted-signer-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'trusted-signer-does-not-exist
                    'trusted-signer-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass trusted-signers common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or aws-account-number-list
                                         common-lisp:null)
                         :accessor %trusted-signers-items :initform
                         common-lisp:nil)
                        (quantity :initarg :quantity :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor %trusted-signers-quantity :initform
                         (common-lisp:error ":quantity is required"))
                        (enabled :initarg :enabled :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %trusted-signers-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'trusted-signers 'make-trusted-signers))
 (common-lisp:defun make-trusted-signers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items quantity enabled)
   (common-lisp:apply #'common-lisp:make-instance 'trusted-signers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trusted-signers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trusted-signers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trusted-signers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation
     (cloudfront-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation 'unsupported-operation-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource :initarg :resource :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource :initform
                         (common-lisp:error ":resource is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("TagKeys" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-cache-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-cache-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-cache-policy-request-id :initform
                         (common-lisp:error ":id is required"))
                        (cache-policy-config :initarg :cache-policy-config
                         :type
                         (common-lisp:or cache-policy-config common-lisp:null)
                         :accessor
                         %update-cache-policy-request-cache-policy-config
                         :initform
                         (common-lisp:error
                          ":cache-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cache-policy-request
                    'make-update-cache-policy-request))
 (common-lisp:defun make-update-cache-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id cache-policy-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-cache-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy-config))
      (common-lisp:list
       (common-lisp:cons "CachePolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-cache-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-cache-policy-result-etag :initform
                         common-lisp:nil)
                        (cache-policy :initarg :cache-policy :type
                         (common-lisp:or cache-policy common-lisp:null)
                         :accessor %update-cache-policy-result-cache-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cache-policy-result
                    'make-update-cache-policy-result))
 (common-lisp:defun make-update-cache-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag cache-policy)
   (common-lisp:apply #'common-lisp:make-instance 'update-cache-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-policy))
      (common-lisp:list
       (common-lisp:cons "CachePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cache-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CachePolicy" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-cloud-front-origin-access-identity-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-cloud-front-origin-access-identity-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-cloud-front-origin-access-identity-request-id
                         :initform (common-lisp:error ":id is required"))
                        (cloud-front-origin-access-identity-config :initarg
                         :cloud-front-origin-access-identity-config :type
                         (common-lisp:or
                          cloud-front-origin-access-identity-config
                          common-lisp:null)
                         :accessor
                         %update-cloud-front-origin-access-identity-request-cloud-front-origin-access-identity-config
                         :initform
                         (common-lisp:error
                          ":cloud-front-origin-access-identity-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cloud-front-origin-access-identity-request
                    'make-update-cloud-front-origin-access-identity-request))
 (common-lisp:defun make-update-cloud-front-origin-access-identity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     cloud-front-origin-access-identity-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cloud-front-origin-access-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity-config))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentityConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-cloud-front-origin-access-identity-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-cloud-front-origin-access-identity-result-etag
                         :initform common-lisp:nil)
                        (cloud-front-origin-access-identity :initarg
                         :cloud-front-origin-access-identity :type
                         (common-lisp:or cloud-front-origin-access-identity
                                         common-lisp:null)
                         :accessor
                         %update-cloud-front-origin-access-identity-result-cloud-front-origin-access-identity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cloud-front-origin-access-identity-result
                    'make-update-cloud-front-origin-access-identity-result))
 (common-lisp:defun make-update-cloud-front-origin-access-identity-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag cloud-front-origin-access-identity)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cloud-front-origin-access-identity-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "CloudFrontOriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-front-origin-access-identity-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CloudFrontOriginAccessIdentity" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-continuous-deployment-policy-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-continuous-deployment-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-continuous-deployment-policy-request-id
                         :initform (common-lisp:error ":id is required"))
                        (continuous-deployment-policy-config :initarg
                         :continuous-deployment-policy-config :type
                         (common-lisp:or continuous-deployment-policy-config
                                         common-lisp:null)
                         :accessor
                         %update-continuous-deployment-policy-request-continuous-deployment-policy-config
                         :initform
                         (common-lisp:error
                          ":continuous-deployment-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-continuous-deployment-policy-request
                    'make-update-continuous-deployment-policy-request))
 (common-lisp:defun make-update-continuous-deployment-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     continuous-deployment-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-continuous-deployment-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy-config))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicyConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-continuous-deployment-policy-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-continuous-deployment-policy-result-etag
                         :initform common-lisp:nil)
                        (continuous-deployment-policy :initarg
                         :continuous-deployment-policy :type
                         (common-lisp:or continuous-deployment-policy
                                         common-lisp:null)
                         :accessor
                         %update-continuous-deployment-policy-result-continuous-deployment-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-continuous-deployment-policy-result
                    'make-update-continuous-deployment-policy-result))
 (common-lisp:defun make-update-continuous-deployment-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag continuous-deployment-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-continuous-deployment-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-deployment-policy))
      (common-lisp:list
       (common-lisp:cons "ContinuousDeploymentPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-continuous-deployment-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ContinuousDeploymentPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-distribution-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-distribution-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-distribution-request-id :initform
                         (common-lisp:error ":id is required"))
                        (distribution-config :initarg :distribution-config
                         :type
                         (common-lisp:or distribution-config common-lisp:null)
                         :accessor
                         %update-distribution-request-distribution-config
                         :initform
                         (common-lisp:error
                          ":distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-distribution-request
                    'make-update-distribution-request))
 (common-lisp:defun make-update-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id distribution-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-config))
      (common-lisp:list
       (common-lisp:cons "DistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("DistributionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-distribution-result-etag :initform
                         common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor %update-distribution-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-result
                    'make-update-distribution-result))
 (common-lisp:defun make-update-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag distribution)
   (common-lisp:apply #'common-lisp:make-instance 'update-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-distribution-with-staging-config-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-distribution-with-staging-config-request-if-match
                         :initform common-lisp:nil)
                        (staging-distribution-id :initarg
                         :staging-distribution-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-distribution-with-staging-config-request-staging-distribution-id
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-distribution-with-staging-config-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-distribution-with-staging-config-request
                    'make-update-distribution-with-staging-config-request))
 (common-lisp:defun make-update-distribution-with-staging-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match staging-distribution-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-with-staging-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-with-staging-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-distribution-with-staging-config-result-etag
                         :initform common-lisp:nil)
                        (distribution :initarg :distribution :type
                         (common-lisp:or distribution common-lisp:null)
                         :accessor
                         %update-distribution-with-staging-config-result-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-with-staging-config-result
                    'make-update-distribution-with-staging-config-result))
 (common-lisp:defun make-update-distribution-with-staging-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-with-staging-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "Distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-with-staging-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Distribution" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-field-level-encryption-config-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-config-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-config-request-id
                         :initform (common-lisp:error ":id is required"))
                        (field-level-encryption-config :initarg
                         :field-level-encryption-config :type
                         (common-lisp:or field-level-encryption-config
                                         common-lisp:null)
                         :accessor
                         %update-field-level-encryption-config-request-field-level-encryption-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-field-level-encryption-config-request
                    'make-update-field-level-encryption-config-request))
 (common-lisp:defun make-update-field-level-encryption-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     field-level-encryption-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-field-level-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-field-level-encryption-config-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-config-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption :initarg
                         :field-level-encryption :type
                         (common-lisp:or field-level-encryption
                                         common-lisp:null)
                         :accessor
                         %update-field-level-encryption-config-result-field-level-encryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-field-level-encryption-config-result
                    'make-update-field-level-encryption-config-result))
 (common-lisp:defun make-update-field-level-encryption-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag field-level-encryption)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-field-level-encryption-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-config-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryption" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-field-level-encryption-profile-request
                       common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-profile-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-profile-request-id
                         :initform (common-lisp:error ":id is required"))
                        (field-level-encryption-profile-config :initarg
                         :field-level-encryption-profile-config :type
                         (common-lisp:or field-level-encryption-profile-config
                                         common-lisp:null)
                         :accessor
                         %update-field-level-encryption-profile-request-field-level-encryption-profile-config
                         :initform
                         (common-lisp:error
                          ":field-level-encryption-profile-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-field-level-encryption-profile-request
                    'make-update-field-level-encryption-profile-request))
 (common-lisp:defun make-update-field-level-encryption-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     field-level-encryption-profile-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-field-level-encryption-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile-config))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfileConfig"
                              common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-field-level-encryption-profile-result
                       common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-field-level-encryption-profile-result-etag
                         :initform common-lisp:nil)
                        (field-level-encryption-profile :initarg
                         :field-level-encryption-profile :type
                         (common-lisp:or field-level-encryption-profile
                                         common-lisp:null)
                         :accessor
                         %update-field-level-encryption-profile-result-field-level-encryption-profile
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-field-level-encryption-profile-result
                    'make-update-field-level-encryption-profile-result))
 (common-lisp:defun make-update-field-level-encryption-profile-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag field-level-encryption-profile)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-field-level-encryption-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-level-encryption-profile))
      (common-lisp:list
       (common-lisp:cons "FieldLevelEncryptionProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-field-level-encryption-profile-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FieldLevelEncryptionProfile" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-function-request common-lisp:nil
                       ((function-code :initarg :function-code :type
                         (common-lisp:or function-blob common-lisp:null)
                         :accessor %update-function-request-function-code
                         :initform
                         (common-lisp:error ":function-code is required"))
                        (function-config :initarg :function-config :type
                         (common-lisp:or function-config common-lisp:null)
                         :accessor %update-function-request-function-config
                         :initform
                         (common-lisp:error ":function-config is required"))
                        (if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-function-request-if-match :initform
                         (common-lisp:error ":if-match is required"))
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-function-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-function-request 'make-update-function-request))
 (common-lisp:defun make-update-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-code function-config if-match
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-config))
      (common-lisp:list
       (common-lisp:cons "FunctionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-code))
      (common-lisp:list
       (common-lisp:cons "FunctionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-function-result-etag :initform
                         common-lisp:nil)
                        (function-summary :initarg :function-summary :type
                         (common-lisp:or function-summary common-lisp:null)
                         :accessor %update-function-result-function-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-function-result 'make-update-function-result))
 (common-lisp:defun make-update-function-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag function-summary)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETtag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-summary))
      (common-lisp:list
       (common-lisp:cons "FunctionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("FunctionSummary" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-key-group-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-key-group-request-if-match :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-key-group-request-id :initform
                         (common-lisp:error ":id is required"))
                        (key-group-config :initarg :key-group-config :type
                         (common-lisp:or key-group-config common-lisp:null)
                         :accessor %update-key-group-request-key-group-config
                         :initform
                         (common-lisp:error ":key-group-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-key-group-request 'make-update-key-group-request))
 (common-lisp:defun make-update-key-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id key-group-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-key-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group-config))
      (common-lisp:list
       (common-lisp:cons "KeyGroupConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroupConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-key-group-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-key-group-result-etag :initform
                         common-lisp:nil)
                        (key-group :initarg :key-group :type
                         (common-lisp:or key-group common-lisp:null) :accessor
                         %update-key-group-result-key-group :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-key-group-result 'make-update-key-group-result))
 (common-lisp:defun make-update-key-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag key-group)
   (common-lisp:apply #'common-lisp:make-instance 'update-key-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-group))
      (common-lisp:list
       (common-lisp:cons "KeyGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-key-group-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("KeyGroup" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-origin-access-control-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-origin-access-control-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-origin-access-control-request-id
                         :initform (common-lisp:error ":id is required"))
                        (origin-access-control-config :initarg
                         :origin-access-control-config :type
                         (common-lisp:or origin-access-control-config
                                         common-lisp:null)
                         :accessor
                         %update-origin-access-control-request-origin-access-control-config
                         :initform
                         (common-lisp:error
                          ":origin-access-control-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-origin-access-control-request
                    'make-update-origin-access-control-request))
 (common-lisp:defun make-update-origin-access-control-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id origin-access-control-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-origin-access-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control-config))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControlConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControlConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-origin-access-control-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-origin-access-control-result-etag
                         :initform common-lisp:nil)
                        (origin-access-control :initarg :origin-access-control
                         :type
                         (common-lisp:or origin-access-control
                                         common-lisp:null)
                         :accessor
                         %update-origin-access-control-result-origin-access-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-origin-access-control-result
                    'make-update-origin-access-control-result))
 (common-lisp:defun make-update-origin-access-control-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-access-control)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-origin-access-control-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-control))
      (common-lisp:list
       (common-lisp:cons "OriginAccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-access-control-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginAccessControl" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-origin-request-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-origin-request-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-origin-request-policy-request-id
                         :initform (common-lisp:error ":id is required"))
                        (origin-request-policy-config :initarg
                         :origin-request-policy-config :type
                         (common-lisp:or origin-request-policy-config
                                         common-lisp:null)
                         :accessor
                         %update-origin-request-policy-request-origin-request-policy-config
                         :initform
                         (common-lisp:error
                          ":origin-request-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-origin-request-policy-request
                    'make-update-origin-request-policy-request))
 (common-lisp:defun make-update-origin-request-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id origin-request-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-origin-request-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy-config))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-origin-request-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-origin-request-policy-result-etag
                         :initform common-lisp:nil)
                        (origin-request-policy :initarg :origin-request-policy
                         :type
                         (common-lisp:or origin-request-policy
                                         common-lisp:null)
                         :accessor
                         %update-origin-request-policy-result-origin-request-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-origin-request-policy-result
                    'make-update-origin-request-policy-result))
 (common-lisp:defun make-update-origin-request-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag origin-request-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-origin-request-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-request-policy))
      (common-lisp:list
       (common-lisp:cons "OriginRequestPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-origin-request-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OriginRequestPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-public-key-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-public-key-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-public-key-request-id :initform
                         (common-lisp:error ":id is required"))
                        (public-key-config :initarg :public-key-config :type
                         (common-lisp:or public-key-config common-lisp:null)
                         :accessor %update-public-key-request-public-key-config
                         :initform
                         (common-lisp:error
                          ":public-key-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-public-key-request
                    'make-update-public-key-request))
 (common-lisp:defun make-update-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id public-key-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-config))
      (common-lisp:list
       (common-lisp:cons "PublicKeyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKeyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-public-key-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-public-key-result-etag :initform
                         common-lisp:nil)
                        (public-key :initarg :public-key :type
                         (common-lisp:or public-key common-lisp:null) :accessor
                         %update-public-key-result-public-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-public-key-result 'make-update-public-key-result))
 (common-lisp:defun make-update-public-key-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag public-key)
   (common-lisp:apply #'common-lisp:make-instance 'update-public-key-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-key-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicKey" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-realtime-log-config-request common-lisp:nil
                       ((sampling-rate :initarg :sampling-rate :type
                         (common-lisp:or common-lisp:integer common-lisp:null)
                         :accessor
                         %update-realtime-log-config-request-sampling-rate
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-realtime-log-config-request-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-realtime-log-config-request-name
                         :initform common-lisp:nil)
                        (fields :initarg :fields :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         %update-realtime-log-config-request-fields :initform
                         common-lisp:nil)
                        (end-points :initarg :end-points :type
                         (common-lisp:or end-point-list common-lisp:null)
                         :accessor
                         %update-realtime-log-config-request-end-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-realtime-log-config-request
                    'make-update-realtime-log-config-request))
 (common-lisp:defun make-update-realtime-log-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sampling-rate arn name fields end-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-realtime-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-points))
      (common-lisp:list
       (common-lisp:cons "EndPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rate))
      (common-lisp:list
       (common-lisp:cons "SamplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-realtime-log-config-result common-lisp:nil
                       ((realtime-log-config :initarg :realtime-log-config
                         :type
                         (common-lisp:or realtime-log-config common-lisp:null)
                         :accessor
                         %update-realtime-log-config-result-realtime-log-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-realtime-log-config-result
                    'make-update-realtime-log-config-result))
 (common-lisp:defun make-update-realtime-log-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key realtime-log-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-realtime-log-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realtime-log-config))
      (common-lisp:list
       (common-lisp:cons "RealtimeLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-realtime-log-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-response-headers-policy-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-response-headers-policy-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-response-headers-policy-request-id
                         :initform (common-lisp:error ":id is required"))
                        (response-headers-policy-config :initarg
                         :response-headers-policy-config :type
                         (common-lisp:or response-headers-policy-config
                                         common-lisp:null)
                         :accessor
                         %update-response-headers-policy-request-response-headers-policy-config
                         :initform
                         (common-lisp:error
                          ":response-headers-policy-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-response-headers-policy-request
                    'make-update-response-headers-policy-request))
 (common-lisp:defun make-update-response-headers-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     response-headers-policy-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-response-headers-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy-config))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicyConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-response-headers-policy-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-response-headers-policy-result-etag
                         :initform common-lisp:nil)
                        (response-headers-policy :initarg
                         :response-headers-policy :type
                         (common-lisp:or response-headers-policy
                                         common-lisp:null)
                         :accessor
                         %update-response-headers-policy-result-response-headers-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-response-headers-policy-result
                    'make-update-response-headers-policy-result))
 (common-lisp:defun make-update-response-headers-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag response-headers-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-response-headers-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-headers-policy))
      (common-lisp:list
       (common-lisp:cons "ResponseHeadersPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-response-headers-policy-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ResponseHeadersPolicy" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-streaming-distribution-request common-lisp:nil
                       ((if-match :initarg :if-match :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %update-streaming-distribution-request-if-match
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-streaming-distribution-request-id
                         :initform (common-lisp:error ":id is required"))
                        (streaming-distribution-config :initarg
                         :streaming-distribution-config :type
                         (common-lisp:or streaming-distribution-config
                                         common-lisp:null)
                         :accessor
                         %update-streaming-distribution-request-streaming-distribution-config
                         :initform
                         (common-lisp:error
                          ":streaming-distribution-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-streaming-distribution-request
                    'make-update-streaming-distribution-request))
 (common-lisp:defun make-update-streaming-distribution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key if-match id
                     streaming-distribution-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-distribution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution-config))
      (common-lisp:list
       (common-lisp:cons "StreamingDistributionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistributionConfig" common-lisp:nil
                              "http://cloudfront.amazonaws.com/doc/2020-05-31/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass update-streaming-distribution-result common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-streaming-distribution-result-etag
                         :initform common-lisp:nil)
                        (streaming-distribution :initarg
                         :streaming-distribution :type
                         (common-lisp:or streaming-distribution
                                         common-lisp:null)
                         :accessor
                         %update-streaming-distribution-result-streaming-distribution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-streaming-distribution-result
                    'make-update-streaming-distribution-result))
 (common-lisp:defun make-update-streaming-distribution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag streaming-distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-streaming-distribution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-distribution))
      (common-lisp:list
       (common-lisp:cons "StreamingDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-streaming-distribution-result))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%" aws-sdk/generator/shape::input)
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("StreamingDistribution" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass viewer-certificate common-lisp:nil
                       ((certificate-source :initarg :certificate-source :type
                         (common-lisp:or certificate-source common-lisp:null)
                         :accessor %viewer-certificate-certificate-source
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %viewer-certificate-certificate :initform
                         common-lisp:nil)
                        (minimum-protocol-version :initarg
                         :minimum-protocol-version :type
                         (common-lisp:or minimum-protocol-version
                                         common-lisp:null)
                         :accessor %viewer-certificate-minimum-protocol-version
                         :initform common-lisp:nil)
                        (sslsupport-method :initarg :sslsupport-method :type
                         (common-lisp:or sslsupport-method common-lisp:null)
                         :accessor %viewer-certificate-sslsupport-method
                         :initform common-lisp:nil)
                        (acmcertificate-arn :initarg :acmcertificate-arn :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %viewer-certificate-acmcertificate-arn
                         :initform common-lisp:nil)
                        (iamcertificate-id :initarg :iamcertificate-id :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %viewer-certificate-iamcertificate-id
                         :initform common-lisp:nil)
                        (cloud-front-default-certificate :initarg
                         :cloud-front-default-certificate :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         %viewer-certificate-cloud-front-default-certificate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'viewer-certificate 'make-viewer-certificate))
 (common-lisp:defun make-viewer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-source certificate
                     minimum-protocol-version sslsupport-method
                     acmcertificate-arn iamcertificate-id
                     cloud-front-default-certificate)
   (common-lisp:apply #'common-lisp:make-instance 'viewer-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input viewer-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input viewer-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-default-certificate))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDefaultCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamcertificate-id))
      (common-lisp:list
       (common-lisp:cons "IAMCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acmcertificate-arn))
      (common-lisp:list
       (common-lisp:cons "ACMCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sslsupport-method))
      (common-lisp:list
       (common-lisp:cons "SSLSupportMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-protocol-version))
      (common-lisp:list
       (common-lisp:cons "MinimumProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-source))
      (common-lisp:list
       (common-lisp:cons "CertificateSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input viewer-certificate))
   common-lisp:nil))
(common-lisp:deftype viewer-protocol-policy () 'common-lisp:string)
(common-lisp:deftype |aliasString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |distributionIdString| () 'common-lisp:string)
common-lisp:nil
common-lisp:nil
(common-lisp:deftype |listConflictingAliasesMaxItemsInteger| ()
  'common-lisp:integer)
common-lisp:nil
(common-lisp:deftype |sensitiveStringType| () 'common-lisp:string)
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun associate-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-distribution-id alias)
   (common-lisp:declare (common-lisp:ignorable target-distribution-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/associate-alias"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'target-distribution-id))))
                                                        "AssociateAlias"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-alias))
(common-lisp:progn
 (common-lisp:defun copy-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key primary-distribution-id staging if-match
                     caller-reference)
   (common-lisp:declare
    (common-lisp:ignorable primary-distribution-id staging if-match
     caller-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/copy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'primary-distribution-id))))
                                                        "CopyDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-distribution))
(common-lisp:progn
 (common-lisp:defun create-cache-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-policy-config)
   (common-lisp:declare (common-lisp:ignorable cache-policy-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cache-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/cache-policy"
                                                        "CreateCachePolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cache-policy))
(common-lisp:progn
 (common-lisp:defun create-cloud-front-origin-access-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     cloud-front-origin-access-identity-config)
   (common-lisp:declare
    (common-lisp:ignorable cloud-front-origin-access-identity-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cloud-front-origin-access-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/origin-access-identity/cloudfront"
                                                        "CreateCloudFrontOriginAccessIdentity"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cloud-front-origin-access-identity))
(common-lisp:progn
 (common-lisp:defun create-continuous-deployment-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continuous-deployment-policy-config)
   (common-lisp:declare
    (common-lisp:ignorable continuous-deployment-policy-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-continuous-deployment-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/continuous-deployment-policy"
                                                        "CreateContinuousDeploymentPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-continuous-deployment-policy))
(common-lisp:progn
 (common-lisp:defun create-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-config)
   (common-lisp:declare (common-lisp:ignorable distribution-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/distribution"
                                                        "CreateDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-distribution))
(common-lisp:progn
 (common-lisp:defun create-distribution-with-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-config-with-tags)
   (common-lisp:declare (common-lisp:ignorable distribution-config-with-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-distribution-with-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/distribution?WithTags"
                                                        "CreateDistributionWithTags"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-distribution-with-tags))
(common-lisp:progn
 (common-lisp:defun create-field-level-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key field-level-encryption-config)
   (common-lisp:declare (common-lisp:ignorable field-level-encryption-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-field-level-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/field-level-encryption"
                                                        "CreateFieldLevelEncryptionConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-field-level-encryption-config))
(common-lisp:progn
 (common-lisp:defun create-field-level-encryption-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key field-level-encryption-profile-config)
   (common-lisp:declare
    (common-lisp:ignorable field-level-encryption-profile-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-field-level-encryption-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/field-level-encryption-profile"
                                                        "CreateFieldLevelEncryptionProfile"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-field-level-encryption-profile))
(common-lisp:progn
 (common-lisp:defun create-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name function-config function-code)
   (common-lisp:declare
    (common-lisp:ignorable name function-config function-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/function"
                                                        "CreateFunction"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-function))
(common-lisp:progn
 (common-lisp:defun create-invalidation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id invalidation-batch)
   (common-lisp:declare
    (common-lisp:ignorable distribution-id invalidation-batch))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-invalidation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/invalidation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))))
                                                        "CreateInvalidation"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-invalidation))
(common-lisp:progn
 (common-lisp:defun create-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-group-config)
   (common-lisp:declare (common-lisp:ignorable key-group-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/key-group"
                                                        "CreateKeyGroup"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-key-group))
(common-lisp:progn
 (common-lisp:defun create-monitoring-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id monitoring-subscription)
   (common-lisp:declare
    (common-lisp:ignorable distribution-id monitoring-subscription))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-monitoring-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributions/~A/monitoring-subscription/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))))
                                                        "CreateMonitoringSubscription"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-monitoring-subscription))
(common-lisp:progn
 (common-lisp:defun create-origin-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origin-access-control-config)
   (common-lisp:declare (common-lisp:ignorable origin-access-control-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-origin-access-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/origin-access-control"
                                                        "CreateOriginAccessControl"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-origin-access-control))
(common-lisp:progn
 (common-lisp:defun create-origin-request-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origin-request-policy-config)
   (common-lisp:declare (common-lisp:ignorable origin-request-policy-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-origin-request-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/origin-request-policy"
                                                        "CreateOriginRequestPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-origin-request-policy))
(common-lisp:progn
 (common-lisp:defun create-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key public-key-config)
   (common-lisp:declare (common-lisp:ignorable public-key-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/public-key"
                                                        "CreatePublicKey"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-public-key))
(common-lisp:progn
 (common-lisp:defun create-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-points fields name sampling-rate)
   (common-lisp:declare
    (common-lisp:ignorable end-points fields name sampling-rate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-realtime-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/realtime-log-config"
                                                        "CreateRealtimeLogConfig"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-realtime-log-config))
(common-lisp:progn
 (common-lisp:defun create-response-headers-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key response-headers-policy-config)
   (common-lisp:declare (common-lisp:ignorable response-headers-policy-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-response-headers-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/response-headers-policy"
                                                        "CreateResponseHeadersPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-response-headers-policy))
(common-lisp:progn
 (common-lisp:defun create-streaming-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-distribution-config)
   (common-lisp:declare (common-lisp:ignorable streaming-distribution-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-streaming-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/streaming-distribution"
                                                        "CreateStreamingDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-distribution))
(common-lisp:progn
 (common-lisp:defun create-streaming-distribution-with-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-distribution-config-with-tags)
   (common-lisp:declare
    (common-lisp:ignorable streaming-distribution-config-with-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-streaming-distribution-with-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/streaming-distribution?WithTags"
                                                        "CreateStreamingDistributionWithTags"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-distribution-with-tags))
(common-lisp:progn
 (common-lisp:defun delete-cache-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cache-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/cache-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteCachePolicy"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cache-policy))
(common-lisp:progn
 (common-lisp:defun delete-cloud-front-origin-access-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cloud-front-origin-access-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-identity/cloudfront/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteCloudFrontOriginAccessIdentity"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cloud-front-origin-access-identity))
(common-lisp:progn
 (common-lisp:defun delete-continuous-deployment-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-continuous-deployment-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/continuous-deployment-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteContinuousDeploymentPolicy"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-continuous-deployment-policy))
(common-lisp:progn
 (common-lisp:defun delete-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteDistribution"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-distribution))
(common-lisp:progn
 (common-lisp:defun delete-field-level-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-field-level-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteFieldLevelEncryptionConfig"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-field-level-encryption-config))
(common-lisp:progn
 (common-lisp:defun delete-field-level-encryption-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-field-level-encryption-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption-profile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteFieldLevelEncryptionProfile"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-field-level-encryption-profile))
(common-lisp:progn
 (common-lisp:defun delete-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name if-match)
   (common-lisp:declare (common-lisp:ignorable name if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteFunction"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-function))
(common-lisp:progn
 (common-lisp:defun delete-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-key-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/key-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteKeyGroup"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-key-group))
(common-lisp:progn
 (common-lisp:defun delete-monitoring-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id)
   (common-lisp:declare (common-lisp:ignorable distribution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-monitoring-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributions/~A/monitoring-subscription/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))))
                                                        "DeleteMonitoringSubscription"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-monitoring-subscription))
(common-lisp:progn
 (common-lisp:defun delete-origin-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-origin-access-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-control/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteOriginAccessControl"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-origin-access-control))
(common-lisp:progn
 (common-lisp:defun delete-origin-request-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-origin-request-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-request-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteOriginRequestPolicy"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-origin-request-policy))
(common-lisp:progn
 (common-lisp:defun delete-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/public-key/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeletePublicKey"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-public-key))
(common-lisp:progn
 (common-lisp:defun delete-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name arn)
   (common-lisp:declare (common-lisp:ignorable name arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-realtime-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/delete-realtime-log-config/"
                                                        "DeleteRealtimeLogConfig"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-realtime-log-config))
(common-lisp:progn
 (common-lisp:defun delete-response-headers-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-response-headers-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/response-headers-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteResponseHeadersPolicy"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-response-headers-policy))
(common-lisp:progn
 (common-lisp:defun delete-streaming-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id if-match)
   (common-lisp:declare (common-lisp:ignorable id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-streaming-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/streaming-distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteStreamingDistribution"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-streaming-distribution))
(common-lisp:progn
 (common-lisp:defun describe-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stage)
   (common-lisp:declare (common-lisp:ignorable name stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A/describe"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeFunction"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-function))
(common-lisp:progn
 (common-lisp:defun get-cache-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cache-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/cache-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCachePolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cache-policy))
(common-lisp:progn
 (common-lisp:defun get-cache-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cache-policy-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/cache-policy/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCachePolicyConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cache-policy-config))
(common-lisp:progn
 (common-lisp:defun get-cloud-front-origin-access-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cloud-front-origin-access-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-identity/cloudfront/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCloudFrontOriginAccessIdentity"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cloud-front-origin-access-identity))
(common-lisp:progn
 (common-lisp:defun get-cloud-front-origin-access-identity-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cloud-front-origin-access-identity-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-identity/cloudfront/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetCloudFrontOriginAccessIdentityConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cloud-front-origin-access-identity-config))
(common-lisp:progn
 (common-lisp:defun get-continuous-deployment-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-continuous-deployment-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/continuous-deployment-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetContinuousDeploymentPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-continuous-deployment-policy))
(common-lisp:progn
 (common-lisp:defun get-continuous-deployment-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-continuous-deployment-policy-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/continuous-deployment-policy/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetContinuousDeploymentPolicyConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-continuous-deployment-policy-config))
(common-lisp:progn
 (common-lisp:defun get-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution))
(common-lisp:progn
 (common-lisp:defun get-distribution-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-distribution-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetDistributionConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution-config))
(common-lisp:progn
 (common-lisp:defun get-field-level-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-field-level-encryption-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFieldLevelEncryption"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-field-level-encryption))
(common-lisp:progn
 (common-lisp:defun get-field-level-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-field-level-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFieldLevelEncryptionConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-field-level-encryption-config))
(common-lisp:progn
 (common-lisp:defun get-field-level-encryption-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-field-level-encryption-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption-profile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFieldLevelEncryptionProfile"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-field-level-encryption-profile))
(common-lisp:progn
 (common-lisp:defun get-field-level-encryption-profile-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-field-level-encryption-profile-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption-profile/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFieldLevelEncryptionProfileConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-field-level-encryption-profile-config))
(common-lisp:progn
 (common-lisp:defun get-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stage)
   (common-lisp:declare (common-lisp:ignorable name stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetFunction"
                                                        "2020-05-31")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-function))
(common-lisp:progn
 (common-lisp:defun get-invalidation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id id)
   (common-lisp:declare (common-lisp:ignorable distribution-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-invalidation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/invalidation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetInvalidation"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-invalidation))
(common-lisp:progn
 (common-lisp:defun get-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/key-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetKeyGroup"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-group))
(common-lisp:progn
 (common-lisp:defun get-key-group-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-group-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/key-group/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetKeyGroupConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-group-config))
(common-lisp:progn
 (common-lisp:defun get-monitoring-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id)
   (common-lisp:declare (common-lisp:ignorable distribution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-monitoring-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributions/~A/monitoring-subscription/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))))
                                                        "GetMonitoringSubscription"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-monitoring-subscription))
(common-lisp:progn
 (common-lisp:defun get-origin-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-origin-access-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-control/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetOriginAccessControl"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-origin-access-control))
(common-lisp:progn
 (common-lisp:defun get-origin-access-control-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-origin-access-control-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-control/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetOriginAccessControlConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-origin-access-control-config))
(common-lisp:progn
 (common-lisp:defun get-origin-request-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-origin-request-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-request-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetOriginRequestPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-origin-request-policy))
(common-lisp:progn
 (common-lisp:defun get-origin-request-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-origin-request-policy-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-request-policy/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetOriginRequestPolicyConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-origin-request-policy-config))
(common-lisp:progn
 (common-lisp:defun get-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/public-key/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetPublicKey"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-key))
(common-lisp:progn
 (common-lisp:defun get-public-key-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-key-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/public-key/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetPublicKeyConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-key-config))
(common-lisp:progn
 (common-lisp:defun get-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name arn)
   (common-lisp:declare (common-lisp:ignorable name arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-realtime-log-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/get-realtime-log-config/"
                                                        "GetRealtimeLogConfig"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-realtime-log-config))
(common-lisp:progn
 (common-lisp:defun get-response-headers-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-response-headers-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/response-headers-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetResponseHeadersPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-response-headers-policy))
(common-lisp:progn
 (common-lisp:defun get-response-headers-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-response-headers-policy-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/response-headers-policy/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetResponseHeadersPolicyConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-response-headers-policy-config))
(common-lisp:progn
 (common-lisp:defun get-streaming-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/streaming-distribution/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetStreamingDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-distribution))
(common-lisp:progn
 (common-lisp:defun get-streaming-distribution-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-streaming-distribution-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/streaming-distribution/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetStreamingDistributionConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-streaming-distribution-config))
(common-lisp:progn
 (common-lisp:defun list-cache-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type marker max-items)
   (common-lisp:declare (common-lisp:ignorable type marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cache-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/cache-policy"
                                                        "ListCachePolicies"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cache-policies))
(common-lisp:progn
 (common-lisp:defun list-cloud-front-origin-access-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cloud-front-origin-access-identities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/origin-access-identity/cloudfront"
                                                        "ListCloudFrontOriginAccessIdentities"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cloud-front-origin-access-identities))
(common-lisp:progn
 (common-lisp:defun list-conflicting-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id alias marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable distribution-id alias marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-conflicting-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/conflicting-alias"
                                                        "ListConflictingAliases"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-conflicting-aliases))
(common-lisp:progn
 (common-lisp:defun list-continuous-deployment-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-continuous-deployment-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/continuous-deployment-policy"
                                                        "ListContinuousDeploymentPolicies"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-continuous-deployment-policies))
(common-lisp:progn
 (common-lisp:defun list-distributions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-distributions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/distribution"
                                                        "ListDistributions"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-cache-policy-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items cache-policy-id)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items cache-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-cache-policy-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributionsByCachePolicyId/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cache-policy-id))))
                                                        "ListDistributionsByCachePolicyId"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-cache-policy-id))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items key-group-id)
   (common-lisp:declare (common-lisp:ignorable marker max-items key-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-key-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributionsByKeyGroupId/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'key-group-id))))
                                                        "ListDistributionsByKeyGroup"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-key-group))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-origin-request-policy-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items
                     origin-request-policy-id)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items origin-request-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-origin-request-policy-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributionsByOriginRequestPolicyId/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'origin-request-policy-id))))
                                                        "ListDistributionsByOriginRequestPolicyId"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-origin-request-policy-id))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items realtime-log-config-name
                     realtime-log-config-arn)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items realtime-log-config-name
     realtime-log-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-realtime-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/distributionsByRealtimeLogConfig/"
                                                        "ListDistributionsByRealtimeLogConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-realtime-log-config))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-response-headers-policy-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items
                     response-headers-policy-id)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items response-headers-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-response-headers-policy-id-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributionsByResponseHeadersPolicyId/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'response-headers-policy-id))))
                                                        "ListDistributionsByResponseHeadersPolicyId"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-response-headers-policy-id))
(common-lisp:progn
 (common-lisp:defun list-distributions-by-web-aclid
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items web-aclid)
   (common-lisp:declare (common-lisp:ignorable marker max-items web-aclid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distributions-by-web-aclid-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distributionsByWebACLId/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'web-aclid))))
                                                        "ListDistributionsByWebACLId"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distributions-by-web-aclid))
(common-lisp:progn
 (common-lisp:defun list-field-level-encryption-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-field-level-encryption-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/field-level-encryption"
                                                        "ListFieldLevelEncryptionConfigs"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-field-level-encryption-configs))
(common-lisp:progn
 (common-lisp:defun list-field-level-encryption-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-field-level-encryption-profiles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/field-level-encryption-profile"
                                                        "ListFieldLevelEncryptionProfiles"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-field-level-encryption-profiles))
(common-lisp:progn
 (common-lisp:defun list-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items stage)
   (common-lisp:declare (common-lisp:ignorable marker max-items stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/function"
                                                        "ListFunctions"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-functions))
(common-lisp:progn
 (common-lisp:defun list-invalidations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-id marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable distribution-id marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invalidations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/invalidation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'distribution-id))))
                                                        "ListInvalidations"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invalidations))
(common-lisp:progn
 (common-lisp:defun list-key-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-key-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/key-group"
                                                        "ListKeyGroups"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-key-groups))
(common-lisp:progn
 (common-lisp:defun list-origin-access-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-origin-access-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/origin-access-control"
                                                        "ListOriginAccessControls"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-origin-access-controls))
(common-lisp:progn
 (common-lisp:defun list-origin-request-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type marker max-items)
   (common-lisp:declare (common-lisp:ignorable type marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-origin-request-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/origin-request-policy"
                                                        "ListOriginRequestPolicies"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-origin-request-policies))
(common-lisp:progn
 (common-lisp:defun list-public-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-public-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/public-key"
                                                        "ListPublicKeys"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-public-keys))
(common-lisp:progn
 (common-lisp:defun list-realtime-log-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items marker)
   (common-lisp:declare (common-lisp:ignorable max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-realtime-log-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/realtime-log-config"
                                                        "ListRealtimeLogConfigs"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-realtime-log-configs))
(common-lisp:progn
 (common-lisp:defun list-response-headers-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type marker max-items)
   (common-lisp:declare (common-lisp:ignorable type marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-response-headers-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/response-headers-policy"
                                                        "ListResponseHeadersPolicies"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-response-headers-policies))
(common-lisp:progn
 (common-lisp:defun list-streaming-distributions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-streaming-distributions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/streaming-distribution"
                                                        "ListStreamingDistributions"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-streaming-distributions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource)
   (common-lisp:declare (common-lisp:ignorable resource))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        "/2020-05-31/tagging"
                                                        "ListTagsForResource"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun publish-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name if-match)
   (common-lisp:declare (common-lisp:ignorable name if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A/publish"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PublishFunction"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-function))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tags)
   (common-lisp:declare (common-lisp:ignorable resource tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/tagging?Operation=Tag"
                                                        "TagResource"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name if-match stage event-object)
   (common-lisp:declare
    (common-lisp:ignorable name if-match stage event-object))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A/test"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "TestFunction"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'test-function))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/2020-05-31/tagging?Operation=Untag"
                                                        "UntagResource"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-cache-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cache-policy-config id if-match)
   (common-lisp:declare
    (common-lisp:ignorable cache-policy-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cache-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/cache-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateCachePolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cache-policy))
(common-lisp:progn
 (common-lisp:defun update-cloud-front-origin-access-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cloud-front-origin-access-identity-config
                     id if-match)
   (common-lisp:declare
    (common-lisp:ignorable cloud-front-origin-access-identity-config id
     if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cloud-front-origin-access-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-identity/cloudfront/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateCloudFrontOriginAccessIdentity"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cloud-front-origin-access-identity))
(common-lisp:progn
 (common-lisp:defun update-continuous-deployment-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continuous-deployment-policy-config id
                     if-match)
   (common-lisp:declare
    (common-lisp:ignorable continuous-deployment-policy-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-continuous-deployment-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/continuous-deployment-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateContinuousDeploymentPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-continuous-deployment-policy))
(common-lisp:progn
 (common-lisp:defun update-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-config id if-match)
   (common-lisp:declare
    (common-lisp:ignorable distribution-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution))
(common-lisp:progn
 (common-lisp:defun update-distribution-with-staging-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id staging-distribution-id if-match)
   (common-lisp:declare
    (common-lisp:ignorable id staging-distribution-id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-distribution-with-staging-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/distribution/~A/promote-staging-config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateDistributionWithStagingConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution-with-staging-config))
(common-lisp:progn
 (common-lisp:defun update-field-level-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key field-level-encryption-config id
                     if-match)
   (common-lisp:declare
    (common-lisp:ignorable field-level-encryption-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-field-level-encryption-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateFieldLevelEncryptionConfig"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-field-level-encryption-config))
(common-lisp:progn
 (common-lisp:defun update-field-level-encryption-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key field-level-encryption-profile-config id
                     if-match)
   (common-lisp:declare
    (common-lisp:ignorable field-level-encryption-profile-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-field-level-encryption-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/field-level-encryption-profile/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateFieldLevelEncryptionProfile"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-field-level-encryption-profile))
(common-lisp:progn
 (common-lisp:defun update-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name if-match function-config
                     function-code)
   (common-lisp:declare
    (common-lisp:ignorable name if-match function-config function-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/function/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateFunction"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-function))
(common-lisp:progn
 (common-lisp:defun update-key-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-group-config id if-match)
   (common-lisp:declare (common-lisp:ignorable key-group-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-key-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/key-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateKeyGroup"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-key-group))
(common-lisp:progn
 (common-lisp:defun update-origin-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origin-access-control-config id if-match)
   (common-lisp:declare
    (common-lisp:ignorable origin-access-control-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-origin-access-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-access-control/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateOriginAccessControl"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-origin-access-control))
(common-lisp:progn
 (common-lisp:defun update-origin-request-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origin-request-policy-config id if-match)
   (common-lisp:declare
    (common-lisp:ignorable origin-request-policy-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-origin-request-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/origin-request-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateOriginRequestPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-origin-request-policy))
(common-lisp:progn
 (common-lisp:defun update-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key public-key-config id if-match)
   (common-lisp:declare (common-lisp:ignorable public-key-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/public-key/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdatePublicKey"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-public-key))
(common-lisp:progn
 (common-lisp:defun update-realtime-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-points fields name arn sampling-rate)
   (common-lisp:declare
    (common-lisp:ignorable end-points fields name arn sampling-rate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-realtime-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        "/2020-05-31/realtime-log-config/"
                                                        "UpdateRealtimeLogConfig"
                                                        "2020-05-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-realtime-log-config))
(common-lisp:progn
 (common-lisp:defun update-response-headers-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key response-headers-policy-config id
                     if-match)
   (common-lisp:declare
    (common-lisp:ignorable response-headers-policy-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-response-headers-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/response-headers-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateResponseHeadersPolicy"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-response-headers-policy))
(common-lisp:progn
 (common-lisp:defun update-streaming-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key streaming-distribution-config id
                     if-match)
   (common-lisp:declare
    (common-lisp:ignorable streaming-distribution-config id if-match))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-streaming-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudfront-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2020-05-31/streaming-distribution/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateStreamingDistribution"
                                                        "2020-05-31"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-streaming-distribution))
