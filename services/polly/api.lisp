;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/polly/api
  (:use)
  (:nicknames #:aws/polly)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/polly/api)
(common-lisp:progn
 (common-lisp:defclass polly-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "polly"))
 (common-lisp:export 'polly-request))
(common-lisp:progn
 (common-lisp:define-condition polly-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'polly-error))
(common-lisp:defvar *error-map*
  '(("EngineNotSupportedException" . engine-not-supported-exception)
    ("InvalidLexiconException" . invalid-lexicon-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidS3BucketException" . invalid-s3bucket-exception)
    ("InvalidS3KeyException" . invalid-s3key-exception)
    ("InvalidSampleRateException" . invalid-sample-rate-exception)
    ("InvalidSnsTopicArnException" . invalid-sns-topic-arn-exception)
    ("InvalidSsmlException" . invalid-ssml-exception)
    ("InvalidTaskIdException" . invalid-task-id-exception)
    ("LanguageNotSupportedException" . language-not-supported-exception)
    ("LexiconNotFoundException" . lexicon-not-found-exception)
    ("LexiconSizeExceededException" . lexicon-size-exceeded-exception)
    ("MarksNotSupportedForFormatException"
     . marks-not-supported-for-format-exception)
    ("MaxLexemeLengthExceededException" . max-lexeme-length-exceeded-exception)
    ("MaxLexiconsNumberExceededException"
     . max-lexicons-number-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("SsmlMarksNotSupportedForTextTypeException"
     . ssml-marks-not-supported-for-text-type-exception)
    ("SynthesisTaskNotFoundException" . synthesis-task-not-found-exception)
    ("TextLengthExceededException" . text-length-exceeded-exception)
    ("UnsupportedPlsAlphabetException" . unsupported-pls-alphabet-exception)
    ("UnsupportedPlsLanguageException" . unsupported-pls-language-exception)))
(common-lisp:deftype alphabet () 'common-lisp:string)
(common-lisp:deftype audio-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lexicon-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lexicon-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-input 'make-delete-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lexicon-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lexicon-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-output 'make-delete-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lexicon-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-voices-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-voices-input-"))
   (engine common-lisp:nil :type (common-lisp:or engine common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (include-additional-language-codes common-lisp:nil :type
    (common-lisp:or include-additional-language-codes common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-voices-input 'make-describe-voices-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-voices-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-voices-output-"))
   (voices common-lisp:nil :type (common-lisp:or voice-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-voices-output 'make-describe-voices-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voices))
      (common-lisp:list
       (common-lisp:cons "Voices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-voices-output))
   common-lisp:nil))
(common-lisp:deftype engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype engine-list () '(trivial-types:proper-list engine))
 (common-lisp:defun |make-engine-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition engine-not-supported-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       engine-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'engine-not-supported-exception
                    'engine-not-supported-exception-message)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype gender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-lexicon-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lexicon-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-input 'make-get-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lexicon-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lexicon-output-"))
   (lexicon common-lisp:nil :type (common-lisp:or lexicon common-lisp:null))
   (lexicon-attributes common-lisp:nil :type
    (common-lisp:or lexicon-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-output 'make-get-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon))
      (common-lisp:list
       (common-lisp:cons "Lexicon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-attributes))
      (common-lisp:list
       (common-lisp:cons "LexiconAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-lexicon-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-speech-synthesis-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-speech-synthesis-task-input-"))
   (task-id (common-lisp:error ":task-id is required") :type
    (common-lisp:or task-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-speech-synthesis-task-input
                    'make-get-speech-synthesis-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-speech-synthesis-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-speech-synthesis-task-output-"))
   (synthesis-task common-lisp:nil :type
    (common-lisp:or synthesis-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-speech-synthesis-task-output
                    'make-get-speech-synthesis-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-task))
      (common-lisp:list
       (common-lisp:cons "SynthesisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speech-synthesis-task-output))
   common-lisp:nil))
(common-lisp:deftype include-additional-language-codes () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition invalid-lexicon-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-lexicon-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-lexicon-exception
                    'invalid-lexicon-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-s3bucket-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3bucket-exception
                    'invalid-s3bucket-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3key-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-s3key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3key-exception 'invalid-s3key-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sample-rate-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sample-rate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sample-rate-exception
                    'invalid-sample-rate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sns-topic-arn-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-sns-topic-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-sns-topic-arn-exception
                    'invalid-sns-topic-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ssml-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ssml-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-ssml-exception 'invalid-ssml-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-task-id-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-task-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-task-id-exception
                    'invalid-task-id-exception-message)))
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype language-code-list ()
   '(trivial-types:proper-list language-code))
 (common-lisp:defun |make-language-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype language-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition language-not-supported-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       language-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'language-not-supported-exception
                    'language-not-supported-exception-message)))
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:deftype lexemes-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (lexicon (:copier common-lisp:nil) (:conc-name "struct-shape-lexicon-"))
   (content common-lisp:nil :type
    (common-lisp:or lexicon-content common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lexicon 'make-lexicon))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon))
   common-lisp:nil))
(common-lisp:deftype lexicon-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lexicon-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-lexicon-attributes-"))
   (alphabet common-lisp:nil :type (common-lisp:or alphabet common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (lexicon-arn common-lisp:nil :type
    (common-lisp:or lexicon-arn common-lisp:null))
   (lexemes-count common-lisp:nil :type
    (common-lisp:or lexemes-count common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-attributes 'make-lexicon-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alphabet))
      (common-lisp:list
       (common-lisp:cons "Alphabet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-arn))
      (common-lisp:list
       (common-lisp:cons "LexiconArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexemes-count))
      (common-lisp:list
       (common-lisp:cons "LexemesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon-attributes))
   common-lisp:nil))
(common-lisp:deftype lexicon-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lexicon-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-lexicon-description-"))
   (name common-lisp:nil :type (common-lisp:or lexicon-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or lexicon-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-description 'make-lexicon-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lexicon-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lexicon-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lexicon-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lexicon-description-list ()
   '(trivial-types:proper-list lexicon-description))
 (common-lisp:defun |make-lexicon-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lexicon-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lexicon-name-list ()
   '(trivial-types:proper-list lexicon-name))
 (common-lisp:defun |make-lexicon-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition lexicon-not-found-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lexicon-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lexicon-not-found-exception
                    'lexicon-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition lexicon-size-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lexicon-size-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lexicon-size-exceeded-exception
                    'lexicon-size-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lexicons-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lexicons-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-input 'make-list-lexicons-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lexicons-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lexicons-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lexicons-output-"))
   (lexicons common-lisp:nil :type
    (common-lisp:or lexicon-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-output 'make-list-lexicons-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicons))
      (common-lisp:list
       (common-lisp:cons "Lexicons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-lexicons-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-speech-synthesis-tasks-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-speech-synthesis-tasks-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-speech-synthesis-tasks-input
                    'make-list-speech-synthesis-tasks-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-speech-synthesis-tasks-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-speech-synthesis-tasks-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (synthesis-tasks common-lisp:nil :type
    (common-lisp:or synthesis-tasks common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-speech-synthesis-tasks-output
                    'make-list-speech-synthesis-tasks-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-tasks))
      (common-lisp:list
       (common-lisp:cons "SynthesisTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-speech-synthesis-tasks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition marks-not-supported-for-format-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       marks-not-supported-for-format-exception-message)))
 (common-lisp:export
  (common-lisp:list 'marks-not-supported-for-format-exception
                    'marks-not-supported-for-format-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition max-lexeme-length-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       max-lexeme-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'max-lexeme-length-exceeded-exception
                    'max-lexeme-length-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition max-lexicons-number-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       max-lexicons-number-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'max-lexicons-number-exceeded-exception
                    'max-lexicons-number-exceeded-exception-message)))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:deftype output-s3bucket-name () 'common-lisp:string)
(common-lisp:deftype output-s3key-prefix () 'common-lisp:string)
(common-lisp:deftype output-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-lexicon-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-lexicon-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or lexicon-name common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or lexicon-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-input 'make-put-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-lexicon-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-lexicon-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-lexicon-output-")))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-output 'make-put-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-lexicon-output))
   common-lisp:nil))
(common-lisp:deftype request-characters () 'common-lisp:integer)
(common-lisp:deftype sample-rate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'service-failure-exception-message)))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype speech-mark-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype speech-mark-type-list ()
   '(trivial-types:proper-list speech-mark-type))
 (common-lisp:defun |make-speech-mark-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list speech-mark-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ssml-marks-not-supported-for-text-type-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ssml-marks-not-supported-for-text-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ssml-marks-not-supported-for-text-type-exception
                    'ssml-marks-not-supported-for-text-type-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-speech-synthesis-task-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-speech-synthesis-task-input-"))
   (engine common-lisp:nil :type (common-lisp:or engine common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (lexicon-names common-lisp:nil :type
    (common-lisp:or lexicon-name-list common-lisp:null))
   (output-format (common-lisp:error ":output-format is required") :type
    (common-lisp:or output-format common-lisp:null))
   (output-s3bucket-name
    (common-lisp:error ":output-s3bucket-name is required") :type
    (common-lisp:or output-s3bucket-name common-lisp:null))
   (output-s3key-prefix common-lisp:nil :type
    (common-lisp:or output-s3key-prefix common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or sample-rate common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (speech-mark-types common-lisp:nil :type
    (common-lisp:or speech-mark-type-list common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or text common-lisp:null))
   (text-type common-lisp:nil :type
    (common-lisp:or text-type common-lisp:null))
   (voice-id (common-lisp:error ":voice-id is required") :type
    (common-lisp:or voice-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-speech-synthesis-task-input
                    'make-start-speech-synthesis-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-speech-synthesis-task-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-speech-synthesis-task-output-"))
   (synthesis-task common-lisp:nil :type
    (common-lisp:or synthesis-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-speech-synthesis-task-output
                    'make-start-speech-synthesis-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synthesis-task))
      (common-lisp:list
       (common-lisp:cons "SynthesisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speech-synthesis-task-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (synthesis-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-synthesis-task-"))
   (engine common-lisp:nil :type (common-lisp:or engine common-lisp:null))
   (task-id common-lisp:nil :type (common-lisp:or task-id common-lisp:null))
   (task-status common-lisp:nil :type
    (common-lisp:or task-status common-lisp:null))
   (task-status-reason common-lisp:nil :type
    (common-lisp:or task-status-reason common-lisp:null))
   (output-uri common-lisp:nil :type
    (common-lisp:or output-uri common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (request-characters common-lisp:nil :type
    (common-lisp:or request-characters common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (lexicon-names common-lisp:nil :type
    (common-lisp:or lexicon-name-list common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or output-format common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or sample-rate common-lisp:null))
   (speech-mark-types common-lisp:nil :type
    (common-lisp:or speech-mark-type-list common-lisp:null))
   (text-type common-lisp:nil :type
    (common-lisp:or text-type common-lisp:null))
   (voice-id common-lisp:nil :type (common-lisp:or voice-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'synthesis-task 'make-synthesis-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input synthesis-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input synthesis-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "TaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status-reason))
      (common-lisp:list
       (common-lisp:cons "TaskStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-uri))
      (common-lisp:list
       (common-lisp:cons "OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-characters))
      (common-lisp:list
       (common-lisp:cons "RequestCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input synthesis-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition synthesis-task-not-found-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       synthesis-task-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'synthesis-task-not-found-exception
                    'synthesis-task-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype synthesis-tasks ()
   '(trivial-types:proper-list synthesis-task))
 (common-lisp:defun |make-synthesis-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list synthesis-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (synthesize-speech-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-synthesize-speech-input-"))
   (engine common-lisp:nil :type (common-lisp:or engine common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (lexicon-names common-lisp:nil :type
    (common-lisp:or lexicon-name-list common-lisp:null))
   (output-format (common-lisp:error ":output-format is required") :type
    (common-lisp:or output-format common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or sample-rate common-lisp:null))
   (speech-mark-types common-lisp:nil :type
    (common-lisp:or speech-mark-type-list common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or text common-lisp:null))
   (text-type common-lisp:nil :type
    (common-lisp:or text-type common-lisp:null))
   (voice-id (common-lisp:error ":voice-id is required") :type
    (common-lisp:or voice-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-input 'make-synthesize-speech-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lexicon-names))
      (common-lisp:list
       (common-lisp:cons "LexiconNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-mark-types))
      (common-lisp:list
       (common-lisp:cons "SpeechMarkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-type))
      (common-lisp:list
       (common-lisp:cons "TextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (synthesize-speech-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-synthesize-speech-output-"))
   (audio-stream common-lisp:nil :type
    (common-lisp:or audio-stream common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (request-characters common-lisp:nil :type
    (common-lisp:or request-characters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-output 'make-synthesize-speech-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-characters))
      (common-lisp:cons "x-amzn-RequestCharacters"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "AudioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          synthesize-speech-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:deftype task-status-reason () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition text-length-exceeded-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       text-length-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'text-length-exceeded-exception
                    'text-length-exceeded-exception-message)))
(common-lisp:deftype text-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-pls-alphabet-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pls-alphabet-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-alphabet-exception
                    'unsupported-pls-alphabet-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-pls-language-exception
     (polly-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-pls-language-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-language-exception
                    'unsupported-pls-language-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (voice (:copier common-lisp:nil) (:conc-name "struct-shape-voice-"))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or voice-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (language-name common-lisp:nil :type
    (common-lisp:or language-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or voice-name common-lisp:null))
   (additional-language-codes common-lisp:nil :type
    (common-lisp:or language-code-list common-lisp:null))
   (supported-engines common-lisp:nil :type
    (common-lisp:or engine-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'voice 'make-voice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-name))
      (common-lisp:list
       (common-lisp:cons "LanguageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-language-codes))
      (common-lisp:list
       (common-lisp:cons "AdditionalLanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-engines))
      (common-lisp:list
       (common-lisp:cons "SupportedEngines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice))
   common-lisp:nil))
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype voice-list () '(trivial-types:proper-list voice))
 (common-lisp:defun |make-voice-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list voice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype voice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "DeleteLexicon"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lexicon))
(common-lisp:progn
 (common-lisp:defun describe-voices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code
                     include-additional-language-codes next-token)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code
     include-additional-language-codes next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-voices-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/voices"
                                                        "DescribeVoices"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-voices))
(common-lisp:progn
 (common-lisp:defun get-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "GetLexicon"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lexicon))
(common-lisp:progn
 (common-lisp:defun get-speech-synthesis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-speech-synthesis-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/synthesisTasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'task-id))))
                                                        "GetSpeechSynthesisTask"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-speech-synthesis-task))
(common-lisp:progn
 (common-lisp:defun list-lexicons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lexicons-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/lexicons"
                                                        "ListLexicons"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lexicons))
(common-lisp:progn
 (common-lisp:defun list-speech-synthesis-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token status)
   (common-lisp:declare (common-lisp:ignorable max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-speech-synthesis-tasks-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/synthesisTasks"
                                                        "ListSpeechSynthesisTasks"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-speech-synthesis-tasks))
(common-lisp:progn
 (common-lisp:defun put-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name content)
   (common-lisp:declare (common-lisp:ignorable name content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/lexicons/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'lexicon-name))))
                                                        "PutLexicon"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-lexicon))
(common-lisp:progn
 (common-lisp:defun start-speech-synthesis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code lexicon-names
                     output-format output-s3bucket-name output-s3key-prefix
                     sample-rate sns-topic-arn speech-mark-types text text-type
                     voice-id)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code lexicon-names output-format
     output-s3bucket-name output-s3key-prefix sample-rate sns-topic-arn
     speech-mark-types text text-type voice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-speech-synthesis-task-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/synthesisTasks"
                                                        "StartSpeechSynthesisTask"
                                                        "2016-06-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-speech-synthesis-task))
(common-lisp:progn
 (common-lisp:defun synthesize-speech
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine language-code lexicon-names
                     output-format sample-rate speech-mark-types text text-type
                     voice-id)
   (common-lisp:declare
    (common-lisp:ignorable engine language-code lexicon-names output-format
     sample-rate speech-mark-types text text-type voice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-synthesize-speech-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'polly-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/speech"
                                                        "SynthesizeSpeech"
                                                        "2016-06-10")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'synthesize-speech))
