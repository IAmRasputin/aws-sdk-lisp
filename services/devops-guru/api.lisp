;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/devops-guru/api
  (:use)
  (:nicknames #:aws/devops-guru)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/devops-guru/api)
(common-lisp:progn
 (common-lisp:defclass devops-guru-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "devops-guru"))
 (common-lisp:export 'devops-guru-request))
(common-lisp:progn
 (common-lisp:define-condition devops-guru-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'devops-guru-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-health-"))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (insight common-lisp:nil :type
    (common-lisp:or account-insight-health common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-health 'make-account-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "Insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-healths ()
   '(trivial-types:proper-list account-health))
 (common-lisp:defun |make-account-healths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-health))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (account-insight-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-insight-health-"))
   (open-proactive-insights common-lisp:nil :type
    (common-lisp:or num-open-proactive-insights common-lisp:null))
   (open-reactive-insights common-lisp:nil :type
    (common-lisp:or num-open-reactive-insights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-insight-health 'make-account-insight-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-insight-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-insight-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-proactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-reactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-insight-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-notification-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-notification-channel-request-"))
   (config (common-lisp:error ":config is required") :type
    (common-lisp:or notification-channel-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-notification-channel-request
                    'make-add-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-notification-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-notification-channel-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or notification-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-notification-channel-response
                    'make-add-notification-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amazon-code-guru-profiler-integration (:copier common-lisp:nil)
      (:conc-name "struct-shape-amazon-code-guru-profiler-integration-"))
   (status common-lisp:nil :type
    (common-lisp:or event-source-opt-in-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amazon-code-guru-profiler-integration
                    'make-amazon-code-guru-profiler-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-code-guru-profiler-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-code-guru-profiler-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-code-guru-profiler-integration))
   common-lisp:nil))
(common-lisp:deftype analyzed-resource-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (anomalous-log-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomalous-log-group-"))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null))
   (impact-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (impact-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (number-of-log-lines-scanned common-lisp:nil :type
    (common-lisp:or number-of-log-lines-scanned common-lisp:null))
   (log-anomaly-showcases common-lisp:nil :type
    (common-lisp:or log-anomaly-showcases common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomalous-log-group 'make-anomalous-log-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomalous-log-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomalous-log-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-start-time))
      (common-lisp:list
       (common-lisp:cons "ImpactStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact-end-time))
      (common-lisp:list
       (common-lisp:cons "ImpactEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-log-lines-scanned))
      (common-lisp:list
       (common-lisp:cons "NumberOfLogLinesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-anomaly-showcases))
      (common-lisp:list
       (common-lisp:cons "LogAnomalyShowcases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomalous-log-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomalous-log-groups ()
   '(trivial-types:proper-list anomalous-log-group))
 (common-lisp:defun |make-anomalous-log-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomalous-log-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-description () 'common-lisp:string)
(common-lisp:deftype anomaly-id () 'common-lisp:string)
(common-lisp:deftype anomaly-limit () 'common-lisp:double-float)
(common-lisp:deftype anomaly-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-reported-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-reported-time-range-"))
   (open-time (common-lisp:error ":open-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (close-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-reported-time-range
                    'make-anomaly-reported-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-reported-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-reported-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-time))
      (common-lisp:list
       (common-lisp:cons "OpenTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'close-time))
      (common-lisp:list
       (common-lisp:cons "CloseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-reported-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-resource-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-resource 'make-anomaly-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-resources ()
   '(trivial-types:proper-list anomaly-resource))
 (common-lisp:defun |make-anomaly-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype anomaly-severity () 'common-lisp:string)
(common-lisp:deftype anomaly-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-source-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-source-details-"))
   (cloud-watch-metrics common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-details common-lisp:null))
   (performance-insights-metrics common-lisp:nil :type
    (common-lisp:or performance-insights-metrics-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-source-details 'make-anomaly-source-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-metrics))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-metrics))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-source-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-source-metadata-"))
   (source common-lisp:nil :type
    (common-lisp:or anomaly-source common-lisp:null))
   (source-resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (source-resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-source-metadata 'make-anomaly-source-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-resource-name))
      (common-lisp:list
       (common-lisp:cons "SourceResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-resource-type))
      (common-lisp:list
       (common-lisp:cons "SourceResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-source-metadata))
   common-lisp:nil))
(common-lisp:deftype anomaly-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-time-range-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-time-range 'make-anomaly-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-time-range))
   common-lisp:nil))
(common-lisp:deftype anomaly-type () 'common-lisp:string)
(common-lisp:deftype app-boundary-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associated-resource-arns ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-associated-resource-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channels ()
   '(trivial-types:proper-list notification-channel))
 (common-lisp:defun |make-channels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-collection (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-collection-"))
   (stack-names common-lisp:nil :type
    (common-lisp:or stack-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-collection
                    'make-cloud-formation-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-names))
      (common-lisp:list
       (common-lisp:cons "StackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-collection-filter-"))
   (stack-names common-lisp:nil :type
    (common-lisp:or stack-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-collection-filter
                    'make-cloud-formation-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-names))
      (common-lisp:list
       (common-lisp:cons "StackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-cost-estimation-resource-collection-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cloud-formation-cost-estimation-resource-collection-filter-"))
   (stack-names common-lisp:nil :type
    (common-lisp:or cost-estimation-stack-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-cost-estimation-resource-collection-filter
                    'make-cloud-formation-cost-estimation-resource-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-cost-estimation-resource-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-cost-estimation-resource-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-names))
      (common-lisp:list
       (common-lisp:cons "StackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-cost-estimation-resource-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-health-"))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (insight common-lisp:nil :type
    (common-lisp:or insight-health common-lisp:null))
   (analyzed-resource-count common-lisp:nil :type
    (common-lisp:or analyzed-resource-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-health 'make-cloud-formation-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "Insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyzed-resource-count))
      (common-lisp:list
       (common-lisp:cons "AnalyzedResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-formation-healths ()
   '(trivial-types:proper-list cloud-formation-health))
 (common-lisp:defun |make-cloud-formation-healths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cloud-formation-health))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-watch-metric-data-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-metrics-data-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-metrics-data-summary-"))
   (timestamp-metric-value-pair-list common-lisp:nil :type
    (common-lisp:or timestamp-metric-value-pair-list common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or cloud-watch-metric-data-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-metrics-data-summary
                    'make-cloud-watch-metrics-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-metric-value-pair-list))
      (common-lisp:list
       (common-lisp:cons "TimestampMetricValuePairList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-metrics-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-metrics-detail-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-metric-name common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-namespace common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-dimensions common-lisp:null))
   (stat common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-stat common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-unit common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-period common-lisp:null))
   (metric-data-summary common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-data-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-metrics-detail
                    'make-cloud-watch-metrics-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stat))
      (common-lisp:list
       (common-lisp:cons "Stat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data-summary))
      (common-lisp:list
       (common-lisp:cons "MetricDataSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-metrics-details ()
   '(trivial-types:proper-list cloud-watch-metrics-detail))
 (common-lisp:defun |make-cloud-watch-metrics-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-metrics-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-metrics-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-metrics-dimension-"))
   (name common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-dimension-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or cloud-watch-metrics-dimension-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-metrics-dimension
                    'make-cloud-watch-metrics-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-metrics-dimension))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-metrics-dimension-name () 'common-lisp:string)
(common-lisp:deftype cloud-watch-metrics-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cloud-watch-metrics-dimensions ()
   '(trivial-types:proper-list cloud-watch-metrics-dimension))
 (common-lisp:defun |make-cloud-watch-metrics-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-metrics-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-watch-metrics-metric-name () 'common-lisp:string)
(common-lisp:deftype cloud-watch-metrics-namespace () 'common-lisp:string)
(common-lisp:deftype cloud-watch-metrics-period () 'common-lisp:integer)
(common-lisp:deftype cloud-watch-metrics-stat () 'common-lisp:string)
(common-lisp:deftype cloud-watch-metrics-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:deftype cost () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-estimation-resource-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-estimation-resource-collection-filter-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-cost-estimation-resource-collection-filter
                    common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-cost-estimation-resource-collection-filters
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-estimation-resource-collection-filter
                    'make-cost-estimation-resource-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-resource-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-resource-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-resource-collection-filter))
   common-lisp:nil))
(common-lisp:deftype cost-estimation-service-resource-count ()
  'common-lisp:integer)
(common-lisp:deftype cost-estimation-service-resource-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-estimation-stack-names ()
   '(trivial-types:proper-list stack-name))
 (common-lisp:defun |make-cost-estimation-stack-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-estimation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-estimation-tag-values ()
   '(trivial-types:proper-list tag-value))
 (common-lisp:defun |make-cost-estimation-tag-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-estimation-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-estimation-time-range-"))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-estimation-time-range
                    'make-cost-estimation-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-estimation-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-insight-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or insight-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-insight-request 'make-delete-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-insight-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-insight-response 'make-delete-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-health-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-account-health-request
                    'make-describe-account-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-health-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-health-response-"))
   (open-reactive-insights
    (common-lisp:error ":open-reactive-insights is required") :type
    (common-lisp:or num-open-reactive-insights common-lisp:null))
   (open-proactive-insights
    (common-lisp:error ":open-proactive-insights is required") :type
    (common-lisp:or num-open-proactive-insights common-lisp:null))
   (metrics-analyzed (common-lisp:error ":metrics-analyzed is required") :type
    (common-lisp:or num-metrics-analyzed common-lisp:null))
   (resource-hours (common-lisp:error ":resource-hours is required") :type
    (common-lisp:or resource-hours common-lisp:null))
   (analyzed-resource-count common-lisp:nil :type
    (common-lisp:or analyzed-resource-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-health-response
                    'make-describe-account-health-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-reactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-proactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-analyzed))
      (common-lisp:list
       (common-lisp:cons "MetricsAnalyzed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-hours))
      (common-lisp:list
       (common-lisp:cons "ResourceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyzed-resource-count))
      (common-lisp:list
       (common-lisp:cons "AnalyzedResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-health-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-overview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-overview-request-"))
   (from-time (common-lisp:error ":from-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (to-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-overview-request
                    'make-describe-account-overview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-time))
      (common-lisp:list
       (common-lisp:cons "FromTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-time))
      (common-lisp:list
       (common-lisp:cons "ToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-overview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-overview-response-"))
   (reactive-insights (common-lisp:error ":reactive-insights is required")
    :type (common-lisp:or num-reactive-insights common-lisp:null))
   (proactive-insights (common-lisp:error ":proactive-insights is required")
    :type (common-lisp:or num-proactive-insights common-lisp:null))
   (mean-time-to-recover-in-milliseconds
    (common-lisp:error ":mean-time-to-recover-in-milliseconds is required")
    :type
    (common-lisp:or mean-time-to-recover-in-milliseconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-overview-response
                    'make-describe-account-overview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mean-time-to-recover-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MeanTimeToRecoverInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-overview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-anomaly-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-anomaly-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or anomaly-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-request 'make-describe-anomaly-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-anomaly-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-anomaly-response-"))
   (proactive-anomaly common-lisp:nil :type
    (common-lisp:or proactive-anomaly common-lisp:null))
   (reactive-anomaly common-lisp:nil :type
    (common-lisp:or reactive-anomaly common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-anomaly-response
                    'make-describe-anomaly-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-anomaly))
      (common-lisp:list
       (common-lisp:cons "ProactiveAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-anomaly))
      (common-lisp:list
       (common-lisp:cons "ReactiveAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-anomaly-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-sources-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-sources-config-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-event-sources-config-request
                    'make-describe-event-sources-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-sources-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-sources-config-response-"))
   (event-sources common-lisp:nil :type
    (common-lisp:or event-sources-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-sources-config-response
                    'make-describe-event-sources-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-sources))
      (common-lisp:list
       (common-lisp:cons "EventSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-sources-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feedback-request-"))
   (insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feedback-request
                    'make-describe-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feedback-response-"))
   (insight-feedback common-lisp:nil :type
    (common-lisp:or insight-feedback common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feedback-response
                    'make-describe-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-feedback))
      (common-lisp:list
       (common-lisp:cons "InsightFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-insight-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or insight-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-insight-request 'make-describe-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-insight-response-"))
   (proactive-insight common-lisp:nil :type
    (common-lisp:or proactive-insight common-lisp:null))
   (reactive-insight common-lisp:nil :type
    (common-lisp:or reactive-insight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-insight-response
                    'make-describe-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insight))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insight))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-health-request-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (organizational-unit-ids common-lisp:nil :type
    (common-lisp:or organizational-unit-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-health-request
                    'make-describe-organization-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-health-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-health-response-"))
   (open-reactive-insights
    (common-lisp:error ":open-reactive-insights is required") :type
    (common-lisp:or num-open-reactive-insights common-lisp:null))
   (open-proactive-insights
    (common-lisp:error ":open-proactive-insights is required") :type
    (common-lisp:or num-open-proactive-insights common-lisp:null))
   (metrics-analyzed (common-lisp:error ":metrics-analyzed is required") :type
    (common-lisp:or num-metrics-analyzed common-lisp:null))
   (resource-hours (common-lisp:error ":resource-hours is required") :type
    (common-lisp:or resource-hours common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-health-response
                    'make-describe-organization-health-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-reactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-proactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-analyzed))
      (common-lisp:list
       (common-lisp:cons "MetricsAnalyzed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-hours))
      (common-lisp:list
       (common-lisp:cons "ResourceHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-health-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-overview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-overview-request-"))
   (from-time (common-lisp:error ":from-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (to-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (organizational-unit-ids common-lisp:nil :type
    (common-lisp:or organizational-unit-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-overview-request
                    'make-describe-organization-overview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-time))
      (common-lisp:list
       (common-lisp:cons "FromTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-time))
      (common-lisp:list
       (common-lisp:cons "ToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-overview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-organization-overview-response-"))
   (reactive-insights (common-lisp:error ":reactive-insights is required")
    :type (common-lisp:or num-reactive-insights common-lisp:null))
   (proactive-insights (common-lisp:error ":proactive-insights is required")
    :type (common-lisp:or num-proactive-insights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-overview-response
                    'make-describe-organization-overview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-overview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-resource-collection-health-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-resource-collection-health-request-"))
   (organization-resource-collection-type
    (common-lisp:error ":organization-resource-collection-type is required")
    :type
    (common-lisp:or organization-resource-collection-type common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (organizational-unit-ids common-lisp:nil :type
    (common-lisp:or organizational-unit-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or organization-resource-collection-max-results
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-resource-collection-health-request
                    'make-describe-organization-resource-collection-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-resource-collection-type))
      (common-lisp:list
       (common-lisp:cons "OrganizationResourceCollectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-resource-collection-health-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-resource-collection-health-response-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-healths common-lisp:null))
   (service common-lisp:nil :type
    (common-lisp:or service-healths common-lisp:null))
   (account common-lisp:nil :type
    (common-lisp:or account-healths common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-healths common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-resource-collection-health-response
                    'make-describe-organization-resource-collection-health-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-resource-collection-health-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-collection-health-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-collection-health-request-"))
   (resource-collection-type
    (common-lisp:error ":resource-collection-type is required") :type
    (common-lisp:or resource-collection-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-collection-health-request
                    'make-describe-resource-collection-health-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-collection-health-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-resource-collection-health-response-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-healths common-lisp:null))
   (service common-lisp:nil :type
    (common-lisp:or service-healths common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-healths common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-collection-health-response
                    'make-describe-resource-collection-health-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-collection-health-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-service-integration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-service-integration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-service-integration-request
                    'make-describe-service-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-service-integration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-service-integration-response-"))
   (service-integration common-lisp:nil :type
    (common-lisp:or service-integration-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-service-integration-response
                    'make-describe-service-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-integration))
      (common-lisp:list
       (common-lisp:cons "ServiceIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (end-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-end-time-range-"))
   (from-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (to-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'end-time-range 'make-end-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-time))
      (common-lisp:list
       (common-lisp:cons "FromTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-time))
      (common-lisp:list
       (common-lisp:cons "ToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-time-range))
   common-lisp:nil))
(common-lisp:deftype error-message-string () 'common-lisp:string)
(common-lisp:deftype error-name-string () 'common-lisp:string)
(common-lisp:deftype error-quota-code-string () 'common-lisp:string)
(common-lisp:deftype error-service-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or event-source common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or event-name common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or event-data-source common-lisp:null))
   (event-class common-lisp:nil :type
    (common-lisp:or event-class common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or event-resources common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "EventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:deftype event-class () 'common-lisp:string)
(common-lisp:deftype event-data-source () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:deftype event-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-resource-"))
   (type common-lisp:nil :type
    (common-lisp:or event-resource-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or event-resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-resource 'make-event-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-resource))
   common-lisp:nil))
(common-lisp:deftype event-resource-arn () 'common-lisp:string)
(common-lisp:deftype event-resource-name () 'common-lisp:string)
(common-lisp:deftype event-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-resources ()
   '(trivial-types:proper-list event-resource))
 (common-lisp:defun |make-event-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-source () 'common-lisp:string)
(common-lisp:deftype event-source-opt-in-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-sources-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-sources-config-"))
   (amazon-code-guru-profiler common-lisp:nil :type
    (common-lisp:or amazon-code-guru-profiler-integration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-sources-config 'make-event-sources-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-sources-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-sources-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-code-guru-profiler))
      (common-lisp:list
       (common-lisp:cons "AmazonCodeGuruProfiler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-sources-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-time-range-"))
   (from-time (common-lisp:error ":from-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (to-time (common-lisp:error ":to-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-time-range 'make-event-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-time))
      (common-lisp:list
       (common-lisp:cons "FromTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-time))
      (common-lisp:list
       (common-lisp:cons "ToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype events () '(trivial-types:proper-list event))
 (common-lisp:defun |make-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype explanation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-estimation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-estimation-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimation-request
                    'make-get-cost-estimation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-estimation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-estimation-response-"))
   (resource-collection common-lisp:nil :type
    (common-lisp:or cost-estimation-resource-collection-filter
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cost-estimation-status common-lisp:null))
   (costs common-lisp:nil :type
    (common-lisp:or service-resource-costs common-lisp:null))
   (time-range common-lisp:nil :type
    (common-lisp:or cost-estimation-time-range common-lisp:null))
   (total-cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimation-response
                    'make-get-cost-estimation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'costs))
      (common-lisp:list
       (common-lisp:cons "Costs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "TimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cost))
      (common-lisp:list
       (common-lisp:cons "TotalCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-collection-request-"))
   (resource-collection-type
    (common-lisp:error ":resource-collection-type is required") :type
    (common-lisp:or resource-collection-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-collection-request
                    'make-get-resource-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-collection-response-"))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-collection-response
                    'make-get-resource-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-collection-response))
   common-lisp:nil))
(common-lisp:deftype insight-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (insight-feedback (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-feedback-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (feedback common-lisp:nil :type
    (common-lisp:or insight-feedback-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-feedback 'make-insight-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-feedback))
   common-lisp:nil))
(common-lisp:deftype insight-feedback-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (insight-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-health-"))
   (open-proactive-insights common-lisp:nil :type
    (common-lisp:or num-open-proactive-insights common-lisp:null))
   (open-reactive-insights common-lisp:nil :type
    (common-lisp:or num-open-reactive-insights common-lisp:null))
   (mean-time-to-recover-in-milliseconds common-lisp:nil :type
    (common-lisp:or mean-time-to-recover-in-milliseconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight-health 'make-insight-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-proactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-reactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mean-time-to-recover-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MeanTimeToRecoverInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-health))
   common-lisp:nil))
(common-lisp:deftype insight-id () 'common-lisp:string)
(common-lisp:deftype insight-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-severities ()
   '(trivial-types:proper-list insight-severity))
 (common-lisp:defun |make-insight-severities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-severity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype insight-severity () 'common-lisp:string)
(common-lisp:deftype insight-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-statuses ()
   '(trivial-types:proper-list insight-status))
 (common-lisp:defun |make-insight-statuses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-time-range-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-time-range 'make-insight-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-time-range))
   common-lisp:nil))
(common-lisp:deftype insight-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-anomalies-for-insight-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-anomalies-for-insight-filters-"))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-anomalies-for-insight-filters
                    'make-list-anomalies-for-insight-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-filters))
   common-lisp:nil))
(common-lisp:deftype list-anomalies-for-insight-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-anomalies-for-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-anomalies-for-insight-request-"))
   (insight-id (common-lisp:error ":insight-id is required") :type
    (common-lisp:or insight-id common-lisp:null))
   (start-time-range common-lisp:nil :type
    (common-lisp:or start-time-range common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-anomalies-for-insight-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or list-anomalies-for-insight-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-anomalies-for-insight-request
                    'make-list-anomalies-for-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "StartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-anomalies-for-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-anomalies-for-insight-response-"))
   (proactive-anomalies common-lisp:nil :type
    (common-lisp:or proactive-anomalies common-lisp:null))
   (reactive-anomalies common-lisp:nil :type
    (common-lisp:or reactive-anomalies common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-anomalies-for-insight-response
                    'make-list-anomalies-for-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-anomalies))
      (common-lisp:list
       (common-lisp:cons "ProactiveAnomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-anomalies))
      (common-lisp:list
       (common-lisp:cons "ReactiveAnomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalies-for-insight-response))
   common-lisp:nil))
(common-lisp:deftype list-anomalous-log-groups-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-anomalous-log-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-anomalous-log-groups-request-"))
   (insight-id (common-lisp:error ":insight-id is required") :type
    (common-lisp:or insight-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-anomalous-log-groups-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-anomalous-log-groups-request
                    'make-list-anomalous-log-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-anomalous-log-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-anomalous-log-groups-response-"))
   (insight-id (common-lisp:error ":insight-id is required") :type
    (common-lisp:or insight-id common-lisp:null))
   (anomalous-log-groups
    (common-lisp:error ":anomalous-log-groups is required") :type
    (common-lisp:or anomalous-log-groups common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-anomalous-log-groups-response
                    'make-list-anomalous-log-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomalous-log-groups))
      (common-lisp:list
       (common-lisp:cons "AnomalousLogGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-anomalous-log-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-events-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-events-filters-"))
   (insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null))
   (event-time-range common-lisp:nil :type
    (common-lisp:or event-time-range common-lisp:null))
   (event-class common-lisp:nil :type
    (common-lisp:or event-class common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or event-source common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or event-data-source common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-events-filters 'make-list-events-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-events-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-events-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time-range))
      (common-lisp:list
       (common-lisp:cons "EventTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "EventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-events-filters))
   common-lisp:nil))
(common-lisp:deftype list-events-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-events-request-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or list-events-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-events-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-events-request 'make-list-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-events-response-"))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or events common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-events-response 'make-list-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-insights-account-id-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-list-insights-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-any-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-any-status-filter-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or insight-type common-lisp:null))
   (start-time-range (common-lisp:error ":start-time-range is required") :type
    (common-lisp:or start-time-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-any-status-filter
                    'make-list-insights-any-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-any-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-any-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "StartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-any-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-closed-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-closed-status-filter-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or insight-type common-lisp:null))
   (end-time-range (common-lisp:error ":end-time-range is required") :type
    (common-lisp:or end-time-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-closed-status-filter
                    'make-list-insights-closed-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-closed-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-closed-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-range))
      (common-lisp:list
       (common-lisp:cons "EndTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-closed-status-filter))
   common-lisp:nil))
(common-lisp:deftype list-insights-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-ongoing-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-ongoing-status-filter-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or insight-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-ongoing-status-filter
                    'make-list-insights-ongoing-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-ongoing-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-ongoing-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-ongoing-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-insights-organizational-unit-id-list ()
   '(trivial-types:proper-list organizational-unit-id))
 (common-lisp:defun |make-list-insights-organizational-unit-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-request-"))
   (status-filter (common-lisp:error ":status-filter is required") :type
    (common-lisp:or list-insights-status-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-insights-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-request 'make-list-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-response-"))
   (proactive-insights common-lisp:nil :type
    (common-lisp:or proactive-insights common-lisp:null))
   (reactive-insights common-lisp:nil :type
    (common-lisp:or reactive-insights common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-response 'make-list-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-insights-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-insights-status-filter-"))
   (ongoing common-lisp:nil :type
    (common-lisp:or list-insights-ongoing-status-filter common-lisp:null))
   (closed common-lisp:nil :type
    (common-lisp:or list-insights-closed-status-filter common-lisp:null))
   (any common-lisp:nil :type
    (common-lisp:or list-insights-any-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-insights-status-filter
                    'make-list-insights-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ongoing))
      (common-lisp:list
       (common-lisp:cons "Ongoing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'closed))
      (common-lisp:list
       (common-lisp:cons "Closed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'any))
      (common-lisp:list
       (common-lisp:cons "Any"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-insights-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitored-resources-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitored-resources-filters-"))
   (resource-permission (common-lisp:error ":resource-permission is required")
    :type (common-lisp:or resource-permission common-lisp:null))
   (resource-type-filters
    (common-lisp:error ":resource-type-filters is required") :type
    (common-lisp:or resource-type-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitored-resources-filters
                    'make-list-monitored-resources-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-permission))
      (common-lisp:list
       (common-lisp:cons "ResourcePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-type-filters))
      (common-lisp:list
       (common-lisp:cons "ResourceTypeFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-filters))
   common-lisp:nil))
(common-lisp:deftype list-monitored-resources-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitored-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitored-resources-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or list-monitored-resources-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-monitored-resources-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitored-resources-request
                    'make-list-monitored-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitored-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitored-resources-response-"))
   (monitored-resource-identifiers
    (common-lisp:error ":monitored-resource-identifiers is required") :type
    (common-lisp:or monitored-resource-identifiers common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitored-resources-response
                    'make-list-monitored-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "MonitoredResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitored-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notification-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notification-channels-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notification-channels-request
                    'make-list-notification-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notification-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notification-channels-response-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notification-channels-response
                    'make-list-notification-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notification-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-insights-request-"))
   (status-filter (common-lisp:error ":status-filter is required") :type
    (common-lisp:or list-insights-status-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-insights-max-results common-lisp:null))
   (account-ids common-lisp:nil :type
    (common-lisp:or list-insights-account-id-list common-lisp:null))
   (organizational-unit-ids common-lisp:nil :type
    (common-lisp:or list-insights-organizational-unit-id-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-insights-request
                    'make-list-organization-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-insights-response-"))
   (proactive-insights common-lisp:nil :type
    (common-lisp:or proactive-organization-insights common-lisp:null))
   (reactive-insights common-lisp:nil :type
    (common-lisp:or reactive-organization-insights common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-insights-response
                    'make-list-organization-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-request-"))
   (insight-id (common-lisp:error ":insight-id is required") :type
    (common-lisp:or insight-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-request
                    'make-list-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-response-"))
   (recommendations common-lisp:nil :type
    (common-lisp:or recommendations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-response
                    'make-list-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "Recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (log-anomaly-class (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-anomaly-class-"))
   (log-stream-name common-lisp:nil :type
    (common-lisp:or log-stream-name common-lisp:null))
   (log-anomaly-type common-lisp:nil :type
    (common-lisp:or log-anomaly-type common-lisp:null))
   (log-anomaly-token common-lisp:nil :type
    (common-lisp:or log-anomaly-token common-lisp:null))
   (log-event-id common-lisp:nil :type
    (common-lisp:or log-event-id common-lisp:null))
   (explanation common-lisp:nil :type
    (common-lisp:or explanation common-lisp:null))
   (number-of-log-lines-occurrences common-lisp:nil :type
    (common-lisp:or number-of-log-lines-occurrences common-lisp:null))
   (log-event-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-anomaly-class 'make-log-anomaly-class))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-anomaly-class))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-anomaly-class))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "LogStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-anomaly-type))
      (common-lisp:list
       (common-lisp:cons "LogAnomalyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-anomaly-token))
      (common-lisp:list
       (common-lisp:cons "LogAnomalyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-event-id))
      (common-lisp:list
       (common-lisp:cons "LogEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explanation))
      (common-lisp:list
       (common-lisp:cons "Explanation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-log-lines-occurrences))
      (common-lisp:list
       (common-lisp:cons "NumberOfLogLinesOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-event-timestamp))
      (common-lisp:list
       (common-lisp:cons "LogEventTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-anomaly-class))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-anomaly-classes ()
   '(trivial-types:proper-list log-anomaly-class))
 (common-lisp:defun |make-log-anomaly-classes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-anomaly-class))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (log-anomaly-showcase (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-anomaly-showcase-"))
   (log-anomaly-classes common-lisp:nil :type
    (common-lisp:or log-anomaly-classes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'log-anomaly-showcase 'make-log-anomaly-showcase))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-anomaly-showcase))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-anomaly-showcase))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-anomaly-classes))
      (common-lisp:list
       (common-lisp:cons "LogAnomalyClasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-anomaly-showcase))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-anomaly-showcases ()
   '(trivial-types:proper-list log-anomaly-showcase))
 (common-lisp:defun |make-log-anomaly-showcases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-anomaly-showcase))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-anomaly-token () 'common-lisp:string)
(common-lisp:deftype log-anomaly-type () 'common-lisp:string)
(common-lisp:deftype log-event-id () 'common-lisp:string)
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:deftype log-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logs-anomaly-detection-integration (:copier common-lisp:nil)
      (:conc-name "struct-shape-logs-anomaly-detection-integration-"))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or opt-in-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logs-anomaly-detection-integration
                    'make-logs-anomaly-detection-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logs-anomaly-detection-integration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-logs-anomaly-detection-integration-config-"))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or opt-in-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logs-anomaly-detection-integration-config
                    'make-logs-anomaly-detection-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logs-anomaly-detection-integration-config))
   common-lisp:nil))
(common-lisp:deftype mean-time-to-recover-in-milliseconds ()
  'common-lisp:integer)
(common-lisp:deftype metric-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (monitored-resource-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitored-resource-identifier-"))
   (monitored-resource-name common-lisp:nil :type
    (common-lisp:or monitored-resource-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (resource-permission common-lisp:nil :type
    (common-lisp:or resource-permission common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitored-resource-identifier
                    'make-monitored-resource-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-name))
      (common-lisp:list
       (common-lisp:cons "MonitoredResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-permission))
      (common-lisp:list
       (common-lisp:cons "ResourcePermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitored-resource-identifiers ()
   '(trivial-types:proper-list monitored-resource-identifier))
 (common-lisp:defun |make-monitored-resource-identifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitored-resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitored-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-channel-"))
   (id common-lisp:nil :type
    (common-lisp:or notification-channel-id common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or notification-channel-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-channel 'make-notification-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-channel-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-channel-config-"))
   (sns (common-lisp:error ":sns is required") :type
    (common-lisp:or sns-channel-config common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or notification-filter-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-channel-config
                    'make-notification-channel-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-channel-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-channel-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns))
      (common-lisp:list
       (common-lisp:cons "Sns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-channel-config))
   common-lisp:nil))
(common-lisp:deftype notification-channel-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-filter-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-filter-config-"))
   (severities common-lisp:nil :type
    (common-lisp:or insight-severities common-lisp:null))
   (message-types common-lisp:nil :type
    (common-lisp:or notification-message-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-filter-config
                    'make-notification-filter-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-filter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-filter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severities))
      (common-lisp:list
       (common-lisp:cons "Severities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-types))
      (common-lisp:list
       (common-lisp:cons "MessageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-filter-config))
   common-lisp:nil))
(common-lisp:deftype notification-message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-message-types ()
   '(trivial-types:proper-list notification-message-type))
 (common-lisp:defun |make-notification-message-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-message-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype num-metrics-analyzed () 'common-lisp:integer)
(common-lisp:deftype num-open-proactive-insights () 'common-lisp:integer)
(common-lisp:deftype num-open-reactive-insights () 'common-lisp:integer)
(common-lisp:deftype num-proactive-insights () 'common-lisp:integer)
(common-lisp:deftype num-reactive-insights () 'common-lisp:integer)
(common-lisp:deftype number-of-log-lines-occurrences () 'common-lisp:integer)
(common-lisp:deftype number-of-log-lines-scanned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (ops-center-integration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ops-center-integration-"))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or opt-in-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ops-center-integration 'make-ops-center-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ops-center-integration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-ops-center-integration-config-"))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or opt-in-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ops-center-integration-config
                    'make-ops-center-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-center-integration-config))
   common-lisp:nil))
(common-lisp:deftype opt-in-status () 'common-lisp:string)
(common-lisp:deftype organization-resource-collection-max-results ()
  'common-lisp:integer)
(common-lisp:deftype organization-resource-collection-type ()
  'common-lisp:string)
(common-lisp:deftype organizational-unit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-id-list ()
   '(trivial-types:proper-list organizational-unit-id))
 (common-lisp:defun |make-organizational-unit-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype performance-insights-metric-dimension ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-metric-dimension-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-metric-dimension-group-"))
   (group common-lisp:nil :type
    (common-lisp:or performance-insights-metric-group common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or performance-insights-metric-dimensions common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or performance-insights-metric-limit-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-metric-dimension-group
                    'make-performance-insights-metric-dimension-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-dimension-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype performance-insights-metric-dimensions ()
   '(trivial-types:proper-list performance-insights-metric-dimension))
 (common-lisp:defun |make-performance-insights-metric-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            performance-insights-metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype performance-insights-metric-display-name ()
  'common-lisp:string)
(common-lisp:deftype performance-insights-metric-filter-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype performance-insights-metric-filter-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-performance-insights-metric-filter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype performance-insights-metric-filter-value ()
  'common-lisp:string)
(common-lisp:deftype performance-insights-metric-group () 'common-lisp:string)
(common-lisp:deftype performance-insights-metric-limit-integer ()
  'common-lisp:integer)
(common-lisp:deftype performance-insights-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-metric-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-metric-query-"))
   (metric common-lisp:nil :type
    (common-lisp:or performance-insights-metric-name common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or performance-insights-metric-dimension-group
                    common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or performance-insights-metric-filter-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-metric-query
                    'make-performance-insights-metric-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metric-query))
   common-lisp:nil))
(common-lisp:deftype performance-insights-metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-metrics-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-metrics-detail-"))
   (metric-display-name common-lisp:nil :type
    (common-lisp:or performance-insights-metric-display-name common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or performance-insights-metric-unit common-lisp:null))
   (metric-query common-lisp:nil :type
    (common-lisp:or performance-insights-metric-query common-lisp:null))
   (reference-data common-lisp:nil :type
    (common-lisp:or performance-insights-reference-data-list common-lisp:null))
   (stats-at-anomaly common-lisp:nil :type
    (common-lisp:or performance-insights-stats common-lisp:null))
   (stats-at-baseline common-lisp:nil :type
    (common-lisp:or performance-insights-stats common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-metrics-detail
                    'make-performance-insights-metrics-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metrics-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metrics-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-display-name))
      (common-lisp:list
       (common-lisp:cons "MetricDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-query))
      (common-lisp:list
       (common-lisp:cons "MetricQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-data))
      (common-lisp:list
       (common-lisp:cons "ReferenceData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats-at-anomaly))
      (common-lisp:list
       (common-lisp:cons "StatsAtAnomaly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats-at-baseline))
      (common-lisp:list
       (common-lisp:cons "StatsAtBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-metrics-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype performance-insights-metrics-details ()
   '(trivial-types:proper-list performance-insights-metrics-detail))
 (common-lisp:defun |make-performance-insights-metrics-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            performance-insights-metrics-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-reference-comparison-values
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-performance-insights-reference-comparison-values-"))
   (reference-scalar common-lisp:nil :type
    (common-lisp:or performance-insights-reference-scalar common-lisp:null))
   (reference-metric common-lisp:nil :type
    (common-lisp:or performance-insights-reference-metric common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-reference-comparison-values
                    'make-performance-insights-reference-comparison-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-comparison-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-comparison-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-scalar))
      (common-lisp:list
       (common-lisp:cons "ReferenceScalar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-metric))
      (common-lisp:list
       (common-lisp:cons "ReferenceMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-comparison-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-reference-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-reference-data-"))
   (name common-lisp:nil :type
    (common-lisp:or performance-insights-reference-name common-lisp:null))
   (comparison-values common-lisp:nil :type
    (common-lisp:or performance-insights-reference-comparison-values
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-reference-data
                    'make-performance-insights-reference-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-values))
      (common-lisp:list
       (common-lisp:cons "ComparisonValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype performance-insights-reference-data-list ()
   '(trivial-types:proper-list performance-insights-reference-data))
 (common-lisp:defun |make-performance-insights-reference-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            performance-insights-reference-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-reference-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-reference-metric-"))
   (metric-query common-lisp:nil :type
    (common-lisp:or performance-insights-metric-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-reference-metric
                    'make-performance-insights-reference-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-query))
      (common-lisp:list
       (common-lisp:cons "MetricQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-metric))
   common-lisp:nil))
(common-lisp:deftype performance-insights-reference-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-reference-scalar (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-reference-scalar-"))
   (value common-lisp:nil :type
    (common-lisp:or performance-insights-value-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-reference-scalar
                    'make-performance-insights-reference-scalar))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-scalar))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-scalar))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-reference-scalar))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (performance-insights-stat (:copier common-lisp:nil)
      (:conc-name "struct-shape-performance-insights-stat-"))
   (type common-lisp:nil :type
    (common-lisp:or performance-insights-stat-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or performance-insights-value-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'performance-insights-stat
                    'make-performance-insights-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          performance-insights-stat))
   common-lisp:nil))
(common-lisp:deftype performance-insights-stat-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype performance-insights-stats ()
   '(trivial-types:proper-list performance-insights-stat))
 (common-lisp:defun |make-performance-insights-stats|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            performance-insights-stat))
   aws-sdk/generator/shape::members))
(common-lisp:deftype performance-insights-value-double ()
  'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (prediction-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-prediction-time-range-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prediction-time-range 'make-prediction-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prediction-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proactive-anomalies ()
   '(trivial-types:proper-list proactive-anomaly-summary))
 (common-lisp:defun |make-proactive-anomalies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            proactive-anomaly-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (proactive-anomaly (:copier common-lisp:nil)
      (:conc-name "struct-shape-proactive-anomaly-"))
   (id common-lisp:nil :type (common-lisp:or anomaly-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or anomaly-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or anomaly-status common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (anomaly-time-range common-lisp:nil :type
    (common-lisp:or anomaly-time-range common-lisp:null))
   (anomaly-reported-time-range common-lisp:nil :type
    (common-lisp:or anomaly-reported-time-range common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (source-details common-lisp:nil :type
    (common-lisp:or anomaly-source-details common-lisp:null))
   (associated-insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or anomaly-limit common-lisp:null))
   (source-metadata common-lisp:nil :type
    (common-lisp:or anomaly-source-metadata common-lisp:null))
   (anomaly-resources common-lisp:nil :type
    (common-lisp:or anomaly-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proactive-anomaly 'make-proactive-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proactive-anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proactive-anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-reported-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyReportedTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "PredictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-insight-id))
      (common-lisp:list
       (common-lisp:cons "AssociatedInsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-metadata))
      (common-lisp:list
       (common-lisp:cons "SourceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-resources))
      (common-lisp:list
       (common-lisp:cons "AnomalyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proactive-anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (proactive-anomaly-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-proactive-anomaly-summary-"))
   (id common-lisp:nil :type (common-lisp:or anomaly-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or anomaly-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or anomaly-status common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (anomaly-time-range common-lisp:nil :type
    (common-lisp:or anomaly-time-range common-lisp:null))
   (anomaly-reported-time-range common-lisp:nil :type
    (common-lisp:or anomaly-reported-time-range common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (source-details common-lisp:nil :type
    (common-lisp:or anomaly-source-details common-lisp:null))
   (associated-insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or anomaly-limit common-lisp:null))
   (source-metadata common-lisp:nil :type
    (common-lisp:or anomaly-source-metadata common-lisp:null))
   (anomaly-resources common-lisp:nil :type
    (common-lisp:or anomaly-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proactive-anomaly-summary
                    'make-proactive-anomaly-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proactive-anomaly-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proactive-anomaly-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-reported-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyReportedTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "PredictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-insight-id))
      (common-lisp:list
       (common-lisp:cons "AssociatedInsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-metadata))
      (common-lisp:list
       (common-lisp:cons "SourceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-resources))
      (common-lisp:list
       (common-lisp:cons "AnomalyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proactive-anomaly-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (proactive-insight (:copier common-lisp:nil)
      (:conc-name "struct-shape-proactive-insight-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (ssm-ops-item-id common-lisp:nil :type
    (common-lisp:or ssm-ops-item-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or insight-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proactive-insight 'make-proactive-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proactive-insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proactive-insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "PredictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-ops-item-id))
      (common-lisp:list
       (common-lisp:cons "SsmOpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proactive-insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (proactive-insight-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-proactive-insight-summary-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null))
   (associated-resource-arns common-lisp:nil :type
    (common-lisp:or associated-resource-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proactive-insight-summary
                    'make-proactive-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proactive-insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proactive-insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "PredictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-resource-arns))
      (common-lisp:list
       (common-lisp:cons "AssociatedResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proactive-insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proactive-insights ()
   '(trivial-types:proper-list proactive-insight-summary))
 (common-lisp:defun |make-proactive-insights|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            proactive-insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (proactive-organization-insight-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-proactive-organization-insight-summary-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (organizational-unit-id common-lisp:nil :type
    (common-lisp:or organizational-unit-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (prediction-time-range common-lisp:nil :type
    (common-lisp:or prediction-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'proactive-organization-insight-summary
                    'make-proactive-organization-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proactive-organization-insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proactive-organization-insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-time-range))
      (common-lisp:list
       (common-lisp:cons "PredictionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proactive-organization-insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proactive-organization-insights ()
   '(trivial-types:proper-list proactive-organization-insight-summary))
 (common-lisp:defun |make-proactive-organization-insights|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            proactive-organization-insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-feedback-request-"))
   (insight-feedback common-lisp:nil :type
    (common-lisp:or insight-feedback common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-feedback-request 'make-put-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-feedback))
      (common-lisp:list
       (common-lisp:cons "InsightFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-feedback-response-")))
 (common-lisp:export
  (common-lisp:list 'put-feedback-response 'make-put-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reactive-anomalies ()
   '(trivial-types:proper-list reactive-anomaly-summary))
 (common-lisp:defun |make-reactive-anomalies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reactive-anomaly-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reactive-anomaly (:copier common-lisp:nil)
      (:conc-name "struct-shape-reactive-anomaly-"))
   (id common-lisp:nil :type (common-lisp:or anomaly-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or anomaly-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or anomaly-status common-lisp:null))
   (anomaly-time-range common-lisp:nil :type
    (common-lisp:or anomaly-time-range common-lisp:null))
   (anomaly-reported-time-range common-lisp:nil :type
    (common-lisp:or anomaly-reported-time-range common-lisp:null))
   (source-details common-lisp:nil :type
    (common-lisp:or anomaly-source-details common-lisp:null))
   (associated-insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or anomaly-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or anomaly-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or anomaly-description common-lisp:null))
   (causal-anomaly-id common-lisp:nil :type
    (common-lisp:or anomaly-id common-lisp:null))
   (anomaly-resources common-lisp:nil :type
    (common-lisp:or anomaly-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reactive-anomaly 'make-reactive-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reactive-anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reactive-anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-reported-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyReportedTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-insight-id))
      (common-lisp:list
       (common-lisp:cons "AssociatedInsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causal-anomaly-id))
      (common-lisp:list
       (common-lisp:cons "CausalAnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-resources))
      (common-lisp:list
       (common-lisp:cons "AnomalyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reactive-anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reactive-anomaly-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-reactive-anomaly-summary-"))
   (id common-lisp:nil :type (common-lisp:or anomaly-id common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or anomaly-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or anomaly-status common-lisp:null))
   (anomaly-time-range common-lisp:nil :type
    (common-lisp:or anomaly-time-range common-lisp:null))
   (anomaly-reported-time-range common-lisp:nil :type
    (common-lisp:or anomaly-reported-time-range common-lisp:null))
   (source-details common-lisp:nil :type
    (common-lisp:or anomaly-source-details common-lisp:null))
   (associated-insight-id common-lisp:nil :type
    (common-lisp:or insight-id common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or anomaly-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or anomaly-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or anomaly-description common-lisp:null))
   (causal-anomaly-id common-lisp:nil :type
    (common-lisp:or anomaly-id common-lisp:null))
   (anomaly-resources common-lisp:nil :type
    (common-lisp:or anomaly-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reactive-anomaly-summary 'make-reactive-anomaly-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reactive-anomaly-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reactive-anomaly-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-reported-time-range))
      (common-lisp:list
       (common-lisp:cons "AnomalyReportedTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-insight-id))
      (common-lisp:list
       (common-lisp:cons "AssociatedInsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causal-anomaly-id))
      (common-lisp:list
       (common-lisp:cons "CausalAnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-resources))
      (common-lisp:list
       (common-lisp:cons "AnomalyResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reactive-anomaly-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reactive-insight (:copier common-lisp:nil)
      (:conc-name "struct-shape-reactive-insight-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (ssm-ops-item-id common-lisp:nil :type
    (common-lisp:or ssm-ops-item-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or insight-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reactive-insight 'make-reactive-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reactive-insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reactive-insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-ops-item-id))
      (common-lisp:list
       (common-lisp:cons "SsmOpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reactive-insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reactive-insight-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-reactive-insight-summary-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null))
   (associated-resource-arns common-lisp:nil :type
    (common-lisp:or associated-resource-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reactive-insight-summary 'make-reactive-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reactive-insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reactive-insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-resource-arns))
      (common-lisp:list
       (common-lisp:cons "AssociatedResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reactive-insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reactive-insights ()
   '(trivial-types:proper-list reactive-insight-summary))
 (common-lisp:defun |make-reactive-insights|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reactive-insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reactive-organization-insight-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-reactive-organization-insight-summary-"))
   (id common-lisp:nil :type (common-lisp:or insight-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (organizational-unit-id common-lisp:nil :type
    (common-lisp:or organizational-unit-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or insight-name common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or insight-severity common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or insight-status common-lisp:null))
   (insight-time-range common-lisp:nil :type
    (common-lisp:or insight-time-range common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reactive-organization-insight-summary
                    'make-reactive-organization-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reactive-organization-insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reactive-organization-insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-time-range))
      (common-lisp:list
       (common-lisp:cons "InsightTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reactive-organization-insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reactive-organization-insights ()
   '(trivial-types:proper-list reactive-organization-insight-summary))
 (common-lisp:defun |make-reactive-organization-insights|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reactive-organization-insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-"))
   (description common-lisp:nil :type
    (common-lisp:or recommendation-description common-lisp:null))
   (link common-lisp:nil :type
    (common-lisp:or recommendation-link common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or recommendation-name common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or recommendation-reason common-lisp:null))
   (related-events common-lisp:nil :type
    (common-lisp:or recommendation-related-events common-lisp:null))
   (related-anomalies common-lisp:nil :type
    (common-lisp:or recommendation-related-anomalies common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or recommendation-category common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-events))
      (common-lisp:list
       (common-lisp:cons "RelatedEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-anomalies))
      (common-lisp:list
       (common-lisp:cons "RelatedAnomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:deftype recommendation-category () 'common-lisp:string)
(common-lisp:deftype recommendation-description () 'common-lisp:string)
(common-lisp:deftype recommendation-link () 'common-lisp:string)
(common-lisp:deftype recommendation-name () 'common-lisp:string)
(common-lisp:deftype recommendation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-related-anomalies ()
   '(trivial-types:proper-list recommendation-related-anomaly))
 (common-lisp:defun |make-recommendation-related-anomalies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-anomaly (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-related-anomaly-"))
   (resources common-lisp:nil :type
    (common-lisp:or recommendation-related-anomaly-resources common-lisp:null))
   (source-details common-lisp:nil :type
    (common-lisp:or related-anomaly-source-details common-lisp:null))
   (anomaly-id common-lisp:nil :type
    (common-lisp:or anomaly-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-anomaly
                    'make-recommendation-related-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-anomaly-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-related-anomaly-resource-"))
   (name common-lisp:nil :type
    (common-lisp:or recommendation-related-anomaly-resource-name
                    common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or recommendation-related-anomaly-resource-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-anomaly-resource
                    'make-recommendation-related-anomaly-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-resource))
   common-lisp:nil))
(common-lisp:deftype recommendation-related-anomaly-resource-name ()
  'common-lisp:string)
(common-lisp:deftype recommendation-related-anomaly-resource-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-related-anomaly-resources ()
   '(trivial-types:proper-list recommendation-related-anomaly-resource))
 (common-lisp:defun |make-recommendation-related-anomaly-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-anomaly-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-anomaly-source-detail (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-recommendation-related-anomaly-source-detail-"))
   (cloud-watch-metrics common-lisp:nil :type
    (common-lisp:or recommendation-related-cloud-watch-metrics-source-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-anomaly-source-detail
                    'make-recommendation-related-anomaly-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-metrics))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-anomaly-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-cloud-watch-metrics-source-detail
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-recommendation-related-cloud-watch-metrics-source-detail-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or
     recommendation-related-cloud-watch-metrics-source-metric-name
     common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or recommendation-related-cloud-watch-metrics-source-namespace
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-cloud-watch-metrics-source-detail
                    'make-recommendation-related-cloud-watch-metrics-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-cloud-watch-metrics-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-cloud-watch-metrics-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-cloud-watch-metrics-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-related-cloud-watch-metrics-source-details
                      ()
   '(trivial-types:proper-list
     recommendation-related-cloud-watch-metrics-source-detail))
 (common-lisp:defun |make-recommendation-related-cloud-watch-metrics-source-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-cloud-watch-metrics-source-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-related-cloud-watch-metrics-source-metric-name
                     ()
  'common-lisp:string)
(common-lisp:deftype recommendation-related-cloud-watch-metrics-source-namespace
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-related-event-"))
   (name common-lisp:nil :type
    (common-lisp:or recommendation-related-event-name common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or recommendation-related-event-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-event
                    'make-recommendation-related-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event))
   common-lisp:nil))
(common-lisp:deftype recommendation-related-event-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-related-event-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-related-event-resource-"))
   (name common-lisp:nil :type
    (common-lisp:or recommendation-related-event-resource-name
                    common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or recommendation-related-event-resource-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-related-event-resource
                    'make-recommendation-related-event-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-related-event-resource))
   common-lisp:nil))
(common-lisp:deftype recommendation-related-event-resource-name ()
  'common-lisp:string)
(common-lisp:deftype recommendation-related-event-resource-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-related-event-resources ()
   '(trivial-types:proper-list recommendation-related-event-resource))
 (common-lisp:defun |make-recommendation-related-event-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-event-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-related-events ()
   '(trivial-types:proper-list recommendation-related-event))
 (common-lisp:defun |make-recommendation-related-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendations ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun |make-recommendations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype related-anomaly-source-details ()
   '(trivial-types:proper-list recommendation-related-anomaly-source-detail))
 (common-lisp:defun |make-related-anomaly-source-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-related-anomaly-source-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-notification-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-notification-channel-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or notification-channel-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-request
                    'make-remove-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-notification-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-notification-channel-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-response
                    'make-remove-notification-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-collection (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-collection-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-collection common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-collections common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-collection 'make-resource-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-collection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-collection-filter-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or cloud-formation-collection-filter common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-collection-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-collection-filter
                    'make-resource-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-collection-filter))
   common-lisp:nil))
(common-lisp:deftype resource-collection-type () 'common-lisp:string)
(common-lisp:deftype resource-hours () 'common-lisp:integer)
(common-lisp:deftype resource-id-string () 'common-lisp:string)
(common-lisp:deftype resource-id-type () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-permission () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype resource-type-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-filters ()
   '(trivial-types:proper-list resource-type-filter))
 (common-lisp:defun |make-resource-type-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype search-insights-account-id-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-search-insights-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-insights-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-insights-filters-"))
   (severities common-lisp:nil :type
    (common-lisp:or insight-severities common-lisp:null))
   (statuses common-lisp:nil :type
    (common-lisp:or insight-statuses common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-insights-filters 'make-search-insights-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severities))
      (common-lisp:list
       (common-lisp:cons "Severities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "Statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-filters))
   common-lisp:nil))
(common-lisp:deftype search-insights-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-insights-request-"))
   (start-time-range (common-lisp:error ":start-time-range is required") :type
    (common-lisp:or start-time-range common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or search-insights-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-insights-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or insight-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-insights-request 'make-search-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "StartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-insights-response-"))
   (proactive-insights common-lisp:nil :type
    (common-lisp:or proactive-insights common-lisp:null))
   (reactive-insights common-lisp:nil :type
    (common-lisp:or reactive-insights common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-insights-response 'make-search-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-organization-insights-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-organization-insights-filters-"))
   (severities common-lisp:nil :type
    (common-lisp:or insight-severities common-lisp:null))
   (statuses common-lisp:nil :type
    (common-lisp:or insight-statuses common-lisp:null))
   (resource-collection common-lisp:nil :type
    (common-lisp:or resource-collection common-lisp:null))
   (service-collection common-lisp:nil :type
    (common-lisp:or service-collection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-organization-insights-filters
                    'make-search-organization-insights-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severities))
      (common-lisp:list
       (common-lisp:cons "Severities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "Statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-collection))
      (common-lisp:list
       (common-lisp:cons "ServiceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-filters))
   common-lisp:nil))
(common-lisp:deftype search-organization-insights-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-organization-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-organization-insights-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or search-insights-account-id-list common-lisp:null))
   (start-time-range (common-lisp:error ":start-time-range is required") :type
    (common-lisp:or start-time-range common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or search-organization-insights-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-organization-insights-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or insight-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-organization-insights-request
                    'make-search-organization-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "StartTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-organization-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-organization-insights-response-"))
   (proactive-insights common-lisp:nil :type
    (common-lisp:or proactive-insights common-lisp:null))
   (reactive-insights common-lisp:nil :type
    (common-lisp:or reactive-insights common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or uuid-next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-organization-insights-response
                    'make-search-organization-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-insights))
      (common-lisp:list
       (common-lisp:cons "ProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactive-insights))
      (common-lisp:list
       (common-lisp:cons "ReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-organization-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-collection (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-collection-"))
   (service-names common-lisp:nil :type
    (common-lisp:or service-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-collection 'make-service-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-names))
      (common-lisp:list
       (common-lisp:cons "ServiceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-collection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-health-"))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null))
   (insight common-lisp:nil :type
    (common-lisp:or service-insight-health common-lisp:null))
   (analyzed-resource-count common-lisp:nil :type
    (common-lisp:or analyzed-resource-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-health 'make-service-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "Insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyzed-resource-count))
      (common-lisp:list
       (common-lisp:cons "AnalyzedResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-healths ()
   '(trivial-types:proper-list service-health))
 (common-lisp:defun |make-service-healths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-health))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-insight-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-insight-health-"))
   (open-proactive-insights common-lisp:nil :type
    (common-lisp:or num-open-proactive-insights common-lisp:null))
   (open-reactive-insights common-lisp:nil :type
    (common-lisp:or num-open-reactive-insights common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-insight-health 'make-service-insight-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-insight-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-insight-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-proactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenProactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-reactive-insights))
      (common-lisp:list
       (common-lisp:cons "OpenReactiveInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-insight-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-integration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-integration-config-"))
   (ops-center common-lisp:nil :type
    (common-lisp:or ops-center-integration common-lisp:null))
   (logs-anomaly-detection common-lisp:nil :type
    (common-lisp:or logs-anomaly-detection-integration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-integration-config
                    'make-service-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center))
      (common-lisp:list
       (common-lisp:cons "OpsCenter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logs-anomaly-detection))
      (common-lisp:list
       (common-lisp:cons "LogsAnomalyDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-integration-config))
   common-lisp:nil))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-names ()
   '(trivial-types:proper-list service-name))
 (common-lisp:defun |make-service-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-resource-cost (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-resource-cost-"))
   (type common-lisp:nil :type (common-lisp:or resource-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or cost-estimation-service-resource-state common-lisp:null))
   (count common-lisp:nil :type
    (common-lisp:or cost-estimation-service-resource-count common-lisp:null))
   (unit-cost common-lisp:nil :type (common-lisp:or cost common-lisp:null))
   (cost common-lisp:nil :type (common-lisp:or cost common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-resource-cost 'make-service-resource-cost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-resource-cost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-resource-cost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-cost))
      (common-lisp:list
       (common-lisp:cons "UnitCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "Cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-resource-cost))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-resource-costs ()
   '(trivial-types:proper-list service-resource-cost))
 (common-lisp:defun |make-service-resource-costs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-resource-cost))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sns-channel-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-channel-config-"))
   (topic-arn common-lisp:nil :type
    (common-lisp:or topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sns-channel-config 'make-sns-channel-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sns-channel-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sns-channel-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sns-channel-config))
   common-lisp:nil))
(common-lisp:deftype ssm-ops-item-id () 'common-lisp:string)
(common-lisp:deftype stack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-names () '(trivial-types:proper-list stack-name))
 (common-lisp:defun |make-stack-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-cost-estimation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-cost-estimation-request-"))
   (resource-collection (common-lisp:error ":resource-collection is required")
    :type
    (common-lisp:or cost-estimation-resource-collection-filter
                    common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-cost-estimation-request
                    'make-start-cost-estimation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-cost-estimation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-cost-estimation-response-")))
 (common-lisp:export
  (common-lisp:list 'start-cost-estimation-response
                    'make-start-cost-estimation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cost-estimation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-time-range-"))
   (from-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (to-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-time-range 'make-start-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-time))
      (common-lisp:list
       (common-lisp:cons "FromTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-time))
      (common-lisp:list
       (common-lisp:cons "ToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-collection (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-collection-"))
   (app-boundary-key (common-lisp:error ":app-boundary-key is required") :type
    (common-lisp:or app-boundary-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-collection 'make-tag-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-boundary-key))
      (common-lisp:list
       (common-lisp:cons "AppBoundaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-collection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-collection-filter-"))
   (app-boundary-key (common-lisp:error ":app-boundary-key is required") :type
    (common-lisp:or app-boundary-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or tag-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-collection-filter 'make-tag-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-boundary-key))
      (common-lisp:list
       (common-lisp:cons "AppBoundaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-collection-filters ()
   '(trivial-types:proper-list tag-collection-filter))
 (common-lisp:defun |make-tag-collection-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-collection-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-collections ()
   '(trivial-types:proper-list tag-collection))
 (common-lisp:defun |make-tag-collections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-collection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-cost-estimation-resource-collection-filter (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-tag-cost-estimation-resource-collection-filter-"))
   (app-boundary-key (common-lisp:error ":app-boundary-key is required") :type
    (common-lisp:or app-boundary-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or cost-estimation-tag-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-cost-estimation-resource-collection-filter
                    'make-tag-cost-estimation-resource-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-cost-estimation-resource-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-cost-estimation-resource-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-boundary-key))
      (common-lisp:list
       (common-lisp:cons "AppBoundaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-cost-estimation-resource-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-cost-estimation-resource-collection-filters ()
   '(trivial-types:proper-list tag-cost-estimation-resource-collection-filter))
 (common-lisp:defun |make-tag-cost-estimation-resource-collection-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tag-cost-estimation-resource-collection-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-health-"))
   (app-boundary-key common-lisp:nil :type
    (common-lisp:or app-boundary-key common-lisp:null))
   (tag-value common-lisp:nil :type
    (common-lisp:or tag-value common-lisp:null))
   (insight common-lisp:nil :type
    (common-lisp:or insight-health common-lisp:null))
   (analyzed-resource-count common-lisp:nil :type
    (common-lisp:or analyzed-resource-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-health 'make-tag-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-boundary-key))
      (common-lisp:list
       (common-lisp:cons "AppBoundaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value))
      (common-lisp:list
       (common-lisp:cons "TagValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "Insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analyzed-resource-count))
      (common-lisp:list
       (common-lisp:cons "AnalyzedResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-healths () '(trivial-types:proper-list tag-health))
 (common-lisp:defun |make-tag-healths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-health))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-values () '(trivial-types:proper-list tag-value))
 (common-lisp:defun |make-tag-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestamp-metric-value-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestamp-metric-value-pair-"))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (metric-value common-lisp:nil :type
    (common-lisp:or metric-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timestamp-metric-value-pair
                    'make-timestamp-metric-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-metric-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-metric-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "MetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestamp-metric-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype timestamp-metric-value-pair-list ()
   '(trivial-types:proper-list timestamp-metric-value-pair))
 (common-lisp:defun |make-timestamp-metric-value-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            timestamp-metric-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-cloud-formation-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cloud-formation-collection-filter-"))
   (stack-names common-lisp:nil :type
    (common-lisp:or update-stack-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cloud-formation-collection-filter
                    'make-update-cloud-formation-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-formation-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-formation-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-names))
      (common-lisp:list
       (common-lisp:cons "StackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cloud-formation-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-sources-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-sources-config-request-"))
   (event-sources common-lisp:nil :type
    (common-lisp:or event-sources-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-sources-config-request
                    'make-update-event-sources-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-sources))
      (common-lisp:list
       (common-lisp:cons "EventSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-sources-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-sources-config-response-")))
 (common-lisp:export
  (common-lisp:list 'update-event-sources-config-response
                    'make-update-event-sources-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-sources-config-response))
   common-lisp:nil))
(common-lisp:deftype update-resource-collection-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-collection-filter-"))
   (cloud-formation common-lisp:nil :type
    (common-lisp:or update-cloud-formation-collection-filter common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or update-tag-collection-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-collection-filter
                    'make-update-resource-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-formation))
      (common-lisp:list
       (common-lisp:cons "CloudFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-collection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-collection-request-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or update-resource-collection-action common-lisp:null))
   (resource-collection (common-lisp:error ":resource-collection is required")
    :type (common-lisp:or update-resource-collection-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resource-collection-request
                    'make-update-resource-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-collection))
      (common-lisp:list
       (common-lisp:cons "ResourceCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resource-collection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resource-collection-response-")))
 (common-lisp:export
  (common-lisp:list 'update-resource-collection-response
                    'make-update-resource-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-collection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-integration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-integration-config-"))
   (ops-center common-lisp:nil :type
    (common-lisp:or ops-center-integration-config common-lisp:null))
   (logs-anomaly-detection common-lisp:nil :type
    (common-lisp:or logs-anomaly-detection-integration-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-integration-config
                    'make-update-service-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center))
      (common-lisp:list
       (common-lisp:cons "OpsCenter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logs-anomaly-detection))
      (common-lisp:list
       (common-lisp:cons "LogsAnomalyDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-integration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-integration-request-"))
   (service-integration (common-lisp:error ":service-integration is required")
    :type (common-lisp:or update-service-integration-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-integration-request
                    'make-update-service-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-integration))
      (common-lisp:list
       (common-lisp:cons "ServiceIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-integration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-integration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-service-integration-response
                    'make-update-service-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-stack-names ()
   '(trivial-types:proper-list stack-name))
 (common-lisp:defun |make-update-stack-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-tag-collection-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-tag-collection-filter-"))
   (app-boundary-key (common-lisp:error ":app-boundary-key is required") :type
    (common-lisp:or app-boundary-key common-lisp:null))
   (tag-values (common-lisp:error ":tag-values is required") :type
    (common-lisp:or update-tag-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-tag-collection-filter
                    'make-update-tag-collection-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-collection-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-collection-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-boundary-key))
      (common-lisp:list
       (common-lisp:cons "AppBoundaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-values))
      (common-lisp:list
       (common-lisp:cons "TagValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tag-collection-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-tag-collection-filters ()
   '(trivial-types:proper-list update-tag-collection-filter))
 (common-lisp:defun |make-update-tag-collection-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-tag-collection-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype update-tag-values ()
   '(trivial-types:proper-list tag-value))
 (common-lisp:defun |make-update-tag-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uuid-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (devops-guru-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or error-name-string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or error-message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-fields ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config)
   (common-lisp:declare (common-lisp:ignorable config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-notification-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/channels"
                                                        "AddNotificationChannel"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-notification-channel))
(common-lisp:progn
 (common-lisp:defun delete-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteInsight"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-insight))
(common-lisp:progn
 (common-lisp:defun describe-account-health ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'devops-guru-request :method "GET" :path
                                "/accounts/health" :params
                                `(("Action" ,@"DescribeAccountHealth")
                                  ("Version" ,@"2020-12-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account-health))
(common-lisp:progn
 (common-lisp:defun describe-account-overview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key from-time to-time)
   (common-lisp:declare (common-lisp:ignorable from-time to-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-overview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/accounts/overview"
                                                        "DescribeAccountOverview"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-overview))
(common-lisp:progn
 (common-lisp:defun describe-anomaly
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id account-id)
   (common-lisp:declare (common-lisp:ignorable id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-anomaly-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/anomalies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeAnomaly"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-anomaly))
(common-lisp:progn
 (common-lisp:defun describe-event-sources-config ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'devops-guru-request :method "POST" :path
                                "/event-sources" :params
                                `(("Action" ,@"DescribeEventSourcesConfig")
                                  ("Version" ,@"2020-12-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-event-sources-config))
(common-lisp:progn
 (common-lisp:defun describe-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id)
   (common-lisp:declare (common-lisp:ignorable insight-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/feedback"
                                                        "DescribeFeedback"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-feedback))
(common-lisp:progn
 (common-lisp:defun describe-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id account-id)
   (common-lisp:declare (common-lisp:ignorable id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DescribeInsight"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-insight))
(common-lisp:progn
 (common-lisp:defun describe-organization-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids organizational-unit-ids)
   (common-lisp:declare
    (common-lisp:ignorable account-ids organizational-unit-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organization/health"
                                                        "DescribeOrganizationHealth"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-organization-health))
(common-lisp:progn
 (common-lisp:defun describe-organization-overview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key from-time to-time account-ids
                     organizational-unit-ids)
   (common-lisp:declare
    (common-lisp:ignorable from-time to-time account-ids
     organizational-unit-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-overview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organization/overview"
                                                        "DescribeOrganizationOverview"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-organization-overview))
(common-lisp:progn
 (common-lisp:defun describe-organization-resource-collection-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-resource-collection-type
                     account-ids organizational-unit-ids next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable organization-resource-collection-type account-ids
     organizational-unit-ids next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-resource-collection-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organization/health/resource-collection"
                                                        "DescribeOrganizationResourceCollectionHealth"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-organization-resource-collection-health))
(common-lisp:progn
 (common-lisp:defun describe-resource-collection-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-collection-type next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-collection-type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-resource-collection-health-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/accounts/health/resource-collection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-collection-type))))
                                                        "DescribeResourceCollectionHealth"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-collection-health))
(common-lisp:progn
 (common-lisp:defun describe-service-integration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'devops-guru-request :method "GET" :path
                                "/service-integrations" :params
                                `(("Action" ,@"DescribeServiceIntegration")
                                  ("Version" ,@"2020-12-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-service-integration))
(common-lisp:progn
 (common-lisp:defun get-cost-estimation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-estimation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/cost-estimation"
                                                        "GetCostEstimation"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-estimation))
(common-lisp:progn
 (common-lisp:defun get-resource-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-collection-type next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-collection-type next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-collections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-collection-type))))
                                                        "GetResourceCollection"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-collection))
(common-lisp:progn
 (common-lisp:defun list-anomalies-for-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id start-time-range max-results
                     next-token account-id filters)
   (common-lisp:declare
    (common-lisp:ignorable insight-id start-time-range max-results next-token
     account-id filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-anomalies-for-insight-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/anomalies/insight/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'insight-id))))
                                                        "ListAnomaliesForInsight"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomalies-for-insight))
(common-lisp:progn
 (common-lisp:defun list-anomalous-log-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable insight-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-anomalous-log-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-log-anomalies"
                                                        "ListAnomalousLogGroups"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-anomalous-log-groups))
(common-lisp:progn
 (common-lisp:defun list-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/events"
                                                        "ListEvents"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-events))
(common-lisp:progn
 (common-lisp:defun list-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status-filter max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable status-filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/insights"
                                                        "ListInsights"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-insights))
(common-lisp:progn
 (common-lisp:defun list-monitored-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-monitored-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/monitoredResources"
                                                        "ListMonitoredResources"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitored-resources))
(common-lisp:progn
 (common-lisp:defun list-notification-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-notification-channels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/channels"
                                                        "ListNotificationChannels"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notification-channels))
(common-lisp:progn
 (common-lisp:defun list-organization-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status-filter max-results account-ids
                     organizational-unit-ids next-token)
   (common-lisp:declare
    (common-lisp:ignorable status-filter max-results account-ids
     organizational-unit-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-insights-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organization/insights"
                                                        "ListOrganizationInsights"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-insights))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id next-token locale account-id)
   (common-lisp:declare
    (common-lisp:ignorable insight-id next-token locale account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/recommendations"
                                                        "ListRecommendations"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun put-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-feedback)
   (common-lisp:declare (common-lisp:ignorable insight-feedback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/feedback"
                                                        "PutFeedback"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-feedback))
(common-lisp:progn
 (common-lisp:defun remove-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-notification-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "RemoveNotificationChannel"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-notification-channel))
(common-lisp:progn
 (common-lisp:defun search-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time-range filters max-results
                     next-token type)
   (common-lisp:declare
    (common-lisp:ignorable start-time-range filters max-results next-token
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/insights/search"
                                                        "SearchInsights"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-insights))
(common-lisp:progn
 (common-lisp:defun search-organization-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids start-time-range filters
                     max-results next-token type)
   (common-lisp:declare
    (common-lisp:ignorable account-ids start-time-range filters max-results
     next-token type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-organization-insights-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organization/insights/search"
                                                        "SearchOrganizationInsights"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-organization-insights))
(common-lisp:progn
 (common-lisp:defun start-cost-estimation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-collection client-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-collection client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-cost-estimation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/cost-estimation"
                                                        "StartCostEstimation"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-cost-estimation))
(common-lisp:progn
 (common-lisp:defun update-event-sources-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-sources)
   (common-lisp:declare (common-lisp:ignorable event-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-sources-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/event-sources"
                                                        "UpdateEventSourcesConfig"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-sources-config))
(common-lisp:progn
 (common-lisp:defun update-resource-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action resource-collection)
   (common-lisp:declare (common-lisp:ignorable action resource-collection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resource-collection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/resource-collections"
                                                        "UpdateResourceCollection"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-collection))
(common-lisp:progn
 (common-lisp:defun update-service-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-integration)
   (common-lisp:declare (common-lisp:ignorable service-integration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-integration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'devops-guru-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/service-integrations"
                                                        "UpdateServiceIntegration"
                                                        "2020-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-integration))
