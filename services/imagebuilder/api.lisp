;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/imagebuilder/api
  (:use)
  (:nicknames #:aws/imagebuilder)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/imagebuilder/api)
(common-lisp:progn
 (common-lisp:defclass imagebuilder-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "imagebuilder"))
 (common-lisp:export 'imagebuilder-request))
(common-lisp:progn
 (common-lisp:define-condition imagebuilder-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'imagebuilder-error))
(common-lisp:defvar *error-map*
  '(("CallRateLimitExceededException" . call-rate-limit-exceeded-exception)
    ("ClientException" . client-exception)
    ("ForbiddenException" . forbidden-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InvalidPaginationTokenException" . invalid-pagination-token-exception)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidVersionNumberException" . invalid-version-number-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceDependencyException" . resource-dependency-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceException" . service-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-aggregation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-aggregation 'make-account-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-aggregation))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-instance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-instance-configuration-"))
   (systems-manager-agent common-lisp:nil :type
    (common-lisp:or systems-manager-agent common-lisp:null))
   (user-data-override common-lisp:nil :type
    (common-lisp:or user-data-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-instance-configuration
                    'make-additional-instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'systems-manager-agent))
      (common-lisp:list
       (common-lisp:cons "systemsManagerAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data-override))
      (common-lisp:list
       (common-lisp:cons "userDataOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami (:copier common-lisp:nil) (:conc-name "struct-shape-ami-"))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or image-state common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ami 'make-ami))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-distribution-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-distribution-configuration-"))
   (name common-lisp:nil :type
    (common-lisp:or ami-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (target-account-ids common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null))
   (ami-tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-permission common-lisp:nil :type
    (common-lisp:or launch-permission-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-distribution-configuration
                    'make-ami-distribution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-account-ids))
      (common-lisp:list
       (common-lisp:cons "targetAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-tags))
      (common-lisp:list
       (common-lisp:cons "amiTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-permission))
      (common-lisp:list
       (common-lisp:cons "launchPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-list () '(trivial-types:proper-list ami))
 (common-lisp:defun |make-ami-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ami))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-name-string () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype build-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition call-rate-limit-exceeded-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       call-rate-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'call-rate-limit-exceeded-exception
                    'call-rate-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-image-creation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-image-creation-request-"))
   (image-build-version-arn
    (common-lisp:error ":imagebuildversionarn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-image-creation-request
                    'make-cancel-image-creation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-image-creation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-image-creation-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-image-creation-response
                    'make-cancel-image-creation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-message)))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (change-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or component-type common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (supported-os-versions common-lisp:nil :type
    (common-lisp:or os-version-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or component-state common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or component-parameter-detail-list common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or component-data common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encrypted common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (publisher common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (obfuscate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscate))
      (common-lisp:list
       (common-lisp:cons "obfuscate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:deftype component-build-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-configuration-"))
   (component-arn (common-lisp:error ":componentarn is required") :type
    (common-lisp:or component-version-arn-or-build-version-arn
                    common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or component-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-configuration 'make-component-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-configuration-list ()
   '(trivial-types:proper-list component-configuration))
 (common-lisp:defun |make-component-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-data () 'common-lisp:string)
(common-lisp:deftype component-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or component-parameter-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or component-parameter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-parameter 'make-component-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-parameter))
   common-lisp:nil))
(common-lisp:deftype component-parameter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-parameter-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-parameter-detail-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or component-parameter-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or component-parameter-type common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or component-parameter-value-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or component-parameter-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-parameter-detail
                    'make-component-parameter-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-parameter-detail-list ()
   '(trivial-types:proper-list component-parameter-detail))
 (common-lisp:defun |make-component-parameter-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            component-parameter-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype component-parameter-list ()
   '(trivial-types:proper-list component-parameter))
 (common-lisp:defun |make-component-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-parameter-name () 'common-lisp:string)
(common-lisp:deftype component-parameter-type () 'common-lisp:string)
(common-lisp:deftype component-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-parameter-value-list ()
   '(trivial-types:proper-list component-parameter-value))
 (common-lisp:defun |make-component-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            component-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (component-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-state-"))
   (status common-lisp:nil :type
    (common-lisp:or component-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component-state 'make-component-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-state))
   common-lisp:nil))
(common-lisp:deftype component-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (supported-os-versions common-lisp:nil :type
    (common-lisp:or os-version-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or component-state common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or component-type common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (change-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (publisher common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (obfuscate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscate))
      (common-lisp:list
       (common-lisp:cons "obfuscate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun |make-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-version-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (supported-os-versions common-lisp:nil :type
    (common-lisp:or os-version-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or component-type common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-version 'make-component-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-version))
   common-lisp:nil))
(common-lisp:deftype component-version-arn () 'common-lisp:string)
(common-lisp:deftype component-version-arn-or-build-version-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-version-list ()
   '(trivial-types:proper-list component-version))
 (common-lisp:defun |make-component-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-"))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-uris common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uris))
      (common-lisp:list
       (common-lisp:cons "imageUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-distribution-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-distribution-configuration-"))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-tags common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (target-repository (common-lisp:error ":targetrepository is required") :type
    (common-lisp:or target-container-repository common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-distribution-configuration
                    'make-container-distribution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-tags))
      (common-lisp:list
       (common-lisp:cons "containerTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-list () '(trivial-types:proper-list container))
 (common-lisp:defun |make-container-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container-recipe (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-recipe-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (container-type common-lisp:nil :type
    (common-lisp:or container-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (components common-lisp:nil :type
    (common-lisp:or component-configuration-list common-lisp:null))
   (instance-configuration common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null))
   (dockerfile-template-data common-lisp:nil :type
    (common-lisp:or docker-file-template common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encrypted common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (parent-image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (working-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (target-repository common-lisp:nil :type
    (common-lisp:or target-container-repository common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-recipe 'make-container-recipe))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-recipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-recipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "instanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-data))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-recipe))
   common-lisp:nil))
(common-lisp:deftype container-recipe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-recipe-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-recipe-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (container-type common-lisp:nil :type
    (common-lisp:or container-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parent-image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-recipe-summary 'make-container-recipe-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-recipe-summary-list ()
   '(trivial-types:proper-list container-recipe-summary))
 (common-lisp:defun |make-container-recipe-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-recipe-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-repository-service () 'common-lisp:string)
(common-lisp:deftype container-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (semantic-version (common-lisp:error ":semanticversion is required") :type
    (common-lisp:or version-number common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (change-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (supported-os-versions common-lisp:nil :type
    (common-lisp:or os-version-list common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or inline-component-data common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (component-build-version-arn common-lisp:nil :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-recipe-request-"))
   (container-type (common-lisp:error ":containertype is required") :type
    (common-lisp:or container-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (semantic-version (common-lisp:error ":semanticversion is required") :type
    (common-lisp:or version-number common-lisp:null))
   (components (common-lisp:error ":components is required") :type
    (common-lisp:or component-configuration-list common-lisp:null))
   (instance-configuration common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null))
   (dockerfile-template-data common-lisp:nil :type
    (common-lisp:or inline-docker-file-template common-lisp:null))
   (dockerfile-template-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (platform-override common-lisp:nil :type
    (common-lisp:or platform common-lisp:null))
   (image-os-version-override common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parent-image (common-lisp:error ":parentimage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (working-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (target-repository (common-lisp:error ":targetrepository is required") :type
    (common-lisp:or target-container-repository common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-recipe-request
                    'make-create-container-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "instanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-data))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-uri))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-override))
      (common-lisp:list
       (common-lisp:cons "platformOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-os-version-override))
      (common-lisp:list
       (common-lisp:cons "imageOsVersionOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-recipe-response
                    'make-create-container-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-distribution-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-distribution-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distributions (common-lisp:error ":distributions is required") :type
    (common-lisp:or distribution-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-configuration-request
                    'make-create-distribution-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-distribution-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-distribution-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-configuration-response
                    'make-create-distribution-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-pipeline-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null))
   (image-tests-configuration common-lisp:nil :type
    (common-lisp:or image-tests-configuration common-lisp:null))
   (enhanced-image-metadata-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or image-scanning-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-pipeline-request
                    'make-create-image-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-pipeline-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-pipeline-arn common-lisp:nil :type
    (common-lisp:or image-pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-pipeline-response
                    'make-create-image-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-recipe-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (semantic-version (common-lisp:error ":semanticversion is required") :type
    (common-lisp:or version-number common-lisp:null))
   (components (common-lisp:error ":components is required") :type
    (common-lisp:or component-configuration-list common-lisp:null))
   (parent-image (common-lisp:error ":parentimage is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mappings common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (working-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (additional-instance-configuration common-lisp:nil :type
    (common-lisp:or additional-instance-configuration common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-recipe-request
                    'make-create-image-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-instance-configuration))
      (common-lisp:list
       (common-lisp:cons "additionalInstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-recipe-response
                    'make-create-image-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-request-"))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null))
   (image-tests-configuration common-lisp:nil :type
    (common-lisp:or image-tests-configuration common-lisp:null))
   (enhanced-image-metadata-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or image-scanning-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-request 'make-create-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-response 'make-create-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-infrastructure-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-infrastructure-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null))
   (instance-profile-name
    (common-lisp:error ":instanceprofilename is required") :type
    (common-lisp:or instance-profile-name-type common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (key-pair common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (terminate-instance-on-failure common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-map common-lisp:null))
   (instance-metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-infrastructure-configuration-request
                    'make-create-infrastructure-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-infrastructure-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-infrastructure-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (infrastructure-configuration-arn common-lisp:nil :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-infrastructure-configuration-response
                    'make-create-infrastructure-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-"))
   (base-score common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (scoring-vector common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cvss-score 'make-cvss-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score-adjustment (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-adjustment-"))
   (metric common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-adjustment 'make-cvss-score-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-adjustment-list ()
   '(trivial-types:proper-list cvss-score-adjustment))
 (common-lisp:defun |make-cvss-score-adjustment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss-score-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cvss-score-details-"))
   (score-source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cvss-source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (scoring-vector common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (adjustments common-lisp:nil :type
    (common-lisp:or cvss-score-adjustment-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-details 'make-cvss-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-source))
      (common-lisp:list
       (common-lisp:cons "scoreSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss-source))
      (common-lisp:list
       (common-lisp:cons "cvssSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-list ()
   '(trivial-types:proper-list cvss-score))
 (common-lisp:defun |make-cvss-score-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype date-time-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-request-"))
   (component-build-version-arn
    (common-lisp:error ":componentbuildversionarn is required") :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component-build-version-arn common-lisp:nil :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-response
                    'make-delete-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-recipe-request-"))
   (container-recipe-arn (common-lisp:error ":containerrecipearn is required")
    :type (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-container-recipe-request
                    'make-delete-container-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-container-recipe-response
                    'make-delete-container-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-distribution-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-distribution-configuration-request-"))
   (distribution-configuration-arn
    (common-lisp:error ":distributionconfigurationarn is required") :type
    (common-lisp:or distribution-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-configuration-request
                    'make-delete-distribution-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-distribution-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-distribution-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-configuration-response
                    'make-delete-distribution-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-pipeline-request-"))
   (image-pipeline-arn (common-lisp:error ":imagepipelinearn is required")
    :type (common-lisp:or image-pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-pipeline-request
                    'make-delete-image-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-pipeline-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-pipeline-arn common-lisp:nil :type
    (common-lisp:or image-pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-pipeline-response
                    'make-delete-image-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-recipe-request-"))
   (image-recipe-arn (common-lisp:error ":imagerecipearn is required") :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-recipe-request
                    'make-delete-image-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-recipe-response
                    'make-delete-image-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-request-"))
   (image-build-version-arn
    (common-lisp:error ":imagebuildversionarn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-request 'make-delete-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-response 'make-delete-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-infrastructure-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-infrastructure-configuration-request-"))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-infrastructure-configuration-request
                    'make-delete-infrastructure-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-infrastructure-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-infrastructure-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (infrastructure-configuration-arn common-lisp:nil :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-infrastructure-configuration-response
                    'make-delete-infrastructure-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:deftype disk-image-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (distribution (:copier common-lisp:nil)
      (:conc-name "struct-shape-distribution-"))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ami-distribution-configuration common-lisp:nil :type
    (common-lisp:or ami-distribution-configuration common-lisp:null))
   (container-distribution-configuration common-lisp:nil :type
    (common-lisp:or container-distribution-configuration common-lisp:null))
   (license-configuration-arns common-lisp:nil :type
    (common-lisp:or license-configuration-arn-list common-lisp:null))
   (launch-template-configurations common-lisp:nil :type
    (common-lisp:or launch-template-configuration-list common-lisp:null))
   (s3export-configuration common-lisp:nil :type
    (common-lisp:or s3export-configuration common-lisp:null))
   (fast-launch-configurations common-lisp:nil :type
    (common-lisp:or fast-launch-configuration-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'distribution 'make-distribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "amiDistributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "containerDistributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "licenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-configurations))
      (common-lisp:list
       (common-lisp:cons "launchTemplateConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "s3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fast-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "fastLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (distribution-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-distribution-configuration-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distributions common-lisp:nil :type
    (common-lisp:or distribution-list common-lisp:null))
   (timeout-minutes (common-lisp:error ":timeoutminutes is required") :type
    (common-lisp:or distribution-timeout-minutes common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'distribution-configuration
                    'make-distribution-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   common-lisp:nil))
(common-lisp:deftype distribution-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (distribution-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-distribution-configuration-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'distribution-configuration-summary
                    'make-distribution-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-configuration-summary-list ()
   '(trivial-types:proper-list distribution-configuration-summary))
 (common-lisp:defun |make-distribution-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            distribution-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype distribution-list ()
   '(trivial-types:proper-list distribution))
 (common-lisp:defun |make-distribution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype distribution-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype docker-file-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-instance-block-device-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-instance-block-device-specification-"))
   (encrypted common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or ebs-iops-integer common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or ebs-volume-size-integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or ebs-volume-type common-lisp:null))
   (throughput common-lisp:nil :type
    (common-lisp:or ebs-volume-throughput common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-instance-block-device-specification
                    'make-ebs-instance-block-device-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "deleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "volumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   common-lisp:nil))
(common-lisp:deftype ebs-iops-integer () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-size-integer () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-throughput () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-configuration-"))
   (repository-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-tags common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-configuration 'make-ecr-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-tags))
      (common-lisp:list
       (common-lisp:cons "containerTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecr-configuration))
   common-lisp:nil))
(common-lisp:deftype empty-string () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fast-launch-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-fast-launch-configuration-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (snapshot-configuration common-lisp:nil :type
    (common-lisp:or fast-launch-snapshot-configuration common-lisp:null))
   (max-parallel-launches common-lisp:nil :type
    (common-lisp:or max-parallel-launches common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or fast-launch-launch-template-specification
                    common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fast-launch-configuration
                    'make-fast-launch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-configuration))
      (common-lisp:list
       (common-lisp:cons "snapshotConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-parallel-launches))
      (common-lisp:list
       (common-lisp:cons "maxParallelLaunches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fast-launch-configuration-list ()
   '(trivial-types:proper-list fast-launch-configuration))
 (common-lisp:defun |make-fast-launch-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fast-launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (fast-launch-launch-template-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-fast-launch-launch-template-specification-"))
   (launch-template-id common-lisp:nil :type
    (common-lisp:or launch-template-id common-lisp:null))
   (launch-template-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-template-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fast-launch-launch-template-specification
                    'make-fast-launch-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "launchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "launchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-version))
      (common-lisp:list
       (common-lisp:cons "launchTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (fast-launch-snapshot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-fast-launch-snapshot-configuration-"))
   (target-resource-count common-lisp:nil :type
    (common-lisp:or target-resource-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fast-launch-snapshot-configuration
                    'make-fast-launch-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-count))
      (common-lisp:list
       (common-lisp:cons "targetResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or filter-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-policy-request-"))
   (component-arn (common-lisp:error ":componentarn is required") :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-policy-request
                    'make-get-component-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-policy-response
                    'make-get-component-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-request-"))
   (component-build-version-arn
    (common-lisp:error ":componentbuildversionarn is required") :type
    (common-lisp:or component-version-arn-or-build-version-arn
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-request 'make-get-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component common-lisp:nil :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-response 'make-get-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-recipe-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-recipe-policy-request-"))
   (container-recipe-arn (common-lisp:error ":containerrecipearn is required")
    :type (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-policy-request
                    'make-get-container-recipe-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-recipe-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-recipe-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-policy-response
                    'make-get-container-recipe-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-recipe-request-"))
   (container-recipe-arn (common-lisp:error ":containerrecipearn is required")
    :type (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-request
                    'make-get-container-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-recipe common-lisp:nil :type
    (common-lisp:or container-recipe common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-response
                    'make-get-container-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-recipe))
      (common-lisp:list
       (common-lisp:cons "containerRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-configuration-request-"))
   (distribution-configuration-arn
    (common-lisp:error ":distributionconfigurationarn is required") :type
    (common-lisp:or distribution-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-configuration-request
                    'make-get-distribution-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distribution-configuration common-lisp:nil :type
    (common-lisp:or distribution-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-configuration-response
                    'make-get-distribution-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "distributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-pipeline-request-"))
   (image-pipeline-arn (common-lisp:error ":imagepipelinearn is required")
    :type (common-lisp:or image-pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-pipeline-request
                    'make-get-image-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-pipeline-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-pipeline common-lisp:nil :type
    (common-lisp:or image-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-pipeline-response
                    'make-get-image-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline))
      (common-lisp:list
       (common-lisp:cons "imagePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-policy-request-"))
   (image-arn (common-lisp:error ":imagearn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-policy-request 'make-get-image-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-policy-response
                    'make-get-image-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-recipe-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-recipe-policy-request-"))
   (image-recipe-arn (common-lisp:error ":imagerecipearn is required") :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-policy-request
                    'make-get-image-recipe-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-recipe-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-recipe-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-policy-response
                    'make-get-image-recipe-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-recipe-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-recipe-request-"))
   (image-recipe-arn (common-lisp:error ":imagerecipearn is required") :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-request 'make-get-image-recipe-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-recipe-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-recipe-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe common-lisp:nil :type
    (common-lisp:or image-recipe common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-response
                    'make-get-image-recipe-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe))
      (common-lisp:list
       (common-lisp:cons "imageRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-request-"))
   (image-build-version-arn
    (common-lisp:error ":imagebuildversionarn is required") :type
    (common-lisp:or image-version-arn-or-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-request 'make-get-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image common-lisp:nil :type (common-lisp:or image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-response 'make-get-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-infrastructure-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-infrastructure-configuration-request-"))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-infrastructure-configuration-request
                    'make-get-infrastructure-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-infrastructure-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-infrastructure-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (infrastructure-configuration common-lisp:nil :type
    (common-lisp:or infrastructure-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-infrastructure-configuration-response
                    'make-get-infrastructure-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-execution-request-"))
   (workflow-execution-id
    (common-lisp:error ":workflowexecutionid is required") :type
    (common-lisp:or workflow-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-execution-request
                    'make-get-workflow-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-execution-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (workflow-build-version-arn common-lisp:nil :type
    (common-lisp:or workflow-build-version-arn common-lisp:null))
   (workflow-execution-id common-lisp:nil :type
    (common-lisp:or workflow-execution-id common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or workflow-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workflow-execution-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or workflow-execution-message common-lisp:null))
   (total-step-count common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-succeeded common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-failed common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-skipped common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-execution-response
                    'make-get-workflow-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-step-count))
      (common-lisp:list
       (common-lisp:cons "totalStepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-steps-succeeded))
      (common-lisp:list
       (common-lisp:cons "totalStepsSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-failed))
      (common-lisp:list
       (common-lisp:cons "totalStepsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-skipped))
      (common-lisp:list
       (common-lisp:cons "totalStepsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-step-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-step-execution-request-"))
   (step-execution-id (common-lisp:error ":stepexecutionid is required") :type
    (common-lisp:or workflow-step-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-execution-request
                    'make-get-workflow-step-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-step-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-step-execution-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (step-execution-id common-lisp:nil :type
    (common-lisp:or workflow-step-execution-id common-lisp:null))
   (workflow-build-version-arn common-lisp:nil :type
    (common-lisp:or workflow-build-version-arn common-lisp:null))
   (workflow-execution-id common-lisp:nil :type
    (common-lisp:or workflow-execution-id common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workflow-step-description common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or workflow-step-action common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workflow-step-execution-status common-lisp:null))
   (rollback-status common-lisp:nil :type
    (common-lisp:or workflow-step-execution-rollback-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or workflow-step-message common-lisp:null))
   (inputs common-lisp:nil :type
    (common-lisp:or workflow-step-inputs common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or workflow-step-outputs common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date-time common-lisp:null))
   (on-failure common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timeout-seconds common-lisp:nil :type
    (common-lisp:or workflow-step-timeout-seconds-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-execution-response
                    'make-get-workflow-step-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-execution-id))
      (common-lisp:list
       (common-lisp:cons "stepExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-status))
      (common-lisp:list
       (common-lisp:cons "rollbackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "onFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   common-lisp:nil))
(common-lisp:deftype http-put-response-hop-limit () 'common-lisp:integer)
(common-lisp:deftype http-tokens () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (image (:copier common-lisp:nil) (:conc-name "struct-shape-image-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or image-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (enhanced-image-metadata-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (os-version common-lisp:nil :type
    (common-lisp:or os-version common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or image-state common-lisp:null))
   (image-recipe common-lisp:nil :type
    (common-lisp:or image-recipe common-lisp:null))
   (container-recipe common-lisp:nil :type
    (common-lisp:or container-recipe common-lisp:null))
   (source-pipeline-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (source-pipeline-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (infrastructure-configuration common-lisp:nil :type
    (common-lisp:or infrastructure-configuration common-lisp:null))
   (distribution-configuration common-lisp:nil :type
    (common-lisp:or distribution-configuration common-lisp:null))
   (image-tests-configuration common-lisp:nil :type
    (common-lisp:or image-tests-configuration common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (output-resources common-lisp:nil :type
    (common-lisp:or output-resources common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (build-type common-lisp:nil :type
    (common-lisp:or build-type common-lisp:null))
   (image-source common-lisp:nil :type
    (common-lisp:or image-source common-lisp:null))
   (scan-state common-lisp:nil :type
    (common-lisp:or image-scan-state common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or image-scanning-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe))
      (common-lisp:list
       (common-lisp:cons "imageRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-recipe))
      (common-lisp:list
       (common-lisp:cons "containerRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-pipeline-name))
      (common-lisp:list
       (common-lisp:cons "sourcePipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "sourcePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "distributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resources))
      (common-lisp:list
       (common-lisp:cons "outputResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-state))
      (common-lisp:list
       (common-lisp:cons "scanState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-aggregation-"))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-aggregation 'make-image-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-aggregation))
   common-lisp:nil))
(common-lisp:deftype image-build-message () 'common-lisp:string)
(common-lisp:deftype image-build-version-arn () 'common-lisp:string)
(common-lisp:deftype image-builder-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-package-"))
   (package-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (package-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-package 'make-image-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "packageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-package-list ()
   '(trivial-types:proper-list image-package))
 (common-lisp:defun |make-image-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-pipeline-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (enhanced-image-metadata-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (infrastructure-configuration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (image-tests-configuration common-lisp:nil :type
    (common-lisp:or image-tests-configuration common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-status common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-last-run common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-next-run common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or image-scanning-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-pipeline 'make-image-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-last-run))
      (common-lisp:list
       (common-lisp:cons "dateLastRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-next-run))
      (common-lisp:list
       (common-lisp:cons "dateNextRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-pipeline-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-pipeline-aggregation-"))
   (image-pipeline-arn common-lisp:nil :type
    (common-lisp:or image-pipeline-arn common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-pipeline-aggregation
                    'make-image-pipeline-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   common-lisp:nil))
(common-lisp:deftype image-pipeline-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-pipeline-list ()
   '(trivial-types:proper-list image-pipeline))
 (common-lisp:defun |make-image-pipeline-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-pipeline))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-recipe (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-recipe-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or image-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (components common-lisp:nil :type
    (common-lisp:or component-configuration-list common-lisp:null))
   (parent-image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mappings common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (working-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (additional-instance-configuration common-lisp:nil :type
    (common-lisp:or additional-instance-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-recipe 'make-image-recipe))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-recipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-recipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-instance-configuration))
      (common-lisp:list
       (common-lisp:cons "additionalInstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-recipe))
   common-lisp:nil))
(common-lisp:deftype image-recipe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-recipe-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-recipe-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parent-image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-recipe-summary 'make-image-recipe-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-recipe-summary-list ()
   '(trivial-types:proper-list image-recipe-summary))
 (common-lisp:defun |make-image-recipe-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-recipe-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-scan-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-scan-finding-"))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (image-pipeline-arn common-lisp:nil :type
    (common-lisp:or image-pipeline-arn common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation common-lisp:nil :type
    (common-lisp:or remediation common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (first-observed-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (inspector-score common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (inspector-score-details common-lisp:nil :type
    (common-lisp:or inspector-score-details common-lisp:null))
   (package-vulnerability-details common-lisp:nil :type
    (common-lisp:or package-vulnerability-details common-lisp:null))
   (fix-available common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-scan-finding 'make-image-scan-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "firstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspector-score))
      (common-lisp:list
       (common-lisp:cons "inspectorScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inspector-score-details))
      (common-lisp:list
       (common-lisp:cons "inspectorScoreDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-vulnerability-details))
      (common-lisp:list
       (common-lisp:cons "packageVulnerabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "fixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-scan-finding-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-scan-finding-aggregation-"))
   (account-aggregation common-lisp:nil :type
    (common-lisp:or account-aggregation common-lisp:null))
   (image-aggregation common-lisp:nil :type
    (common-lisp:or image-aggregation common-lisp:null))
   (image-pipeline-aggregation common-lisp:nil :type
    (common-lisp:or image-pipeline-aggregation common-lisp:null))
   (vulnerability-id-aggregation common-lisp:nil :type
    (common-lisp:or vulnerability-id-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-scan-finding-aggregation
                    'make-image-scan-finding-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aggregation))
      (common-lisp:list
       (common-lisp:cons "accountAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-aggregation))
      (common-lisp:list
       (common-lisp:cons "imageAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-pipeline-aggregation))
      (common-lisp:list
       (common-lisp:cons "imagePipelineAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vulnerability-id-aggregation))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityIdAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-scan-finding-aggregations-list ()
   '(trivial-types:proper-list image-scan-finding-aggregation))
 (common-lisp:defun |make-image-scan-finding-aggregations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-scan-finding-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-scan-findings-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-scan-findings-filter-"))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or image-scan-findings-filter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-scan-findings-filter
                    'make-image-scan-findings-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-filter-list ()
   '(trivial-types:proper-list image-scan-findings-filter))
 (common-lisp:defun |make-image-scan-findings-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-scan-findings-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-image-scan-findings-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-list ()
   '(trivial-types:proper-list image-scan-finding))
 (common-lisp:defun |make-image-scan-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-scan-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-scan-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-scan-state-"))
   (status common-lisp:nil :type
    (common-lisp:or image-scan-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-scan-state 'make-image-scan-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-state))
   common-lisp:nil))
(common-lisp:deftype image-scan-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-scanning-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-scanning-configuration-"))
   (image-scanning-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (ecr-configuration common-lisp:nil :type
    (common-lisp:or ecr-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-scanning-configuration
                    'make-image-scanning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-enabled))
      (common-lisp:list
       (common-lisp:cons "imageScanningEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-configuration))
      (common-lisp:list
       (common-lisp:cons "ecrConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   common-lisp:nil))
(common-lisp:deftype image-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-state-"))
   (status common-lisp:nil :type
    (common-lisp:or image-status common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-state 'make-image-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-state))
   common-lisp:nil))
(common-lisp:deftype image-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or image-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (os-version common-lisp:nil :type
    (common-lisp:or os-version common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or image-state common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (output-resources common-lisp:nil :type
    (common-lisp:or output-resources common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (build-type common-lisp:nil :type
    (common-lisp:or build-type common-lisp:null))
   (image-source common-lisp:nil :type
    (common-lisp:or image-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-summary 'make-image-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resources))
      (common-lisp:list
       (common-lisp:cons "outputResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-summary-list ()
   '(trivial-types:proper-list image-summary))
 (common-lisp:defun |make-image-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-tests-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-tests-configuration-"))
   (image-tests-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (timeout-minutes common-lisp:nil :type
    (common-lisp:or image-tests-timeout-minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-tests-configuration
                    'make-image-tests-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tests-enabled))
      (common-lisp:list
       (common-lisp:cons "imageTestsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   common-lisp:nil))
(common-lisp:deftype image-tests-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype image-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-version-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or image-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-number common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (os-version common-lisp:nil :type
    (common-lisp:or os-version common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (build-type common-lisp:nil :type
    (common-lisp:or build-type common-lisp:null))
   (image-source common-lisp:nil :type
    (common-lisp:or image-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-version 'make-image-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-version))
   common-lisp:nil))
(common-lisp:deftype image-version-arn () 'common-lisp:string)
(common-lisp:deftype image-version-arn-or-build-version-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-version-list ()
   '(trivial-types:proper-list image-version))
 (common-lisp:defun |make-image-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-component-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (semantic-version (common-lisp:error ":semanticversion is required") :type
    (common-lisp:or version-number common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (change-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or component-type common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or component-format common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-component-request 'make-import-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-component-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (component-build-version-arn common-lisp:nil :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-component-response
                    'make-import-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-vm-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-vm-image-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (semantic-version (common-lisp:error ":semanticversion is required") :type
    (common-lisp:or version-number common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (os-version common-lisp:nil :type
    (common-lisp:or os-version common-lisp:null))
   (vm-import-task-id (common-lisp:error ":vmimporttaskid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-vm-image-request 'make-import-vm-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-import-task-id))
      (common-lisp:list
       (common-lisp:cons "vmImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-vm-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-vm-image-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-vm-image-response 'make-import-vm-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (infrastructure-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-infrastructure-configuration-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null))
   (instance-profile-name common-lisp:nil :type
    (common-lisp:or instance-profile-name-type common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (key-pair common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (terminate-instance-on-failure common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-map common-lisp:null))
   (instance-metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'infrastructure-configuration
                    'make-infrastructure-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   common-lisp:nil))
(common-lisp:deftype infrastructure-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (infrastructure-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-infrastructure-configuration-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null))
   (instance-profile-name common-lisp:nil :type
    (common-lisp:or instance-profile-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'infrastructure-configuration-summary
                    'make-infrastructure-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype infrastructure-configuration-summary-list ()
   '(trivial-types:proper-list infrastructure-configuration-summary))
 (common-lisp:defun |make-infrastructure-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            infrastructure-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inline-component-data () 'common-lisp:string)
(common-lisp:deftype inline-docker-file-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inspector-score-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-inspector-score-details-"))
   (adjusted-cvss common-lisp:nil :type
    (common-lisp:or cvss-score-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inspector-score-details 'make-inspector-score-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjusted-cvss))
      (common-lisp:list
       (common-lisp:cons "adjustedCvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-block-device-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-block-device-mapping-"))
   (device-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or ebs-instance-block-device-specification common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (no-device common-lisp:nil :type
    (common-lisp:or empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-block-device-mapping
                    'make-instance-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "virtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "noDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-block-device-mappings ()
   '(trivial-types:proper-list instance-block-device-mapping))
 (common-lisp:defun |make-instance-block-device-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-configuration-"))
   (image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or instance-block-device-mappings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-metadata-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-metadata-options-"))
   (http-tokens common-lisp:nil :type
    (common-lisp:or http-tokens common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or http-put-response-hop-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:deftype instance-profile-name-type () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-type-list ()
   '(trivial-types:proper-list instance-type))
 (common-lisp:defun |make-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-pagination-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-token-exception
                    'invalid-pagination-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-version-number-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-version-number-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-version-number-exception
                    'invalid-version-number-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-permission-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-permission-configuration-"))
   (user-ids common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null))
   (user-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (organization-arns common-lisp:nil :type
    (common-lisp:or organization-arn-list common-lisp:null))
   (organizational-unit-arns common-lisp:nil :type
    (common-lisp:or organizational-unit-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-permission-configuration
                    'make-launch-permission-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "userGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-arns))
      (common-lisp:list
       (common-lisp:cons "organizationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-arns))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-template-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-template-configuration-"))
   (launch-template-id (common-lisp:error ":launchtemplateid is required")
    :type (common-lisp:or launch-template-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (set-default-version common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-template-configuration
                    'make-launch-template-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "launchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-default-version))
      (common-lisp:list
       (common-lisp:cons "setDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-template-configuration-list ()
   '(trivial-types:proper-list launch-template-configuration))
 (common-lisp:defun |make-launch-template-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-template-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-template-id () 'common-lisp:string)
(common-lisp:deftype license-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-configuration-arn-list ()
   '(trivial-types:proper-list license-configuration-arn))
 (common-lisp:defun |make-license-configuration-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-build-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-build-versions-request-"))
   (component-version-arn
    (common-lisp:error ":componentversionarn is required") :type
    (common-lisp:or component-version-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-build-versions-request
                    'make-list-component-build-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-component-build-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-component-build-versions-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component-summary-list common-lisp:nil :type
    (common-lisp:or component-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-component-build-versions-response
                    'make-list-component-build-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-summary-list))
      (common-lisp:list
       (common-lisp:cons "componentSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-request-"))
   (owner common-lisp:nil :type (common-lisp:or ownership common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (by-name common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'by-name))
      (common-lisp:list
       (common-lisp:cons "byName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component-version-list common-lisp:nil :type
    (common-lisp:or component-version-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-list))
      (common-lisp:list
       (common-lisp:cons "componentVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-container-recipes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-container-recipes-request-"))
   (owner common-lisp:nil :type (common-lisp:or ownership common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-container-recipes-request
                    'make-list-container-recipes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-container-recipes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-container-recipes-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-recipe-summary-list common-lisp:nil :type
    (common-lisp:or container-recipe-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-container-recipes-response
                    'make-list-container-recipes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-summary-list))
      (common-lisp:list
       (common-lisp:cons "containerRecipeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-distribution-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-distribution-configurations-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-distribution-configurations-request
                    'make-list-distribution-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-distribution-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-distribution-configurations-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distribution-configuration-summary-list common-lisp:nil :type
    (common-lisp:or distribution-configuration-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-distribution-configurations-response
                    'make-list-distribution-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-build-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-build-versions-request-"))
   (image-version-arn (common-lisp:error ":imageversionarn is required") :type
    (common-lisp:or image-version-arn common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-build-versions-request
                    'make-list-image-build-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-build-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-build-versions-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-summary-list common-lisp:nil :type
    (common-lisp:or image-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-build-versions-response
                    'make-list-image-build-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-packages-request-"))
   (image-build-version-arn
    (common-lisp:error ":imagebuildversionarn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-packages-request
                    'make-list-image-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-packages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-packages-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-package-list common-lisp:nil :type
    (common-lisp:or image-package-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-packages-response
                    'make-list-image-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-package-list))
      (common-lisp:list
       (common-lisp:cons "imagePackageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-pipeline-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-pipeline-images-request-"))
   (image-pipeline-arn (common-lisp:error ":imagepipelinearn is required")
    :type (common-lisp:or image-pipeline-arn common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipeline-images-request
                    'make-list-image-pipeline-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-pipeline-images-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-pipeline-images-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-summary-list common-lisp:nil :type
    (common-lisp:or image-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipeline-images-response
                    'make-list-image-pipeline-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-pipelines-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipelines-request
                    'make-list-image-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-pipelines-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-pipeline-list common-lisp:nil :type
    (common-lisp:or image-pipeline-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipelines-response
                    'make-list-image-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-list))
      (common-lisp:list
       (common-lisp:cons "imagePipelineList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-recipes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-recipes-request-"))
   (owner common-lisp:nil :type (common-lisp:or ownership common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-recipes-request
                    'make-list-image-recipes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-recipes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-recipes-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe-summary-list common-lisp:nil :type
    (common-lisp:or image-recipe-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-recipes-response
                    'make-list-image-recipes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-recipe-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageRecipeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-scan-finding-aggregations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-image-scan-finding-aggregations-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-finding-aggregations-request
                    'make-list-image-scan-finding-aggregations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-scan-finding-aggregations-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-image-scan-finding-aggregations-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (aggregation-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (responses common-lisp:nil :type
    (common-lisp:or image-scan-finding-aggregations-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-finding-aggregations-response
                    'make-list-image-scan-finding-aggregations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-scan-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-scan-findings-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or image-scan-findings-filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-findings-request
                    'make-list-image-scan-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-scan-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-scan-findings-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (findings common-lisp:nil :type
    (common-lisp:or image-scan-findings-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-findings-response
                    'make-list-image-scan-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-images-request-"))
   (owner common-lisp:nil :type (common-lisp:or ownership common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (by-name common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (include-deprecated common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-images-request 'make-list-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'by-name))
      (common-lisp:list
       (common-lisp:cons "byName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-deprecated))
      (common-lisp:list
       (common-lisp:cons "includeDeprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-images-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-images-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-version-list common-lisp:nil :type
    (common-lisp:or image-version-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-images-response 'make-list-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-list))
      (common-lisp:list
       (common-lisp:cons "imageVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-infrastructure-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-infrastructure-configurations-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-infrastructure-configurations-request
                    'make-list-infrastructure-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-infrastructure-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-infrastructure-configurations-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (infrastructure-configuration-summary-list common-lisp:nil :type
    (common-lisp:or infrastructure-configuration-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-infrastructure-configurations-response
                    'make-list-infrastructure-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or image-builder-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflow-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflow-executions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (image-build-version-arn
    (common-lisp:error ":imagebuildversionarn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-executions-request
                    'make-list-workflow-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflow-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflow-executions-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (workflow-executions common-lisp:nil :type
    (common-lisp:or workflow-executions-list common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or image-build-message common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-executions-response
                    'make-list-workflow-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-executions))
      (common-lisp:list
       (common-lisp:cons "workflowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflow-step-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflow-step-executions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or restricted-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workflow-execution-id
    (common-lisp:error ":workflowexecutionid is required") :type
    (common-lisp:or workflow-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-executions-request
                    'make-list-workflow-step-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflow-step-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflow-step-executions-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (steps common-lisp:nil :type
    (common-lisp:or workflow-step-executions-list common-lisp:null))
   (workflow-build-version-arn common-lisp:nil :type
    (common-lisp:or workflow-build-version-arn common-lisp:null))
   (workflow-execution-id common-lisp:nil :type
    (common-lisp:or workflow-execution-id common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or image-build-message common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-executions-response
                    'make-list-workflow-step-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logging (:copier common-lisp:nil) (:conc-name "struct-shape-logging-"))
   (s3logs common-lisp:nil :type (common-lisp:or s3logs common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "s3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:deftype max-parallel-launches () 'common-lisp:integer)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-non-empty-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype organization-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-arn-list ()
   '(trivial-types:proper-list organization-arn))
 (common-lisp:defun |make-organization-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organization-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organizational-unit-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-arn-list ()
   '(trivial-types:proper-list organizational-unit-arn))
 (common-lisp:defun |make-organizational-unit-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype os-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype os-version-list ()
   '(trivial-types:proper-list os-version))
 (common-lisp:defun |make-os-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list os-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (output-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-resources-"))
   (amis common-lisp:nil :type (common-lisp:or ami-list common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-resources 'make-output-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amis))
      (common-lisp:list
       (common-lisp:cons "amis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-resources))
   common-lisp:nil))
(common-lisp:deftype ownership () 'common-lisp:string)
(common-lisp:deftype package-architecture () 'common-lisp:string)
(common-lisp:deftype package-epoch () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (package-vulnerability-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-vulnerability-details-"))
   (vulnerability-id (common-lisp:error ":vulnerabilityid is required") :type
    (common-lisp:or vulnerability-id common-lisp:null))
   (vulnerable-packages common-lisp:nil :type
    (common-lisp:or vulnerable-package-list common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cvss common-lisp:nil :type
    (common-lisp:or cvss-score-list common-lisp:null))
   (related-vulnerabilities common-lisp:nil :type
    (common-lisp:or vulnerability-id-list common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-created-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (vendor-updated-at common-lisp:nil :type
    (common-lisp:or date-time-timestamp common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-vulnerability-details
                    'make-package-vulnerability-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "vulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "vendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "vendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-start-condition () 'common-lisp:string)
(common-lisp:deftype pipeline-status () 'common-lisp:string)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-component-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-component-policy-request-"))
   (component-arn (common-lisp:error ":componentarn is required") :type
    (common-lisp:or component-build-version-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-component-policy-request
                    'make-put-component-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-component-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-component-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component-arn common-lisp:nil :type
    (common-lisp:or component-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-component-policy-response
                    'make-put-component-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-container-recipe-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-container-recipe-policy-request-"))
   (container-recipe-arn (common-lisp:error ":containerrecipearn is required")
    :type (common-lisp:or container-recipe-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-container-recipe-policy-request
                    'make-put-container-recipe-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-container-recipe-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-container-recipe-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-container-recipe-policy-response
                    'make-put-container-recipe-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-image-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-image-policy-request-"))
   (image-arn (common-lisp:error ":imagearn is required") :type
    (common-lisp:or image-build-version-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-image-policy-request 'make-put-image-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-image-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-image-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-image-policy-response
                    'make-put-image-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-image-recipe-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-image-recipe-policy-request-"))
   (image-recipe-arn (common-lisp:error ":imagerecipearn is required") :type
    (common-lisp:or image-recipe-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resource-policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-image-recipe-policy-request
                    'make-put-image-recipe-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-image-recipe-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-image-recipe-policy-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-image-recipe-policy-response
                    'make-put-image-recipe-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remediation (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-"))
   (recommendation common-lisp:nil :type
    (common-lisp:or remediation-recommendation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remediation-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-recommendation-"))
   (text common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remediation-recommendation
                    'make-remediation-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-dependency-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-dependency-exception
                    'resource-dependency-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-resource-tag-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype restricted-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (s3export-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3export-configuration-"))
   (role-name (common-lisp:error ":rolename is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (disk-image-format (common-lisp:error ":diskimageformat is required") :type
    (common-lisp:or disk-image-format common-lisp:null))
   (s3bucket (common-lisp:error ":s3bucket is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3export-configuration 'make-s3export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-format))
      (common-lisp:list
       (common-lisp:cons "diskImageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "s3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3logs (:copier common-lisp:nil) (:conc-name "struct-shape-s3logs-"))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3logs 'make-s3logs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or timezone common-lisp:null))
   (pipeline-execution-start-condition common-lisp:nil :type
    (common-lisp:or pipeline-execution-start-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "scheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-start-condition))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionStartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (imagebuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype severity-count-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (severity-counts (:copier common-lisp:nil)
      (:conc-name "struct-shape-severity-counts-"))
   (all common-lisp:nil :type
    (common-lisp:or severity-count-number common-lisp:null))
   (critical common-lisp:nil :type
    (common-lisp:or severity-count-number common-lisp:null))
   (high common-lisp:nil :type
    (common-lisp:or severity-count-number common-lisp:null))
   (medium common-lisp:nil :type
    (common-lisp:or severity-count-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity-counts 'make-severity-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "all"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high))
      (common-lisp:list
       (common-lisp:cons "high"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medium))
      (common-lisp:list
       (common-lisp:cons "medium"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-counts))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype source-layer-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-image-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-image-pipeline-execution-request-"))
   (image-pipeline-arn (common-lisp:error ":imagepipelinearn is required")
    :type (common-lisp:or image-pipeline-arn common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-image-pipeline-execution-request
                    'make-start-image-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-image-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-image-pipeline-execution-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-build-version-arn common-lisp:nil :type
    (common-lisp:or image-build-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-image-pipeline-execution-response
                    'make-start-image-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (systems-manager-agent (:copier common-lisp:nil)
      (:conc-name "struct-shape-systems-manager-agent-"))
   (uninstall-after-build common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'systems-manager-agent 'make-systems-manager-agent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uninstall-after-build))
      (common-lisp:list
       (common-lisp:cons "uninstallAfterBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-container-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-container-repository-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or container-repository-service common-lisp:null))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-container-repository
                    'make-target-container-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   common-lisp:nil))
(common-lisp:deftype target-resource-count () 'common-lisp:integer)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or image-builder-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-configuration-request-"))
   (distribution-configuration-arn
    (common-lisp:error ":distributionconfigurationarn is required") :type
    (common-lisp:or distribution-configuration-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (distributions (common-lisp:error ":distributions is required") :type
    (common-lisp:or distribution-list common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-configuration-request
                    'make-update-distribution-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-configuration-response
                    'make-update-distribution-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-pipeline-request-"))
   (image-pipeline-arn (common-lisp:error ":imagepipelinearn is required")
    :type (common-lisp:or image-pipeline-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-recipe-arn common-lisp:nil :type
    (common-lisp:or image-recipe-arn common-lisp:null))
   (container-recipe-arn common-lisp:nil :type
    (common-lisp:or container-recipe-arn common-lisp:null))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null))
   (distribution-configuration-arn common-lisp:nil :type
    (common-lisp:or distribution-configuration-arn common-lisp:null))
   (image-tests-configuration common-lisp:nil :type
    (common-lisp:or image-tests-configuration common-lisp:null))
   (enhanced-image-metadata-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-status common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or image-scanning-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-pipeline-request
                    'make-update-image-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-pipeline-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (image-pipeline-arn common-lisp:nil :type
    (common-lisp:or image-pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-pipeline-response
                    'make-update-image-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-infrastructure-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-infrastructure-configuration-request-"))
   (infrastructure-configuration-arn
    (common-lisp:error ":infrastructureconfigurationarn is required") :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-types common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null))
   (instance-profile-name
    (common-lisp:error ":instanceprofilename is required") :type
    (common-lisp:or instance-profile-name-type common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (key-pair common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (terminate-instance-on-failure common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-map common-lisp:null))
   (instance-metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-infrastructure-configuration-request
                    'make-update-infrastructure-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-infrastructure-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-infrastructure-configuration-response-"))
   (request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (infrastructure-configuration-arn common-lisp:nil :type
    (common-lisp:or infrastructure-configuration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-infrastructure-configuration-response
                    'make-update-infrastructure-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype user-data-override () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:string)
(common-lisp:deftype vulnerability-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerability-id-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerability-id-aggregation-"))
   (vulnerability-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-counts common-lisp:nil :type
    (common-lisp:or severity-counts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vulnerability-id-aggregation
                    'make-vulnerability-id-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vulnerability-id-list ()
   '(trivial-types:proper-list vulnerability-id))
 (common-lisp:defun |make-vulnerability-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerable-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerable-package-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-layer-hash common-lisp:nil :type
    (common-lisp:or source-layer-hash common-lisp:null))
   (epoch common-lisp:nil :type
    (common-lisp:or package-epoch common-lisp:null))
   (release common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arch common-lisp:nil :type
    (common-lisp:or package-architecture common-lisp:null))
   (package-manager common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (file-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (fixed-in-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vulnerable-package 'make-vulnerable-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "sourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "packageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-in-version))
      (common-lisp:list
       (common-lisp:cons "fixedInVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerable-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vulnerable-package-list ()
   '(trivial-types:proper-list vulnerable-package))
 (common-lisp:defun |make-vulnerable-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerable-package))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-build-version-arn () 'common-lisp:string)
(common-lisp:deftype workflow-execution-id () 'common-lisp:string)
(common-lisp:deftype workflow-execution-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-execution-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-execution-metadata-"))
   (workflow-build-version-arn common-lisp:nil :type
    (common-lisp:or workflow-build-version-arn common-lisp:null))
   (workflow-execution-id common-lisp:nil :type
    (common-lisp:or workflow-execution-id common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or workflow-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workflow-execution-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or workflow-execution-message common-lisp:null))
   (total-step-count common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-succeeded common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-failed common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (total-steps-skipped common-lisp:nil :type
    (common-lisp:or workflow-step-count common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-metadata
                    'make-workflow-execution-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-step-count))
      (common-lisp:list
       (common-lisp:cons "totalStepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-steps-succeeded))
      (common-lisp:list
       (common-lisp:cons "totalStepsSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-failed))
      (common-lisp:list
       (common-lisp:cons "totalStepsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-skipped))
      (common-lisp:list
       (common-lisp:cons "totalStepsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   common-lisp:nil))
(common-lisp:deftype workflow-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-executions-list ()
   '(trivial-types:proper-list workflow-execution-metadata))
 (common-lisp:defun |make-workflow-executions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workflow-execution-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-step-action () 'common-lisp:string)
(common-lisp:deftype workflow-step-count () 'common-lisp:integer)
(common-lisp:deftype workflow-step-description () 'common-lisp:string)
(common-lisp:deftype workflow-step-execution-id () 'common-lisp:string)
(common-lisp:deftype workflow-step-execution-rollback-status ()
  'common-lisp:string)
(common-lisp:deftype workflow-step-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-step-executions-list ()
   '(trivial-types:proper-list workflow-step-metadata))
 (common-lisp:defun |make-workflow-step-executions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-step-inputs () 'common-lisp:string)
(common-lisp:deftype workflow-step-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-step-metadata-"))
   (step-execution-id common-lisp:nil :type
    (common-lisp:or workflow-step-execution-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workflow-step-description common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or workflow-step-action common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workflow-step-execution-status common-lisp:null))
   (rollback-status common-lisp:nil :type
    (common-lisp:or workflow-step-execution-rollback-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or workflow-step-message common-lisp:null))
   (inputs common-lisp:nil :type
    (common-lisp:or workflow-step-inputs common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or workflow-step-outputs common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-metadata 'make-workflow-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-execution-id))
      (common-lisp:list
       (common-lisp:cons "stepExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-status))
      (common-lisp:list
       (common-lisp:cons "rollbackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   common-lisp:nil))
(common-lisp:deftype workflow-step-name () 'common-lisp:string)
(common-lisp:deftype workflow-step-outputs () 'common-lisp:string)
(common-lisp:deftype workflow-step-timeout-seconds-integer ()
  'common-lisp:integer)
(common-lisp:deftype workflow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-image-creation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable image-build-version-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-image-creation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CancelImageCreation"
                                                        "CancelImageCreation"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-image-creation))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     change-description platform supported-os-versions data uri
                     kms-key-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description change-description
     platform supported-os-versions data uri kms-key-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateComponent"
                                                        "CreateComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-type name description
                     semantic-version components instance-configuration
                     dockerfile-template-data dockerfile-template-uri
                     platform-override image-os-version-override parent-image
                     tags working-directory target-repository kms-key-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable container-type name description semantic-version
     components instance-configuration dockerfile-template-data
     dockerfile-template-uri platform-override image-os-version-override
     parent-image tags working-directory target-repository kms-key-id
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateContainerRecipe"
                                                        "CreateContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-container-recipe))
(common-lisp:progn
 (common-lisp:defun create-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description distributions tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description distributions tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateDistributionConfiguration"
                                                        "CreateDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun create-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn container-recipe-arn
                     distribution-configuration-arn
                     infrastructure-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled tags client-token
                     image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable image-recipe-arn container-recipe-arn
     distribution-configuration-arn infrastructure-configuration-arn
     image-tests-configuration enhanced-image-metadata-enabled tags
     client-token image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/CreateImage"
                                                        "CreateImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image))
(common-lisp:progn
 (common-lisp:defun create-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description image-recipe-arn
                     container-recipe-arn infrastructure-configuration-arn
                     distribution-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled schedule status tags
                     client-token image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name description image-recipe-arn
     container-recipe-arn infrastructure-configuration-arn
     distribution-configuration-arn image-tests-configuration
     enhanced-image-metadata-enabled schedule status tags client-token
     image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateImagePipeline"
                                                        "CreateImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-pipeline))
(common-lisp:progn
 (common-lisp:defun create-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description semantic-version
                     components parent-image block-device-mappings tags
                     working-directory additional-instance-configuration
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description semantic-version components
     parent-image block-device-mappings tags working-directory
     additional-instance-configuration client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateImageRecipe"
                                                        "CreateImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-recipe))
(common-lisp:progn
 (common-lisp:defun create-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description instance-types
                     instance-profile-name security-group-ids subnet-id logging
                     key-pair terminate-instance-on-failure sns-topic-arn
                     resource-tags instance-metadata-options tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description instance-types
     instance-profile-name security-group-ids subnet-id logging key-pair
     terminate-instance-on-failure sns-topic-arn resource-tags
     instance-metadata-options tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/CreateInfrastructureConfiguration"
                                                        "CreateInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable component-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteComponent"
                                                        "DeleteComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteContainerRecipe"
                                                        "DeleteContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-container-recipe))
(common-lisp:progn
 (common-lisp:defun delete-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable distribution-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteDistributionConfiguration"
                                                        "DeleteDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/DeleteImage"
                                                        "DeleteImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image))
(common-lisp:progn
 (common-lisp:defun delete-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:declare (common-lisp:ignorable image-pipeline-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteImagePipeline"
                                                        "DeleteImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteImageRecipe"
                                                        "DeleteImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-recipe))
(common-lisp:progn
 (common-lisp:defun delete-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/DeleteInfrastructureConfiguration"
                                                        "DeleteInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable component-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/GetComponent"
                                                        "GetComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-component-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-arn)
   (common-lisp:declare (common-lisp:ignorable component-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetComponentPolicy"
                                                        "GetComponentPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component-policy))
(common-lisp:progn
 (common-lisp:defun get-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetContainerRecipe"
                                                        "GetContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-recipe))
(common-lisp:progn
 (common-lisp:defun get-container-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-recipe-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetContainerRecipePolicy"
                                                        "GetContainerRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-recipe-policy))
(common-lisp:progn
 (common-lisp:defun get-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable distribution-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetDistributionConfiguration"
                                                        "GetDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun get-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/GetImage"
                                                        "GetImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image))
(common-lisp:progn
 (common-lisp:defun get-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:declare (common-lisp:ignorable image-pipeline-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetImagePipeline"
                                                        "GetImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-pipeline))
(common-lisp:progn
 (common-lisp:defun get-image-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-arn)
   (common-lisp:declare (common-lisp:ignorable image-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/GetImagePolicy"
                                                        "GetImagePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-policy))
(common-lisp:progn
 (common-lisp:defun get-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/GetImageRecipe"
                                                        "GetImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-recipe))
(common-lisp:progn
 (common-lisp:defun get-image-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-recipe-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetImageRecipePolicy"
                                                        "GetImageRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-recipe-policy))
(common-lisp:progn
 (common-lisp:defun get-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetInfrastructureConfiguration"
                                                        "GetInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun get-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-execution-id)
   (common-lisp:declare (common-lisp:ignorable workflow-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetWorkflowExecution"
                                                        "GetWorkflowExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-execution))
(common-lisp:progn
 (common-lisp:defun get-workflow-step-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key step-execution-id)
   (common-lisp:declare (common-lisp:ignorable step-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-workflow-step-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/GetWorkflowStepExecution"
                                                        "GetWorkflowStepExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-step-execution))
(common-lisp:progn
 (common-lisp:defun import-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     change-description type format platform data uri
                     kms-key-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description change-description
     type format platform data uri kms-key-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/ImportComponent"
                                                        "ImportComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-component))
(common-lisp:progn
 (common-lisp:defun import-vm-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     platform os-version vm-import-task-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description platform
     os-version vm-import-task-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-vm-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/ImportVmImage"
                                                        "ImportVmImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-vm-image))
(common-lisp:progn
 (common-lisp:defun list-component-build-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-version-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable component-version-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-component-build-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListComponentBuildVersions"
                                                        "ListComponentBuildVersions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-component-build-versions))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters by-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters by-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListComponents"
                                                        "ListComponents"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-container-recipes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-container-recipes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListContainerRecipes"
                                                        "ListContainerRecipes"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-container-recipes))
(common-lisp:progn
 (common-lisp:defun list-distribution-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distribution-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListDistributionConfigurations"
                                                        "ListDistributionConfigurations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distribution-configurations))
(common-lisp:progn
 (common-lisp:defun list-image-build-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-version-arn filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-version-arn filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-build-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImageBuildVersions"
                                                        "ListImageBuildVersions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-build-versions))
(common-lisp:progn
 (common-lisp:defun list-image-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-build-version-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImagePackages"
                                                        "ListImagePackages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-packages))
(common-lisp:progn
 (common-lisp:defun list-image-pipeline-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-pipeline-images-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImagePipelineImages"
                                                        "ListImagePipelineImages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-pipeline-images))
(common-lisp:progn
 (common-lisp:defun list-image-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImagePipelines"
                                                        "ListImagePipelines"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-pipelines))
(common-lisp:progn
 (common-lisp:defun list-image-recipes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-recipes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImageRecipes"
                                                        "ListImageRecipes"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-recipes))
(common-lisp:progn
 (common-lisp:defun list-image-scan-finding-aggregations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token)
   (common-lisp:declare (common-lisp:ignorable filter next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-scan-finding-aggregations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImageScanFindingAggregations"
                                                        "ListImageScanFindingAggregations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-scan-finding-aggregations))
(common-lisp:progn
 (common-lisp:defun list-image-scan-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-scan-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImageScanFindings"
                                                        "ListImageScanFindings"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-scan-findings))
(common-lisp:progn
 (common-lisp:defun list-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters by-name max-results
                     next-token include-deprecated)
   (common-lisp:declare
    (common-lisp:ignorable owner filters by-name max-results next-token
     include-deprecated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListImages"
                                                        "ListImages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-images))
(common-lisp:progn
 (common-lisp:defun list-infrastructure-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-infrastructure-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListInfrastructureConfigurations"
                                                        "ListInfrastructureConfigurations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-infrastructure-configurations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     image-build-version-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflow-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListWorkflowExecutions"
                                                        "ListWorkflowExecutions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-executions))
(common-lisp:progn
 (common-lisp:defun list-workflow-step-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     workflow-execution-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-workflow-step-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListWorkflowStepExecutions"
                                                        "ListWorkflowStepExecutions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-step-executions))
(common-lisp:progn
 (common-lisp:defun put-component-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-arn policy)
   (common-lisp:declare (common-lisp:ignorable component-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-component-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/PutComponentPolicy"
                                                        "PutComponentPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-component-policy))
(common-lisp:progn
 (common-lisp:defun put-container-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn policy)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-container-recipe-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/PutContainerRecipePolicy"
                                                        "PutContainerRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-container-recipe-policy))
(common-lisp:progn
 (common-lisp:defun put-image-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-arn policy)
   (common-lisp:declare (common-lisp:ignorable image-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/PutImagePolicy"
                                                        "PutImagePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-image-policy))
(common-lisp:progn
 (common-lisp:defun put-image-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn policy)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-recipe-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/PutImageRecipePolicy"
                                                        "PutImageRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-image-recipe-policy))
(common-lisp:progn
 (common-lisp:defun start-image-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-image-pipeline-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/StartImagePipelineExecution"
                                                        "StartImagePipelineExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-image-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn
                     description distributions client-token)
   (common-lisp:declare
    (common-lisp:ignorable distribution-configuration-arn description
     distributions client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/UpdateDistributionConfiguration"
                                                        "UpdateDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun update-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn description
                     image-recipe-arn container-recipe-arn
                     infrastructure-configuration-arn
                     distribution-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled schedule status
                     client-token image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn description image-recipe-arn
     container-recipe-arn infrastructure-configuration-arn
     distribution-configuration-arn image-tests-configuration
     enhanced-image-metadata-enabled schedule status client-token
     image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/UpdateImagePipeline"
                                                        "UpdateImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image-pipeline))
(common-lisp:progn
 (common-lisp:defun update-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn
                     description instance-types instance-profile-name
                     security-group-ids subnet-id logging key-pair
                     terminate-instance-on-failure sns-topic-arn client-token
                     resource-tags instance-metadata-options)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn description
     instance-types instance-profile-name security-group-ids subnet-id logging
     key-pair terminate-instance-on-failure sns-topic-arn client-token
     resource-tags instance-metadata-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/UpdateInfrastructureConfiguration"
                                                        "UpdateInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-infrastructure-configuration))
