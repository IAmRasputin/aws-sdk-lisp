;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/imagebuilder/api
  (:use)
  (:nicknames #:aws/imagebuilder)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/imagebuilder/api)
(common-lisp:progn
 (common-lisp:defclass imagebuilder-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "imagebuilder" :protocol
                        :rest-json))
 (common-lisp:export 'imagebuilder-request))
(common-lisp:progn
 (common-lisp:define-condition imagebuilder-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'imagebuilder-error))
(common-lisp:defvar *error-map*
  '(("CallRateLimitExceededException" . call-rate-limit-exceeded-exception)
    ("ClientException" . client-exception)
    ("ForbiddenException" . forbidden-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InvalidPaginationTokenException" . invalid-pagination-token-exception)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidVersionNumberException" . invalid-version-number-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceDependencyException" . resource-dependency-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceException" . service-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defclass account-aggregation common-lisp:nil
                       ((severity-counts :initarg :|severityCounts| :type
                         (common-lisp:or severity-counts common-lisp:null)
                         :accessor %account-aggregation-severity-counts
                         :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %account-aggregation-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-aggregation 'make-account-aggregation))
 (common-lisp:defun make-account-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-counts account-id)
   (common-lisp:apply #'common-lisp:make-instance 'account-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-aggregation))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass additional-instance-configuration common-lisp:nil
                       ((user-data-override :initarg :|userDataOverride| :type
                         (common-lisp:or user-data-override common-lisp:null)
                         :accessor
                         %additional-instance-configuration-user-data-override
                         :initform common-lisp:nil)
                        (systems-manager-agent :initarg :|systemsManagerAgent|
                         :type
                         (common-lisp:or systems-manager-agent
                                         common-lisp:null)
                         :accessor
                         %additional-instance-configuration-systems-manager-agent
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'additional-instance-configuration
                    'make-additional-instance-configuration))
 (common-lisp:defun make-additional-instance-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-data-override systems-manager-agent)
   (common-lisp:apply #'common-lisp:make-instance
                      'additional-instance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'systems-manager-agent))
      (common-lisp:list
       (common-lisp:cons "systemsManagerAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data-override))
      (common-lisp:list
       (common-lisp:cons "userDataOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami common-lisp:nil
                       ((account-id :initarg :|accountId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-account-id :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or image-state common-lisp:null)
                         :accessor %ami-state :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-description :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-name :initform common-lisp:nil)
                        (image :initarg :|image| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-image :initform common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-region :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ami 'make-ami))
 (common-lisp:defun make-ami
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id state description name image
                     region)
   (common-lisp:apply #'common-lisp:make-instance 'ami
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ami-distribution-configuration common-lisp:nil
                       ((launch-permission :initarg :|launchPermission| :type
                         (common-lisp:or launch-permission-configuration
                                         common-lisp:null)
                         :accessor
                         %ami-distribution-configuration-launch-permission
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-distribution-configuration-kms-key-id
                         :initform common-lisp:nil)
                        (ami-tags :initarg :|amiTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %ami-distribution-configuration-ami-tags :initform
                         common-lisp:nil)
                        (target-account-ids :initarg :|targetAccountIds| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor
                         %ami-distribution-configuration-target-account-ids
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ami-distribution-configuration-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or ami-name-string common-lisp:null)
                         :accessor %ami-distribution-configuration-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ami-distribution-configuration
                    'make-ami-distribution-configuration))
 (common-lisp:defun make-ami-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-permission kms-key-id ami-tags
                     target-account-ids description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'ami-distribution-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-account-ids))
      (common-lisp:list
       (common-lisp:cons "targetAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-tags))
      (common-lisp:list
       (common-lisp:cons "amiTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-permission))
      (common-lisp:list
       (common-lisp:cons "launchPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-distribution-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-list () '(trivial-types:proper-list ami))
 (common-lisp:defun |make-ami-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ami))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-name-string () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype build-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition call-rate-limit-exceeded-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       call-rate-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'call-rate-limit-exceeded-exception
                    'call-rate-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cancel-image-creation-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %cancel-image-creation-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %cancel-image-creation-request-image-build-version-arn
                         :initform
                         (common-lisp:error
                          ":imagebuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-image-creation-request
                    'make-cancel-image-creation-request))
 (common-lisp:defun make-cancel-image-creation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token image-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-image-creation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-image-creation-response common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %cancel-image-creation-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %cancel-image-creation-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cancel-image-creation-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-image-creation-response
                    'make-cancel-image-creation-response))
 (common-lisp:defun make-cancel-image-creation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-image-creation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-image-creation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-message)))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component common-lisp:nil
                       ((obfuscate :initarg :|obfuscate| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %component-obfuscate :initform common-lisp:nil)
                        (publisher :initarg :|publisher| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-publisher :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %component-tags :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %component-date-created :initform common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %component-encrypted :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-kms-key-id :initform
                         common-lisp:nil)
                        (data :initarg :|data| :type
                         (common-lisp:or component-data common-lisp:null)
                         :accessor %component-data :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-owner :initform common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or component-parameter-detail-list
                                         common-lisp:null)
                         :accessor %component-parameters :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or component-state common-lisp:null)
                         :accessor %component-state :initform common-lisp:nil)
                        (supported-os-versions :initarg :|supportedOsVersions|
                         :type
                         (common-lisp:or os-version-list common-lisp:null)
                         :accessor %component-supported-os-versions :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %component-platform :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %component-type :initform common-lisp:nil)
                        (change-description :initarg :|changeDescription| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-change-description :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-description :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %component-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %component-name :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %component-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defun make-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key obfuscate publisher tags date-created
                     encrypted kms-key-id data owner parameters state
                     supported-os-versions platform type change-description
                     description version name arn)
   (common-lisp:apply #'common-lisp:make-instance 'component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscate))
      (common-lisp:list
       (common-lisp:cons "obfuscate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:deftype component-build-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-configuration common-lisp:nil
                       ((parameters :initarg :|parameters| :type
                         (common-lisp:or component-parameter-list
                                         common-lisp:null)
                         :accessor %component-configuration-parameters
                         :initform common-lisp:nil)
                        (component-arn :initarg :|componentArn| :type
                         (common-lisp:or
                          component-version-arn-or-build-version-arn
                          common-lisp:null)
                         :accessor %component-configuration-component-arn
                         :initform
                         (common-lisp:error ":componentarn is required"))))
 (common-lisp:export
  (common-lisp:list 'component-configuration 'make-component-configuration))
 (common-lisp:defun make-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters component-arn)
   (common-lisp:apply #'common-lisp:make-instance 'component-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-configuration-list ()
   '(trivial-types:proper-list component-configuration))
 (common-lisp:defun |make-component-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-data () 'common-lisp:string)
(common-lisp:deftype component-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-parameter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or component-parameter-value-list
                                         common-lisp:null)
                         :accessor %component-parameter-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or component-parameter-name
                                         common-lisp:null)
                         :accessor %component-parameter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'component-parameter 'make-component-parameter))
 (common-lisp:defun make-component-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'component-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-parameter))
   common-lisp:nil))
(common-lisp:deftype component-parameter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-parameter-detail common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or component-parameter-description
                                         common-lisp:null)
                         :accessor %component-parameter-detail-description
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or component-parameter-value-list
                                         common-lisp:null)
                         :accessor %component-parameter-detail-default-value
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or component-parameter-type
                                         common-lisp:null)
                         :accessor %component-parameter-detail-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or component-parameter-name
                                         common-lisp:null)
                         :accessor %component-parameter-detail-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'component-parameter-detail
                    'make-component-parameter-detail))
 (common-lisp:defun make-component-parameter-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description default-value type name)
   (common-lisp:apply #'common-lisp:make-instance 'component-parameter-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-parameter-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-parameter-detail-list ()
   '(trivial-types:proper-list component-parameter-detail))
 (common-lisp:defun |make-component-parameter-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            component-parameter-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype component-parameter-list ()
   '(trivial-types:proper-list component-parameter))
 (common-lisp:defun |make-component-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-parameter-name () 'common-lisp:string)
(common-lisp:deftype component-parameter-type () 'common-lisp:string)
(common-lisp:deftype component-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-parameter-value-list ()
   '(trivial-types:proper-list component-parameter-value))
 (common-lisp:defun |make-component-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            component-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-state common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-state-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or component-status common-lisp:null)
                         :accessor %component-state-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'component-state 'make-component-state))
 (common-lisp:defun make-component-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status)
   (common-lisp:apply #'common-lisp:make-instance 'component-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-state))
   common-lisp:nil))
(common-lisp:deftype component-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-summary common-lisp:nil
                       ((obfuscate :initarg :|obfuscate| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %component-summary-obfuscate :initform
                         common-lisp:nil)
                        (publisher :initarg :|publisher| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-summary-publisher :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %component-summary-tags :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %component-summary-date-created :initform
                         common-lisp:nil)
                        (change-description :initarg :|changeDescription| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-summary-change-description
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-summary-description :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-summary-owner :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %component-summary-type :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or component-state common-lisp:null)
                         :accessor %component-summary-state :initform
                         common-lisp:nil)
                        (supported-os-versions :initarg :|supportedOsVersions|
                         :type
                         (common-lisp:or os-version-list common-lisp:null)
                         :accessor %component-summary-supported-os-versions
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %component-summary-platform :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %component-summary-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %component-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %component-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defun make-component-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key obfuscate publisher tags date-created
                     change-description description owner type state
                     supported-os-versions platform version name arn)
   (common-lisp:apply #'common-lisp:make-instance 'component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher))
      (common-lisp:list
       (common-lisp:cons "publisher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscate))
      (common-lisp:list
       (common-lisp:cons "obfuscate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun |make-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-version common-lisp:nil
                       ((date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %component-version-date-created :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-version-owner :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %component-version-type :initform
                         common-lisp:nil)
                        (supported-os-versions :initarg :|supportedOsVersions|
                         :type
                         (common-lisp:or os-version-list common-lisp:null)
                         :accessor %component-version-supported-os-versions
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %component-version-platform :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %component-version-description :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %component-version-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %component-version-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %component-version-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-version 'make-component-version))
 (common-lisp:defun make-component-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-created owner type
                     supported-os-versions platform description version name
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'component-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-version))
   common-lisp:nil))
(common-lisp:deftype component-version-arn () 'common-lisp:string)
(common-lisp:deftype component-version-arn-or-build-version-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-version-list ()
   '(trivial-types:proper-list component-version))
 (common-lisp:defun |make-component-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container common-lisp:nil
                       ((image-uris :initarg :|imageUris| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-image-uris :initform
                         common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-region :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defun make-container
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-uris region)
   (common-lisp:apply #'common-lisp:make-instance 'container
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uris))
      (common-lisp:list
       (common-lisp:cons "imageUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-distribution-configuration common-lisp:nil
                       ((target-repository :initarg :|targetRepository| :type
                         (common-lisp:or target-container-repository
                                         common-lisp:null)
                         :accessor
                         %container-distribution-configuration-target-repository
                         :initform
                         (common-lisp:error ":targetrepository is required"))
                        (container-tags :initarg :|containerTags| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %container-distribution-configuration-container-tags
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %container-distribution-configuration-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-distribution-configuration
                    'make-container-distribution-configuration))
 (common-lisp:defun make-container-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-repository container-tags
                     description)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-distribution-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-tags))
      (common-lisp:list
       (common-lisp:cons "containerTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-distribution-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-list () '(trivial-types:proper-list container))
 (common-lisp:defun |make-container-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-recipe common-lisp:nil
                       ((target-repository :initarg :|targetRepository| :type
                         (common-lisp:or target-container-repository
                                         common-lisp:null)
                         :accessor %container-recipe-target-repository
                         :initform common-lisp:nil)
                        (working-directory :initarg :|workingDirectory| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-working-directory
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %container-recipe-tags :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %container-recipe-date-created :initform
                         common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-parent-image :initform
                         common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %container-recipe-encrypted :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-kms-key-id :initform
                         common-lisp:nil)
                        (dockerfile-template-data :initarg
                         :|dockerfileTemplateData| :type
                         (common-lisp:or docker-file-template common-lisp:null)
                         :accessor %container-recipe-dockerfile-template-data
                         :initform common-lisp:nil)
                        (instance-configuration :initarg
                         :|instanceConfiguration| :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor %container-recipe-instance-configuration
                         :initform common-lisp:nil)
                        (components :initarg :|components| :type
                         (common-lisp:or component-configuration-list
                                         common-lisp:null)
                         :accessor %container-recipe-components :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %container-recipe-version :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-owner :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %container-recipe-platform :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %container-recipe-name :initform
                         common-lisp:nil)
                        (container-type :initarg :|containerType| :type
                         (common-lisp:or container-type common-lisp:null)
                         :accessor %container-recipe-container-type :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %container-recipe-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-recipe 'make-container-recipe))
 (common-lisp:defun make-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-repository working-directory tags
                     date-created parent-image encrypted kms-key-id
                     dockerfile-template-data instance-configuration components
                     version owner platform description name container-type
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'container-recipe
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-recipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-recipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "instanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-data))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-recipe))
   common-lisp:nil))
(common-lisp:deftype container-recipe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-recipe-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %container-recipe-summary-tags :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %container-recipe-summary-date-created :initform
                         common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-summary-parent-image
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-recipe-summary-owner :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %container-recipe-summary-platform :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %container-recipe-summary-name :initform
                         common-lisp:nil)
                        (container-type :initarg :|containerType| :type
                         (common-lisp:or container-type common-lisp:null)
                         :accessor %container-recipe-summary-container-type
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %container-recipe-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-recipe-summary 'make-container-recipe-summary))
 (common-lisp:defun make-container-recipe-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags date-created parent-image owner
                     platform name container-type arn)
   (common-lisp:apply #'common-lisp:make-instance 'container-recipe-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-recipe-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-recipe-summary-list ()
   '(trivial-types:proper-list container-recipe-summary))
 (common-lisp:defun |make-container-recipe-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-recipe-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-repository-service () 'common-lisp:string)
(common-lisp:deftype container-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-component-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-component-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-component-request-tags :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-component-request-kms-key-id
                         :initform common-lisp:nil)
                        (uri :initarg :|uri| :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %create-component-request-uri :initform
                         common-lisp:nil)
                        (data :initarg :|data| :type
                         (common-lisp:or inline-component-data
                                         common-lisp:null)
                         :accessor %create-component-request-data :initform
                         common-lisp:nil)
                        (supported-os-versions :initarg :|supportedOsVersions|
                         :type
                         (common-lisp:or os-version-list common-lisp:null)
                         :accessor
                         %create-component-request-supported-os-versions
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %create-component-request-platform :initform
                         (common-lisp:error ":platform is required"))
                        (change-description :initarg :|changeDescription| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-component-request-change-description
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-component-request-description
                         :initform common-lisp:nil)
                        (semantic-version :initarg :|semanticVersion| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %create-component-request-semantic-version
                         :initform
                         (common-lisp:error ":semanticversion is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-component-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defun make-create-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags kms-key-id uri data
                     supported-os-versions platform change-description
                     description semantic-version name)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-os-versions))
      (common-lisp:list
       (common-lisp:cons "supportedOsVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-response common-lisp:nil
                       ((component-build-version-arn :initarg
                         :|componentBuildVersionArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %create-component-response-component-build-version-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-component-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-component-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defun make-create-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-build-version-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-recipe-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-container-recipe-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-container-recipe-request-kms-key-id
                         :initform common-lisp:nil)
                        (target-repository :initarg :|targetRepository| :type
                         (common-lisp:or target-container-repository
                                         common-lisp:null)
                         :accessor
                         %create-container-recipe-request-target-repository
                         :initform
                         (common-lisp:error ":targetrepository is required"))
                        (working-directory :initarg :|workingDirectory| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-container-recipe-request-working-directory
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-container-recipe-request-tags :initform
                         common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-container-recipe-request-parent-image
                         :initform
                         (common-lisp:error ":parentimage is required"))
                        (image-os-version-override :initarg
                         :|imageOsVersionOverride| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-container-recipe-request-image-os-version-override
                         :initform common-lisp:nil)
                        (platform-override :initarg :|platformOverride| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %create-container-recipe-request-platform-override
                         :initform common-lisp:nil)
                        (dockerfile-template-uri :initarg
                         :|dockerfileTemplateUri| :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %create-container-recipe-request-dockerfile-template-uri
                         :initform common-lisp:nil)
                        (dockerfile-template-data :initarg
                         :|dockerfileTemplateData| :type
                         (common-lisp:or inline-docker-file-template
                                         common-lisp:null)
                         :accessor
                         %create-container-recipe-request-dockerfile-template-data
                         :initform common-lisp:nil)
                        (instance-configuration :initarg
                         :|instanceConfiguration| :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor
                         %create-container-recipe-request-instance-configuration
                         :initform common-lisp:nil)
                        (components :initarg :|components| :type
                         (common-lisp:or component-configuration-list
                                         common-lisp:null)
                         :accessor %create-container-recipe-request-components
                         :initform
                         (common-lisp:error ":components is required"))
                        (semantic-version :initarg :|semanticVersion| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %create-container-recipe-request-semantic-version
                         :initform
                         (common-lisp:error ":semanticversion is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-container-recipe-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-container-recipe-request-name
                         :initform (common-lisp:error ":name is required"))
                        (container-type :initarg :|containerType| :type
                         (common-lisp:or container-type common-lisp:null)
                         :accessor
                         %create-container-recipe-request-container-type
                         :initform
                         (common-lisp:error ":containertype is required"))))
 (common-lisp:export
  (common-lisp:list 'create-container-recipe-request
                    'make-create-container-recipe-request))
 (common-lisp:defun make-create-container-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token kms-key-id target-repository
                     working-directory tags parent-image
                     image-os-version-override platform-override
                     dockerfile-template-uri dockerfile-template-data
                     instance-configuration components semantic-version
                     description name container-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-type))
      (common-lisp:list
       (common-lisp:cons "containerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "instanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-data))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dockerfile-template-uri))
      (common-lisp:list
       (common-lisp:cons "dockerfileTemplateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-override))
      (common-lisp:list
       (common-lisp:cons "platformOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-os-version-override))
      (common-lisp:list
       (common-lisp:cons "imageOsVersionOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-repository))
      (common-lisp:list
       (common-lisp:cons "targetRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-container-recipe-response common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %create-container-recipe-response-container-recipe-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-container-recipe-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-container-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-container-recipe-response
                    'make-create-container-recipe-response))
 (common-lisp:defun make-create-container-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-container-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-distribution-configuration-request
                       common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-distribution-configuration-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-distribution-configuration-request-tags
                         :initform common-lisp:nil)
                        (distributions :initarg :|distributions| :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor
                         %create-distribution-configuration-request-distributions
                         :initform
                         (common-lisp:error ":distributions is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-distribution-configuration-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-distribution-configuration-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-distribution-configuration-request
                    'make-create-distribution-configuration-request))
 (common-lisp:defun make-create-distribution-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags distributions
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-distribution-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-distribution-configuration-response
                       common-lisp:nil
                       ((distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-distribution-configuration-response-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-distribution-configuration-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-distribution-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-configuration-response
                    'make-create-distribution-configuration-response))
 (common-lisp:defun make-create-distribution-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration-arn
                     client-token request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-distribution-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-pipeline-request common-lisp:nil
                       ((image-scanning-configuration :initarg
                         :|imageScanningConfiguration| :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-image-scanning-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-pipeline-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-image-pipeline-request-tags :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or pipeline-status common-lisp:null)
                         :accessor %create-image-pipeline-request-status
                         :initform common-lisp:nil)
                        (schedule :initarg :|schedule| :type
                         (common-lisp:or schedule common-lisp:null) :accessor
                         %create-image-pipeline-request-schedule :initform
                         common-lisp:nil)
                        (enhanced-image-metadata-enabled :initarg
                         :|enhancedImageMetadataEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-enhanced-image-metadata-enabled
                         :initform common-lisp:nil)
                        (image-tests-configuration :initarg
                         :|imageTestsConfiguration| :type
                         (common-lisp:or image-tests-configuration
                                         common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-image-tests-configuration
                         :initform common-lisp:nil)
                        (distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))
                        (container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-container-recipe-arn
                         :initform common-lisp:nil)
                        (image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %create-image-pipeline-request-image-recipe-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-pipeline-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-image-pipeline-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-image-pipeline-request
                    'make-create-image-pipeline-request))
 (common-lisp:defun make-create-image-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scanning-configuration client-token
                     tags status schedule enhanced-image-metadata-enabled
                     image-tests-configuration distribution-configuration-arn
                     infrastructure-configuration-arn container-recipe-arn
                     image-recipe-arn description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-image-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-pipeline-response common-lisp:nil
                       ((image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %create-image-pipeline-response-image-pipeline-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-pipeline-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-pipeline-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-pipeline-response
                    'make-create-image-pipeline-response))
 (common-lisp:defun make-create-image-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-image-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-recipe-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-recipe-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (additional-instance-configuration :initarg
                         :|additionalInstanceConfiguration| :type
                         (common-lisp:or additional-instance-configuration
                                         common-lisp:null)
                         :accessor
                         %create-image-recipe-request-additional-instance-configuration
                         :initform common-lisp:nil)
                        (working-directory :initarg :|workingDirectory| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-image-recipe-request-working-directory
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-image-recipe-request-tags :initform
                         common-lisp:nil)
                        (block-device-mappings :initarg :|blockDeviceMappings|
                         :type
                         (common-lisp:or instance-block-device-mappings
                                         common-lisp:null)
                         :accessor
                         %create-image-recipe-request-block-device-mappings
                         :initform common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-recipe-request-parent-image
                         :initform
                         (common-lisp:error ":parentimage is required"))
                        (components :initarg :|components| :type
                         (common-lisp:or component-configuration-list
                                         common-lisp:null)
                         :accessor %create-image-recipe-request-components
                         :initform
                         (common-lisp:error ":components is required"))
                        (semantic-version :initarg :|semanticVersion| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor
                         %create-image-recipe-request-semantic-version
                         :initform
                         (common-lisp:error ":semanticversion is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-recipe-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-image-recipe-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-image-recipe-request
                    'make-create-image-recipe-request))
 (common-lisp:defun make-create-image-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token
                     additional-instance-configuration working-directory tags
                     block-device-mappings parent-image components
                     semantic-version description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-instance-configuration))
      (common-lisp:list
       (common-lisp:cons "additionalInstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-recipe-response common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %create-image-recipe-response-image-recipe-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-recipe-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-recipe-response
                    'make-create-image-recipe-response))
 (common-lisp:defun make-create-image-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn client-token request-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-request common-lisp:nil
                       ((image-scanning-configuration :initarg
                         :|imageScanningConfiguration| :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         %create-image-request-image-scanning-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-request-client-token :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-image-request-tags :initform common-lisp:nil)
                        (enhanced-image-metadata-enabled :initarg
                         :|enhancedImageMetadataEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %create-image-request-enhanced-image-metadata-enabled
                         :initform common-lisp:nil)
                        (image-tests-configuration :initarg
                         :|imageTestsConfiguration| :type
                         (common-lisp:or image-tests-configuration
                                         common-lisp:null)
                         :accessor
                         %create-image-request-image-tests-configuration
                         :initform common-lisp:nil)
                        (infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-image-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))
                        (distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-image-request-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor %create-image-request-container-recipe-arn
                         :initform common-lisp:nil)
                        (image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor %create-image-request-image-recipe-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-request 'make-create-image-request))
 (common-lisp:defun make-create-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scanning-configuration client-token
                     tags enhanced-image-metadata-enabled
                     image-tests-configuration infrastructure-configuration-arn
                     distribution-configuration-arn container-recipe-arn
                     image-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-response common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %create-image-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-image-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-image-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-response 'make-create-image-response))
 (common-lisp:defun make-create-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-infrastructure-configuration-request
                       common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-infrastructure-configuration-request-tags
                         :initform common-lisp:nil)
                        (instance-metadata-options :initarg
                         :|instanceMetadataOptions| :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-instance-metadata-options
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or resource-tag-map common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-resource-tags
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :|snsTopicArn| :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-sns-topic-arn
                         :initform common-lisp:nil)
                        (terminate-instance-on-failure :initarg
                         :|terminateInstanceOnFailure| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-terminate-instance-on-failure
                         :initform common-lisp:nil)
                        (key-pair :initarg :|keyPair| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-key-pair
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %create-infrastructure-configuration-request-logging
                         :initform common-lisp:nil)
                        (subnet-id :initarg :|subnetId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-subnet-id
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-security-group-ids
                         :initform common-lisp:nil)
                        (instance-profile-name :initarg :|instanceProfileName|
                         :type
                         (common-lisp:or instance-profile-name-type
                                         common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instanceprofilename is required"))
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or instance-type-list common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-instance-types
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-infrastructure-configuration-request
                    'make-create-infrastructure-configuration-request))
 (common-lisp:defun make-create-infrastructure-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags
                     instance-metadata-options resource-tags sns-topic-arn
                     terminate-instance-on-failure key-pair logging subnet-id
                     security-group-ids instance-profile-name instance-types
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-infrastructure-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-infrastructure-configuration-response
                       common-lisp:nil
                       ((infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-response-infrastructure-configuration-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-infrastructure-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-infrastructure-configuration-response
                    'make-create-infrastructure-configuration-response))
 (common-lisp:defun make-create-infrastructure-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration-arn
                     client-token request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-infrastructure-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cvss-score common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-source :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-version :initform
                         common-lisp:nil)
                        (scoring-vector :initarg :|scoringVector| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-scoring-vector :initform
                         common-lisp:nil)
                        (base-score :initarg :|baseScore| :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor %cvss-score-base-score :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cvss-score 'make-cvss-score))
 (common-lisp:defun make-cvss-score
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source version scoring-vector base-score)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "baseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cvss-score-adjustment common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-adjustment-reason :initform
                         common-lisp:nil)
                        (metric :initarg :|metric| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-adjustment-metric :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-adjustment 'make-cvss-score-adjustment))
 (common-lisp:defun make-cvss-score-adjustment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason metric)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score-adjustment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cvss-score-adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-adjustment-list ()
   '(trivial-types:proper-list cvss-score-adjustment))
 (common-lisp:defun |make-cvss-score-adjustment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score-adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cvss-score-details common-lisp:nil
                       ((adjustments :initarg :|adjustments| :type
                         (common-lisp:or cvss-score-adjustment-list
                                         common-lisp:null)
                         :accessor %cvss-score-details-adjustments :initform
                         common-lisp:nil)
                        (scoring-vector :initarg :|scoringVector| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-details-scoring-vector :initform
                         common-lisp:nil)
                        (score :initarg :|score| :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor %cvss-score-details-score :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-details-version :initform
                         common-lisp:nil)
                        (cvss-source :initarg :|cvssSource| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-details-cvss-source :initform
                         common-lisp:nil)
                        (score-source :initarg :|scoreSource| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-score-details-score-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cvss-score-details 'make-cvss-score-details))
 (common-lisp:defun make-cvss-score-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key adjustments scoring-vector score version
                     cvss-source score-source)
   (common-lisp:apply #'common-lisp:make-instance 'cvss-score-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score-source))
      (common-lisp:list
       (common-lisp:cons "scoreSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss-source))
      (common-lisp:list
       (common-lisp:cons "cvssSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scoring-vector))
      (common-lisp:list
       (common-lisp:cons "scoringVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-score-list ()
   '(trivial-types:proper-list cvss-score))
 (common-lisp:defun |make-cvss-score-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss-score))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype date-time-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-component-request common-lisp:nil
                       ((component-build-version-arn :initarg
                         :|componentBuildVersionArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %delete-component-request-component-build-version-arn
                         :initform
                         (common-lisp:error
                          ":componentbuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defun make-delete-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-response common-lisp:nil
                       ((component-build-version-arn :initarg
                         :|componentBuildVersionArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %delete-component-response-component-build-version-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-component-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-component-response
                    'make-delete-component-response))
 (common-lisp:defun make-delete-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-build-version-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-recipe-request common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %delete-container-recipe-request-container-recipe-arn
                         :initform
                         (common-lisp:error
                          ":containerrecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-container-recipe-request
                    'make-delete-container-recipe-request))
 (common-lisp:defun make-delete-container-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-container-recipe-response common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %delete-container-recipe-response-container-recipe-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-container-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-container-recipe-response
                    'make-delete-container-recipe-response))
 (common-lisp:defun make-delete-container-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-container-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-distribution-configuration-request
                       common-lisp:nil
                       ((distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %delete-distribution-configuration-request-distribution-configuration-arn
                         :initform
                         (common-lisp:error
                          ":distributionconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-configuration-request
                    'make-delete-distribution-configuration-request))
 (common-lisp:defun make-delete-distribution-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-distribution-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-distribution-configuration-response
                       common-lisp:nil
                       ((distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %delete-distribution-configuration-response-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %delete-distribution-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-configuration-response
                    'make-delete-distribution-configuration-response))
 (common-lisp:defun make-delete-distribution-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration-arn
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-distribution-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-pipeline-request common-lisp:nil
                       ((image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %delete-image-pipeline-request-image-pipeline-arn
                         :initform
                         (common-lisp:error ":imagepipelinearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-pipeline-request
                    'make-delete-image-pipeline-request))
 (common-lisp:defun make-delete-image-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-image-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-pipeline-response common-lisp:nil
                       ((image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %delete-image-pipeline-response-image-pipeline-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-image-pipeline-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-image-pipeline-response
                    'make-delete-image-pipeline-response))
 (common-lisp:defun make-delete-image-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-image-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-recipe-request common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %delete-image-recipe-request-image-recipe-arn
                         :initform
                         (common-lisp:error ":imagerecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-recipe-request
                    'make-delete-image-recipe-request))
 (common-lisp:defun make-delete-image-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-recipe-response common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %delete-image-recipe-response-image-recipe-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-image-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-image-recipe-response
                    'make-delete-image-recipe-response))
 (common-lisp:defun make-delete-image-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-request common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %delete-image-request-image-build-version-arn
                         :initform
                         (common-lisp:error
                          ":imagebuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-request 'make-delete-image-request))
 (common-lisp:defun make-delete-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-response common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %delete-image-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-image-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-image-response 'make-delete-image-response))
 (common-lisp:defun make-delete-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-infrastructure-configuration-request
                       common-lisp:nil
                       ((infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %delete-infrastructure-configuration-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-infrastructure-configuration-request
                    'make-delete-infrastructure-configuration-request))
 (common-lisp:defun make-delete-infrastructure-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-infrastructure-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-infrastructure-configuration-response
                       common-lisp:nil
                       ((infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %delete-infrastructure-configuration-response-infrastructure-configuration-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %delete-infrastructure-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-infrastructure-configuration-response
                    'make-delete-infrastructure-configuration-response))
 (common-lisp:defun make-delete-infrastructure-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration-arn
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-infrastructure-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:deftype disk-image-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass distribution common-lisp:nil
                       ((fast-launch-configurations :initarg
                         :|fastLaunchConfigurations| :type
                         (common-lisp:or fast-launch-configuration-list
                                         common-lisp:null)
                         :accessor %distribution-fast-launch-configurations
                         :initform common-lisp:nil)
                        (s3export-configuration :initarg
                         :|s3ExportConfiguration| :type
                         (common-lisp:or s3export-configuration
                                         common-lisp:null)
                         :accessor %distribution-s3export-configuration
                         :initform common-lisp:nil)
                        (launch-template-configurations :initarg
                         :|launchTemplateConfigurations| :type
                         (common-lisp:or launch-template-configuration-list
                                         common-lisp:null)
                         :accessor %distribution-launch-template-configurations
                         :initform common-lisp:nil)
                        (license-configuration-arns :initarg
                         :|licenseConfigurationArns| :type
                         (common-lisp:or license-configuration-arn-list
                                         common-lisp:null)
                         :accessor %distribution-license-configuration-arns
                         :initform common-lisp:nil)
                        (container-distribution-configuration :initarg
                         :|containerDistributionConfiguration| :type
                         (common-lisp:or container-distribution-configuration
                                         common-lisp:null)
                         :accessor
                         %distribution-container-distribution-configuration
                         :initform common-lisp:nil)
                        (ami-distribution-configuration :initarg
                         :|amiDistributionConfiguration| :type
                         (common-lisp:or ami-distribution-configuration
                                         common-lisp:null)
                         :accessor %distribution-ami-distribution-configuration
                         :initform common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %distribution-region :initform
                         (common-lisp:error ":region is required"))))
 (common-lisp:export (common-lisp:list 'distribution 'make-distribution))
 (common-lisp:defun make-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fast-launch-configurations
                     s3export-configuration launch-template-configurations
                     license-configuration-arns
                     container-distribution-configuration
                     ami-distribution-configuration region)
   (common-lisp:apply #'common-lisp:make-instance 'distribution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ami-distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "amiDistributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "containerDistributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arns))
      (common-lisp:list
       (common-lisp:cons "licenseConfigurationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-configurations))
      (common-lisp:list
       (common-lisp:cons "launchTemplateConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "s3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fast-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "fastLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass distribution-configuration common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %distribution-configuration-tags :initform
                         common-lisp:nil)
                        (date-updated :initarg :|dateUpdated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %distribution-configuration-date-updated :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %distribution-configuration-date-created :initform
                         common-lisp:nil)
                        (timeout-minutes :initarg :|timeoutMinutes| :type
                         (common-lisp:or distribution-timeout-minutes
                                         common-lisp:null)
                         :accessor %distribution-configuration-timeout-minutes
                         :initform
                         (common-lisp:error ":timeoutminutes is required"))
                        (distributions :initarg :|distributions| :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor %distribution-configuration-distributions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %distribution-configuration-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %distribution-configuration-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %distribution-configuration-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'distribution-configuration
                    'make-distribution-configuration))
 (common-lisp:defun make-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags date-updated date-created
                     timeout-minutes distributions description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'distribution-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration))
   common-lisp:nil))
(common-lisp:deftype distribution-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass distribution-configuration-summary common-lisp:nil
                       ((regions :initarg :|regions| :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %distribution-configuration-summary-regions
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %distribution-configuration-summary-tags :initform
                         common-lisp:nil)
                        (date-updated :initarg :|dateUpdated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %distribution-configuration-summary-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %distribution-configuration-summary-date-created
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %distribution-configuration-summary-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %distribution-configuration-summary-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %distribution-configuration-summary-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'distribution-configuration-summary
                    'make-distribution-configuration-summary))
 (common-lisp:defun make-distribution-configuration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions tags date-updated date-created
                     description name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'distribution-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          distribution-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-configuration-summary-list ()
   '(trivial-types:proper-list distribution-configuration-summary))
 (common-lisp:defun |make-distribution-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            distribution-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype distribution-list ()
   '(trivial-types:proper-list distribution))
 (common-lisp:defun |make-distribution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype distribution-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype docker-file-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ebs-instance-block-device-specification common-lisp:nil
                       ((throughput :initarg :|throughput| :type
                         (common-lisp:or ebs-volume-throughput
                                         common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-throughput
                         :initform common-lisp:nil)
                        (volume-type :initarg :|volumeType| :type
                         (common-lisp:or ebs-volume-type common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-volume-type
                         :initform common-lisp:nil)
                        (volume-size :initarg :|volumeSize| :type
                         (common-lisp:or ebs-volume-size-integer
                                         common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-volume-size
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :|snapshotId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-snapshot-id
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-kms-key-id
                         :initform common-lisp:nil)
                        (iops :initarg :|iops| :type
                         (common-lisp:or ebs-iops-integer common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-iops
                         :initform common-lisp:nil)
                        (delete-on-termination :initarg :|deleteOnTermination|
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-delete-on-termination
                         :initform common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %ebs-instance-block-device-specification-encrypted
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ebs-instance-block-device-specification
                    'make-ebs-instance-block-device-specification))
 (common-lisp:defun make-ebs-instance-block-device-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key throughput volume-type volume-size
                     snapshot-id kms-key-id iops delete-on-termination
                     encrypted)
   (common-lisp:apply #'common-lisp:make-instance
                      'ebs-instance-block-device-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "deleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "volumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-instance-block-device-specification))
   common-lisp:nil))
(common-lisp:deftype ebs-iops-integer () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-size-integer () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-throughput () 'common-lisp:integer)
(common-lisp:deftype ebs-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecr-configuration common-lisp:nil
                       ((container-tags :initarg :|containerTags| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %ecr-configuration-container-tags :initform
                         common-lisp:nil)
                        (repository-name :initarg :|repositoryName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ecr-configuration-repository-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecr-configuration 'make-ecr-configuration))
 (common-lisp:defun make-ecr-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-tags repository-name)
   (common-lisp:apply #'common-lisp:make-instance 'ecr-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecr-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-tags))
      (common-lisp:list
       (common-lisp:cons "containerTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecr-configuration))
   common-lisp:nil))
(common-lisp:deftype empty-string () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fast-launch-configuration common-lisp:nil
                       ((account-id :initarg :|accountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %fast-launch-configuration-account-id :initform
                         common-lisp:nil)
                        (launch-template :initarg :|launchTemplate| :type
                         (common-lisp:or
                          fast-launch-launch-template-specification
                          common-lisp:null)
                         :accessor %fast-launch-configuration-launch-template
                         :initform common-lisp:nil)
                        (max-parallel-launches :initarg :|maxParallelLaunches|
                         :type
                         (common-lisp:or max-parallel-launches
                                         common-lisp:null)
                         :accessor
                         %fast-launch-configuration-max-parallel-launches
                         :initform common-lisp:nil)
                        (snapshot-configuration :initarg
                         :|snapshotConfiguration| :type
                         (common-lisp:or fast-launch-snapshot-configuration
                                         common-lisp:null)
                         :accessor
                         %fast-launch-configuration-snapshot-configuration
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %fast-launch-configuration-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'fast-launch-configuration
                    'make-fast-launch-configuration))
 (common-lisp:defun make-fast-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id launch-template
                     max-parallel-launches snapshot-configuration enabled)
   (common-lisp:apply #'common-lisp:make-instance 'fast-launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-configuration))
      (common-lisp:list
       (common-lisp:cons "snapshotConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-parallel-launches))
      (common-lisp:list
       (common-lisp:cons "maxParallelLaunches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "launchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fast-launch-configuration-list ()
   '(trivial-types:proper-list fast-launch-configuration))
 (common-lisp:defun |make-fast-launch-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fast-launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fast-launch-launch-template-specification
                       common-lisp:nil
                       ((launch-template-version :initarg
                         :|launchTemplateVersion| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %fast-launch-launch-template-specification-launch-template-version
                         :initform common-lisp:nil)
                        (launch-template-name :initarg :|launchTemplateName|
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %fast-launch-launch-template-specification-launch-template-name
                         :initform common-lisp:nil)
                        (launch-template-id :initarg :|launchTemplateId| :type
                         (common-lisp:or launch-template-id common-lisp:null)
                         :accessor
                         %fast-launch-launch-template-specification-launch-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fast-launch-launch-template-specification
                    'make-fast-launch-launch-template-specification))
 (common-lisp:defun make-fast-launch-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-template-version
                     launch-template-name launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'fast-launch-launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "launchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "launchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-version))
      (common-lisp:list
       (common-lisp:cons "launchTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fast-launch-snapshot-configuration common-lisp:nil
                       ((target-resource-count :initarg :|targetResourceCount|
                         :type
                         (common-lisp:or target-resource-count
                                         common-lisp:null)
                         :accessor
                         %fast-launch-snapshot-configuration-target-resource-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fast-launch-snapshot-configuration
                    'make-fast-launch-snapshot-configuration))
 (common-lisp:defun make-fast-launch-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-resource-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'fast-launch-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-count))
      (common-lisp:list
       (common-lisp:cons "targetResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fast-launch-snapshot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-component-policy-request common-lisp:nil
                       ((component-arn :initarg :|componentArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor %get-component-policy-request-component-arn
                         :initform
                         (common-lisp:error ":componentarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-component-policy-request
                    'make-get-component-policy-request))
 (common-lisp:defun make-get-component-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-policy-response common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %get-component-policy-response-policy
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-component-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-component-policy-response
                    'make-get-component-policy-response))
 (common-lisp:defun make-get-component-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-component-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-request common-lisp:nil
                       ((component-build-version-arn :initarg
                         :|componentBuildVersionArn| :type
                         (common-lisp:or
                          component-version-arn-or-build-version-arn
                          common-lisp:null)
                         :accessor
                         %get-component-request-component-build-version-arn
                         :initform
                         (common-lisp:error
                          ":componentbuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-component-request 'make-get-component-request))
 (common-lisp:defun make-get-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-response common-lisp:nil
                       ((component :initarg :|component| :type
                         (common-lisp:or component common-lisp:null) :accessor
                         %get-component-response-component :initform
                         common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-component-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-component-response 'make-get-component-response))
 (common-lisp:defun make-get-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component request-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-recipe-policy-request common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %get-container-recipe-policy-request-container-recipe-arn
                         :initform
                         (common-lisp:error
                          ":containerrecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-policy-request
                    'make-get-container-recipe-policy-request))
 (common-lisp:defun make-get-container-recipe-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-recipe-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-recipe-policy-response common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %get-container-recipe-policy-response-policy
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-container-recipe-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-policy-response
                    'make-get-container-recipe-policy-response))
 (common-lisp:defun make-get-container-recipe-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-recipe-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-recipe-request common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %get-container-recipe-request-container-recipe-arn
                         :initform
                         (common-lisp:error
                          ":containerrecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-request
                    'make-get-container-recipe-request))
 (common-lisp:defun make-get-container-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-container-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-container-recipe-response common-lisp:nil
                       ((container-recipe :initarg :|containerRecipe| :type
                         (common-lisp:or container-recipe common-lisp:null)
                         :accessor
                         %get-container-recipe-response-container-recipe
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-container-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-container-recipe-response
                    'make-get-container-recipe-response))
 (common-lisp:defun make-get-container-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-container-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-recipe))
      (common-lisp:list
       (common-lisp:cons "containerRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-configuration-request common-lisp:nil
                       ((distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %get-distribution-configuration-request-distribution-configuration-arn
                         :initform
                         (common-lisp:error
                          ":distributionconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-distribution-configuration-request
                    'make-get-distribution-configuration-request))
 (common-lisp:defun make-get-distribution-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-distribution-configuration-response common-lisp:nil
                       ((distribution-configuration :initarg
                         :|distributionConfiguration| :type
                         (common-lisp:or distribution-configuration
                                         common-lisp:null)
                         :accessor
                         %get-distribution-configuration-response-distribution-configuration
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-distribution-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-configuration-response
                    'make-get-distribution-configuration-response))
 (common-lisp:defun make-get-distribution-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-distribution-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "distributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-pipeline-request common-lisp:nil
                       ((image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %get-image-pipeline-request-image-pipeline-arn
                         :initform
                         (common-lisp:error ":imagepipelinearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-image-pipeline-request
                    'make-get-image-pipeline-request))
 (common-lisp:defun make-get-image-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-pipeline-response common-lisp:nil
                       ((image-pipeline :initarg :|imagePipeline| :type
                         (common-lisp:or image-pipeline common-lisp:null)
                         :accessor %get-image-pipeline-response-image-pipeline
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-image-pipeline-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-image-pipeline-response
                    'make-get-image-pipeline-response))
 (common-lisp:defun make-get-image-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline request-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline))
      (common-lisp:list
       (common-lisp:cons "imagePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-policy-request common-lisp:nil
                       ((image-arn :initarg :|imageArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor %get-image-policy-request-image-arn
                         :initform
                         (common-lisp:error ":imagearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-image-policy-request 'make-get-image-policy-request))
 (common-lisp:defun make-get-image-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-policy-response common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %get-image-policy-response-policy :initform
                         common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-image-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-image-policy-response
                    'make-get-image-policy-response))
 (common-lisp:defun make-get-image-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy request-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-recipe-policy-request common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %get-image-recipe-policy-request-image-recipe-arn
                         :initform
                         (common-lisp:error ":imagerecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-policy-request
                    'make-get-image-recipe-policy-request))
 (common-lisp:defun make-get-image-recipe-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-image-recipe-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-recipe-policy-response common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %get-image-recipe-policy-response-policy
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-image-recipe-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-policy-response
                    'make-get-image-recipe-policy-response))
 (common-lisp:defun make-get-image-recipe-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-image-recipe-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-recipe-request common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor %get-image-recipe-request-image-recipe-arn
                         :initform
                         (common-lisp:error ":imagerecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-request 'make-get-image-recipe-request))
 (common-lisp:defun make-get-image-recipe-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-recipe-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-recipe-response common-lisp:nil
                       ((image-recipe :initarg :|imageRecipe| :type
                         (common-lisp:or image-recipe common-lisp:null)
                         :accessor %get-image-recipe-response-image-recipe
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-image-recipe-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-image-recipe-response
                    'make-get-image-recipe-response))
 (common-lisp:defun make-get-image-recipe-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe request-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-recipe-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe))
      (common-lisp:list
       (common-lisp:cons "imageRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-recipe-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-request common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-version-arn-or-build-version-arn
                                         common-lisp:null)
                         :accessor %get-image-request-image-build-version-arn
                         :initform
                         (common-lisp:error
                          ":imagebuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-image-request 'make-get-image-request))
 (common-lisp:defun make-get-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-image-response common-lisp:nil
                       ((image :initarg :|image| :type
                         (common-lisp:or image common-lisp:null) :accessor
                         %get-image-response-image :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-image-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-image-response 'make-get-image-response))
 (common-lisp:defun make-get-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image request-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-infrastructure-configuration-request common-lisp:nil
                       ((infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %get-infrastructure-configuration-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-infrastructure-configuration-request
                    'make-get-infrastructure-configuration-request))
 (common-lisp:defun make-get-infrastructure-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-infrastructure-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-infrastructure-configuration-response
                       common-lisp:nil
                       ((infrastructure-configuration :initarg
                         :|infrastructureConfiguration| :type
                         (common-lisp:or infrastructure-configuration
                                         common-lisp:null)
                         :accessor
                         %get-infrastructure-configuration-response-infrastructure-configuration
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-infrastructure-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-infrastructure-configuration-response
                    'make-get-infrastructure-configuration-response))
 (common-lisp:defun make-get-infrastructure-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-infrastructure-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-execution-request common-lisp:nil
                       ((workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-workflow-execution-request-workflow-execution-id
                         :initform
                         (common-lisp:error
                          ":workflowexecutionid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workflow-execution-request
                    'make-get-workflow-execution-request))
 (common-lisp:defun make-get-workflow-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-execution-response common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-workflow-execution-response-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-workflow-execution-response-start-time :initform
                         common-lisp:nil)
                        (total-steps-skipped :initarg :|totalStepsSkipped|
                         :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-total-steps-skipped
                         :initform common-lisp:nil)
                        (total-steps-failed :initarg :|totalStepsFailed| :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-total-steps-failed
                         :initform common-lisp:nil)
                        (total-steps-succeeded :initarg :|totalStepsSucceeded|
                         :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-total-steps-succeeded
                         :initform common-lisp:nil)
                        (total-step-count :initarg :|totalStepCount| :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-total-step-count
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or workflow-execution-message
                                         common-lisp:null)
                         :accessor %get-workflow-execution-response-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-execution-status
                                         common-lisp:null)
                         :accessor %get-workflow-execution-response-status
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %get-workflow-execution-response-type
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-workflow-execution-id
                         :initform common-lisp:nil)
                        (workflow-build-version-arn :initarg
                         :|workflowBuildVersionArn| :type
                         (common-lisp:or workflow-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %get-workflow-execution-response-workflow-build-version-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-workflow-execution-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-execution-response
                    'make-get-workflow-execution-response))
 (common-lisp:defun make-get-workflow-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time total-steps-skipped
                     total-steps-failed total-steps-succeeded total-step-count
                     message status type image-build-version-arn
                     workflow-execution-id workflow-build-version-arn
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-step-count))
      (common-lisp:list
       (common-lisp:cons "totalStepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-steps-succeeded))
      (common-lisp:list
       (common-lisp:cons "totalStepsSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-failed))
      (common-lisp:list
       (common-lisp:cons "totalStepsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-skipped))
      (common-lisp:list
       (common-lisp:cons "totalStepsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-execution-request common-lisp:nil
                       ((step-execution-id :initarg :|stepExecutionId| :type
                         (common-lisp:or workflow-step-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-request-step-execution-id
                         :initform
                         (common-lisp:error ":stepexecutionid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-execution-request
                    'make-get-workflow-step-execution-request))
 (common-lisp:defun make-get-workflow-step-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-step-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-execution-response common-lisp:nil
                       ((timeout-seconds :initarg :|timeoutSeconds| :type
                         (common-lisp:or workflow-step-timeout-seconds-integer
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-timeout-seconds
                         :initform common-lisp:nil)
                        (on-failure :initarg :|onFailure| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-on-failure
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-workflow-step-execution-response-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-workflow-step-execution-response-start-time
                         :initform common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or workflow-step-outputs
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-outputs
                         :initform common-lisp:nil)
                        (inputs :initarg :|inputs| :type
                         (common-lisp:or workflow-step-inputs common-lisp:null)
                         :accessor %get-workflow-step-execution-response-inputs
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or workflow-step-message
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-message
                         :initform common-lisp:nil)
                        (rollback-status :initarg :|rollbackStatus| :type
                         (common-lisp:or
                          workflow-step-execution-rollback-status
                          common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-rollback-status
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-step-execution-status
                                         common-lisp:null)
                         :accessor %get-workflow-step-execution-response-status
                         :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or workflow-step-action common-lisp:null)
                         :accessor %get-workflow-step-execution-response-action
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-step-description
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %get-workflow-step-execution-response-name
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-workflow-execution-id
                         :initform common-lisp:nil)
                        (workflow-build-version-arn :initarg
                         :|workflowBuildVersionArn| :type
                         (common-lisp:or workflow-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-workflow-build-version-arn
                         :initform common-lisp:nil)
                        (step-execution-id :initarg :|stepExecutionId| :type
                         (common-lisp:or workflow-step-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-step-execution-id
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-workflow-step-execution-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-execution-response
                    'make-get-workflow-step-execution-response))
 (common-lisp:defun make-get-workflow-step-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-seconds on-failure end-time
                     start-time outputs inputs message rollback-status status
                     action description name image-build-version-arn
                     workflow-execution-id workflow-build-version-arn
                     step-execution-id request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-step-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-execution-id))
      (common-lisp:list
       (common-lisp:cons "stepExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-status))
      (common-lisp:list
       (common-lisp:cons "rollbackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "onFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-execution-response))
   common-lisp:nil))
(common-lisp:deftype http-put-response-hop-limit () 'common-lisp:integer)
(common-lisp:deftype http-tokens () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((image-scanning-configuration :initarg
                         :|imageScanningConfiguration| :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor %image-image-scanning-configuration
                         :initform common-lisp:nil)
                        (scan-state :initarg :|scanState| :type
                         (common-lisp:or image-scan-state common-lisp:null)
                         :accessor %image-scan-state :initform common-lisp:nil)
                        (image-source :initarg :|imageSource| :type
                         (common-lisp:or image-source common-lisp:null)
                         :accessor %image-image-source :initform
                         common-lisp:nil)
                        (build-type :initarg :|buildType| :type
                         (common-lisp:or build-type common-lisp:null) :accessor
                         %image-build-type :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %image-tags :initform common-lisp:nil)
                        (output-resources :initarg :|outputResources| :type
                         (common-lisp:or output-resources common-lisp:null)
                         :accessor %image-output-resources :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-date-created :initform common-lisp:nil)
                        (image-tests-configuration :initarg
                         :|imageTestsConfiguration| :type
                         (common-lisp:or image-tests-configuration
                                         common-lisp:null)
                         :accessor %image-image-tests-configuration :initform
                         common-lisp:nil)
                        (distribution-configuration :initarg
                         :|distributionConfiguration| :type
                         (common-lisp:or distribution-configuration
                                         common-lisp:null)
                         :accessor %image-distribution-configuration :initform
                         common-lisp:nil)
                        (infrastructure-configuration :initarg
                         :|infrastructureConfiguration| :type
                         (common-lisp:or infrastructure-configuration
                                         common-lisp:null)
                         :accessor %image-infrastructure-configuration
                         :initform common-lisp:nil)
                        (source-pipeline-arn :initarg :|sourcePipelineArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %image-source-pipeline-arn :initform common-lisp:nil)
                        (source-pipeline-name :initarg :|sourcePipelineName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-source-pipeline-name :initform
                         common-lisp:nil)
                        (container-recipe :initarg :|containerRecipe| :type
                         (common-lisp:or container-recipe common-lisp:null)
                         :accessor %image-container-recipe :initform
                         common-lisp:nil)
                        (image-recipe :initarg :|imageRecipe| :type
                         (common-lisp:or image-recipe common-lisp:null)
                         :accessor %image-image-recipe :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or image-state common-lisp:null)
                         :accessor %image-state :initform common-lisp:nil)
                        (os-version :initarg :|osVersion| :type
                         (common-lisp:or os-version common-lisp:null) :accessor
                         %image-os-version :initform common-lisp:nil)
                        (enhanced-image-metadata-enabled :initarg
                         :|enhancedImageMetadataEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %image-enhanced-image-metadata-enabled
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-platform :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %image-version :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-name :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or image-type common-lisp:null) :accessor
                         %image-type :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defun make-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scanning-configuration scan-state
                     image-source build-type tags output-resources date-created
                     image-tests-configuration distribution-configuration
                     infrastructure-configuration source-pipeline-arn
                     source-pipeline-name container-recipe image-recipe state
                     os-version enhanced-image-metadata-enabled platform
                     version name type arn)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe))
      (common-lisp:list
       (common-lisp:cons "imageRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-recipe))
      (common-lisp:list
       (common-lisp:cons "containerRecipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-pipeline-name))
      (common-lisp:list
       (common-lisp:cons "sourcePipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "sourcePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration))
      (common-lisp:list
       (common-lisp:cons "distributionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resources))
      (common-lisp:list
       (common-lisp:cons "outputResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-state))
      (common-lisp:list
       (common-lisp:cons "scanState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-aggregation common-lisp:nil
                       ((severity-counts :initarg :|severityCounts| :type
                         (common-lisp:or severity-counts common-lisp:null)
                         :accessor %image-aggregation-severity-counts :initform
                         common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor %image-aggregation-image-build-version-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-aggregation 'make-image-aggregation))
 (common-lisp:defun make-image-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-counts image-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-aggregation))
   common-lisp:nil))
(common-lisp:deftype image-build-message () 'common-lisp:string)
(common-lisp:deftype image-build-version-arn () 'common-lisp:string)
(common-lisp:deftype image-builder-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-package common-lisp:nil
                       ((package-version :initarg :|packageVersion| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-package-package-version :initform
                         common-lisp:nil)
                        (package-name :initarg :|packageName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-package-package-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-package 'make-image-package))
 (common-lisp:defun make-image-package
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version package-name)
   (common-lisp:apply #'common-lisp:make-instance 'image-package
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "packageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-package-list ()
   '(trivial-types:proper-list image-package))
 (common-lisp:defun |make-image-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-pipeline common-lisp:nil
                       ((image-scanning-configuration :initarg
                         :|imageScanningConfiguration| :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor %image-pipeline-image-scanning-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %image-pipeline-tags :initform common-lisp:nil)
                        (date-next-run :initarg :|dateNextRun| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-pipeline-date-next-run :initform
                         common-lisp:nil)
                        (date-last-run :initarg :|dateLastRun| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-pipeline-date-last-run :initform
                         common-lisp:nil)
                        (date-updated :initarg :|dateUpdated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-pipeline-date-updated :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-pipeline-date-created :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or pipeline-status common-lisp:null)
                         :accessor %image-pipeline-status :initform
                         common-lisp:nil)
                        (schedule :initarg :|schedule| :type
                         (common-lisp:or schedule common-lisp:null) :accessor
                         %image-pipeline-schedule :initform common-lisp:nil)
                        (image-tests-configuration :initarg
                         :|imageTestsConfiguration| :type
                         (common-lisp:or image-tests-configuration
                                         common-lisp:null)
                         :accessor %image-pipeline-image-tests-configuration
                         :initform common-lisp:nil)
                        (distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-pipeline-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-pipeline-infrastructure-configuration-arn
                         :initform common-lisp:nil)
                        (container-recipe-arn :initarg :|containerRecipeArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %image-pipeline-container-recipe-arn :initform
                         common-lisp:nil)
                        (image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-pipeline-image-recipe-arn :initform
                         common-lisp:nil)
                        (enhanced-image-metadata-enabled :initarg
                         :|enhancedImageMetadataEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %image-pipeline-enhanced-image-metadata-enabled
                         :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-pipeline-platform :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-pipeline-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-pipeline-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-pipeline-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-pipeline 'make-image-pipeline))
 (common-lisp:defun make-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scanning-configuration tags
                     date-next-run date-last-run date-updated date-created
                     status schedule image-tests-configuration
                     distribution-configuration-arn
                     infrastructure-configuration-arn container-recipe-arn
                     image-recipe-arn enhanced-image-metadata-enabled platform
                     description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-pipeline
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-last-run))
      (common-lisp:list
       (common-lisp:cons "dateLastRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-next-run))
      (common-lisp:list
       (common-lisp:cons "dateNextRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-pipeline-aggregation common-lisp:nil
                       ((severity-counts :initarg :|severityCounts| :type
                         (common-lisp:or severity-counts common-lisp:null)
                         :accessor %image-pipeline-aggregation-severity-counts
                         :initform common-lisp:nil)
                        (image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %image-pipeline-aggregation-image-pipeline-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-pipeline-aggregation
                    'make-image-pipeline-aggregation))
 (common-lisp:defun make-image-pipeline-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-counts image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-pipeline-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-pipeline-aggregation))
   common-lisp:nil))
(common-lisp:deftype image-pipeline-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-pipeline-list ()
   '(trivial-types:proper-list image-pipeline))
 (common-lisp:defun |make-image-pipeline-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-pipeline))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-recipe common-lisp:nil
                       ((additional-instance-configuration :initarg
                         :|additionalInstanceConfiguration| :type
                         (common-lisp:or additional-instance-configuration
                                         common-lisp:null)
                         :accessor
                         %image-recipe-additional-instance-configuration
                         :initform common-lisp:nil)
                        (working-directory :initarg :|workingDirectory| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-working-directory :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %image-recipe-tags :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-recipe-date-created :initform common-lisp:nil)
                        (block-device-mappings :initarg :|blockDeviceMappings|
                         :type
                         (common-lisp:or instance-block-device-mappings
                                         common-lisp:null)
                         :accessor %image-recipe-block-device-mappings
                         :initform common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-parent-image :initform
                         common-lisp:nil)
                        (components :initarg :|components| :type
                         (common-lisp:or component-configuration-list
                                         common-lisp:null)
                         :accessor %image-recipe-components :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %image-recipe-version :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-owner :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-recipe-platform :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-recipe-name :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or image-type common-lisp:null) :accessor
                         %image-recipe-type :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-recipe-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-recipe 'make-image-recipe))
 (common-lisp:defun make-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-instance-configuration
                     working-directory tags date-created block-device-mappings
                     parent-image components version owner platform description
                     name type arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-recipe
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-recipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-recipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-instance-configuration))
      (common-lisp:list
       (common-lisp:cons "additionalInstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-recipe))
   common-lisp:nil))
(common-lisp:deftype image-recipe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-recipe-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %image-recipe-summary-tags :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-recipe-summary-date-created :initform
                         common-lisp:nil)
                        (parent-image :initarg :|parentImage| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-summary-parent-image :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-recipe-summary-owner :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-recipe-summary-platform :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-recipe-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-recipe-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-recipe-summary 'make-image-recipe-summary))
 (common-lisp:defun make-image-recipe-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags date-created parent-image owner
                     platform name arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-recipe-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-image))
      (common-lisp:list
       (common-lisp:cons "parentImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-recipe-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-recipe-summary-list ()
   '(trivial-types:proper-list image-recipe-summary))
 (common-lisp:defun |make-image-recipe-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-recipe-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-scan-finding common-lisp:nil
                       ((fix-available :initarg :|fixAvailable| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-fix-available :initform
                         common-lisp:nil)
                        (package-vulnerability-details :initarg
                         :|packageVulnerabilityDetails| :type
                         (common-lisp:or package-vulnerability-details
                                         common-lisp:null)
                         :accessor
                         %image-scan-finding-package-vulnerability-details
                         :initform common-lisp:nil)
                        (inspector-score-details :initarg
                         :|inspectorScoreDetails| :type
                         (common-lisp:or inspector-score-details
                                         common-lisp:null)
                         :accessor %image-scan-finding-inspector-score-details
                         :initform common-lisp:nil)
                        (inspector-score :initarg :|inspectorScore| :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor %image-scan-finding-inspector-score
                         :initform common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or date-time-timestamp common-lisp:null)
                         :accessor %image-scan-finding-updated-at :initform
                         common-lisp:nil)
                        (first-observed-at :initarg :|firstObservedAt| :type
                         (common-lisp:or date-time-timestamp common-lisp:null)
                         :accessor %image-scan-finding-first-observed-at
                         :initform common-lisp:nil)
                        (severity :initarg :|severity| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-severity :initform
                         common-lisp:nil)
                        (remediation :initarg :|remediation| :type
                         (common-lisp:or remediation common-lisp:null)
                         :accessor %image-scan-finding-remediation :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-title :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-description :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-type :initform
                         common-lisp:nil)
                        (image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor %image-scan-finding-image-pipeline-arn
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor %image-scan-finding-image-build-version-arn
                         :initform common-lisp:nil)
                        (aws-account-id :initarg :|awsAccountId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-finding-aws-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-scan-finding 'make-image-scan-finding))
 (common-lisp:defun make-image-scan-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fix-available
                     package-vulnerability-details inspector-score-details
                     inspector-score updated-at first-observed-at severity
                     remediation title description type image-pipeline-arn
                     image-build-version-arn aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "awsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "firstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspector-score))
      (common-lisp:list
       (common-lisp:cons "inspectorScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inspector-score-details))
      (common-lisp:list
       (common-lisp:cons "inspectorScoreDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-vulnerability-details))
      (common-lisp:list
       (common-lisp:cons "packageVulnerabilityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "fixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-scan-finding-aggregation common-lisp:nil
                       ((vulnerability-id-aggregation :initarg
                         :|vulnerabilityIdAggregation| :type
                         (common-lisp:or vulnerability-id-aggregation
                                         common-lisp:null)
                         :accessor
                         %image-scan-finding-aggregation-vulnerability-id-aggregation
                         :initform common-lisp:nil)
                        (image-pipeline-aggregation :initarg
                         :|imagePipelineAggregation| :type
                         (common-lisp:or image-pipeline-aggregation
                                         common-lisp:null)
                         :accessor
                         %image-scan-finding-aggregation-image-pipeline-aggregation
                         :initform common-lisp:nil)
                        (image-aggregation :initarg :|imageAggregation| :type
                         (common-lisp:or image-aggregation common-lisp:null)
                         :accessor
                         %image-scan-finding-aggregation-image-aggregation
                         :initform common-lisp:nil)
                        (account-aggregation :initarg :|accountAggregation|
                         :type
                         (common-lisp:or account-aggregation common-lisp:null)
                         :accessor
                         %image-scan-finding-aggregation-account-aggregation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-scan-finding-aggregation
                    'make-image-scan-finding-aggregation))
 (common-lisp:defun make-image-scan-finding-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vulnerability-id-aggregation
                     image-pipeline-aggregation image-aggregation
                     account-aggregation)
   (common-lisp:apply #'common-lisp:make-instance
                      'image-scan-finding-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aggregation))
      (common-lisp:list
       (common-lisp:cons "accountAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-aggregation))
      (common-lisp:list
       (common-lisp:cons "imageAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-pipeline-aggregation))
      (common-lisp:list
       (common-lisp:cons "imagePipelineAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vulnerability-id-aggregation))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityIdAggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-finding-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-scan-finding-aggregations-list ()
   '(trivial-types:proper-list image-scan-finding-aggregation))
 (common-lisp:defun |make-image-scan-finding-aggregations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-scan-finding-aggregation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-scan-findings-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or image-scan-findings-filter-values
                                         common-lisp:null)
                         :accessor %image-scan-findings-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %image-scan-findings-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-scan-findings-filter
                    'make-image-scan-findings-filter))
 (common-lisp:defun make-image-scan-findings-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-findings-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scan-findings-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-filter-list ()
   '(trivial-types:proper-list image-scan-findings-filter))
 (common-lisp:defun |make-image-scan-findings-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-scan-findings-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-image-scan-findings-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype image-scan-findings-list ()
   '(trivial-types:proper-list image-scan-finding))
 (common-lisp:defun |make-image-scan-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-scan-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-scan-state common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-scan-state-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or image-scan-status common-lisp:null)
                         :accessor %image-scan-state-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-scan-state 'make-image-scan-state))
 (common-lisp:defun make-image-scan-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status)
   (common-lisp:apply #'common-lisp:make-instance 'image-scan-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-scan-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-scan-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-scan-state))
   common-lisp:nil))
(common-lisp:deftype image-scan-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-scanning-configuration common-lisp:nil
                       ((ecr-configuration :initarg :|ecrConfiguration| :type
                         (common-lisp:or ecr-configuration common-lisp:null)
                         :accessor
                         %image-scanning-configuration-ecr-configuration
                         :initform common-lisp:nil)
                        (image-scanning-enabled :initarg
                         :|imageScanningEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %image-scanning-configuration-image-scanning-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-scanning-configuration
                    'make-image-scanning-configuration))
 (common-lisp:defun make-image-scanning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ecr-configuration image-scanning-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'image-scanning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-enabled))
      (common-lisp:list
       (common-lisp:cons "imageScanningEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-configuration))
      (common-lisp:list
       (common-lisp:cons "ecrConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-scanning-configuration))
   common-lisp:nil))
(common-lisp:deftype image-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-state common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-state-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or image-status common-lisp:null)
                         :accessor %image-state-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-state 'make-image-state))
 (common-lisp:defun make-image-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status)
   (common-lisp:apply #'common-lisp:make-instance 'image-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-state))
   common-lisp:nil))
(common-lisp:deftype image-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-summary common-lisp:nil
                       ((image-source :initarg :|imageSource| :type
                         (common-lisp:or image-source common-lisp:null)
                         :accessor %image-summary-image-source :initform
                         common-lisp:nil)
                        (build-type :initarg :|buildType| :type
                         (common-lisp:or build-type common-lisp:null) :accessor
                         %image-summary-build-type :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %image-summary-tags :initform common-lisp:nil)
                        (output-resources :initarg :|outputResources| :type
                         (common-lisp:or output-resources common-lisp:null)
                         :accessor %image-summary-output-resources :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-summary-date-created :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-summary-owner :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or image-state common-lisp:null)
                         :accessor %image-summary-state :initform
                         common-lisp:nil)
                        (os-version :initarg :|osVersion| :type
                         (common-lisp:or os-version common-lisp:null) :accessor
                         %image-summary-os-version :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-summary-platform :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %image-summary-version :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or image-type common-lisp:null) :accessor
                         %image-summary-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-summary 'make-image-summary))
 (common-lisp:defun make-image-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-source build-type tags
                     output-resources date-created owner state os-version
                     platform version type name arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-resources))
      (common-lisp:list
       (common-lisp:cons "outputResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-summary-list ()
   '(trivial-types:proper-list image-summary))
 (common-lisp:defun |make-image-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-tests-configuration common-lisp:nil
                       ((timeout-minutes :initarg :|timeoutMinutes| :type
                         (common-lisp:or image-tests-timeout-minutes
                                         common-lisp:null)
                         :accessor %image-tests-configuration-timeout-minutes
                         :initform common-lisp:nil)
                        (image-tests-enabled :initarg :|imageTestsEnabled|
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %image-tests-configuration-image-tests-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-tests-configuration
                    'make-image-tests-configuration))
 (common-lisp:defun make-image-tests-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-minutes image-tests-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'image-tests-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tests-enabled))
      (common-lisp:list
       (common-lisp:cons "imageTestsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "timeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-tests-configuration))
   common-lisp:nil))
(common-lisp:deftype image-tests-timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype image-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-version common-lisp:nil
                       ((image-source :initarg :|imageSource| :type
                         (common-lisp:or image-source common-lisp:null)
                         :accessor %image-version-image-source :initform
                         common-lisp:nil)
                        (build-type :initarg :|buildType| :type
                         (common-lisp:or build-type common-lisp:null) :accessor
                         %image-version-build-type :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %image-version-date-created :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %image-version-owner :initform
                         common-lisp:nil)
                        (os-version :initarg :|osVersion| :type
                         (common-lisp:or os-version common-lisp:null) :accessor
                         %image-version-os-version :initform common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %image-version-platform :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %image-version-version :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or image-type common-lisp:null) :accessor
                         %image-version-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %image-version-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %image-version-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-version 'make-image-version))
 (common-lisp:defun make-image-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-source build-type date-created
                     owner os-version platform version type name arn)
   (common-lisp:apply #'common-lisp:make-instance 'image-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-type))
      (common-lisp:list
       (common-lisp:cons "buildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-source))
      (common-lisp:list
       (common-lisp:cons "imageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-version))
   common-lisp:nil))
(common-lisp:deftype image-version-arn () 'common-lisp:string)
(common-lisp:deftype image-version-arn-or-build-version-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-version-list ()
   '(trivial-types:proper-list image-version))
 (common-lisp:defun |make-image-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-component-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %import-component-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %import-component-request-tags :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-component-request-kms-key-id
                         :initform common-lisp:nil)
                        (uri :initarg :|uri| :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %import-component-request-uri :initform
                         common-lisp:nil)
                        (data :initarg :|data| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-component-request-data :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %import-component-request-platform :initform
                         (common-lisp:error ":platform is required"))
                        (format :initarg :|format| :type
                         (common-lisp:or component-format common-lisp:null)
                         :accessor %import-component-request-format :initform
                         (common-lisp:error ":format is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %import-component-request-type :initform
                         (common-lisp:error ":type is required"))
                        (change-description :initarg :|changeDescription| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-component-request-change-description
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-component-request-description
                         :initform common-lisp:nil)
                        (semantic-version :initarg :|semanticVersion| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %import-component-request-semantic-version
                         :initform
                         (common-lisp:error ":semanticversion is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %import-component-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-component-request 'make-import-component-request))
 (common-lisp:defun make-import-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags kms-key-id uri data
                     platform format type change-description description
                     semantic-version name)
   (common-lisp:apply #'common-lisp:make-instance 'import-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-description))
      (common-lisp:list
       (common-lisp:cons "changeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-component-response common-lisp:nil
                       ((component-build-version-arn :initarg
                         :|componentBuildVersionArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %import-component-response-component-build-version-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %import-component-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-component-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-component-response
                    'make-import-component-response))
 (common-lisp:defun make-import-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-build-version-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-vm-image-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %import-vm-image-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %import-vm-image-request-tags :initform
                         common-lisp:nil)
                        (vm-import-task-id :initarg :|vmImportTaskId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-vm-image-request-vm-import-task-id
                         :initform
                         (common-lisp:error ":vmimporttaskid is required"))
                        (os-version :initarg :|osVersion| :type
                         (common-lisp:or os-version common-lisp:null) :accessor
                         %import-vm-image-request-os-version :initform
                         common-lisp:nil)
                        (platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %import-vm-image-request-platform :initform
                         (common-lisp:error ":platform is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-vm-image-request-description
                         :initform common-lisp:nil)
                        (semantic-version :initarg :|semanticVersion| :type
                         (common-lisp:or version-number common-lisp:null)
                         :accessor %import-vm-image-request-semantic-version
                         :initform
                         (common-lisp:error ":semanticversion is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-vm-image-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-vm-image-request 'make-import-vm-image-request))
 (common-lisp:defun make-import-vm-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags vm-import-task-id
                     os-version platform description semantic-version name)
   (common-lisp:apply #'common-lisp:make-instance 'import-vm-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "semanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "osVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-import-task-id))
      (common-lisp:list
       (common-lisp:cons "vmImportTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-vm-image-response common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %import-vm-image-response-client-token
                         :initform common-lisp:nil)
                        (image-arn :initarg :|imageArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %import-vm-image-response-image-arn :initform
                         common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-vm-image-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-vm-image-response 'make-import-vm-image-response))
 (common-lisp:defun make-import-vm-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token image-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-vm-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-vm-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infrastructure-configuration common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %infrastructure-configuration-tags :initform
                         common-lisp:nil)
                        (instance-metadata-options :initarg
                         :|instanceMetadataOptions| :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor
                         %infrastructure-configuration-instance-metadata-options
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or resource-tag-map common-lisp:null)
                         :accessor %infrastructure-configuration-resource-tags
                         :initform common-lisp:nil)
                        (date-updated :initarg :|dateUpdated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %infrastructure-configuration-date-updated :initform
                         common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %infrastructure-configuration-date-created :initform
                         common-lisp:nil)
                        (sns-topic-arn :initarg :|snsTopicArn| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %infrastructure-configuration-sns-topic-arn
                         :initform common-lisp:nil)
                        (terminate-instance-on-failure :initarg
                         :|terminateInstanceOnFailure| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %infrastructure-configuration-terminate-instance-on-failure
                         :initform common-lisp:nil)
                        (key-pair :initarg :|keyPair| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %infrastructure-configuration-key-pair
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %infrastructure-configuration-logging :initform
                         common-lisp:nil)
                        (subnet-id :initarg :|subnetId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %infrastructure-configuration-subnet-id
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %infrastructure-configuration-security-group-ids
                         :initform common-lisp:nil)
                        (instance-profile-name :initarg :|instanceProfileName|
                         :type
                         (common-lisp:or instance-profile-name-type
                                         common-lisp:null)
                         :accessor
                         %infrastructure-configuration-instance-profile-name
                         :initform common-lisp:nil)
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or instance-type-list common-lisp:null)
                         :accessor %infrastructure-configuration-instance-types
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %infrastructure-configuration-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %infrastructure-configuration-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %infrastructure-configuration-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'infrastructure-configuration
                    'make-infrastructure-configuration))
 (common-lisp:defun make-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags instance-metadata-options
                     resource-tags date-updated date-created sns-topic-arn
                     terminate-instance-on-failure key-pair logging subnet-id
                     security-group-ids instance-profile-name instance-types
                     description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'infrastructure-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration))
   common-lisp:nil))
(common-lisp:deftype infrastructure-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass infrastructure-configuration-summary common-lisp:nil
                       ((instance-profile-name :initarg :|instanceProfileName|
                         :type
                         (common-lisp:or instance-profile-name-type
                                         common-lisp:null)
                         :accessor
                         %infrastructure-configuration-summary-instance-profile-name
                         :initform common-lisp:nil)
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or instance-type-list common-lisp:null)
                         :accessor
                         %infrastructure-configuration-summary-instance-types
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %infrastructure-configuration-summary-tags :initform
                         common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or resource-tag-map common-lisp:null)
                         :accessor
                         %infrastructure-configuration-summary-resource-tags
                         :initform common-lisp:nil)
                        (date-updated :initarg :|dateUpdated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %infrastructure-configuration-summary-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :|dateCreated| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %infrastructure-configuration-summary-date-created
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %infrastructure-configuration-summary-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %infrastructure-configuration-summary-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %infrastructure-configuration-summary-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'infrastructure-configuration-summary
                    'make-infrastructure-configuration-summary))
 (common-lisp:defun make-infrastructure-configuration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-profile-name instance-types tags
                     resource-tags date-updated date-created description name
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'infrastructure-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "dateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "dateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infrastructure-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype infrastructure-configuration-summary-list ()
   '(trivial-types:proper-list infrastructure-configuration-summary))
 (common-lisp:defun |make-infrastructure-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            infrastructure-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inline-component-data () 'common-lisp:string)
(common-lisp:deftype inline-docker-file-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inspector-score-details common-lisp:nil
                       ((adjusted-cvss :initarg :|adjustedCvss| :type
                         (common-lisp:or cvss-score-details common-lisp:null)
                         :accessor %inspector-score-details-adjusted-cvss
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inspector-score-details 'make-inspector-score-details))
 (common-lisp:defun make-inspector-score-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key adjusted-cvss)
   (common-lisp:apply #'common-lisp:make-instance 'inspector-score-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjusted-cvss))
      (common-lisp:list
       (common-lisp:cons "adjustedCvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspector-score-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-block-device-mapping common-lisp:nil
                       ((no-device :initarg :|noDevice| :type
                         (common-lisp:or empty-string common-lisp:null)
                         :accessor %instance-block-device-mapping-no-device
                         :initform common-lisp:nil)
                        (virtual-name :initarg :|virtualName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %instance-block-device-mapping-virtual-name
                         :initform common-lisp:nil)
                        (ebs :initarg :|ebs| :type
                         (common-lisp:or
                          ebs-instance-block-device-specification
                          common-lisp:null)
                         :accessor %instance-block-device-mapping-ebs :initform
                         common-lisp:nil)
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %instance-block-device-mapping-device-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-block-device-mapping
                    'make-instance-block-device-mapping))
 (common-lisp:defun make-instance-block-device-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key no-device virtual-name ebs device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-block-device-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "virtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "noDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-block-device-mappings ()
   '(trivial-types:proper-list instance-block-device-mapping))
 (common-lisp:defun |make-instance-block-device-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-configuration common-lisp:nil
                       ((block-device-mappings :initarg :|blockDeviceMappings|
                         :type
                         (common-lisp:or instance-block-device-mappings
                                         common-lisp:null)
                         :accessor
                         %instance-configuration-block-device-mappings
                         :initform common-lisp:nil)
                        (image :initarg :|image| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %instance-configuration-image :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defun make-instance-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block-device-mappings image)
   (common-lisp:apply #'common-lisp:make-instance 'instance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "blockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-metadata-options common-lisp:nil
                       ((http-put-response-hop-limit :initarg
                         :|httpPutResponseHopLimit| :type
                         (common-lisp:or http-put-response-hop-limit
                                         common-lisp:null)
                         :accessor
                         %instance-metadata-options-http-put-response-hop-limit
                         :initform common-lisp:nil)
                        (http-tokens :initarg :|httpTokens| :type
                         (common-lisp:or http-tokens common-lisp:null)
                         :accessor %instance-metadata-options-http-tokens
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defun make-instance-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key http-put-response-hop-limit http-tokens)
   (common-lisp:apply #'common-lisp:make-instance 'instance-metadata-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:deftype instance-profile-name-type () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-type-list ()
   '(trivial-types:proper-list instance-type))
 (common-lisp:defun |make-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-pagination-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-token-exception
                    'invalid-pagination-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-version-number-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-version-number-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-version-number-exception
                    'invalid-version-number-exception-message)))
(common-lisp:progn
 (common-lisp:defclass launch-permission-configuration common-lisp:nil
                       ((organizational-unit-arns :initarg
                         :|organizationalUnitArns| :type
                         (common-lisp:or organizational-unit-arn-list
                                         common-lisp:null)
                         :accessor
                         %launch-permission-configuration-organizational-unit-arns
                         :initform common-lisp:nil)
                        (organization-arns :initarg :|organizationArns| :type
                         (common-lisp:or organization-arn-list
                                         common-lisp:null)
                         :accessor
                         %launch-permission-configuration-organization-arns
                         :initform common-lisp:nil)
                        (user-groups :initarg :|userGroups| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %launch-permission-configuration-user-groups
                         :initform common-lisp:nil)
                        (user-ids :initarg :|userIds| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %launch-permission-configuration-user-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-permission-configuration
                    'make-launch-permission-configuration))
 (common-lisp:defun make-launch-permission-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-arns
                     organization-arns user-groups user-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-permission-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-groups))
      (common-lisp:list
       (common-lisp:cons "userGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-arns))
      (common-lisp:list
       (common-lisp:cons "organizationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-arns))
      (common-lisp:list
       (common-lisp:cons "organizationalUnitArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-permission-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-template-configuration common-lisp:nil
                       ((set-default-version :initarg :|setDefaultVersion|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %launch-template-configuration-set-default-version
                         :initform common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %launch-template-configuration-account-id :initform
                         common-lisp:nil)
                        (launch-template-id :initarg :|launchTemplateId| :type
                         (common-lisp:or launch-template-id common-lisp:null)
                         :accessor
                         %launch-template-configuration-launch-template-id
                         :initform
                         (common-lisp:error ":launchtemplateid is required"))))
 (common-lisp:export
  (common-lisp:list 'launch-template-configuration
                    'make-launch-template-configuration))
 (common-lisp:defun make-launch-template-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key set-default-version account-id
                     launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-template-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "launchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-default-version))
      (common-lisp:list
       (common-lisp:cons "setDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype launch-template-configuration-list ()
   '(trivial-types:proper-list launch-template-configuration))
 (common-lisp:defun |make-launch-template-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-template-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-template-id () 'common-lisp:string)
(common-lisp:deftype license-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype license-configuration-arn-list ()
   '(trivial-types:proper-list license-configuration-arn))
 (common-lisp:defun |make-license-configuration-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            license-configuration-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-component-build-versions-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-component-build-versions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-component-build-versions-request-max-results
                         :initform common-lisp:nil)
                        (component-version-arn :initarg :|componentVersionArn|
                         :type
                         (common-lisp:or component-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-component-build-versions-request-component-version-arn
                         :initform
                         (common-lisp:error
                          ":componentversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-component-build-versions-request
                    'make-list-component-build-versions-request))
 (common-lisp:defun make-list-component-build-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     component-version-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-build-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-arn))
      (common-lisp:list
       (common-lisp:cons "componentVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-build-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-component-build-versions-response-next-token
                         :initform common-lisp:nil)
                        (component-summary-list :initarg
                         :|componentSummaryList| :type
                         (common-lisp:or component-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-component-build-versions-response-component-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-component-build-versions-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-component-build-versions-response
                    'make-list-component-build-versions-response))
 (common-lisp:defun make-list-component-build-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token component-summary-list
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-build-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-summary-list))
      (common-lisp:list
       (common-lisp:cons "componentSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-build-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-components-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-components-request-max-results
                         :initform common-lisp:nil)
                        (by-name :initarg :|byName| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-components-request-by-name :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-components-request-filters :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or ownership common-lisp:null) :accessor
                         %list-components-request-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defun make-list-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results by-name filters
                     owner)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'by-name))
      (common-lisp:list
       (common-lisp:cons "byName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-components-response-next-token
                         :initform common-lisp:nil)
                        (component-version-list :initarg
                         :|componentVersionList| :type
                         (common-lisp:or component-version-list
                                         common-lisp:null)
                         :accessor
                         %list-components-response-component-version-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-components-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defun make-list-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token component-version-list
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-version-list))
      (common-lisp:list
       (common-lisp:cons "componentVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-recipes-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-container-recipes-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-container-recipes-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-container-recipes-request-filters
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or ownership common-lisp:null) :accessor
                         %list-container-recipes-request-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-container-recipes-request
                    'make-list-container-recipes-request))
 (common-lisp:defun make-list-container-recipes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters owner)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-recipes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-recipes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-container-recipes-response-next-token
                         :initform common-lisp:nil)
                        (container-recipe-summary-list :initarg
                         :|containerRecipeSummaryList| :type
                         (common-lisp:or container-recipe-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-container-recipes-response-container-recipe-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-container-recipes-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-container-recipes-response
                    'make-list-container-recipes-response))
 (common-lisp:defun make-list-container-recipes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token container-recipe-summary-list
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-recipes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-summary-list))
      (common-lisp:list
       (common-lisp:cons "containerRecipeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-recipes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distribution-configurations-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-distribution-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-distribution-configurations-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %list-distribution-configurations-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distribution-configurations-request
                    'make-list-distribution-configurations-request))
 (common-lisp:defun make-list-distribution-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distribution-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-distribution-configurations-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-distribution-configurations-response-next-token
                         :initform common-lisp:nil)
                        (distribution-configuration-summary-list :initarg
                         :|distributionConfigurationSummaryList| :type
                         (common-lisp:or
                          distribution-configuration-summary-list
                          common-lisp:null)
                         :accessor
                         %list-distribution-configurations-response-distribution-configuration-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-distribution-configurations-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-distribution-configurations-response
                    'make-list-distribution-configurations-response))
 (common-lisp:defun make-list-distribution-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     distribution-configuration-summary-list request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-distribution-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-distribution-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-build-versions-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-build-versions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-image-build-versions-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-image-build-versions-request-filters
                         :initform common-lisp:nil)
                        (image-version-arn :initarg :|imageVersionArn| :type
                         (common-lisp:or image-version-arn common-lisp:null)
                         :accessor
                         %list-image-build-versions-request-image-version-arn
                         :initform
                         (common-lisp:error ":imageversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-image-build-versions-request
                    'make-list-image-build-versions-request))
 (common-lisp:defun make-list-image-build-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     image-version-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-build-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-build-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-build-versions-response-next-token
                         :initform common-lisp:nil)
                        (image-summary-list :initarg :|imageSummaryList| :type
                         (common-lisp:or image-summary-list common-lisp:null)
                         :accessor
                         %list-image-build-versions-response-image-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-image-build-versions-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-build-versions-response
                    'make-list-image-build-versions-response))
 (common-lisp:defun make-list-image-build-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-summary-list request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-build-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-build-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-packages-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-packages-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-image-packages-request-max-results
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-image-packages-request-image-build-version-arn
                         :initform
                         (common-lisp:error
                          ":imagebuildversionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-image-packages-request
                    'make-list-image-packages-request))
 (common-lisp:defun make-list-image-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     image-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-image-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-packages-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-packages-response-next-token
                         :initform common-lisp:nil)
                        (image-package-list :initarg :|imagePackageList| :type
                         (common-lisp:or image-package-list common-lisp:null)
                         :accessor
                         %list-image-packages-response-image-package-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-image-packages-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-packages-response
                    'make-list-image-packages-response))
 (common-lisp:defun make-list-image-packages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-package-list request-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-image-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-package-list))
      (common-lisp:list
       (common-lisp:cons "imagePackageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-pipeline-images-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-image-pipeline-images-request-filters
                         :initform common-lisp:nil)
                        (image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-request-image-pipeline-arn
                         :initform
                         (common-lisp:error ":imagepipelinearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-image-pipeline-images-request
                    'make-list-image-pipeline-images-request))
 (common-lisp:defun make-list-image-pipeline-images-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-pipeline-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-pipeline-images-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-response-next-token
                         :initform common-lisp:nil)
                        (image-summary-list :initarg :|imageSummaryList| :type
                         (common-lisp:or image-summary-list common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-response-image-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-image-pipeline-images-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipeline-images-response
                    'make-list-image-pipeline-images-response))
 (common-lisp:defun make-list-image-pipeline-images-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-summary-list request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-pipeline-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipeline-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-pipelines-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-pipelines-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-image-pipelines-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-image-pipelines-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipelines-request
                    'make-list-image-pipelines-request))
 (common-lisp:defun make-list-image-pipelines-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-image-pipelines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-pipelines-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-pipelines-response-next-token
                         :initform common-lisp:nil)
                        (image-pipeline-list :initarg :|imagePipelineList|
                         :type
                         (common-lisp:or image-pipeline-list common-lisp:null)
                         :accessor
                         %list-image-pipelines-response-image-pipeline-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-image-pipelines-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-pipelines-response
                    'make-list-image-pipelines-response))
 (common-lisp:defun make-list-image-pipelines-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-pipeline-list
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-pipelines-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-list))
      (common-lisp:list
       (common-lisp:cons "imagePipelineList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-recipes-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-recipes-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-image-recipes-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-image-recipes-request-filters
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or ownership common-lisp:null) :accessor
                         %list-image-recipes-request-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-recipes-request
                    'make-list-image-recipes-request))
 (common-lisp:defun make-list-image-recipes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters owner)
   (common-lisp:apply #'common-lisp:make-instance 'list-image-recipes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-recipes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-recipes-response-next-token
                         :initform common-lisp:nil)
                        (image-recipe-summary-list :initarg
                         :|imageRecipeSummaryList| :type
                         (common-lisp:or image-recipe-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-image-recipes-response-image-recipe-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-image-recipes-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-recipes-response
                    'make-list-image-recipes-response))
 (common-lisp:defun make-list-image-recipes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-recipe-summary-list
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-image-recipes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-recipe-summary-list))
      (common-lisp:list
       (common-lisp:cons "imageRecipeSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-recipes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-scan-finding-aggregations-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-scan-finding-aggregations-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter common-lisp:null) :accessor
                         %list-image-scan-finding-aggregations-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-finding-aggregations-request
                    'make-list-image-scan-finding-aggregations-request))
 (common-lisp:defun make-list-image-scan-finding-aggregations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-scan-finding-aggregations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-scan-finding-aggregations-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-scan-finding-aggregations-response-next-token
                         :initform common-lisp:nil)
                        (responses :initarg :|responses| :type
                         (common-lisp:or image-scan-finding-aggregations-list
                                         common-lisp:null)
                         :accessor
                         %list-image-scan-finding-aggregations-response-responses
                         :initform common-lisp:nil)
                        (aggregation-type :initarg :|aggregationType| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-image-scan-finding-aggregations-response-aggregation-type
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-image-scan-finding-aggregations-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-finding-aggregations-response
                    'make-list-image-scan-finding-aggregations-response))
 (common-lisp:defun make-list-image-scan-finding-aggregations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token responses aggregation-type
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-scan-finding-aggregations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-finding-aggregations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-scan-findings-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-image-scan-findings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-image-scan-findings-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or image-scan-findings-filter-list
                                         common-lisp:null)
                         :accessor %list-image-scan-findings-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-findings-request
                    'make-list-image-scan-findings-request))
 (common-lisp:defun make-list-image-scan-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-scan-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-image-scan-findings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-image-scan-findings-response-next-token
                         :initform common-lisp:nil)
                        (findings :initarg :|findings| :type
                         (common-lisp:or image-scan-findings-list
                                         common-lisp:null)
                         :accessor %list-image-scan-findings-response-findings
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-image-scan-findings-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-image-scan-findings-response
                    'make-list-image-scan-findings-response))
 (common-lisp:defun make-list-image-scan-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-image-scan-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-scan-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-images-request common-lisp:nil
                       ((include-deprecated :initarg :|includeDeprecated| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %list-images-request-include-deprecated
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-images-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor %list-images-request-max-results :initform
                         common-lisp:nil)
                        (by-name :initarg :|byName| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-images-request-by-name :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-images-request-filters :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or ownership common-lisp:null) :accessor
                         %list-images-request-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-images-request 'make-list-images-request))
 (common-lisp:defun make-list-images-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-deprecated next-token max-results
                     by-name filters owner)
   (common-lisp:apply #'common-lisp:make-instance 'list-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'by-name))
      (common-lisp:list
       (common-lisp:cons "byName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-deprecated))
      (common-lisp:list
       (common-lisp:cons "includeDeprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-images-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-images-response-next-token :initform
                         common-lisp:nil)
                        (image-version-list :initarg :|imageVersionList| :type
                         (common-lisp:or image-version-list common-lisp:null)
                         :accessor %list-images-response-image-version-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-images-response-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-images-response 'make-list-images-response))
 (common-lisp:defun make-list-images-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-version-list request-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-images-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-list))
      (common-lisp:list
       (common-lisp:cons "imageVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-infrastructure-configurations-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-infrastructure-configurations-request
                    'make-list-infrastructure-configurations-request))
 (common-lisp:defun make-list-infrastructure-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-infrastructure-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-infrastructure-configurations-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-response-next-token
                         :initform common-lisp:nil)
                        (infrastructure-configuration-summary-list :initarg
                         :|infrastructureConfigurationSummaryList| :type
                         (common-lisp:or
                          infrastructure-configuration-summary-list
                          common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-response-infrastructure-configuration-summary-list
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-infrastructure-configurations-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-infrastructure-configurations-response
                    'make-list-infrastructure-configurations-response))
 (common-lisp:defun make-list-infrastructure-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     infrastructure-configuration-summary-list request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-infrastructure-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-infrastructure-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-executions-request common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-workflow-executions-request-image-build-version-arn
                         :initform
                         (common-lisp:error
                          ":imagebuildversionarn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-workflow-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-workflow-executions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-executions-request
                    'make-list-workflow-executions-request))
 (common-lisp:defun make-list-workflow-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-executions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-workflow-executions-response-next-token
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or image-build-message common-lisp:null)
                         :accessor %list-workflow-executions-response-message
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-workflow-executions-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (workflow-executions :initarg :|workflowExecutions|
                         :type
                         (common-lisp:or workflow-executions-list
                                         common-lisp:null)
                         :accessor
                         %list-workflow-executions-response-workflow-executions
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-workflow-executions-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-executions-response
                    'make-list-workflow-executions-response))
 (common-lisp:defun make-list-workflow-executions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token message
                     image-build-version-arn workflow-executions request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-executions))
      (common-lisp:list
       (common-lisp:cons "workflowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-step-executions-request common-lisp:nil
                       ((workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-request-workflow-execution-id
                         :initform
                         (common-lisp:error
                          ":workflowexecutionid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or restricted-integer common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-executions-request
                    'make-list-workflow-step-executions-request))
 (common-lisp:defun make-list-workflow-step-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-execution-id next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-step-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-step-executions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-next-token
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or image-build-message common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-message
                         :initform common-lisp:nil)
                        (image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-workflow-execution-id
                         :initform common-lisp:nil)
                        (workflow-build-version-arn :initarg
                         :|workflowBuildVersionArn| :type
                         (common-lisp:or workflow-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-workflow-build-version-arn
                         :initform common-lisp:nil)
                        (steps :initarg :|steps| :type
                         (common-lisp:or workflow-step-executions-list
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-steps
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-workflow-step-executions-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-executions-response
                    'make-list-workflow-step-executions-response))
 (common-lisp:defun make-list-workflow-step-executions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token message
                     image-build-version-arn workflow-execution-id
                     workflow-build-version-arn steps request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-step-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging common-lisp:nil
                       ((s3logs :initarg :|s3Logs| :type
                         (common-lisp:or s3logs common-lisp:null) :accessor
                         %logging-s3logs :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defun make-logging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3logs)
   (common-lisp:apply #'common-lisp:make-instance 'logging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "s3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:deftype max-parallel-launches () 'common-lisp:integer)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-non-empty-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype organization-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-arn-list ()
   '(trivial-types:proper-list organization-arn))
 (common-lisp:defun |make-organization-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organization-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organizational-unit-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-arn-list ()
   '(trivial-types:proper-list organizational-unit-arn))
 (common-lisp:defun |make-organizational-unit-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype os-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype os-version-list ()
   '(trivial-types:proper-list os-version))
 (common-lisp:defun |make-os-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list os-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-resources common-lisp:nil
                       ((containers :initarg :|containers| :type
                         (common-lisp:or container-list common-lisp:null)
                         :accessor %output-resources-containers :initform
                         common-lisp:nil)
                        (amis :initarg :|amis| :type
                         (common-lisp:or ami-list common-lisp:null) :accessor
                         %output-resources-amis :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-resources 'make-output-resources))
 (common-lisp:defun make-output-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key containers amis)
   (common-lisp:apply #'common-lisp:make-instance 'output-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amis))
      (common-lisp:list
       (common-lisp:cons "amis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-resources))
   common-lisp:nil))
(common-lisp:deftype ownership () 'common-lisp:string)
(common-lisp:deftype package-architecture () 'common-lisp:string)
(common-lisp:deftype package-epoch () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass package-vulnerability-details common-lisp:nil
                       ((reference-urls :initarg :|referenceUrls| :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %package-vulnerability-details-reference-urls
                         :initform common-lisp:nil)
                        (vendor-updated-at :initarg :|vendorUpdatedAt| :type
                         (common-lisp:or date-time-timestamp common-lisp:null)
                         :accessor
                         %package-vulnerability-details-vendor-updated-at
                         :initform common-lisp:nil)
                        (vendor-created-at :initarg :|vendorCreatedAt| :type
                         (common-lisp:or date-time-timestamp common-lisp:null)
                         :accessor
                         %package-vulnerability-details-vendor-created-at
                         :initform common-lisp:nil)
                        (vendor-severity :initarg :|vendorSeverity| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %package-vulnerability-details-vendor-severity
                         :initform common-lisp:nil)
                        (source-url :initarg :|sourceUrl| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %package-vulnerability-details-source-url
                         :initform common-lisp:nil)
                        (related-vulnerabilities :initarg
                         :|relatedVulnerabilities| :type
                         (common-lisp:or vulnerability-id-list
                                         common-lisp:null)
                         :accessor
                         %package-vulnerability-details-related-vulnerabilities
                         :initform common-lisp:nil)
                        (cvss :initarg :|cvss| :type
                         (common-lisp:or cvss-score-list common-lisp:null)
                         :accessor %package-vulnerability-details-cvss
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %package-vulnerability-details-source
                         :initform common-lisp:nil)
                        (vulnerable-packages :initarg :|vulnerablePackages|
                         :type
                         (common-lisp:or vulnerable-package-list
                                         common-lisp:null)
                         :accessor
                         %package-vulnerability-details-vulnerable-packages
                         :initform common-lisp:nil)
                        (vulnerability-id :initarg :|vulnerabilityId| :type
                         (common-lisp:or vulnerability-id common-lisp:null)
                         :accessor
                         %package-vulnerability-details-vulnerability-id
                         :initform
                         (common-lisp:error ":vulnerabilityid is required"))))
 (common-lisp:export
  (common-lisp:list 'package-vulnerability-details
                    'make-package-vulnerability-details))
 (common-lisp:defun make-package-vulnerability-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-urls vendor-updated-at
                     vendor-created-at vendor-severity source-url
                     related-vulnerabilities cvss source vulnerable-packages
                     vulnerability-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'package-vulnerability-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "vulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "relatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "vendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "vendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "vendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-vulnerability-details))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-start-condition () 'common-lisp:string)
(common-lisp:deftype pipeline-status () 'common-lisp:string)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-component-policy-request common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %put-component-policy-request-policy
                         :initform (common-lisp:error ":policy is required"))
                        (component-arn :initarg :|componentArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor %put-component-policy-request-component-arn
                         :initform
                         (common-lisp:error ":componentarn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-component-policy-request
                    'make-put-component-policy-request))
 (common-lisp:defun make-put-component-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy component-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-component-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-component-policy-response common-lisp:nil
                       ((component-arn :initarg :|componentArn| :type
                         (common-lisp:or component-build-version-arn
                                         common-lisp:null)
                         :accessor %put-component-policy-response-component-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %put-component-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-component-policy-response
                    'make-put-component-policy-response))
 (common-lisp:defun make-put-component-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-component-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-arn))
      (common-lisp:list
       (common-lisp:cons "componentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-component-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-container-recipe-policy-request common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %put-container-recipe-policy-request-policy
                         :initform (common-lisp:error ":policy is required"))
                        (container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %put-container-recipe-policy-request-container-recipe-arn
                         :initform
                         (common-lisp:error
                          ":containerrecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-container-recipe-policy-request
                    'make-put-container-recipe-policy-request))
 (common-lisp:defun make-put-container-recipe-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy container-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-container-recipe-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-container-recipe-policy-response common-lisp:nil
                       ((container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %put-container-recipe-policy-response-container-recipe-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %put-container-recipe-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-container-recipe-policy-response
                    'make-put-container-recipe-policy-response))
 (common-lisp:defun make-put-container-recipe-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-recipe-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-container-recipe-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-container-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-policy-request common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %put-image-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (image-arn :initarg :|imageArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor %put-image-policy-request-image-arn
                         :initform
                         (common-lisp:error ":imagearn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-image-policy-request 'make-put-image-policy-request))
 (common-lisp:defun make-put-image-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy image-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-policy-response common-lisp:nil
                       ((image-arn :initarg :|imageArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor %put-image-policy-response-image-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %put-image-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-image-policy-response
                    'make-put-image-policy-response))
 (common-lisp:defun make-put-image-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-image-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "imageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-recipe-policy-request common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor %put-image-recipe-policy-request-policy
                         :initform (common-lisp:error ":policy is required"))
                        (image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %put-image-recipe-policy-request-image-recipe-arn
                         :initform
                         (common-lisp:error ":imagerecipearn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-image-recipe-policy-request
                    'make-put-image-recipe-policy-request))
 (common-lisp:defun make-put-image-recipe-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy image-recipe-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-recipe-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-image-recipe-policy-response common-lisp:nil
                       ((image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %put-image-recipe-policy-response-image-recipe-arn
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %put-image-recipe-policy-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-image-recipe-policy-response
                    'make-put-image-recipe-policy-response))
 (common-lisp:defun make-put-image-recipe-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-recipe-arn request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-image-recipe-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-image-recipe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remediation common-lisp:nil
                       ((recommendation :initarg :|recommendation| :type
                         (common-lisp:or remediation-recommendation
                                         common-lisp:null)
                         :accessor %remediation-recommendation :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defun make-remediation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendation)
   (common-lisp:apply #'common-lisp:make-instance 'remediation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remediation-recommendation common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %remediation-recommendation-url :initform
                         common-lisp:nil)
                        (text :initarg :|text| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %remediation-recommendation-text :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remediation-recommendation
                    'make-remediation-recommendation))
 (common-lisp:defun make-remediation-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url text)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-dependency-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-dependency-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-dependency-exception
                    'resource-dependency-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-resource-tag-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype restricted-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass s3export-configuration common-lisp:nil
                       ((s3prefix :initarg :|s3Prefix| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3export-configuration-s3prefix :initform
                         common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3export-configuration-s3bucket :initform
                         (common-lisp:error ":s3bucket is required"))
                        (disk-image-format :initarg :|diskImageFormat| :type
                         (common-lisp:or disk-image-format common-lisp:null)
                         :accessor %s3export-configuration-disk-image-format
                         :initform
                         (common-lisp:error ":diskimageformat is required"))
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3export-configuration-role-name :initform
                         (common-lisp:error ":rolename is required"))))
 (common-lisp:export
  (common-lisp:list 's3export-configuration 'make-s3export-configuration))
 (common-lisp:defun make-s3export-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3prefix s3bucket disk-image-format
                     role-name)
   (common-lisp:apply #'common-lisp:make-instance 's3export-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-image-format))
      (common-lisp:list
       (common-lisp:cons "diskImageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "s3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3logs common-lisp:nil
                       ((s3key-prefix :initarg :|s3KeyPrefix| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3logs-s3key-prefix :initform
                         common-lisp:nil)
                        (s3bucket-name :initarg :|s3BucketName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3logs-s3bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3logs 'make-s3logs))
 (common-lisp:defun make-s3logs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key-prefix s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3logs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3logs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3logs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3logs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule common-lisp:nil
                       ((pipeline-execution-start-condition :initarg
                         :|pipelineExecutionStartCondition| :type
                         (common-lisp:or pipeline-execution-start-condition
                                         common-lisp:null)
                         :accessor %schedule-pipeline-execution-start-condition
                         :initform common-lisp:nil)
                        (timezone :initarg :|timezone| :type
                         (common-lisp:or timezone common-lisp:null) :accessor
                         %schedule-timezone :initform common-lisp:nil)
                        (schedule-expression :initarg :|scheduleExpression|
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %schedule-schedule-expression :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defun make-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-execution-start-condition
                     timezone schedule-expression)
   (common-lisp:apply #'common-lisp:make-instance 'schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "scheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-start-condition))
      (common-lisp:list
       (common-lisp:cons "pipelineExecutionStartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (imagebuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype severity-count-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass severity-counts common-lisp:nil
                       ((medium :initarg :|medium| :type
                         (common-lisp:or severity-count-number
                                         common-lisp:null)
                         :accessor %severity-counts-medium :initform
                         common-lisp:nil)
                        (high :initarg :|high| :type
                         (common-lisp:or severity-count-number
                                         common-lisp:null)
                         :accessor %severity-counts-high :initform
                         common-lisp:nil)
                        (critical :initarg :|critical| :type
                         (common-lisp:or severity-count-number
                                         common-lisp:null)
                         :accessor %severity-counts-critical :initform
                         common-lisp:nil)
                        (all :initarg :|all| :type
                         (common-lisp:or severity-count-number
                                         common-lisp:null)
                         :accessor %severity-counts-all :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'severity-counts 'make-severity-counts))
 (common-lisp:defun make-severity-counts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key medium high critical all)
   (common-lisp:apply #'common-lisp:make-instance 'severity-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "all"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high))
      (common-lisp:list
       (common-lisp:cons "high"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medium))
      (common-lisp:list
       (common-lisp:cons "medium"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-counts))
   common-lisp:nil))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype source-layer-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-image-pipeline-execution-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-image-pipeline-execution-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %start-image-pipeline-execution-request-image-pipeline-arn
                         :initform
                         (common-lisp:error ":imagepipelinearn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-image-pipeline-execution-request
                    'make-start-image-pipeline-execution-request))
 (common-lisp:defun make-start-image-pipeline-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-image-pipeline-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-image-pipeline-execution-response common-lisp:nil
                       ((image-build-version-arn :initarg
                         :|imageBuildVersionArn| :type
                         (common-lisp:or image-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %start-image-pipeline-execution-response-image-build-version-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %start-image-pipeline-execution-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %start-image-pipeline-execution-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-image-pipeline-execution-response
                    'make-start-image-pipeline-execution-response))
 (common-lisp:defun make-start-image-pipeline-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-build-version-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-image-pipeline-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "imageBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass systems-manager-agent common-lisp:nil
                       ((uninstall-after-build :initarg :|uninstallAfterBuild|
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %systems-manager-agent-uninstall-after-build
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'systems-manager-agent 'make-systems-manager-agent))
 (common-lisp:defun make-systems-manager-agent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uninstall-after-build)
   (common-lisp:apply #'common-lisp:make-instance 'systems-manager-agent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uninstall-after-build))
      (common-lisp:list
       (common-lisp:cons "uninstallAfterBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          systems-manager-agent))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-container-repository common-lisp:nil
                       ((repository-name :initarg :|repositoryName| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %target-container-repository-repository-name
                         :initform
                         (common-lisp:error ":repositoryname is required"))
                        (service :initarg :|service| :type
                         (common-lisp:or container-repository-service
                                         common-lisp:null)
                         :accessor %target-container-repository-service
                         :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'target-container-repository
                    'make-target-container-repository))
 (common-lisp:defun make-target-container-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-name service)
   (common-lisp:apply #'common-lisp:make-instance 'target-container-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-container-repository))
   common-lisp:nil))
(common-lisp:deftype target-resource-count () 'common-lisp:integer)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or image-builder-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-configuration-request
                       common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-distribution-configuration-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (distributions :initarg :|distributions| :type
                         (common-lisp:or distribution-list common-lisp:null)
                         :accessor
                         %update-distribution-configuration-request-distributions
                         :initform
                         (common-lisp:error ":distributions is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-distribution-configuration-request-description
                         :initform common-lisp:nil)
                        (distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-distribution-configuration-request-distribution-configuration-arn
                         :initform
                         (common-lisp:error
                          ":distributionconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-distribution-configuration-request
                    'make-update-distribution-configuration-request))
 (common-lisp:defun make-update-distribution-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token distributions description
                     distribution-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-distribution-configuration-response
                       common-lisp:nil
                       ((distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-distribution-configuration-response-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-distribution-configuration-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-distribution-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-configuration-response
                    'make-update-distribution-configuration-response))
 (common-lisp:defun make-update-distribution-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distribution-configuration-arn
                     client-token request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-distribution-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-image-pipeline-request common-lisp:nil
                       ((image-scanning-configuration :initarg
                         :|imageScanningConfiguration| :type
                         (common-lisp:or image-scanning-configuration
                                         common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-image-scanning-configuration
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-image-pipeline-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or pipeline-status common-lisp:null)
                         :accessor %update-image-pipeline-request-status
                         :initform common-lisp:nil)
                        (schedule :initarg :|schedule| :type
                         (common-lisp:or schedule common-lisp:null) :accessor
                         %update-image-pipeline-request-schedule :initform
                         common-lisp:nil)
                        (enhanced-image-metadata-enabled :initarg
                         :|enhancedImageMetadataEnabled| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-enhanced-image-metadata-enabled
                         :initform common-lisp:nil)
                        (image-tests-configuration :initarg
                         :|imageTestsConfiguration| :type
                         (common-lisp:or image-tests-configuration
                                         common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-image-tests-configuration
                         :initform common-lisp:nil)
                        (distribution-configuration-arn :initarg
                         :|distributionConfigurationArn| :type
                         (common-lisp:or distribution-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-distribution-configuration-arn
                         :initform common-lisp:nil)
                        (infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))
                        (container-recipe-arn :initarg :|containerRecipeArn|
                         :type
                         (common-lisp:or container-recipe-arn common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-container-recipe-arn
                         :initform common-lisp:nil)
                        (image-recipe-arn :initarg :|imageRecipeArn| :type
                         (common-lisp:or image-recipe-arn common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-image-recipe-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-image-pipeline-request-description
                         :initform common-lisp:nil)
                        (image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %update-image-pipeline-request-image-pipeline-arn
                         :initform
                         (common-lisp:error ":imagepipelinearn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-image-pipeline-request
                    'make-update-image-pipeline-request))
 (common-lisp:defun make-update-image-pipeline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-scanning-configuration client-token
                     status schedule enhanced-image-metadata-enabled
                     image-tests-configuration distribution-configuration-arn
                     infrastructure-configuration-arn container-recipe-arn
                     image-recipe-arn description image-pipeline-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-pipeline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "imageRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-recipe-arn))
      (common-lisp:list
       (common-lisp:cons "containerRecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distribution-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "distributionConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tests-configuration))
      (common-lisp:list
       (common-lisp:cons "imageTestsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-image-metadata-enabled))
      (common-lisp:list
       (common-lisp:cons "enhancedImageMetadataEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "imageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-image-pipeline-response common-lisp:nil
                       ((image-pipeline-arn :initarg :|imagePipelineArn| :type
                         (common-lisp:or image-pipeline-arn common-lisp:null)
                         :accessor
                         %update-image-pipeline-response-image-pipeline-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %update-image-pipeline-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-image-pipeline-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-image-pipeline-response
                    'make-update-image-pipeline-response))
 (common-lisp:defun make-update-image-pipeline-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-pipeline-arn client-token
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-pipeline-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "imagePipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-infrastructure-configuration-request
                       common-lisp:nil
                       ((instance-metadata-options :initarg
                         :|instanceMetadataOptions| :type
                         (common-lisp:or instance-metadata-options
                                         common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-instance-metadata-options
                         :initform common-lisp:nil)
                        (resource-tags :initarg :|resourceTags| :type
                         (common-lisp:or resource-tag-map common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-resource-tags
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (sns-topic-arn :initarg :|snsTopicArn| :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-sns-topic-arn
                         :initform common-lisp:nil)
                        (terminate-instance-on-failure :initarg
                         :|terminateInstanceOnFailure| :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-terminate-instance-on-failure
                         :initform common-lisp:nil)
                        (key-pair :initarg :|keyPair| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-key-pair
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %update-infrastructure-configuration-request-logging
                         :initform common-lisp:nil)
                        (subnet-id :initarg :|subnetId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-subnet-id
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-security-group-ids
                         :initform common-lisp:nil)
                        (instance-profile-name :initarg :|instanceProfileName|
                         :type
                         (common-lisp:or instance-profile-name-type
                                         common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instanceprofilename is required"))
                        (instance-types :initarg :|instanceTypes| :type
                         (common-lisp:or instance-type-list common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-instance-types
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-description
                         :initform common-lisp:nil)
                        (infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-request-infrastructure-configuration-arn
                         :initform
                         (common-lisp:error
                          ":infrastructureconfigurationarn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-infrastructure-configuration-request
                    'make-update-infrastructure-configuration-request))
 (common-lisp:defun make-update-infrastructure-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-metadata-options resource-tags
                     client-token sns-topic-arn terminate-instance-on-failure
                     key-pair logging subnet-id security-group-ids
                     instance-profile-name instance-types description
                     infrastructure-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-infrastructure-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "instanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "instanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-instance-on-failure))
      (common-lisp:list
       (common-lisp:cons "terminateInstanceOnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "resourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-options))
      (common-lisp:list
       (common-lisp:cons "instanceMetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-infrastructure-configuration-response
                       common-lisp:nil
                       ((infrastructure-configuration-arn :initarg
                         :|infrastructureConfigurationArn| :type
                         (common-lisp:or infrastructure-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-response-infrastructure-configuration-arn
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-response-client-token
                         :initform common-lisp:nil)
                        (request-id :initarg :|requestId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-infrastructure-configuration-response-request-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-infrastructure-configuration-response
                    'make-update-infrastructure-configuration-response))
 (common-lisp:defun make-update-infrastructure-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key infrastructure-configuration-arn
                     client-token request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-infrastructure-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "infrastructureConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-infrastructure-configuration-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype user-data-override () 'common-lisp:string)
(common-lisp:deftype version-number () 'common-lisp:string)
(common-lisp:deftype vulnerability-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vulnerability-id-aggregation common-lisp:nil
                       ((severity-counts :initarg :|severityCounts| :type
                         (common-lisp:or severity-counts common-lisp:null)
                         :accessor
                         %vulnerability-id-aggregation-severity-counts
                         :initform common-lisp:nil)
                        (vulnerability-id :initarg :|vulnerabilityId| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %vulnerability-id-aggregation-vulnerability-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vulnerability-id-aggregation
                    'make-vulnerability-id-aggregation))
 (common-lisp:defun make-vulnerability-id-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-counts vulnerability-id)
   (common-lisp:apply #'common-lisp:make-instance 'vulnerability-id-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerability-id))
      (common-lisp:list
       (common-lisp:cons "vulnerabilityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-counts))
      (common-lisp:list
       (common-lisp:cons "severityCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vulnerability-id-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vulnerability-id-list ()
   '(trivial-types:proper-list vulnerability-id))
 (common-lisp:defun |make-vulnerability-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vulnerable-package common-lisp:nil
                       ((remediation :initarg :|remediation| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-remediation :initform
                         common-lisp:nil)
                        (fixed-in-version :initarg :|fixedInVersion| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-fixed-in-version
                         :initform common-lisp:nil)
                        (file-path :initarg :|filePath| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-file-path :initform
                         common-lisp:nil)
                        (package-manager :initarg :|packageManager| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-package-manager
                         :initform common-lisp:nil)
                        (arch :initarg :|arch| :type
                         (common-lisp:or package-architecture common-lisp:null)
                         :accessor %vulnerable-package-arch :initform
                         common-lisp:nil)
                        (release :initarg :|release| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-release :initform
                         common-lisp:nil)
                        (epoch :initarg :|epoch| :type
                         (common-lisp:or package-epoch common-lisp:null)
                         :accessor %vulnerable-package-epoch :initform
                         common-lisp:nil)
                        (source-layer-hash :initarg :|sourceLayerHash| :type
                         (common-lisp:or source-layer-hash common-lisp:null)
                         :accessor %vulnerable-package-source-layer-hash
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerable-package-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vulnerable-package 'make-vulnerable-package))
 (common-lisp:defun make-vulnerable-package
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remediation fixed-in-version file-path
                     package-manager arch release epoch source-layer-hash
                     version name)
   (common-lisp:apply #'common-lisp:make-instance 'vulnerable-package
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerable-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "sourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "packageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-in-version))
      (common-lisp:list
       (common-lisp:cons "fixedInVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerable-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vulnerable-package-list ()
   '(trivial-types:proper-list vulnerable-package))
 (common-lisp:defun |make-vulnerable-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerable-package))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-build-version-arn () 'common-lisp:string)
(common-lisp:deftype workflow-execution-id () 'common-lisp:string)
(common-lisp:deftype workflow-execution-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-execution-metadata common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %workflow-execution-metadata-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %workflow-execution-metadata-start-time :initform
                         common-lisp:nil)
                        (total-steps-skipped :initarg :|totalStepsSkipped|
                         :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-total-steps-skipped
                         :initform common-lisp:nil)
                        (total-steps-failed :initarg :|totalStepsFailed| :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-total-steps-failed
                         :initform common-lisp:nil)
                        (total-steps-succeeded :initarg :|totalStepsSucceeded|
                         :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-total-steps-succeeded
                         :initform common-lisp:nil)
                        (total-step-count :initarg :|totalStepCount| :type
                         (common-lisp:or workflow-step-count common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-total-step-count
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or workflow-execution-message
                                         common-lisp:null)
                         :accessor %workflow-execution-metadata-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-execution-status
                                         common-lisp:null)
                         :accessor %workflow-execution-metadata-status
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or workflow-type common-lisp:null)
                         :accessor %workflow-execution-metadata-type :initform
                         common-lisp:nil)
                        (workflow-execution-id :initarg :|workflowExecutionId|
                         :type
                         (common-lisp:or workflow-execution-id
                                         common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-workflow-execution-id
                         :initform common-lisp:nil)
                        (workflow-build-version-arn :initarg
                         :|workflowBuildVersionArn| :type
                         (common-lisp:or workflow-build-version-arn
                                         common-lisp:null)
                         :accessor
                         %workflow-execution-metadata-workflow-build-version-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-execution-metadata
                    'make-workflow-execution-metadata))
 (common-lisp:defun make-workflow-execution-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time total-steps-skipped
                     total-steps-failed total-steps-succeeded total-step-count
                     message status type workflow-execution-id
                     workflow-build-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-execution-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-build-version-arn))
      (common-lisp:list
       (common-lisp:cons "workflowBuildVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-execution-id))
      (common-lisp:list
       (common-lisp:cons "workflowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-step-count))
      (common-lisp:list
       (common-lisp:cons "totalStepCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-steps-succeeded))
      (common-lisp:list
       (common-lisp:cons "totalStepsSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-failed))
      (common-lisp:list
       (common-lisp:cons "totalStepsFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps-skipped))
      (common-lisp:list
       (common-lisp:cons "totalStepsSkipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-execution-metadata))
   common-lisp:nil))
(common-lisp:deftype workflow-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-executions-list ()
   '(trivial-types:proper-list workflow-execution-metadata))
 (common-lisp:defun |make-workflow-executions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workflow-execution-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-step-action () 'common-lisp:string)
(common-lisp:deftype workflow-step-count () 'common-lisp:integer)
(common-lisp:deftype workflow-step-description () 'common-lisp:string)
(common-lisp:deftype workflow-step-execution-id () 'common-lisp:string)
(common-lisp:deftype workflow-step-execution-rollback-status ()
  'common-lisp:string)
(common-lisp:deftype workflow-step-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-step-executions-list ()
   '(trivial-types:proper-list workflow-step-metadata))
 (common-lisp:defun |make-workflow-step-executions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-step-inputs () 'common-lisp:string)
(common-lisp:deftype workflow-step-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-step-metadata common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %workflow-step-metadata-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %workflow-step-metadata-start-time :initform
                         common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or workflow-step-outputs
                                         common-lisp:null)
                         :accessor %workflow-step-metadata-outputs :initform
                         common-lisp:nil)
                        (inputs :initarg :|inputs| :type
                         (common-lisp:or workflow-step-inputs common-lisp:null)
                         :accessor %workflow-step-metadata-inputs :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or workflow-step-message
                                         common-lisp:null)
                         :accessor %workflow-step-metadata-message :initform
                         common-lisp:nil)
                        (rollback-status :initarg :|rollbackStatus| :type
                         (common-lisp:or
                          workflow-step-execution-rollback-status
                          common-lisp:null)
                         :accessor %workflow-step-metadata-rollback-status
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or workflow-step-execution-status
                                         common-lisp:null)
                         :accessor %workflow-step-metadata-status :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or workflow-step-action common-lisp:null)
                         :accessor %workflow-step-metadata-action :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or workflow-step-description
                                         common-lisp:null)
                         :accessor %workflow-step-metadata-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %workflow-step-metadata-name :initform
                         common-lisp:nil)
                        (step-execution-id :initarg :|stepExecutionId| :type
                         (common-lisp:or workflow-step-execution-id
                                         common-lisp:null)
                         :accessor %workflow-step-metadata-step-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-metadata 'make-workflow-step-metadata))
 (common-lisp:defun make-workflow-step-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time outputs inputs
                     message rollback-status status action description name
                     step-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-execution-id))
      (common-lisp:list
       (common-lisp:cons "stepExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-status))
      (common-lisp:list
       (common-lisp:cons "rollbackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-metadata))
   common-lisp:nil))
(common-lisp:deftype workflow-step-name () 'common-lisp:string)
(common-lisp:deftype workflow-step-outputs () 'common-lisp:string)
(common-lisp:deftype workflow-step-timeout-seconds-integer ()
  'common-lisp:integer)
(common-lisp:deftype workflow-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-image-creation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable image-build-version-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-image-creation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CancelImageCreation"
                                                        "CancelImageCreation"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-image-creation))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     change-description platform supported-os-versions data uri
                     kms-key-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description change-description
     platform supported-os-versions data uri kms-key-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateComponent"
                                                        "CreateComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-type name description
                     semantic-version components instance-configuration
                     dockerfile-template-data dockerfile-template-uri
                     platform-override image-os-version-override parent-image
                     tags working-directory target-repository kms-key-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable container-type name description semantic-version
     components instance-configuration dockerfile-template-data
     dockerfile-template-uri platform-override image-os-version-override
     parent-image tags working-directory target-repository kms-key-id
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateContainerRecipe"
                                                        "CreateContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-container-recipe))
(common-lisp:progn
 (common-lisp:defun create-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description distributions tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description distributions tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateDistributionConfiguration"
                                                        "CreateDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun create-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn container-recipe-arn
                     distribution-configuration-arn
                     infrastructure-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled tags client-token
                     image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable image-recipe-arn container-recipe-arn
     distribution-configuration-arn infrastructure-configuration-arn
     image-tests-configuration enhanced-image-metadata-enabled tags
     client-token image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateImage"
                                                        "CreateImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image))
(common-lisp:progn
 (common-lisp:defun create-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description image-recipe-arn
                     container-recipe-arn infrastructure-configuration-arn
                     distribution-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled schedule status tags
                     client-token image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name description image-recipe-arn
     container-recipe-arn infrastructure-configuration-arn
     distribution-configuration-arn image-tests-configuration
     enhanced-image-metadata-enabled schedule status tags client-token
     image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateImagePipeline"
                                                        "CreateImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-pipeline))
(common-lisp:progn
 (common-lisp:defun create-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description semantic-version
                     components parent-image block-device-mappings tags
                     working-directory additional-instance-configuration
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description semantic-version components
     parent-image block-device-mappings tags working-directory
     additional-instance-configuration client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateImageRecipe"
                                                        "CreateImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-recipe))
(common-lisp:progn
 (common-lisp:defun create-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description instance-types
                     instance-profile-name security-group-ids subnet-id logging
                     key-pair terminate-instance-on-failure sns-topic-arn
                     resource-tags instance-metadata-options tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description instance-types
     instance-profile-name security-group-ids subnet-id logging key-pair
     terminate-instance-on-failure sns-topic-arn resource-tags
     instance-metadata-options tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/CreateInfrastructureConfiguration"
                                                        "CreateInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable component-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteComponent"
                                                        "DeleteComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteContainerRecipe"
                                                        "DeleteContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-container-recipe))
(common-lisp:progn
 (common-lisp:defun delete-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable distribution-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteDistributionConfiguration"
                                                        "DeleteDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteImage"
                                                        "DeleteImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image))
(common-lisp:progn
 (common-lisp:defun delete-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:declare (common-lisp:ignorable image-pipeline-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteImagePipeline"
                                                        "DeleteImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteImageRecipe"
                                                        "DeleteImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-recipe))
(common-lisp:progn
 (common-lisp:defun delete-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/DeleteInfrastructureConfiguration"
                                                        "DeleteInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable component-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetComponent"
                                                        "GetComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-component-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-arn)
   (common-lisp:declare (common-lisp:ignorable component-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetComponentPolicy"
                                                        "GetComponentPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component-policy))
(common-lisp:progn
 (common-lisp:defun get-container-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetContainerRecipe"
                                                        "GetContainerRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-recipe))
(common-lisp:progn
 (common-lisp:defun get-container-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-recipe-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetContainerRecipePolicy"
                                                        "GetContainerRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-recipe-policy))
(common-lisp:progn
 (common-lisp:defun get-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable distribution-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetDistributionConfiguration"
                                                        "GetDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun get-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn)
   (common-lisp:declare (common-lisp:ignorable image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetImage" "GetImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image))
(common-lisp:progn
 (common-lisp:defun get-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn)
   (common-lisp:declare (common-lisp:ignorable image-pipeline-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetImagePipeline"
                                                        "GetImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-pipeline))
(common-lisp:progn
 (common-lisp:defun get-image-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-arn)
   (common-lisp:declare (common-lisp:ignorable image-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetImagePolicy"
                                                        "GetImagePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-policy))
(common-lisp:progn
 (common-lisp:defun get-image-recipe
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-recipe-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetImageRecipe"
                                                        "GetImageRecipe"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-recipe))
(common-lisp:progn
 (common-lisp:defun get-image-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-recipe-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetImageRecipePolicy"
                                                        "GetImageRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-recipe-policy))
(common-lisp:progn
 (common-lisp:defun get-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetInfrastructureConfiguration"
                                                        "GetInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-infrastructure-configuration))
(common-lisp:progn
 (common-lisp:defun get-workflow-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-execution-id)
   (common-lisp:declare (common-lisp:ignorable workflow-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetWorkflowExecution"
                                                        "GetWorkflowExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-execution))
(common-lisp:progn
 (common-lisp:defun get-workflow-step-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key step-execution-id)
   (common-lisp:declare (common-lisp:ignorable step-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-workflow-step-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/GetWorkflowStepExecution"
                                                        "GetWorkflowStepExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-step-execution))
(common-lisp:progn
 (common-lisp:defun import-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     change-description type format platform data uri
                     kms-key-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description change-description
     type format platform data uri kms-key-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/ImportComponent"
                                                        "ImportComponent"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-component))
(common-lisp:progn
 (common-lisp:defun import-vm-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name semantic-version description
                     platform os-version vm-import-task-id tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable name semantic-version description platform
     os-version vm-import-task-id tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-vm-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/ImportVmImage"
                                                        "ImportVmImage"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-vm-image))
(common-lisp:progn
 (common-lisp:defun list-component-build-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-version-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable component-version-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-component-build-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListComponentBuildVersions"
                                                        "ListComponentBuildVersions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-component-build-versions))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters by-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters by-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListComponents"
                                                        "ListComponents"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-container-recipes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-container-recipes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListContainerRecipes"
                                                        "ListContainerRecipes"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-container-recipes))
(common-lisp:progn
 (common-lisp:defun list-distribution-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-distribution-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListDistributionConfigurations"
                                                        "ListDistributionConfigurations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-distribution-configurations))
(common-lisp:progn
 (common-lisp:defun list-image-build-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-version-arn filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-version-arn filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-build-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImageBuildVersions"
                                                        "ListImageBuildVersions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-build-versions))
(common-lisp:progn
 (common-lisp:defun list-image-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-build-version-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-build-version-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImagePackages"
                                                        "ListImagePackages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-packages))
(common-lisp:progn
 (common-lisp:defun list-image-pipeline-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-pipeline-images-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImagePipelineImages"
                                                        "ListImagePipelineImages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-pipeline-images))
(common-lisp:progn
 (common-lisp:defun list-image-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImagePipelines"
                                                        "ListImagePipelines"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-pipelines))
(common-lisp:progn
 (common-lisp:defun list-image-recipes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable owner filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-recipes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImageRecipes"
                                                        "ListImageRecipes"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-recipes))
(common-lisp:progn
 (common-lisp:defun list-image-scan-finding-aggregations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token)
   (common-lisp:declare (common-lisp:ignorable filter next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-image-scan-finding-aggregations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImageScanFindingAggregations"
                                                        "ListImageScanFindingAggregations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-scan-finding-aggregations))
(common-lisp:progn
 (common-lisp:defun list-image-scan-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-scan-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImageScanFindings"
                                                        "ListImageScanFindings"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-scan-findings))
(common-lisp:progn
 (common-lisp:defun list-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner filters by-name max-results
                     next-token include-deprecated)
   (common-lisp:declare
    (common-lisp:ignorable owner filters by-name max-results next-token
     include-deprecated))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListImages"
                                                        "ListImages"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-images))
(common-lisp:progn
 (common-lisp:defun list-infrastructure-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-infrastructure-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListInfrastructureConfigurations"
                                                        "ListInfrastructureConfigurations"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-infrastructure-configurations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workflow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     image-build-version-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token image-build-version-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflow-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListWorkflowExecutions"
                                                        "ListWorkflowExecutions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-executions))
(common-lisp:progn
 (common-lisp:defun list-workflow-step-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     workflow-execution-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-workflow-step-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ListWorkflowStepExecutions"
                                                        "ListWorkflowStepExecutions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-step-executions))
(common-lisp:progn
 (common-lisp:defun put-component-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-arn policy)
   (common-lisp:declare (common-lisp:ignorable component-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-component-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/PutComponentPolicy"
                                                        "PutComponentPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-component-policy))
(common-lisp:progn
 (common-lisp:defun put-container-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-recipe-arn policy)
   (common-lisp:declare (common-lisp:ignorable container-recipe-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-container-recipe-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/PutContainerRecipePolicy"
                                                        "PutContainerRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-container-recipe-policy))
(common-lisp:progn
 (common-lisp:defun put-image-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-arn policy)
   (common-lisp:declare (common-lisp:ignorable image-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/PutImagePolicy"
                                                        "PutImagePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-image-policy))
(common-lisp:progn
 (common-lisp:defun put-image-recipe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-recipe-arn policy)
   (common-lisp:declare (common-lisp:ignorable image-recipe-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-image-recipe-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/PutImageRecipePolicy"
                                                        "PutImageRecipePolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-image-recipe-policy))
(common-lisp:progn
 (common-lisp:defun start-image-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-image-pipeline-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/StartImagePipelineExecution"
                                                        "StartImagePipelineExecution"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-image-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-distribution-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-configuration-arn
                     description distributions client-token)
   (common-lisp:declare
    (common-lisp:ignorable distribution-configuration-arn description
     distributions client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-distribution-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/UpdateDistributionConfiguration"
                                                        "UpdateDistributionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution-configuration))
(common-lisp:progn
 (common-lisp:defun update-image-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-pipeline-arn description
                     image-recipe-arn container-recipe-arn
                     infrastructure-configuration-arn
                     distribution-configuration-arn image-tests-configuration
                     enhanced-image-metadata-enabled schedule status
                     client-token image-scanning-configuration)
   (common-lisp:declare
    (common-lisp:ignorable image-pipeline-arn description image-recipe-arn
     container-recipe-arn infrastructure-configuration-arn
     distribution-configuration-arn image-tests-configuration
     enhanced-image-metadata-enabled schedule status client-token
     image-scanning-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-image-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/UpdateImagePipeline"
                                                        "UpdateImagePipeline"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image-pipeline))
(common-lisp:progn
 (common-lisp:defun update-infrastructure-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key infrastructure-configuration-arn
                     description instance-types instance-profile-name
                     security-group-ids subnet-id logging key-pair
                     terminate-instance-on-failure sns-topic-arn client-token
                     resource-tags instance-metadata-options)
   (common-lisp:declare
    (common-lisp:ignorable infrastructure-configuration-arn description
     instance-types instance-profile-name security-group-ids subnet-id logging
     key-pair terminate-instance-on-failure sns-topic-arn client-token
     resource-tags instance-metadata-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-infrastructure-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'imagebuilder-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/UpdateInfrastructureConfiguration"
                                                        "UpdateInfrastructureConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-infrastructure-configuration))
