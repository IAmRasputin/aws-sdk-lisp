;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/docdb-elastic/api
  (:use)
  (:nicknames #:aws/docdb-elastic)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/docdb-elastic/api)
(common-lisp:progn
 (common-lisp:defclass docdb-elastic-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "docdb-elastic" :protocol
                        :rest-json))
 (common-lisp:export 'docdb-elastic-request))
(common-lisp:progn
 (common-lisp:define-condition docdb-elastic-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'docdb-elastic-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype auth () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((vpc-security-group-ids :initarg :|vpcSecurityGroupIds|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-vpc-security-group-ids :initform
                         (common-lisp:error
                          ":vpcsecuritygroupids is required"))
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-subnet-ids :initform
                         (common-lisp:error ":subnetids is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %cluster-status :initform
                         (common-lisp:error ":status is required"))
                        (shard-count :initarg :|shardCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %cluster-shard-count :initform
                         (common-lisp:error ":shardcount is required"))
                        (shard-capacity :initarg :|shardCapacity| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %cluster-shard-capacity :initform
                         (common-lisp:error ":shardcapacity is required"))
                        (preferred-maintenance-window :initarg
                         :|preferredMaintenanceWindow| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-preferred-maintenance-window :initform
                         (common-lisp:error
                          ":preferredmaintenancewindow is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-kms-key-id :initform
                         (common-lisp:error ":kmskeyid is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-name :initform
                         (common-lisp:error ":clustername is required"))
                        (cluster-endpoint :initarg :|clusterEndpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-endpoint :initform
                         (common-lisp:error ":clusterendpoint is required"))
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))
                        (auth-type :initarg :|authType| :type
                         (common-lisp:or auth common-lisp:null) :accessor
                         %cluster-auth-type :initform
                         (common-lisp:error ":authtype is required"))
                        (admin-user-name :initarg :|adminUserName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-admin-user-name :initform
                         (common-lisp:error ":adminusername is required"))))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-ids subnet-ids status
                     shard-count shard-capacity preferred-maintenance-window
                     kms-key-id create-time cluster-name cluster-endpoint
                     cluster-arn auth-type admin-user-name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-name))
      (common-lisp:list
       (common-lisp:cons "adminUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "authType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-endpoint))
      (common-lisp:list
       (common-lisp:cons "clusterEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-capacity))
      (common-lisp:list
       (common-lisp:cons "shardCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "shardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-in-list common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %cluster-in-list-status :initform
                         (common-lisp:error ":status is required"))
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-in-list-cluster-name :initform
                         (common-lisp:error ":clustername is required"))
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-in-list-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))))
 (common-lisp:export (common-lisp:list 'cluster-in-list 'make-cluster-in-list))
 (common-lisp:defun make-cluster-in-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status cluster-name cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-in-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-in-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-in-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-in-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-list ()
   '(trivial-types:proper-list cluster-in-list))
 (common-lisp:defun |make-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-in-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cluster-snapshot common-lisp:nil
                       ((vpc-security-group-ids :initarg :|vpcSecurityGroupIds|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-snapshot-vpc-security-group-ids
                         :initform
                         (common-lisp:error
                          ":vpcsecuritygroupids is required"))
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-snapshot-subnet-ids :initform
                         (common-lisp:error ":subnetids is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %cluster-snapshot-status :initform
                         (common-lisp:error ":status is required"))
                        (snapshot-name :initarg :|snapshotName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-snapshot-name :initform
                         (common-lisp:error ":snapshotname is required"))
                        (snapshot-creation-time :initarg
                         :|snapshotCreationTime| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-snapshot-creation-time :initform
                         (common-lisp:error
                          ":snapshotcreationtime is required"))
                        (snapshot-arn :initarg :|snapshotArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-snapshot-arn :initform
                         (common-lisp:error ":snapshotarn is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-kms-key-id :initform
                         (common-lisp:error ":kmskeyid is required"))
                        (cluster-creation-time :initarg :|clusterCreationTime|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %cluster-snapshot-cluster-creation-time
                         :initform
                         (common-lisp:error
                          ":clustercreationtime is required"))
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))
                        (admin-user-name :initarg :|adminUserName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-admin-user-name :initform
                         (common-lisp:error ":adminusername is required"))))
 (common-lisp:export
  (common-lisp:list 'cluster-snapshot 'make-cluster-snapshot))
 (common-lisp:defun make-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-ids subnet-ids status
                     snapshot-name snapshot-creation-time snapshot-arn
                     kms-key-id cluster-creation-time cluster-arn
                     admin-user-name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-name))
      (common-lisp:list
       (common-lisp:cons "adminUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-creation-time))
      (common-lisp:list
       (common-lisp:cons "clusterCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-creation-time))
      (common-lisp:list
       (common-lisp:cons "snapshotCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-snapshot-in-list common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %cluster-snapshot-in-list-status :initform
                         (common-lisp:error ":status is required"))
                        (snapshot-name :initarg :|snapshotName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-in-list-snapshot-name :initform
                         (common-lisp:error ":snapshotname is required"))
                        (snapshot-creation-time :initarg
                         :|snapshotCreationTime| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-in-list-snapshot-creation-time
                         :initform
                         (common-lisp:error
                          ":snapshotcreationtime is required"))
                        (snapshot-arn :initarg :|snapshotArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-in-list-snapshot-arn :initform
                         (common-lisp:error ":snapshotarn is required"))
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-snapshot-in-list-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))))
 (common-lisp:export
  (common-lisp:list 'cluster-snapshot-in-list 'make-cluster-snapshot-in-list))
 (common-lisp:defun make-cluster-snapshot-in-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status snapshot-name
                     snapshot-creation-time snapshot-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-snapshot-in-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-in-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-in-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-creation-time))
      (common-lisp:list
       (common-lisp:cons "snapshotCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-snapshot-in-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cluster-snapshot-list ()
   '(trivial-types:proper-list cluster-snapshot-in-list))
 (common-lisp:defun |make-cluster-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cluster-snapshot-in-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-cluster-input common-lisp:nil
                       ((vpc-security-group-ids :initarg :|vpcSecurityGroupIds|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %create-cluster-input-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-cluster-input-tags :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-cluster-input-subnet-ids :initform
                         common-lisp:nil)
                        (shard-count :initarg :|shardCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-cluster-input-shard-count :initform
                         (common-lisp:error ":shardcount is required"))
                        (shard-capacity :initarg :|shardCapacity| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-cluster-input-shard-capacity :initform
                         (common-lisp:error ":shardcapacity is required"))
                        (preferred-maintenance-window :initarg
                         :|preferredMaintenanceWindow| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-input-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-input-kms-key-id :initform
                         common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-input-cluster-name :initform
                         (common-lisp:error ":clustername is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-input-client-token :initform
                         common-lisp:nil)
                        (auth-type :initarg :|authType| :type
                         (common-lisp:or auth common-lisp:null) :accessor
                         %create-cluster-input-auth-type :initform
                         (common-lisp:error ":authtype is required"))
                        (admin-user-password :initarg :|adminUserPassword|
                         :type (common-lisp:or password common-lisp:null)
                         :accessor %create-cluster-input-admin-user-password
                         :initform
                         (common-lisp:error ":adminuserpassword is required"))
                        (admin-user-name :initarg :|adminUserName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-input-admin-user-name :initform
                         (common-lisp:error ":adminusername is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-input 'make-create-cluster-input))
 (common-lisp:defun make-create-cluster-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-ids tags subnet-ids
                     shard-count shard-capacity preferred-maintenance-window
                     kms-key-id cluster-name client-token auth-type
                     admin-user-password admin-user-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-cluster-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-name))
      (common-lisp:list
       (common-lisp:cons "adminUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-password))
      (common-lisp:list
       (common-lisp:cons "adminUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "authType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-capacity))
      (common-lisp:list
       (common-lisp:cons "shardCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "shardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-output common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %create-cluster-output-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-output 'make-create-cluster-output))
 (common-lisp:defun make-create-cluster-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-snapshot-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-cluster-snapshot-input-tags :initform
                         common-lisp:nil)
                        (snapshot-name :initarg :|snapshotName| :type
                         (common-lisp:or
                          create-cluster-snapshot-input-snapshot-name-string
                          common-lisp:null)
                         :accessor %create-cluster-snapshot-input-snapshot-name
                         :initform
                         (common-lisp:error ":snapshotname is required"))
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-snapshot-input-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-input
                    'make-create-cluster-snapshot-input))
 (common-lisp:defun make-create-cluster-snapshot-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags snapshot-name cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-snapshot-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-input))
   common-lisp:nil))
(common-lisp:deftype create-cluster-snapshot-input-snapshot-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-cluster-snapshot-output common-lisp:nil
                       ((snapshot :initarg :|snapshot| :type
                         (common-lisp:or cluster-snapshot common-lisp:null)
                         :accessor %create-cluster-snapshot-output-snapshot
                         :initform
                         (common-lisp:error ":snapshot is required"))))
 (common-lisp:export
  (common-lisp:list 'create-cluster-snapshot-output
                    'make-create-cluster-snapshot-output))
 (common-lisp:defun make-create-cluster-snapshot-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cluster-snapshot-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-snapshot-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-input common-lisp:nil
                       ((cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-input-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-input 'make-delete-cluster-input))
 (common-lisp:defun make-delete-cluster-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-output common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %delete-cluster-output-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-output 'make-delete-cluster-output))
 (common-lisp:defun make-delete-cluster-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-snapshot-input common-lisp:nil
                       ((snapshot-arn :initarg :|snapshotArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-snapshot-input-snapshot-arn :initform
                         (common-lisp:error ":snapshotarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-input
                    'make-delete-cluster-snapshot-input))
 (common-lisp:defun make-delete-cluster-snapshot-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-snapshot-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-snapshot-output common-lisp:nil
                       ((snapshot :initarg :|snapshot| :type
                         (common-lisp:or cluster-snapshot common-lisp:null)
                         :accessor %delete-cluster-snapshot-output-snapshot
                         :initform
                         (common-lisp:error ":snapshot is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-snapshot-output
                    'make-delete-cluster-snapshot-output))
 (common-lisp:defun make-delete-cluster-snapshot-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cluster-snapshot-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-snapshot-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-input common-lisp:nil
                       ((cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-cluster-input-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cluster-input 'make-get-cluster-input))
 (common-lisp:defun make-get-cluster-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-output common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %get-cluster-output-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cluster-output 'make-get-cluster-output))
 (common-lisp:defun make-get-cluster-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-snapshot-input common-lisp:nil
                       ((snapshot-arn :initarg :|snapshotArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-cluster-snapshot-input-snapshot-arn :initform
                         (common-lisp:error ":snapshotarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cluster-snapshot-input
                    'make-get-cluster-snapshot-input))
 (common-lisp:defun make-get-cluster-snapshot-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-snapshot-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cluster-snapshot-output common-lisp:nil
                       ((snapshot :initarg :|snapshot| :type
                         (common-lisp:or cluster-snapshot common-lisp:null)
                         :accessor %get-cluster-snapshot-output-snapshot
                         :initform
                         (common-lisp:error ":snapshot is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cluster-snapshot-output
                    'make-get-cluster-snapshot-output))
 (common-lisp:defun make-get-cluster-snapshot-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'get-cluster-snapshot-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cluster-snapshot-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-cluster-snapshots-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-cluster-snapshots-input-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-cluster-snapshots-input-max-results-integer
                          common-lisp:null)
                         :accessor %list-cluster-snapshots-input-max-results
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-cluster-snapshots-input-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-snapshots-input
                    'make-list-cluster-snapshots-input))
 (common-lisp:defun make-list-cluster-snapshots-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-cluster-snapshots-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-input))
   common-lisp:nil))
(common-lisp:deftype list-cluster-snapshots-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-cluster-snapshots-output common-lisp:nil
                       ((snapshots :initarg :|snapshots| :type
                         (common-lisp:or cluster-snapshot-list
                                         common-lisp:null)
                         :accessor %list-cluster-snapshots-output-snapshots
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-cluster-snapshots-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-cluster-snapshots-output
                    'make-list-cluster-snapshots-output))
 (common-lisp:defun make-list-cluster-snapshots-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshots next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cluster-snapshots-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cluster-snapshots-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-clusters-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-clusters-input-max-results-integer
                          common-lisp:null)
                         :accessor %list-clusters-input-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-input 'make-list-clusters-input))
 (common-lisp:defun make-list-clusters-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-input))
   common-lisp:nil))
(common-lisp:deftype list-clusters-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-clusters-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-clusters-output-next-token :initform
                         common-lisp:nil)
                        (clusters :initarg :|clusters| :type
                         (common-lisp:or cluster-list common-lisp:null)
                         :accessor %list-clusters-output-clusters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-output 'make-list-clusters-output))
 (common-lisp:defun make-list-clusters-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token clusters)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-clusters-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-clusters-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-clusters-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass restore-cluster-from-snapshot-input common-lisp:nil
                       ((vpc-security-group-ids :initarg :|vpcSecurityGroupIds|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %restore-cluster-from-snapshot-input-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %restore-cluster-from-snapshot-input-tags :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %restore-cluster-from-snapshot-input-subnet-ids
                         :initform common-lisp:nil)
                        (snapshot-arn :initarg :|snapshotArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-cluster-from-snapshot-input-snapshot-arn
                         :initform
                         (common-lisp:error ":snapshotarn is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-cluster-from-snapshot-input-kms-key-id
                         :initform common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-cluster-from-snapshot-input-cluster-name
                         :initform
                         (common-lisp:error ":clustername is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-cluster-from-snapshot-input
                    'make-restore-cluster-from-snapshot-input))
 (common-lisp:defun make-restore-cluster-from-snapshot-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-ids tags subnet-ids
                     snapshot-arn kms-key-id cluster-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-cluster-from-snapshot-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-cluster-from-snapshot-output common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %restore-cluster-from-snapshot-output-cluster
                         :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-cluster-from-snapshot-output
                    'make-restore-cluster-from-snapshot-output))
 (common-lisp:defun make-restore-cluster-from-snapshot-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-cluster-from-snapshot-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-cluster-from-snapshot-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (docdb-elastic-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-input common-lisp:nil
                       ((vpc-security-group-ids :initarg :|vpcSecurityGroupIds|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %update-cluster-input-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-cluster-input-subnet-ids :initform
                         common-lisp:nil)
                        (shard-count :initarg :|shardCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-cluster-input-shard-count :initform
                         common-lisp:nil)
                        (shard-capacity :initarg :|shardCapacity| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-cluster-input-shard-capacity :initform
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :|preferredMaintenanceWindow| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-input-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-input-cluster-arn :initform
                         (common-lisp:error ":clusterarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-input-client-token :initform
                         common-lisp:nil)
                        (auth-type :initarg :|authType| :type
                         (common-lisp:or auth common-lisp:null) :accessor
                         %update-cluster-input-auth-type :initform
                         common-lisp:nil)
                        (admin-user-password :initarg :|adminUserPassword|
                         :type (common-lisp:or password common-lisp:null)
                         :accessor %update-cluster-input-admin-user-password
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-input 'make-update-cluster-input))
 (common-lisp:defun make-update-cluster-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-ids subnet-ids
                     shard-count shard-capacity preferred-maintenance-window
                     cluster-arn client-token auth-type admin-user-password)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-cluster-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-cluster-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-password))
      (common-lisp:list
       (common-lisp:cons "adminUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "authType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-capacity))
      (common-lisp:list
       (common-lisp:cons "shardCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "shardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-cluster-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-output common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %update-cluster-output-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-output 'make-update-cluster-output))
 (common-lisp:defun make-update-cluster-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (docdb-elastic-error)
     ((field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-user-name admin-user-password
                     auth-type client-token cluster-name kms-key-id
                     preferred-maintenance-window shard-capacity shard-count
                     subnet-ids tags vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable admin-user-name admin-user-password auth-type
     client-token cluster-name kms-key-id preferred-maintenance-window
     shard-capacity shard-count subnet-ids tags vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cluster"
                                                        "CreateCluster"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn snapshot-name tags)
   (common-lisp:declare (common-lisp:ignorable cluster-arn snapshot-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-snapshot-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cluster-snapshot"
                                                        "CreateClusterSnapshot"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "DeleteCluster"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-arn)
   (common-lisp:declare (common-lisp:ignorable snapshot-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-snapshot-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-snapshot/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-arn))))
                                                        "DeleteClusterSnapshot"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun get-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn)
   (common-lisp:declare (common-lisp:ignorable cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "GetCluster"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cluster))
(common-lisp:progn
 (common-lisp:defun get-cluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-arn)
   (common-lisp:declare (common-lisp:ignorable snapshot-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cluster-snapshot-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-snapshot/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-arn))))
                                                        "GetClusterSnapshot"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cluster-snapshot))
(common-lisp:progn
 (common-lisp:defun list-cluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable cluster-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cluster-snapshots-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/cluster-snapshots"
                                                        "ListClusterSnapshots"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cluster-snapshots))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/clusters"
                                                        "ListClusters"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun restore-cluster-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name kms-key-id snapshot-arn
                     subnet-ids tags vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name kms-key-id snapshot-arn subnet-ids tags
     vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-cluster-from-snapshot-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster-snapshot/~A/restore"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-arn))))
                                                        "RestoreClusterFromSnapshot"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-cluster-from-snapshot))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-user-password auth-type
                     client-token cluster-arn preferred-maintenance-window
                     shard-capacity shard-count subnet-ids
                     vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable admin-user-password auth-type client-token
     cluster-arn preferred-maintenance-window shard-capacity shard-count
     subnet-ids vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-elastic-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/cluster/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-arn))))
                                                        "UpdateCluster"
                                                        "2022-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
