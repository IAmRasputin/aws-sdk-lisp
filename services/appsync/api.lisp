;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appsync/api
  (:use)
  (:nicknames #:aws/appsync)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appsync/api)
(common-lisp:progn
 (common-lisp:defclass appsync-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "appsync" :protocol
                        :rest-json))
 (common-lisp:export 'appsync-request))
(common-lisp:progn
 (common-lisp:define-condition appsync-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appsync-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ApiKeyLimitExceededException" . api-key-limit-exceeded-exception)
    ("ApiKeyValidityOutOfBoundsException"
     . api-key-validity-out-of-bounds-exception)
    ("ApiLimitExceededException" . api-limit-exceeded-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("GraphQLSchemaException" . graph-qlschema-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass additional-authentication-provider common-lisp:nil
                       ((lambda-authorizer-config :initarg
                         :|lambdaAuthorizerConfig| :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         %additional-authentication-provider-lambda-authorizer-config
                         :initform common-lisp:nil)
                        (user-pool-config :initarg :|userPoolConfig| :type
                         (common-lisp:or cognito-user-pool-config
                                         common-lisp:null)
                         :accessor
                         %additional-authentication-provider-user-pool-config
                         :initform common-lisp:nil)
                        (open-idconnect-config :initarg :|openIDConnectConfig|
                         :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         %additional-authentication-provider-open-idconnect-config
                         :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         %additional-authentication-provider-authentication-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'additional-authentication-provider
                    'make-additional-authentication-provider))
 (common-lisp:defun make-additional-authentication-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-authorizer-config user-pool-config
                     open-idconnect-config authentication-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'additional-authentication-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-authentication-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-authentication-providers ()
   '(trivial-types:proper-list additional-authentication-provider))
 (common-lisp:defun |make-additional-authentication-providers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-authentication-provider))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass api-association common-lisp:nil
                       ((deployment-detail :initarg :|deploymentDetail| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %api-association-deployment-detail :initform
                         common-lisp:nil)
                        (association-status :initarg :|associationStatus| :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor %api-association-association-status
                         :initform common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %api-association-api-id :initform common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %api-association-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'api-association 'make-api-association))
 (common-lisp:defun make-api-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-detail association-status
                     api-id domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'api-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "associationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-detail))
      (common-lisp:list
       (common-lisp:cons "deploymentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass api-cache common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or api-cache-status common-lisp:null)
                         :accessor %api-cache-status :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor %api-cache-type :initform common-lisp:nil)
                        (at-rest-encryption-enabled :initarg
                         :|atRestEncryptionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %api-cache-at-rest-encryption-enabled :initform
                         common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :|transitEncryptionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %api-cache-transit-encryption-enabled :initform
                         common-lisp:nil)
                        (api-caching-behavior :initarg :|apiCachingBehavior|
                         :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor %api-cache-api-caching-behavior :initform
                         common-lisp:nil)
                        (ttl :initarg :|ttl| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %api-cache-ttl :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'api-cache 'make-api-cache))
 (common-lisp:defun make-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status type at-rest-encryption-enabled
                     transit-encryption-enabled api-caching-behavior ttl)
   (common-lisp:apply #'common-lisp:make-instance 'api-cache
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-cache))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-cache))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "atRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-cache))
   common-lisp:nil))
(common-lisp:deftype api-cache-status () 'common-lisp:string)
(common-lisp:deftype api-cache-type () 'common-lisp:string)
(common-lisp:deftype api-caching-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass api-key common-lisp:nil
                       ((deletes :initarg :|deletes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %api-key-deletes :initform common-lisp:nil)
                        (expires :initarg :|expires| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %api-key-expires :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %api-key-description :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %api-key-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'api-key 'make-api-key))
 (common-lisp:defun make-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletes expires description id)
   (common-lisp:apply #'common-lisp:make-instance 'api-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition api-key-limit-exceeded-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       api-key-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-key-limit-exceeded-exception
                    'api-key-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition api-key-validity-out-of-bounds-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       api-key-validity-out-of-bounds-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-key-validity-out-of-bounds-exception
                    'api-key-validity-out-of-bounds-exception-message)))
(common-lisp:progn
 (common-lisp:deftype api-keys () '(trivial-types:proper-list api-key))
 (common-lisp:defun |make-api-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list api-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition api-limit-exceeded-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       api-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'api-limit-exceeded-exception
                    'api-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass app-sync-runtime common-lisp:nil
                       ((runtime-version :initarg :|runtimeVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-sync-runtime-runtime-version :initform
                         (common-lisp:error ":runtimeversion is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or runtime-name common-lisp:null)
                         :accessor %app-sync-runtime-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'app-sync-runtime 'make-app-sync-runtime))
 (common-lisp:defun make-app-sync-runtime
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-version name)
   (common-lisp:apply #'common-lisp:make-instance 'app-sync-runtime
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-version))
      (common-lisp:list
       (common-lisp:cons "runtimeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-sync-runtime))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-api-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-api-request-api-id :initform
                         (common-lisp:error ":apiid is required"))
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %associate-api-request-domain-name :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-api-request 'make-associate-api-request))
 (common-lisp:defun make-associate-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'associate-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-api-response common-lisp:nil
                       ((api-association :initarg :|apiAssociation| :type
                         (common-lisp:or api-association common-lisp:null)
                         :accessor %associate-api-response-api-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-api-response 'make-associate-api-response))
 (common-lisp:defun make-associate-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-association)
   (common-lisp:apply #'common-lisp:make-instance 'associate-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-association))
      (common-lisp:list
       (common-lisp:cons "apiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-api-response))
   common-lisp:nil))
(common-lisp:deftype association-status () 'common-lisp:string)
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorization-config common-lisp:nil
                       ((aws-iam-config :initarg :|awsIamConfig| :type
                         (common-lisp:or aws-iam-config common-lisp:null)
                         :accessor %authorization-config-aws-iam-config
                         :initform common-lisp:nil)
                        (authorization-type :initarg :|authorizationType| :type
                         (common-lisp:or authorization-type common-lisp:null)
                         :accessor %authorization-config-authorization-type
                         :initform
                         (common-lisp:error
                          ":authorizationtype is required"))))
 (common-lisp:export
  (common-lisp:list 'authorization-config 'make-authorization-config))
 (common-lisp:defun make-authorization-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-iam-config authorization-type)
   (common-lisp:apply #'common-lisp:make-instance 'authorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "authorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-config))
      (common-lisp:list
       (common-lisp:cons "awsIamConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorization-config))
   common-lisp:nil))
(common-lisp:deftype authorization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-iam-config common-lisp:nil
                       ((signing-service-name :initarg :|signingServiceName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %aws-iam-config-signing-service-name
                         :initform common-lisp:nil)
                        (signing-region :initarg :|signingRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %aws-iam-config-signing-region :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-iam-config 'make-aws-iam-config))
 (common-lisp:defun make-aws-iam-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signing-service-name signing-region)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-region))
      (common-lisp:list
       (common-lisp:cons "signingRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signing-service-name))
      (common-lisp:list
       (common-lisp:cons "signingServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bad-request-detail common-lisp:nil
                       ((code-errors :initarg :|codeErrors| :type
                         (common-lisp:or code-errors common-lisp:null)
                         :accessor %bad-request-detail-code-errors :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bad-request-detail 'make-bad-request-detail))
 (common-lisp:defun make-bad-request-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-errors)
   (common-lisp:apply #'common-lisp:make-instance 'bad-request-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bad-request-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bad-request-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-errors))
      (common-lisp:list
       (common-lisp:cons "codeErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bad-request-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       bad-request-exception-reason)
      (detail :initarg :|detail| :initform common-lisp:nil :reader
       bad-request-exception-detail)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-reason
                    'bad-request-exception-detail)))
(common-lisp:deftype bad-request-reason () 'common-lisp:string)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass caching-config common-lisp:nil
                       ((caching-keys :initarg :|cachingKeys| :type
                         (common-lisp:or caching-keys common-lisp:null)
                         :accessor %caching-config-caching-keys :initform
                         common-lisp:nil)
                        (ttl :initarg :|ttl| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %caching-config-ttl :initform
                         (common-lisp:error ":ttl is required"))))
 (common-lisp:export (common-lisp:list 'caching-config 'make-caching-config))
 (common-lisp:defun make-caching-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key caching-keys ttl)
   (common-lisp:apply #'common-lisp:make-instance 'caching-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caching-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caching-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-keys))
      (common-lisp:list
       (common-lisp:cons "cachingKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caching-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype caching-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-caching-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-error common-lisp:nil
                       ((location :initarg :|location| :type
                         (common-lisp:or code-error-location common-lisp:null)
                         :accessor %code-error-location :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %code-error-value :initform common-lisp:nil)
                        (error-type :initarg :|errorType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %code-error-error-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'code-error 'make-code-error))
 (common-lisp:defun make-code-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location value error-type)
   (common-lisp:apply #'common-lisp:make-instance 'code-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-error))
   common-lisp:nil))
(common-lisp:deftype code-error-column () 'common-lisp:integer)
(common-lisp:deftype code-error-line () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass code-error-location common-lisp:nil
                       ((span :initarg :|span| :type
                         (common-lisp:or code-error-span common-lisp:null)
                         :accessor %code-error-location-span :initform
                         common-lisp:nil)
                        (column :initarg :|column| :type
                         (common-lisp:or code-error-column common-lisp:null)
                         :accessor %code-error-location-column :initform
                         common-lisp:nil)
                        (line :initarg :|line| :type
                         (common-lisp:or code-error-line common-lisp:null)
                         :accessor %code-error-location-line :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'code-error-location 'make-code-error-location))
 (common-lisp:defun make-code-error-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key span column line)
   (common-lisp:apply #'common-lisp:make-instance 'code-error-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-error-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-error-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-error-location))
   common-lisp:nil))
(common-lisp:deftype code-error-span () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype code-errors () '(trivial-types:proper-list code-error))
 (common-lisp:defun |make-code-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cognito-user-pool-config common-lisp:nil
                       ((app-id-client-regex :initarg :|appIdClientRegex| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cognito-user-pool-config-app-id-client-regex
                         :initform common-lisp:nil)
                        (aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cognito-user-pool-config-aws-region :initform
                         (common-lisp:error ":awsregion is required"))
                        (user-pool-id :initarg :|userPoolId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cognito-user-pool-config-user-pool-id :initform
                         (common-lisp:error ":userpoolid is required"))))
 (common-lisp:export
  (common-lisp:list 'cognito-user-pool-config 'make-cognito-user-pool-config))
 (common-lisp:defun make-cognito-user-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id-client-regex aws-region
                     user-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "userPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id-client-regex))
      (common-lisp:list
       (common-lisp:cons "appIdClientRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype conflict-detection-type () 'common-lisp:string)
(common-lisp:deftype conflict-handler-type () 'common-lisp:string)
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-api-cache-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor %create-api-cache-request-type :initform
                         (common-lisp:error ":type is required"))
                        (api-caching-behavior :initarg :|apiCachingBehavior|
                         :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor
                         %create-api-cache-request-api-caching-behavior
                         :initform
                         (common-lisp:error ":apicachingbehavior is required"))
                        (at-rest-encryption-enabled :initarg
                         :|atRestEncryptionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-api-cache-request-at-rest-encryption-enabled
                         :initform common-lisp:nil)
                        (transit-encryption-enabled :initarg
                         :|transitEncryptionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-api-cache-request-transit-encryption-enabled
                         :initform common-lisp:nil)
                        (ttl :initarg :|ttl| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %create-api-cache-request-ttl :initform
                         (common-lisp:error ":ttl is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-api-cache-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-api-cache-request 'make-create-api-cache-request))
 (common-lisp:defun make-create-api-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type api-caching-behavior
                     at-rest-encryption-enabled transit-encryption-enabled ttl
                     api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'at-rest-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "atRestEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-cache-response common-lisp:nil
                       ((api-cache :initarg :|apiCache| :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         %create-api-cache-response-api-cache :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-api-cache-response
                    'make-create-api-cache-response))
 (common-lisp:defun make-create-api-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-cache)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-key-request common-lisp:nil
                       ((expires :initarg :|expires| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %create-api-key-request-expires :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-api-key-request-description :initform
                         common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-api-key-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-api-key-request 'make-create-api-key-request))
 (common-lisp:defun make-create-api-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires description api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-key-response common-lisp:nil
                       ((api-key :initarg :|apiKey| :type
                         (common-lisp:or api-key common-lisp:null) :accessor
                         %create-api-key-response-api-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-api-key-response 'make-create-api-key-response))
 (common-lisp:defun make-create-api-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-key)
   (common-lisp:apply #'common-lisp:make-instance 'create-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-request common-lisp:nil
                       ((event-bridge-config :initarg :|eventBridgeConfig|
                         :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-event-bridge-config
                         :initform common-lisp:nil)
                        (relational-database-config :initarg
                         :|relationalDatabaseConfig| :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-relational-database-config
                         :initform common-lisp:nil)
                        (http-config :initarg :|httpConfig| :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor %create-data-source-request-http-config
                         :initform common-lisp:nil)
                        (open-search-service-config :initarg
                         :|openSearchServiceConfig| :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-open-search-service-config
                         :initform common-lisp:nil)
                        (elasticsearch-config :initarg :|elasticsearchConfig|
                         :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor
                         %create-data-source-request-elasticsearch-config
                         :initform common-lisp:nil)
                        (lambda-config :initarg :|lambdaConfig| :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor %create-data-source-request-lambda-config
                         :initform common-lisp:nil)
                        (dynamodb-config :initarg :|dynamodbConfig| :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor %create-data-source-request-dynamodb-config
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-data-source-request-service-role-arn :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %create-data-source-request-type :initform
                         (common-lisp:error ":type is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-data-source-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-data-source-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-source-request
                    'make-create-data-source-request))
 (common-lisp:defun make-create-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bridge-config
                     relational-database-config http-config
                     open-search-service-config elasticsearch-config
                     lambda-config dynamodb-config service-role-arn type
                     description name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-source-response common-lisp:nil
                       ((data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %create-data-source-response-data-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-source-response
                    'make-create-data-source-response))
 (common-lisp:defun make-create-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-name-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-domain-name-request-description
                         :initform common-lisp:nil)
                        (certificate-arn :initarg :|certificateArn| :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor %create-domain-name-request-certificate-arn
                         :initform
                         (common-lisp:error ":certificatearn is required"))
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %create-domain-name-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-domain-name-request
                    'make-create-domain-name-request))
 (common-lisp:defun make-create-domain-name-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description certificate-arn domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :|domainNameConfig| :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor
                         %create-domain-name-response-domain-name-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-domain-name-response
                    'make-create-domain-name-response))
 (common-lisp:defun make-create-domain-name-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name-config)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-request common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %create-function-request-code :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %create-function-request-runtime :initform
                         common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %create-function-request-max-batch-size
                         :initform common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %create-function-request-sync-config
                         :initform common-lisp:nil)
                        (function-version :initarg :|functionVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-function-request-function-version :initform
                         common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %create-function-request-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %create-function-request-request-mapping-template
                         :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-function-request-data-source-name
                         :initform
                         (common-lisp:error ":datasourcename is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-function-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-function-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-function-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-function-request 'make-create-function-request))
 (common-lisp:defun make-create-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size sync-config
                     function-version response-mapping-template
                     request-mapping-template data-source-name description name
                     api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :|functionConfiguration| :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         %create-function-response-function-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-function-response 'make-create-function-response))
 (common-lisp:defun make-create-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'create-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-graphql-api-request common-lisp:nil
                       ((lambda-authorizer-config :initarg
                         :|lambdaAuthorizerConfig| :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         %create-graphql-api-request-lambda-authorizer-config
                         :initform common-lisp:nil)
                        (xray-enabled :initarg :|xrayEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-graphql-api-request-xray-enabled :initform
                         common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :|additionalAuthenticationProviders| :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         %create-graphql-api-request-additional-authentication-providers
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-graphql-api-request-tags :initform
                         common-lisp:nil)
                        (open-idconnect-config :initarg :|openIDConnectConfig|
                         :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         %create-graphql-api-request-open-idconnect-config
                         :initform common-lisp:nil)
                        (user-pool-config :initarg :|userPoolConfig| :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor %create-graphql-api-request-user-pool-config
                         :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         %create-graphql-api-request-authentication-type
                         :initform
                         (common-lisp:error ":authenticationtype is required"))
                        (log-config :initarg :|logConfig| :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         %create-graphql-api-request-log-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-graphql-api-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-graphql-api-request
                    'make-create-graphql-api-request))
 (common-lisp:defun make-create-graphql-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-authorizer-config xray-enabled
                     additional-authentication-providers tags
                     open-idconnect-config user-pool-config authentication-type
                     log-config name)
   (common-lisp:apply #'common-lisp:make-instance 'create-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :|graphqlApi| :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor %create-graphql-api-response-graphql-api
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-graphql-api-response
                    'make-create-graphql-api-response))
 (common-lisp:defun make-create-graphql-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key graphql-api)
   (common-lisp:apply #'common-lisp:make-instance 'create-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-request common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %create-resolver-request-code :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %create-resolver-request-runtime :initform
                         common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %create-resolver-request-max-batch-size
                         :initform common-lisp:nil)
                        (caching-config :initarg :|cachingConfig| :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor %create-resolver-request-caching-config
                         :initform common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %create-resolver-request-sync-config
                         :initform common-lisp:nil)
                        (pipeline-config :initarg :|pipelineConfig| :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor %create-resolver-request-pipeline-config
                         :initform common-lisp:nil)
                        (kind :initarg :|kind| :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor %create-resolver-request-kind :initform
                         common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %create-resolver-request-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %create-resolver-request-request-mapping-template
                         :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-resolver-request-data-source-name
                         :initform common-lisp:nil)
                        (field-name :initarg :|fieldName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-resolver-request-field-name
                         :initform
                         (common-lisp:error ":fieldname is required"))
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-resolver-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-resolver-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resolver-request 'make-create-resolver-request))
 (common-lisp:defun make-create-resolver-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size
                     caching-config sync-config pipeline-config kind
                     response-mapping-template request-mapping-template
                     data-source-name field-name type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-response common-lisp:nil
                       ((resolver :initarg :|resolver| :type
                         (common-lisp:or resolver common-lisp:null) :accessor
                         %create-resolver-response-resolver :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-response 'make-create-resolver-response))
 (common-lisp:defun make-create-resolver-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolver)
   (common-lisp:apply #'common-lisp:make-instance 'create-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-type-request common-lisp:nil
                       ((format :initarg :|format| :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor %create-type-request-format :initform
                         (common-lisp:error ":format is required"))
                        (definition :initarg :|definition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-type-request-definition :initform
                         (common-lisp:error ":definition is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-type-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-type-request 'make-create-type-request))
 (common-lisp:defun make-create-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format definition api-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-type-response common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %create-type-response-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-type-response 'make-create-type-response))
 (common-lisp:defun make-create-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'create-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((event-bridge-config :initarg :|eventBridgeConfig|
                         :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-event-bridge-config :initform
                         common-lisp:nil)
                        (relational-database-config :initarg
                         :|relationalDatabaseConfig| :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-relational-database-config
                         :initform common-lisp:nil)
                        (http-config :initarg :|httpConfig| :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-http-config :initform
                         common-lisp:nil)
                        (open-search-service-config :initarg
                         :|openSearchServiceConfig| :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-open-search-service-config
                         :initform common-lisp:nil)
                        (elasticsearch-config :initarg :|elasticsearchConfig|
                         :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-elasticsearch-config :initform
                         common-lisp:nil)
                        (lambda-config :initarg :|lambdaConfig| :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-lambda-config :initform
                         common-lisp:nil)
                        (dynamodb-config :initarg :|dynamodbConfig| :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor %data-source-dynamodb-config :initform
                         common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-source-service-role-arn :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %data-source-type :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-source-description :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %data-source-name :initform common-lisp:nil)
                        (data-source-arn :initarg :|dataSourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-source-data-source-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defun make-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bridge-config
                     relational-database-config http-config
                     open-search-service-config elasticsearch-config
                     lambda-config dynamodb-config service-role-arn type
                     description name data-source-arn)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-arn))
      (common-lisp:list
       (common-lisp:cons "dataSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun |make-data-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype default-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-api-cache-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-api-cache-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-api-cache-request 'make-delete-api-cache-request))
 (common-lisp:defun make-delete-api-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-cache-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-api-cache-response
                    'make-delete-api-cache-response))
 (common-lisp:defun make-delete-api-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-key-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-api-key-request-id :initform
                         (common-lisp:error ":id is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-api-key-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-api-key-request 'make-delete-api-key-request))
 (common-lisp:defun make-delete-api-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-key-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-api-key-response 'make-delete-api-key-response))
 (common-lisp:defun make-delete-api-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-data-source-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-source-request
                    'make-delete-data-source-request))
 (common-lisp:defun make-delete-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-source-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-data-source-response
                    'make-delete-data-source-response))
 (common-lisp:defun make-delete-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-name-request common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-domain-name-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-name-request
                    'make-delete-domain-name-request))
 (common-lisp:defun make-delete-domain-name-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-name-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-domain-name-response
                    'make-delete-domain-name-response))
 (common-lisp:defun make-delete-domain-name-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-request common-lisp:nil
                       ((function-id :initarg :|functionId| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-function-request-function-id
                         :initform
                         (common-lisp:error ":functionid is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-function-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-function-request 'make-delete-function-request))
 (common-lisp:defun make-delete-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-id api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-function-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-function-response 'make-delete-function-response))
 (common-lisp:defun make-delete-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-graphql-api-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-graphql-api-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-graphql-api-request
                    'make-delete-graphql-api-request))
 (common-lisp:defun make-delete-graphql-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-graphql-api-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-graphql-api-response
                    'make-delete-graphql-api-response))
 (common-lisp:defun make-delete-graphql-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-request common-lisp:nil
                       ((field-name :initarg :|fieldName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-resolver-request-field-name
                         :initform
                         (common-lisp:error ":fieldname is required"))
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-resolver-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-resolver-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-request 'make-delete-resolver-request))
 (common-lisp:defun make-delete-resolver-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-name type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-resolver-response 'make-delete-resolver-response))
 (common-lisp:defun make-delete-resolver-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-type-request common-lisp:nil
                       ((type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-type-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-type-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-type-request 'make-delete-type-request))
 (common-lisp:defun make-delete-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-type-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-type-response 'make-delete-type-response))
 (common-lisp:defun make-delete-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delta-sync-config common-lisp:nil
                       ((delta-sync-table-ttl :initarg :|deltaSyncTableTTL|
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %delta-sync-config-delta-sync-table-ttl :initform
                         common-lisp:nil)
                        (delta-sync-table-name :initarg :|deltaSyncTableName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %delta-sync-config-delta-sync-table-name
                         :initform common-lisp:nil)
                        (base-table-ttl :initarg :|baseTableTTL| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %delta-sync-config-base-table-ttl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delta-sync-config 'make-delta-sync-config))
 (common-lisp:defun make-delta-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delta-sync-table-ttl
                     delta-sync-table-name base-table-ttl)
   (common-lisp:apply #'common-lisp:make-instance 'delta-sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delta-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delta-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-table-ttl))
      (common-lisp:list
       (common-lisp:cons "baseTableTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delta-sync-table-name))
      (common-lisp:list
       (common-lisp:cons "deltaSyncTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delta-sync-table-ttl))
      (common-lisp:list
       (common-lisp:cons "deltaSyncTableTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delta-sync-config))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-api-request common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %disassociate-api-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-api-request 'make-disassociate-api-request))
 (common-lisp:defun make-disassociate-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-api-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-api-response
                    'make-disassociate-api-response))
 (common-lisp:defun make-disassociate-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-api-response))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-name-config common-lisp:nil
                       ((hosted-zone-id :initarg :|hostedZoneId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %domain-name-config-hosted-zone-id :initform
                         common-lisp:nil)
                        (appsync-domain-name :initarg :|appsyncDomainName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %domain-name-config-appsync-domain-name
                         :initform common-lisp:nil)
                        (certificate-arn :initarg :|certificateArn| :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor %domain-name-config-certificate-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %domain-name-config-description :initform
                         common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-name-config-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-name-config 'make-domain-name-config))
 (common-lisp:defun make-domain-name-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hosted-zone-id appsync-domain-name
                     certificate-arn description domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-name-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-name-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-name-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appsync-domain-name))
      (common-lisp:list
       (common-lisp:cons "appsyncDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "hostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-name-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-name-configs ()
   '(trivial-types:proper-list domain-name-config))
 (common-lisp:defun |make-domain-name-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dynamodb-data-source-config common-lisp:nil
                       ((versioned :initarg :|versioned| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dynamodb-data-source-config-versioned :initform
                         common-lisp:nil)
                        (delta-sync-config :initarg :|deltaSyncConfig| :type
                         (common-lisp:or delta-sync-config common-lisp:null)
                         :accessor
                         %dynamodb-data-source-config-delta-sync-config
                         :initform common-lisp:nil)
                        (use-caller-credentials :initarg
                         :|useCallerCredentials| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dynamodb-data-source-config-use-caller-credentials
                         :initform common-lisp:nil)
                        (aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dynamodb-data-source-config-aws-region :initform
                         (common-lisp:error ":awsregion is required"))
                        (table-name :initarg :|tableName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dynamodb-data-source-config-table-name :initform
                         (common-lisp:error ":tablename is required"))))
 (common-lisp:export
  (common-lisp:list 'dynamodb-data-source-config
                    'make-dynamodb-data-source-config))
 (common-lisp:defun make-dynamodb-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key versioned delta-sync-config
                     use-caller-credentials aws-region table-name)
   (common-lisp:apply #'common-lisp:make-instance 'dynamodb-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-caller-credentials))
      (common-lisp:list
       (common-lisp:cons "useCallerCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-sync-config))
      (common-lisp:list
       (common-lisp:cons "deltaSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioned))
      (common-lisp:list
       (common-lisp:cons "versioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamodb-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-data-source-config common-lisp:nil
                       ((aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %elasticsearch-data-source-config-aws-region :initform
                         (common-lisp:error ":awsregion is required"))
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %elasticsearch-data-source-config-endpoint :initform
                         (common-lisp:error ":endpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-data-source-config
                    'make-elasticsearch-data-source-config))
 (common-lisp:defun make-elasticsearch-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-region endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasticsearch-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %error-detail-message :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defun make-error-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluate-code-error-detail common-lisp:nil
                       ((code-errors :initarg :|codeErrors| :type
                         (common-lisp:or code-errors common-lisp:null)
                         :accessor %evaluate-code-error-detail-code-errors
                         :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %evaluate-code-error-detail-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-error-detail
                    'make-evaluate-code-error-detail))
 (common-lisp:defun make-evaluate-code-error-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-errors message)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-errors))
      (common-lisp:list
       (common-lisp:cons "codeErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-code-request common-lisp:nil
                       ((function :initarg :|function| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %evaluate-code-request-function :initform
                         common-lisp:nil)
                        (context :initarg :|context| :type
                         (common-lisp:or context common-lisp:null) :accessor
                         %evaluate-code-request-context :initform
                         (common-lisp:error ":context is required"))
                        (code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %evaluate-code-request-code :initform
                         (common-lisp:error ":code is required"))
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %evaluate-code-request-runtime :initform
                         (common-lisp:error ":runtime is required"))))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-request 'make-evaluate-code-request))
 (common-lisp:defun make-evaluate-code-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function context code runtime)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-code-response common-lisp:nil
                       ((logs :initarg :|logs| :type
                         (common-lisp:or logs common-lisp:null) :accessor
                         %evaluate-code-response-logs :initform
                         common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or evaluate-code-error-detail
                                         common-lisp:null)
                         :accessor %evaluate-code-response-error :initform
                         common-lisp:nil)
                        (evaluation-result :initarg :|evaluationResult| :type
                         (common-lisp:or evaluation-result common-lisp:null)
                         :accessor %evaluate-code-response-evaluation-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluate-code-response 'make-evaluate-code-response))
 (common-lisp:defun make-evaluate-code-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logs error evaluation-result)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "evaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs))
      (common-lisp:list
       (common-lisp:cons "logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-mapping-template-request common-lisp:nil
                       ((context :initarg :|context| :type
                         (common-lisp:or context common-lisp:null) :accessor
                         %evaluate-mapping-template-request-context :initform
                         (common-lisp:error ":context is required"))
                        (template :initarg :|template| :type
                         (common-lisp:or template common-lisp:null) :accessor
                         %evaluate-mapping-template-request-template :initform
                         (common-lisp:error ":template is required"))))
 (common-lisp:export
  (common-lisp:list 'evaluate-mapping-template-request
                    'make-evaluate-mapping-template-request))
 (common-lisp:defun make-evaluate-mapping-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key context template)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluate-mapping-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-mapping-template-response common-lisp:nil
                       ((logs :initarg :|logs| :type
                         (common-lisp:or logs common-lisp:null) :accessor
                         %evaluate-mapping-template-response-logs :initform
                         common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor %evaluate-mapping-template-response-error
                         :initform common-lisp:nil)
                        (evaluation-result :initarg :|evaluationResult| :type
                         (common-lisp:or evaluation-result common-lisp:null)
                         :accessor
                         %evaluate-mapping-template-response-evaluation-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'evaluate-mapping-template-response
                    'make-evaluate-mapping-template-response))
 (common-lisp:defun make-evaluate-mapping-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logs error evaluation-result)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluate-mapping-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-result))
      (common-lisp:list
       (common-lisp:cons "evaluationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs))
      (common-lisp:list
       (common-lisp:cons "logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-mapping-template-response))
   common-lisp:nil))
(common-lisp:deftype evaluation-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bridge-data-source-config common-lisp:nil
                       ((event-bus-arn :initarg :|eventBusArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-bridge-data-source-config-event-bus-arn
                         :initform
                         (common-lisp:error ":eventbusarn is required"))))
 (common-lisp:export
  (common-lisp:list 'event-bridge-data-source-config
                    'make-event-bridge-data-source-config))
 (common-lisp:defun make-event-bridge-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'event-bridge-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-arn))
      (common-lisp:list
       (common-lisp:cons "eventBusArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-data-source-config))
   common-lisp:nil))
(common-lisp:deftype field-log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass flush-api-cache-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %flush-api-cache-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'flush-api-cache-request 'make-flush-api-cache-request))
 (common-lisp:defun make-flush-api-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance 'flush-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass flush-api-cache-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'flush-api-cache-response 'make-flush-api-cache-response))
 (common-lisp:defun make-flush-api-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'flush-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flush-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-configuration common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %function-configuration-code :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %function-configuration-runtime :initform
                         common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %function-configuration-max-batch-size
                         :initform common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %function-configuration-sync-config
                         :initform common-lisp:nil)
                        (function-version :initarg :|functionVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %function-configuration-function-version :initform
                         common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %function-configuration-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %function-configuration-request-mapping-template
                         :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %function-configuration-data-source-name
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %function-configuration-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %function-configuration-name :initform
                         common-lisp:nil)
                        (function-arn :initarg :|functionArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %function-configuration-function-arn :initform
                         common-lisp:nil)
                        (function-id :initarg :|functionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %function-configuration-function-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'function-configuration 'make-function-configuration))
 (common-lisp:defun make-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size sync-config
                     function-version response-mapping-template
                     request-mapping-template data-source-name description name
                     function-arn function-id)
   (common-lisp:apply #'common-lisp:make-instance 'function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-id))
      (common-lisp:list
       (common-lisp:cons "functionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "functionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype functions ()
   '(trivial-types:proper-list function-configuration))
 (common-lisp:defun |make-functions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype functions-ids () '(trivial-types:proper-list string))
 (common-lisp:defun |make-functions-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-api-association-request common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-api-association-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-api-association-request
                    'make-get-api-association-request))
 (common-lisp:defun make-get-api-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-association-response common-lisp:nil
                       ((api-association :initarg :|apiAssociation| :type
                         (common-lisp:or api-association common-lisp:null)
                         :accessor
                         %get-api-association-response-api-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-api-association-response
                    'make-get-api-association-response))
 (common-lisp:defun make-get-api-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-association)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-association))
      (common-lisp:list
       (common-lisp:cons "apiAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-cache-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-api-cache-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-api-cache-request 'make-get-api-cache-request))
 (common-lisp:defun make-get-api-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-api-cache-response common-lisp:nil
                       ((api-cache :initarg :|apiCache| :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         %get-api-cache-response-api-cache :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-api-cache-response 'make-get-api-cache-response))
 (common-lisp:defun make-get-api-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-cache)
   (common-lisp:apply #'common-lisp:make-instance 'get-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-data-source-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-data-source-request 'make-get-data-source-request))
 (common-lisp:defun make-get-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-source-response common-lisp:nil
                       ((data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %get-data-source-response-data-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-data-source-response 'make-get-data-source-response))
 (common-lisp:defun make-get-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-name-request common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-domain-name-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-domain-name-request 'make-get-domain-name-request))
 (common-lisp:defun make-get-domain-name-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :|domainNameConfig| :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor %get-domain-name-response-domain-name-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-domain-name-response 'make-get-domain-name-response))
 (common-lisp:defun make-get-domain-name-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name-config)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-request common-lisp:nil
                       ((function-id :initarg :|functionId| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-function-request-function-id :initform
                         (common-lisp:error ":functionid is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-function-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-function-request 'make-get-function-request))
 (common-lisp:defun make-get-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-id api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :|functionConfiguration| :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         %get-function-response-function-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-function-response 'make-get-function-response))
 (common-lisp:defun make-get-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'get-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-graphql-api-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-request 'make-get-graphql-api-request))
 (common-lisp:defun make-get-graphql-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :|graphqlApi| :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor %get-graphql-api-response-graphql-api
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-graphql-api-response 'make-get-graphql-api-response))
 (common-lisp:defun make-get-graphql-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key graphql-api)
   (common-lisp:apply #'common-lisp:make-instance 'get-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-introspection-schema-request common-lisp:nil
                       ((include-directives :initarg :|includeDirectives| :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         %get-introspection-schema-request-include-directives
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or output-type common-lisp:null)
                         :accessor %get-introspection-schema-request-format
                         :initform (common-lisp:error ":format is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-introspection-schema-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-introspection-schema-request
                    'make-get-introspection-schema-request))
 (common-lisp:defun make-get-introspection-schema-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-directives format api-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-introspection-schema-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-introspection-schema-response common-lisp:nil
                       ((schema :initarg :|schema| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %get-introspection-schema-response-schema :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-introspection-schema-response
                    'make-get-introspection-schema-response))
 (common-lisp:defun make-get-introspection-schema-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-introspection-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-introspection-schema-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'schema))))
(common-lisp:progn
 (common-lisp:defclass get-resolver-request common-lisp:nil
                       ((field-name :initarg :|fieldName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-resolver-request-field-name :initform
                         (common-lisp:error ":fieldname is required"))
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-resolver-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-resolver-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resolver-request 'make-get-resolver-request))
 (common-lisp:defun make-get-resolver-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field-name type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-response common-lisp:nil
                       ((resolver :initarg :|resolver| :type
                         (common-lisp:or resolver common-lisp:null) :accessor
                         %get-resolver-response-resolver :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-response 'make-get-resolver-response))
 (common-lisp:defun make-get-resolver-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolver)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-creation-status-request common-lisp:nil
                       ((api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-schema-creation-status-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-schema-creation-status-request
                    'make-get-schema-creation-status-request))
 (common-lisp:defun make-get-schema-creation-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-creation-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-creation-status-response common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-schema-creation-status-response-details :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or schema-status common-lisp:null)
                         :accessor %get-schema-creation-status-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-schema-creation-status-response
                    'make-get-schema-creation-status-response))
 (common-lisp:defun make-get-schema-creation-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-creation-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-creation-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-type-request common-lisp:nil
                       ((format :initarg :|format| :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor %get-type-request-format :initform
                         (common-lisp:error ":format is required"))
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %get-type-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-type-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-type-request 'make-get-type-request))
 (common-lisp:defun make-get-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-type-response common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %get-type-response-type :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-type-response 'make-get-type-response))
 (common-lisp:defun make-get-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'get-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition graph-qlschema-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       graph-qlschema-exception-message)))
 (common-lisp:export
  (common-lisp:list 'graph-qlschema-exception
                    'graph-qlschema-exception-message)))
(common-lisp:progn
 (common-lisp:defclass graphql-api common-lisp:nil
                       ((lambda-authorizer-config :initarg
                         :|lambdaAuthorizerConfig| :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor %graphql-api-lambda-authorizer-config
                         :initform common-lisp:nil)
                        (waf-web-acl-arn :initarg :|wafWebAclArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %graphql-api-waf-web-acl-arn :initform
                         common-lisp:nil)
                        (xray-enabled :initarg :|xrayEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %graphql-api-xray-enabled :initform common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :|additionalAuthenticationProviders| :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         %graphql-api-additional-authentication-providers
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %graphql-api-tags :initform common-lisp:nil)
                        (uris :initarg :|uris| :type
                         (common-lisp:or map-of-string-to-string
                                         common-lisp:null)
                         :accessor %graphql-api-uris :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %graphql-api-arn :initform common-lisp:nil)
                        (open-idconnect-config :initarg :|openIDConnectConfig|
                         :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor %graphql-api-open-idconnect-config :initform
                         common-lisp:nil)
                        (user-pool-config :initarg :|userPoolConfig| :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor %graphql-api-user-pool-config :initform
                         common-lisp:nil)
                        (log-config :initarg :|logConfig| :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         %graphql-api-log-config :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %graphql-api-authentication-type :initform
                         common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %graphql-api-api-id :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %graphql-api-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'graphql-api 'make-graphql-api))
 (common-lisp:defun make-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-authorizer-config waf-web-acl-arn
                     xray-enabled additional-authentication-providers tags uris
                     arn open-idconnect-config user-pool-config log-config
                     authentication-type api-id name)
   (common-lisp:apply #'common-lisp:make-instance 'graphql-api
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input graphql-api))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input graphql-api))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "apiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uris))
      (common-lisp:list
       (common-lisp:cons "uris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waf-web-acl-arn))
      (common-lisp:list
       (common-lisp:cons "wafWebAclArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input graphql-api))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype graphql-apis () '(trivial-types:proper-list graphql-api))
 (common-lisp:defun |make-graphql-apis|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list graphql-api))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-data-source-config common-lisp:nil
                       ((authorization-config :initarg :|authorizationConfig|
                         :type
                         (common-lisp:or authorization-config common-lisp:null)
                         :accessor
                         %http-data-source-config-authorization-config
                         :initform common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %http-data-source-config-endpoint :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-data-source-config 'make-http-data-source-config))
 (common-lisp:defun make-http-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authorization-config endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'http-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lambda-authorizer-config common-lisp:nil
                       ((identity-validation-expression :initarg
                         :|identityValidationExpression| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lambda-authorizer-config-identity-validation-expression
                         :initform common-lisp:nil)
                        (authorizer-uri :initarg :|authorizerUri| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lambda-authorizer-config-authorizer-uri :initform
                         (common-lisp:error ":authorizeruri is required"))
                        (authorizer-result-ttl-in-seconds :initarg
                         :|authorizerResultTtlInSeconds| :type
                         (common-lisp:or ttl common-lisp:null) :accessor
                         %lambda-authorizer-config-authorizer-result-ttl-in-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-authorizer-config 'make-lambda-authorizer-config))
 (common-lisp:defun make-lambda-authorizer-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-validation-expression
                     authorizer-uri authorizer-result-ttl-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-authorizer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorizer-result-ttl-in-seconds))
      (common-lisp:list
       (common-lisp:cons "authorizerResultTtlInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorizer-uri))
      (common-lisp:list
       (common-lisp:cons "authorizerUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-validation-expression))
      (common-lisp:list
       (common-lisp:cons "identityValidationExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-authorizer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-conflict-handler-config common-lisp:nil
                       ((lambda-conflict-handler-arn :initarg
                         :|lambdaConflictHandlerArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lambda-conflict-handler-config-lambda-conflict-handler-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-conflict-handler-config
                    'make-lambda-conflict-handler-config))
 (common-lisp:defun make-lambda-conflict-handler-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-conflict-handler-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-conflict-handler-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-conflict-handler-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaConflictHandlerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-conflict-handler-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-data-source-config common-lisp:nil
                       ((lambda-function-arn :initarg :|lambdaFunctionArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %lambda-data-source-config-lambda-function-arn
                         :initform
                         (common-lisp:error
                          ":lambdafunctionarn is required"))))
 (common-lisp:export
  (common-lisp:list 'lambda-data-source-config
                    'make-lambda-data-source-config))
 (common-lisp:defun make-lambda-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-function-arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-api-keys-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-api-keys-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-api-keys-request-next-token :initform
                         common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-api-keys-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-api-keys-request 'make-list-api-keys-request))
 (common-lisp:defun make-list-api-keys-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token api-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-api-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-api-keys-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-api-keys-response-next-token :initform
                         common-lisp:nil)
                        (api-keys :initarg :|apiKeys| :type
                         (common-lisp:or api-keys common-lisp:null) :accessor
                         %list-api-keys-response-api-keys :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-api-keys-response 'make-list-api-keys-response))
 (common-lisp:defun make-list-api-keys-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token api-keys)
   (common-lisp:apply #'common-lisp:make-instance 'list-api-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-keys))
      (common-lisp:list
       (common-lisp:cons "apiKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-data-sources-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-data-sources-request-next-token
                         :initform common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-data-sources-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-request
                    'make-list-data-sources-request))
 (common-lisp:defun make-list-data-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token api-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-sources-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-data-sources-response-next-token
                         :initform common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor %list-data-sources-response-data-sources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-data-sources-response
                    'make-list-data-sources-response))
 (common-lisp:defun make-list-data-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data-sources)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-domain-names-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-domain-names-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-request
                    'make-list-domain-names-request))
 (common-lisp:defun make-list-domain-names-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-domain-names-response-next-token
                         :initform common-lisp:nil)
                        (domain-name-configs :initarg :|domainNameConfigs|
                         :type
                         (common-lisp:or domain-name-configs common-lisp:null)
                         :accessor
                         %list-domain-names-response-domain-name-configs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defun make-list-domain-names-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-name-configs)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-configs))
      (common-lisp:list
       (common-lisp:cons "domainNameConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-functions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-functions-request-next-token :initform
                         common-lisp:nil)
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-functions-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-functions-request 'make-list-functions-request))
 (common-lisp:defun make-list-functions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token api-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-functions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-functions-response-next-token
                         :initform common-lisp:nil)
                        (functions :initarg :|functions| :type
                         (common-lisp:or functions common-lisp:null) :accessor
                         %list-functions-response-functions :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-functions-response 'make-list-functions-response))
 (common-lisp:defun make-list-functions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token functions)
   (common-lisp:apply #'common-lisp:make-instance 'list-functions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphql-apis-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-graphql-apis-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-graphql-apis-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-graphql-apis-request
                    'make-list-graphql-apis-request))
 (common-lisp:defun make-list-graphql-apis-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphql-apis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-graphql-apis-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-graphql-apis-response-next-token
                         :initform common-lisp:nil)
                        (graphql-apis :initarg :|graphqlApis| :type
                         (common-lisp:or graphql-apis common-lisp:null)
                         :accessor %list-graphql-apis-response-graphql-apis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-graphql-apis-response
                    'make-list-graphql-apis-response))
 (common-lisp:defun make-list-graphql-apis-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token graphql-apis)
   (common-lisp:apply #'common-lisp:make-instance 'list-graphql-apis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-apis))
      (common-lisp:list
       (common-lisp:cons "graphqlApis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-graphql-apis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-by-function-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-resolvers-by-function-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-resolvers-by-function-request-next-token
                         :initform common-lisp:nil)
                        (function-id :initarg :|functionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resolvers-by-function-request-function-id
                         :initform
                         (common-lisp:error ":functionid is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resolvers-by-function-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-by-function-request
                    'make-list-resolvers-by-function-request))
 (common-lisp:defun make-list-resolvers-by-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token function-id
                     api-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolvers-by-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-by-function-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-resolvers-by-function-response-next-token
                         :initform common-lisp:nil)
                        (resolvers :initarg :|resolvers| :type
                         (common-lisp:or resolvers common-lisp:null) :accessor
                         %list-resolvers-by-function-response-resolvers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-by-function-response
                    'make-list-resolvers-by-function-response))
 (common-lisp:defun make-list-resolvers-by-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resolvers)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolvers-by-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolvers))
      (common-lisp:list
       (common-lisp:cons "resolvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-by-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-resolvers-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-resolvers-request-next-token :initform
                         common-lisp:nil)
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resolvers-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-resolvers-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-request 'make-list-resolvers-request))
 (common-lisp:defun make-list-resolvers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolvers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolvers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-resolvers-response-next-token
                         :initform common-lisp:nil)
                        (resolvers :initarg :|resolvers| :type
                         (common-lisp:or resolvers common-lisp:null) :accessor
                         %list-resolvers-response-resolvers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resolvers-response 'make-list-resolvers-response))
 (common-lisp:defun make-list-resolvers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resolvers)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolvers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolvers))
      (common-lisp:list
       (common-lisp:cons "resolvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolvers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-types-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-types-request-next-token :initform
                         common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor %list-types-request-format :initform
                         (common-lisp:error ":format is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-types-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-types-request 'make-list-types-request))
 (common-lisp:defun make-list-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token format api-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-types-response-next-token :initform
                         common-lisp:nil)
                        (types :initarg :|types| :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         %list-types-response-types :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-types-response 'make-list-types-response))
 (common-lisp:defun make-list-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token types)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-config common-lisp:nil
                       ((exclude-verbose-content :initarg
                         :|excludeVerboseContent| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %log-config-exclude-verbose-content :initform
                         common-lisp:nil)
                        (cloud-watch-logs-role-arn :initarg
                         :|cloudWatchLogsRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %log-config-cloud-watch-logs-role-arn :initform
                         (common-lisp:error
                          ":cloudwatchlogsrolearn is required"))
                        (field-log-level :initarg :|fieldLogLevel| :type
                         (common-lisp:or field-log-level common-lisp:null)
                         :accessor %log-config-field-log-level :initform
                         (common-lisp:error ":fieldloglevel is required"))))
 (common-lisp:export (common-lisp:list 'log-config 'make-log-config))
 (common-lisp:defun make-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclude-verbose-content
                     cloud-watch-logs-role-arn field-log-level)
   (common-lisp:apply #'common-lisp:make-instance 'log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-log-level))
      (common-lisp:list
       (common-lisp:cons "fieldLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-verbose-content))
      (common-lisp:list
       (common-lisp:cons "excludeVerboseContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logs () '(trivial-types:proper-list string))
 (common-lisp:defun |make-logs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-of-string-to-string () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-string-to-string|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype mapping-template () 'common-lisp:string)
(common-lisp:deftype max-batch-size () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass open-idconnect-config common-lisp:nil
                       ((auth-ttl :initarg :|authTTL| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %open-idconnect-config-auth-ttl :initform
                         common-lisp:nil)
                        (iat-ttl :initarg :|iatTTL| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %open-idconnect-config-iat-ttl :initform
                         common-lisp:nil)
                        (client-id :initarg :|clientId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %open-idconnect-config-client-id :initform
                         common-lisp:nil)
                        (issuer :initarg :|issuer| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %open-idconnect-config-issuer :initform
                         (common-lisp:error ":issuer is required"))))
 (common-lisp:export
  (common-lisp:list 'open-idconnect-config 'make-open-idconnect-config))
 (common-lisp:defun make-open-idconnect-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-ttl iat-ttl client-id issuer)
   (common-lisp:apply #'common-lisp:make-instance 'open-idconnect-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iat-ttl))
      (common-lisp:list
       (common-lisp:cons "iatTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-ttl))
      (common-lisp:list
       (common-lisp:cons "authTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-search-service-data-source-config common-lisp:nil
                       ((aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %open-search-service-data-source-config-aws-region
                         :initform
                         (common-lisp:error ":awsregion is required"))
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %open-search-service-data-source-config-endpoint
                         :initform
                         (common-lisp:error ":endpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'open-search-service-data-source-config
                    'make-open-search-service-data-source-config))
 (common-lisp:defun make-open-search-service-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-region endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-search-service-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-service-data-source-config))
   common-lisp:nil))
(common-lisp:deftype output-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-config common-lisp:nil
                       ((functions :initarg :|functions| :type
                         (common-lisp:or functions-ids common-lisp:null)
                         :accessor %pipeline-config-functions :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pipeline-config 'make-pipeline-config))
 (common-lisp:defun make-pipeline-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key functions)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-http-endpoint-config common-lisp:nil
                       ((aws-secret-store-arn :initarg :|awsSecretStoreArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %rds-http-endpoint-config-aws-secret-store-arn
                         :initform common-lisp:nil)
                        (schema :initarg :|schema| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %rds-http-endpoint-config-schema :initform
                         common-lisp:nil)
                        (database-name :initarg :|databaseName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %rds-http-endpoint-config-database-name :initform
                         common-lisp:nil)
                        (db-cluster-identifier :initarg :|dbClusterIdentifier|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %rds-http-endpoint-config-db-cluster-identifier
                         :initform common-lisp:nil)
                        (aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %rds-http-endpoint-config-aws-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rds-http-endpoint-config 'make-rds-http-endpoint-config))
 (common-lisp:defun make-rds-http-endpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-secret-store-arn schema database-name
                     db-cluster-identifier aws-region)
   (common-lisp:apply #'common-lisp:make-instance 'rds-http-endpoint-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "dbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secret-store-arn))
      (common-lisp:list
       (common-lisp:cons "awsSecretStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-http-endpoint-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relational-database-data-source-config common-lisp:nil
                       ((rds-http-endpoint-config :initarg
                         :|rdsHttpEndpointConfig| :type
                         (common-lisp:or rds-http-endpoint-config
                                         common-lisp:null)
                         :accessor
                         %relational-database-data-source-config-rds-http-endpoint-config
                         :initform common-lisp:nil)
                        (relational-database-source-type :initarg
                         :|relationalDatabaseSourceType| :type
                         (common-lisp:or relational-database-source-type
                                         common-lisp:null)
                         :accessor
                         %relational-database-data-source-config-relational-database-source-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'relational-database-data-source-config
                    'make-relational-database-data-source-config))
 (common-lisp:defun make-relational-database-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rds-http-endpoint-config
                     relational-database-source-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'relational-database-data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-source-type))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-http-endpoint-config))
      (common-lisp:list
       (common-lisp:cons "rdsHttpEndpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-data-source-config))
   common-lisp:nil))
(common-lisp:deftype relational-database-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolver common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %resolver-code :initform common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %resolver-runtime :initform common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %resolver-max-batch-size :initform
                         common-lisp:nil)
                        (caching-config :initarg :|cachingConfig| :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor %resolver-caching-config :initform
                         common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %resolver-sync-config :initform
                         common-lisp:nil)
                        (pipeline-config :initarg :|pipelineConfig| :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor %resolver-pipeline-config :initform
                         common-lisp:nil)
                        (kind :initarg :|kind| :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor %resolver-kind :initform common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor %resolver-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor %resolver-request-mapping-template :initform
                         common-lisp:nil)
                        (resolver-arn :initarg :|resolverArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resolver-resolver-arn :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %resolver-data-source-name :initform
                         common-lisp:nil)
                        (field-name :initarg :|fieldName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %resolver-field-name :initform
                         common-lisp:nil)
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %resolver-type-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resolver 'make-resolver))
 (common-lisp:defun make-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size
                     caching-config sync-config pipeline-config kind
                     response-mapping-template request-mapping-template
                     resolver-arn data-source-name field-name type-name)
   (common-lisp:apply #'common-lisp:make-instance 'resolver
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-arn))
      (common-lisp:list
       (common-lisp:cons "resolverArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver))
   common-lisp:nil))
(common-lisp:deftype resolver-kind () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolvers () '(trivial-types:proper-list resolver))
 (common-lisp:defun |make-resolvers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype runtime-name () 'common-lisp:string)
(common-lisp:deftype schema-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-schema-creation-request common-lisp:nil
                       ((definition :initarg :|definition| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %start-schema-creation-request-definition :initform
                         (common-lisp:error ":definition is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-schema-creation-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-schema-creation-request
                    'make-start-schema-creation-request))
 (common-lisp:defun make-start-schema-creation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition api-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-creation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-creation-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or schema-status common-lisp:null)
                         :accessor %start-schema-creation-response-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-schema-creation-response
                    'make-start-schema-creation-response))
 (common-lisp:defun make-start-schema-creation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-creation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-creation-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-config common-lisp:nil
                       ((lambda-conflict-handler-config :initarg
                         :|lambdaConflictHandlerConfig| :type
                         (common-lisp:or lambda-conflict-handler-config
                                         common-lisp:null)
                         :accessor %sync-config-lambda-conflict-handler-config
                         :initform common-lisp:nil)
                        (conflict-detection :initarg :|conflictDetection| :type
                         (common-lisp:or conflict-detection-type
                                         common-lisp:null)
                         :accessor %sync-config-conflict-detection :initform
                         common-lisp:nil)
                        (conflict-handler :initarg :|conflictHandler| :type
                         (common-lisp:or conflict-handler-type
                                         common-lisp:null)
                         :accessor %sync-config-conflict-handler :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sync-config 'make-sync-config))
 (common-lisp:defun make-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-conflict-handler-config
                     conflict-detection conflict-handler)
   (common-lisp:apply #'common-lisp:make-instance 'sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-handler))
      (common-lisp:list
       (common-lisp:cons "conflictHandler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-detection))
      (common-lisp:list
       (common-lisp:cons "conflictDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-conflict-handler-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConflictHandlerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-config))
   common-lisp:nil))
(common-lisp:deftype ttl () 'common-lisp:integer)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass type common-lisp:nil
                       ((format :initarg :|format| :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor %type-format :initform common-lisp:nil)
                        (definition :initarg :|definition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %type-definition :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %type-arn :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %type-description :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %type-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'type 'make-type))
 (common-lisp:defun make-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format definition arn description name)
   (common-lisp:apply #'common-lisp:make-instance 'type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type))
   common-lisp:nil))
(common-lisp:deftype type-definition-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-list () '(trivial-types:proper-list type))
 (common-lisp:defun |make-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (appsync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-cache-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or api-cache-type common-lisp:null)
                         :accessor %update-api-cache-request-type :initform
                         (common-lisp:error ":type is required"))
                        (api-caching-behavior :initarg :|apiCachingBehavior|
                         :type
                         (common-lisp:or api-caching-behavior common-lisp:null)
                         :accessor
                         %update-api-cache-request-api-caching-behavior
                         :initform
                         (common-lisp:error ":apicachingbehavior is required"))
                        (ttl :initarg :|ttl| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %update-api-cache-request-ttl :initform
                         (common-lisp:error ":ttl is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-api-cache-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-api-cache-request 'make-update-api-cache-request))
 (common-lisp:defun make-update-api-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type api-caching-behavior ttl api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-caching-behavior))
      (common-lisp:list
       (common-lisp:cons "apiCachingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-cache-response common-lisp:nil
                       ((api-cache :initarg :|apiCache| :type
                         (common-lisp:or api-cache common-lisp:null) :accessor
                         %update-api-cache-response-api-cache :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-api-cache-response
                    'make-update-api-cache-response))
 (common-lisp:defun make-update-api-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-cache)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-cache))
      (common-lisp:list
       (common-lisp:cons "apiCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-key-request common-lisp:nil
                       ((expires :initarg :|expires| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %update-api-key-request-expires :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-api-key-request-description :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-api-key-request-id :initform
                         (common-lisp:error ":id is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-api-key-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-api-key-request 'make-update-api-key-request))
 (common-lisp:defun make-update-api-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires description id api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-key-response common-lisp:nil
                       ((api-key :initarg :|apiKey| :type
                         (common-lisp:or api-key common-lisp:null) :accessor
                         %update-api-key-response-api-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-api-key-response 'make-update-api-key-response))
 (common-lisp:defun make-update-api-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-key)
   (common-lisp:apply #'common-lisp:make-instance 'update-api-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-request common-lisp:nil
                       ((event-bridge-config :initarg :|eventBridgeConfig|
                         :type
                         (common-lisp:or event-bridge-data-source-config
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-event-bridge-config
                         :initform common-lisp:nil)
                        (relational-database-config :initarg
                         :|relationalDatabaseConfig| :type
                         (common-lisp:or relational-database-data-source-config
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-relational-database-config
                         :initform common-lisp:nil)
                        (http-config :initarg :|httpConfig| :type
                         (common-lisp:or http-data-source-config
                                         common-lisp:null)
                         :accessor %update-data-source-request-http-config
                         :initform common-lisp:nil)
                        (open-search-service-config :initarg
                         :|openSearchServiceConfig| :type
                         (common-lisp:or open-search-service-data-source-config
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-open-search-service-config
                         :initform common-lisp:nil)
                        (elasticsearch-config :initarg :|elasticsearchConfig|
                         :type
                         (common-lisp:or elasticsearch-data-source-config
                                         common-lisp:null)
                         :accessor
                         %update-data-source-request-elasticsearch-config
                         :initform common-lisp:nil)
                        (lambda-config :initarg :|lambdaConfig| :type
                         (common-lisp:or lambda-data-source-config
                                         common-lisp:null)
                         :accessor %update-data-source-request-lambda-config
                         :initform common-lisp:nil)
                        (dynamodb-config :initarg :|dynamodbConfig| :type
                         (common-lisp:or dynamodb-data-source-config
                                         common-lisp:null)
                         :accessor %update-data-source-request-dynamodb-config
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-source-request-service-role-arn :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %update-data-source-request-type :initform
                         (common-lisp:error ":type is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-source-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-data-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-data-source-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-source-request
                    'make-update-data-source-request))
 (common-lisp:defun make-update-data-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bridge-config
                     relational-database-config http-config
                     open-search-service-config elasticsearch-config
                     lambda-config dynamodb-config service-role-arn type
                     description name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamodb-config))
      (common-lisp:list
       (common-lisp:cons "dynamodbConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-config))
      (common-lisp:list
       (common-lisp:cons "lambdaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-config))
      (common-lisp:list
       (common-lisp:cons "elasticsearchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-service-config))
      (common-lisp:list
       (common-lisp:cons "openSearchServiceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-config))
      (common-lisp:list
       (common-lisp:cons "httpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-config))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge-config))
      (common-lisp:list
       (common-lisp:cons "eventBridgeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-source-response common-lisp:nil
                       ((data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %update-data-source-response-data-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-source-response
                    'make-update-data-source-response))
 (common-lisp:defun make-update-data-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-name-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-domain-name-request-description
                         :initform common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-domain-name-request-domain-name
                         :initform
                         (common-lisp:error ":domainname is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-name-request
                    'make-update-domain-name-request))
 (common-lisp:defun make-update-domain-name-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-name-response common-lisp:nil
                       ((domain-name-config :initarg :|domainNameConfig| :type
                         (common-lisp:or domain-name-config common-lisp:null)
                         :accessor
                         %update-domain-name-response-domain-name-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-name-response
                    'make-update-domain-name-response))
 (common-lisp:defun make-update-domain-name-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-name-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name-config))
      (common-lisp:list
       (common-lisp:cons "domainNameConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-request common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %update-function-request-code :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %update-function-request-runtime :initform
                         common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %update-function-request-max-batch-size
                         :initform common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %update-function-request-sync-config
                         :initform common-lisp:nil)
                        (function-version :initarg :|functionVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-function-request-function-version :initform
                         common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %update-function-request-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %update-function-request-request-mapping-template
                         :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-function-request-data-source-name
                         :initform
                         (common-lisp:error ":datasourcename is required"))
                        (function-id :initarg :|functionId| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-function-request-function-id
                         :initform
                         (common-lisp:error ":functionid is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-function-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-function-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-function-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-function-request 'make-update-function-request))
 (common-lisp:defun make-update-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size sync-config
                     function-version response-mapping-template
                     request-mapping-template data-source-name function-id
                     description name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-version))
      (common-lisp:list
       (common-lisp:cons "functionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-function-response common-lisp:nil
                       ((function-configuration :initarg
                         :|functionConfiguration| :type
                         (common-lisp:or function-configuration
                                         common-lisp:null)
                         :accessor
                         %update-function-response-function-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-function-response 'make-update-function-response))
 (common-lisp:defun make-update-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'update-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'function-configuration))
      (common-lisp:list
       (common-lisp:cons "functionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-graphql-api-request common-lisp:nil
                       ((lambda-authorizer-config :initarg
                         :|lambdaAuthorizerConfig| :type
                         (common-lisp:or lambda-authorizer-config
                                         common-lisp:null)
                         :accessor
                         %update-graphql-api-request-lambda-authorizer-config
                         :initform common-lisp:nil)
                        (xray-enabled :initarg :|xrayEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-graphql-api-request-xray-enabled :initform
                         common-lisp:nil)
                        (additional-authentication-providers :initarg
                         :|additionalAuthenticationProviders| :type
                         (common-lisp:or additional-authentication-providers
                                         common-lisp:null)
                         :accessor
                         %update-graphql-api-request-additional-authentication-providers
                         :initform common-lisp:nil)
                        (open-idconnect-config :initarg :|openIDConnectConfig|
                         :type
                         (common-lisp:or open-idconnect-config
                                         common-lisp:null)
                         :accessor
                         %update-graphql-api-request-open-idconnect-config
                         :initform common-lisp:nil)
                        (user-pool-config :initarg :|userPoolConfig| :type
                         (common-lisp:or user-pool-config common-lisp:null)
                         :accessor %update-graphql-api-request-user-pool-config
                         :initform common-lisp:nil)
                        (authentication-type :initarg :|authenticationType|
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         %update-graphql-api-request-authentication-type
                         :initform common-lisp:nil)
                        (log-config :initarg :|logConfig| :type
                         (common-lisp:or log-config common-lisp:null) :accessor
                         %update-graphql-api-request-log-config :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-graphql-api-request-name :initform
                         (common-lisp:error ":name is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-graphql-api-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-graphql-api-request
                    'make-update-graphql-api-request))
 (common-lisp:defun make-update-graphql-api-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-authorizer-config xray-enabled
                     additional-authentication-providers open-idconnect-config
                     user-pool-config authentication-type log-config name
                     api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-graphql-api-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-config))
      (common-lisp:list
       (common-lisp:cons "logConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-config))
      (common-lisp:list
       (common-lisp:cons "userPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-config))
      (common-lisp:list
       (common-lisp:cons "openIDConnectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-authentication-providers))
      (common-lisp:list
       (common-lisp:cons "additionalAuthenticationProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-enabled))
      (common-lisp:list
       (common-lisp:cons "xrayEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-authorizer-config))
      (common-lisp:list
       (common-lisp:cons "lambdaAuthorizerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-graphql-api-response common-lisp:nil
                       ((graphql-api :initarg :|graphqlApi| :type
                         (common-lisp:or graphql-api common-lisp:null)
                         :accessor %update-graphql-api-response-graphql-api
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-graphql-api-response
                    'make-update-graphql-api-response))
 (common-lisp:defun make-update-graphql-api-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key graphql-api)
   (common-lisp:apply #'common-lisp:make-instance 'update-graphql-api-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graphql-api))
      (common-lisp:list
       (common-lisp:cons "graphqlApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-graphql-api-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-request common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %update-resolver-request-code :initform
                         common-lisp:nil)
                        (runtime :initarg :|runtime| :type
                         (common-lisp:or app-sync-runtime common-lisp:null)
                         :accessor %update-resolver-request-runtime :initform
                         common-lisp:nil)
                        (max-batch-size :initarg :|maxBatchSize| :type
                         (common-lisp:or max-batch-size common-lisp:null)
                         :accessor %update-resolver-request-max-batch-size
                         :initform common-lisp:nil)
                        (caching-config :initarg :|cachingConfig| :type
                         (common-lisp:or caching-config common-lisp:null)
                         :accessor %update-resolver-request-caching-config
                         :initform common-lisp:nil)
                        (sync-config :initarg :|syncConfig| :type
                         (common-lisp:or sync-config common-lisp:null)
                         :accessor %update-resolver-request-sync-config
                         :initform common-lisp:nil)
                        (pipeline-config :initarg :|pipelineConfig| :type
                         (common-lisp:or pipeline-config common-lisp:null)
                         :accessor %update-resolver-request-pipeline-config
                         :initform common-lisp:nil)
                        (kind :initarg :|kind| :type
                         (common-lisp:or resolver-kind common-lisp:null)
                         :accessor %update-resolver-request-kind :initform
                         common-lisp:nil)
                        (response-mapping-template :initarg
                         :|responseMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %update-resolver-request-response-mapping-template
                         :initform common-lisp:nil)
                        (request-mapping-template :initarg
                         :|requestMappingTemplate| :type
                         (common-lisp:or mapping-template common-lisp:null)
                         :accessor
                         %update-resolver-request-request-mapping-template
                         :initform common-lisp:nil)
                        (data-source-name :initarg :|dataSourceName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-resolver-request-data-source-name
                         :initform common-lisp:nil)
                        (field-name :initarg :|fieldName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-resolver-request-field-name
                         :initform
                         (common-lisp:error ":fieldname is required"))
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-resolver-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-resolver-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resolver-request 'make-update-resolver-request))
 (common-lisp:defun make-update-resolver-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code runtime max-batch-size
                     caching-config sync-config pipeline-config kind
                     response-mapping-template request-mapping-template
                     data-source-name field-name type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-name))
      (common-lisp:list
       (common-lisp:cons "dataSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-mapping-template))
      (common-lisp:list
       (common-lisp:cons "requestMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-mapping-template))
      (common-lisp:list
       (common-lisp:cons "responseMappingTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-config))
      (common-lisp:list
       (common-lisp:cons "pipelineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-config))
      (common-lisp:list
       (common-lisp:cons "syncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-config))
      (common-lisp:list
       (common-lisp:cons "cachingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-batch-size))
      (common-lisp:list
       (common-lisp:cons "maxBatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-response common-lisp:nil
                       ((resolver :initarg :|resolver| :type
                         (common-lisp:or resolver common-lisp:null) :accessor
                         %update-resolver-response-resolver :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-response 'make-update-resolver-response))
 (common-lisp:defun make-update-resolver-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolver)
   (common-lisp:apply #'common-lisp:make-instance 'update-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver))
      (common-lisp:list
       (common-lisp:cons "resolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-type-request common-lisp:nil
                       ((format :initarg :|format| :type
                         (common-lisp:or type-definition-format
                                         common-lisp:null)
                         :accessor %update-type-request-format :initform
                         (common-lisp:error ":format is required"))
                        (definition :initarg :|definition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-type-request-definition :initform
                         common-lisp:nil)
                        (type-name :initarg :|typeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-type-request-type-name :initform
                         (common-lisp:error ":typename is required"))
                        (api-id :initarg :|apiId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-type-request-api-id :initform
                         (common-lisp:error ":apiid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-type-request 'make-update-type-request))
 (common-lisp:defun make-update-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format definition type-name api-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-type-response common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %update-type-response-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-type-response 'make-update-type-response))
 (common-lisp:defun make-update-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'update-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-pool-config common-lisp:nil
                       ((app-id-client-regex :initarg :|appIdClientRegex| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-pool-config-app-id-client-regex :initform
                         common-lisp:nil)
                        (default-action :initarg :|defaultAction| :type
                         (common-lisp:or default-action common-lisp:null)
                         :accessor %user-pool-config-default-action :initform
                         (common-lisp:error ":defaultaction is required"))
                        (aws-region :initarg :|awsRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-pool-config-aws-region :initform
                         (common-lisp:error ":awsregion is required"))
                        (user-pool-id :initarg :|userPoolId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-pool-config-user-pool-id :initform
                         (common-lisp:error ":userpoolid is required"))))
 (common-lisp:export
  (common-lisp:list 'user-pool-config 'make-user-pool-config))
 (common-lisp:defun make-user-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id-client-regex default-action
                     aws-region user-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "userPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "defaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id-client-regex))
      (common-lisp:list
       (common-lisp:cons "appIdClientRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name api-id)
   (common-lisp:declare (common-lisp:ignorable domain-name api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AssociateApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-api))
(common-lisp:progn
 (common-lisp:defun create-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id ttl transit-encryption-enabled
                     at-rest-encryption-enabled api-caching-behavior type)
   (common-lisp:declare
    (common-lisp:ignorable api-id ttl transit-encryption-enabled
     at-rest-encryption-enabled api-caching-behavior type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateApiCache"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-api-cache))
(common-lisp:progn
 (common-lisp:defun create-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id description expires)
   (common-lisp:declare (common-lisp:ignorable api-id description expires))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateApiKey"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-api-key))
(common-lisp:progn
 (common-lisp:defun create-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description type
                     service-role-arn dynamodb-config lambda-config
                     elasticsearch-config open-search-service-config
                     http-config relational-database-config
                     event-bridge-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description type service-role-arn
     dynamodb-config lambda-config elasticsearch-config
     open-search-service-config http-config relational-database-config
     event-bridge-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateDataSource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-source))
(common-lisp:progn
 (common-lisp:defun create-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name certificate-arn description)
   (common-lisp:declare
    (common-lisp:ignorable domain-name certificate-arn description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/domainnames"
                                                        "CreateDomainName"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain-name))
(common-lisp:progn
 (common-lisp:defun create-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description data-source-name
                     request-mapping-template response-mapping-template
                     function-version sync-config max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description data-source-name
     request-mapping-template response-mapping-template function-version
     sync-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateFunction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-function))
(common-lisp:progn
 (common-lisp:defun create-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name log-config authentication-type
                     user-pool-config open-idconnect-config tags
                     additional-authentication-providers xray-enabled
                     lambda-authorizer-config)
   (common-lisp:declare
    (common-lisp:ignorable name log-config authentication-type user-pool-config
     open-idconnect-config tags additional-authentication-providers
     xray-enabled lambda-authorizer-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/apis"
                                                        "CreateGraphqlApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-graphql-api))
(common-lisp:progn
 (common-lisp:defun create-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name
                     data-source-name request-mapping-template
                     response-mapping-template kind pipeline-config sync-config
                     caching-config max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name field-name data-source-name
     request-mapping-template response-mapping-template kind pipeline-config
     sync-config caching-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "CreateResolver"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resolver))
(common-lisp:progn
 (common-lisp:defun create-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id definition format)
   (common-lisp:declare (common-lisp:ignorable api-id definition format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "CreateType"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-type))
(common-lisp:progn
 (common-lisp:defun delete-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "DeleteApiCache"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-api-cache))
(common-lisp:progn
 (common-lisp:defun delete-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id id)
   (common-lisp:declare (common-lisp:ignorable api-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteApiKey"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-api-key))
(common-lisp:progn
 (common-lisp:defun delete-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name)
   (common-lisp:declare (common-lisp:ignorable api-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteDataSource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-source))
(common-lisp:progn
 (common-lisp:defun delete-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteDomainName"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-name))
(common-lisp:progn
 (common-lisp:defun delete-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id)
   (common-lisp:declare (common-lisp:ignorable api-id function-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "DeleteFunction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-function))
(common-lisp:progn
 (common-lisp:defun delete-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "DeleteGraphqlApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-graphql-api))
(common-lisp:progn
 (common-lisp:defun delete-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name field-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "DeleteResolver"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resolver))
(common-lisp:progn
 (common-lisp:defun delete-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "DeleteType"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-type))
(common-lisp:progn
 (common-lisp:defun disassociate-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DisassociateApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-api))
(common-lisp:progn
 (common-lisp:defun evaluate-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key runtime code context function)
   (common-lisp:declare (common-lisp:ignorable runtime code context function))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-code-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/dataplane-evaluatecode"
                                                        "EvaluateCode"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'evaluate-code))
(common-lisp:progn
 (common-lisp:defun evaluate-mapping-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template context)
   (common-lisp:declare (common-lisp:ignorable template context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-evaluate-mapping-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/dataplane-evaluatetemplate"
                                                        "EvaluateMappingTemplate"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'evaluate-mapping-template))
(common-lisp:progn
 (common-lisp:defun flush-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-flush-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/FlushCache"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "FlushApiCache"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'flush-api-cache))
(common-lisp:progn
 (common-lisp:defun get-api-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-api-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A/apiassociation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetApiAssociation"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-api-association))
(common-lisp:progn
 (common-lisp:defun get-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetApiCache"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-api-cache))
(common-lisp:progn
 (common-lisp:defun get-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name)
   (common-lisp:declare (common-lisp:ignorable api-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetDataSource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-source))
(common-lisp:progn
 (common-lisp:defun get-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetDomainName"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-name))
(common-lisp:progn
 (common-lisp:defun get-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id)
   (common-lisp:declare (common-lisp:ignorable api-id function-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "GetFunction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-function))
(common-lisp:progn
 (common-lisp:defun get-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetGraphqlApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-graphql-api))
(common-lisp:progn
 (common-lisp:defun get-introspection-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id format include-directives)
   (common-lisp:declare
    (common-lisp:ignorable api-id format include-directives))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-introspection-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schema"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetIntrospectionSchema"
                                                        "2017-07-25")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-introspection-schema))
(common-lisp:progn
 (common-lisp:defun get-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name)
   (common-lisp:declare (common-lisp:ignorable api-id type-name field-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "GetResolver"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver))
(common-lisp:progn
 (common-lisp:defun get-schema-creation-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id)
   (common-lisp:declare (common-lisp:ignorable api-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-schema-creation-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schemacreation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "GetSchemaCreationStatus"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-creation-status))
(common-lisp:progn
 (common-lisp:defun get-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name format)
   (common-lisp:declare (common-lisp:ignorable api-id type-name format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "GetType"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-type))
(common-lisp:progn
 (common-lisp:defun list-api-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-api-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListApiKeys"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-api-keys))
(common-lisp:progn
 (common-lisp:defun list-data-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListDataSources"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-sources))
(common-lisp:progn
 (common-lisp:defun list-domain-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domain-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/domainnames"
                                                        "ListDomainNames"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun list-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable api-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-functions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListFunctions"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-functions))
(common-lisp:progn
 (common-lisp:defun list-graphql-apis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-graphql-apis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/apis"
                                                        "ListGraphqlApis"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-graphql-apis))
(common-lisp:progn
 (common-lisp:defun list-resolvers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolvers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "ListResolvers"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolvers))
(common-lisp:progn
 (common-lisp:defun list-resolvers-by-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id function-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id function-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolvers-by-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A/resolvers"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "ListResolversByFunction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolvers-by-function))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id format next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable api-id format next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "ListTypes"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-types))
(common-lisp:progn
 (common-lisp:defun start-schema-creation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id definition)
   (common-lisp:declare (common-lisp:ignorable api-id definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-schema-creation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/schemacreation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "StartSchemaCreation"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-schema-creation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-api-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id ttl api-caching-behavior type)
   (common-lisp:declare
    (common-lisp:ignorable api-id ttl api-caching-behavior type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-api-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/ApiCaches/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "UpdateApiCache"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-api-cache))
(common-lisp:progn
 (common-lisp:defun update-api-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id id description expires)
   (common-lisp:declare (common-lisp:ignorable api-id id description expires))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-api-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/apikeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateApiKey"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-api-key))
(common-lisp:progn
 (common-lisp:defun update-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description type
                     service-role-arn dynamodb-config lambda-config
                     elasticsearch-config open-search-service-config
                     http-config relational-database-config
                     event-bridge-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description type service-role-arn
     dynamodb-config lambda-config elasticsearch-config
     open-search-service-config http-config relational-database-config
     event-bridge-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/datasources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateDataSource"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-source))
(common-lisp:progn
 (common-lisp:defun update-domain-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name description)
   (common-lisp:declare (common-lisp:ignorable domain-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/domainnames/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateDomainName"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-name))
(common-lisp:progn
 (common-lisp:defun update-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name description function-id
                     data-source-name request-mapping-template
                     response-mapping-template function-version sync-config
                     max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id name description function-id data-source-name
     request-mapping-template response-mapping-template function-version
     sync-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-function-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/functions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'function-id))))
                                                        "UpdateFunction"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-function))
(common-lisp:progn
 (common-lisp:defun update-graphql-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id name log-config
                     authentication-type user-pool-config open-idconnect-config
                     additional-authentication-providers xray-enabled
                     lambda-authorizer-config)
   (common-lisp:declare
    (common-lisp:ignorable api-id name log-config authentication-type
     user-pool-config open-idconnect-config additional-authentication-providers
     xray-enabled lambda-authorizer-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-graphql-api-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))))
                                                        "UpdateGraphqlApi"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-graphql-api))
(common-lisp:progn
 (common-lisp:defun update-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name field-name
                     data-source-name request-mapping-template
                     response-mapping-template kind pipeline-config sync-config
                     caching-config max-batch-size runtime code)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name field-name data-source-name
     request-mapping-template response-mapping-template kind pipeline-config
     sync-config caching-config max-batch-size runtime code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A/resolvers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'field-name))))
                                                        "UpdateResolver"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resolver))
(common-lisp:progn
 (common-lisp:defun update-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-id type-name definition format)
   (common-lisp:declare
    (common-lisp:ignorable api-id type-name definition format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appsync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apis/~A/types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'api-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type-name))))
                                                        "UpdateType"
                                                        "2017-07-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-type))
