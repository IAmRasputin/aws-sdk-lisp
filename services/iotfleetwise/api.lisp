;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iotfleetwise/api
  (:use)
  (:nicknames #:aws/iotfleetwise)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotfleetwise/api)
(common-lisp:progn
 (common-lisp:defclass iotfleetwise-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "iotfleetwise" :protocol
                        :json))
 (common-lisp:export 'iotfleetwise-request))
(common-lisp:progn
 (common-lisp:define-condition iotfleetwise-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotfleetwise-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DecoderManifestValidationException"
     . decoder-manifest-validation-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidNodeException" . invalid-node-exception)
    ("InvalidSignalsException" . invalid-signals-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass actuator common-lisp:nil
                       ((assigned-value :initarg :|assignedValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %actuator-assigned-value :initform
                         common-lisp:nil)
                        (max :initarg :|max| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %actuator-max :initform common-lisp:nil)
                        (min :initarg :|min| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %actuator-min :initform common-lisp:nil)
                        (allowed-values :initarg :|allowedValues| :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor %actuator-allowed-values :initform
                         common-lisp:nil)
                        (unit :initarg :|unit| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %actuator-unit :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %actuator-description :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor %actuator-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (fully-qualified-name :initarg :|fullyQualifiedName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %actuator-fully-qualified-name :initform
                         (common-lisp:error
                          ":fullyqualifiedname is required"))))
 (common-lisp:export (common-lisp:list 'actuator 'make-actuator))
 (common-lisp:defun make-actuator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assigned-value max min allowed-values
                     unit description data-type fully-qualified-name)
   (common-lisp:apply #'common-lisp:make-instance 'actuator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input actuator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input actuator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-value))
      (common-lisp:list
       (common-lisp:cons "assignedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input actuator))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-vehicle-fleet-request common-lisp:nil
                       ((fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %associate-vehicle-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         %associate-vehicle-fleet-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-vehicle-fleet-request
                    'make-associate-vehicle-fleet-request))
 (common-lisp:defun make-associate-vehicle-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-vehicle-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-vehicle-fleet-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-vehicle-fleet-response
                    'make-associate-vehicle-fleet-response))
 (common-lisp:defun make-associate-vehicle-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-vehicle-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-vehicle-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((default-value :initarg :|defaultValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %attribute-default-value :initform
                         common-lisp:nil)
                        (assigned-value :initarg :|assignedValue| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %attribute-assigned-value :initform
                         common-lisp:nil)
                        (max :initarg :|max| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %attribute-max :initform common-lisp:nil)
                        (min :initarg :|min| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %attribute-min :initform common-lisp:nil)
                        (allowed-values :initarg :|allowedValues| :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor %attribute-allowed-values :initform
                         common-lisp:nil)
                        (unit :initarg :|unit| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %attribute-unit :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %attribute-description :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor %attribute-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (fully-qualified-name :initarg :|fullyQualifiedName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %attribute-fully-qualified-name :initform
                         (common-lisp:error
                          ":fullyqualifiedname is required"))))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defun make-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value assigned-value max min
                     allowed-values unit description data-type
                     fully-qualified-name)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigned-value))
      (common-lisp:list
       (common-lisp:cons "assignedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-vehicle-request common-lisp:nil
                       ((vehicles :initarg :|vehicles| :type
                         (common-lisp:or |createVehicleRequestItems|
                                         common-lisp:null)
                         :accessor %batch-create-vehicle-request-vehicles
                         :initform
                         (common-lisp:error ":vehicles is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-vehicle-request
                    'make-batch-create-vehicle-request))
 (common-lisp:defun make-batch-create-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vehicles)
   (common-lisp:apply #'common-lisp:make-instance 'batch-create-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-vehicle-response common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or |createVehicleErrors|
                                         common-lisp:null)
                         :accessor %batch-create-vehicle-response-errors
                         :initform common-lisp:nil)
                        (vehicles :initarg :|vehicles| :type
                         (common-lisp:or |createVehicleResponses|
                                         common-lisp:null)
                         :accessor %batch-create-vehicle-response-vehicles
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-create-vehicle-response
                    'make-batch-create-vehicle-response))
 (common-lisp:defun make-batch-create-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors vehicles)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-vehicle-request common-lisp:nil
                       ((vehicles :initarg :|vehicles| :type
                         (common-lisp:or |updateVehicleRequestItems|
                                         common-lisp:null)
                         :accessor %batch-update-vehicle-request-vehicles
                         :initform
                         (common-lisp:error ":vehicles is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-vehicle-request
                    'make-batch-update-vehicle-request))
 (common-lisp:defun make-batch-update-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vehicles)
   (common-lisp:apply #'common-lisp:make-instance 'batch-update-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-vehicle-response common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or |updateVehicleErrors|
                                         common-lisp:null)
                         :accessor %batch-update-vehicle-response-errors
                         :initform common-lisp:nil)
                        (vehicles :initarg :|vehicles| :type
                         (common-lisp:or |updateVehicleResponseItems|
                                         common-lisp:null)
                         :accessor %batch-update-vehicle-response-vehicles
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-vehicle-response
                    'make-batch-update-vehicle-response))
 (common-lisp:defun make-batch-update-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors vehicles)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass branch common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %branch-description :initform
                         common-lisp:nil)
                        (fully-qualified-name :initarg :|fullyQualifiedName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %branch-fully-qualified-name :initform
                         (common-lisp:error
                          ":fullyqualifiedname is required"))))
 (common-lisp:export (common-lisp:list 'branch 'make-branch))
 (common-lisp:defun make-branch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description fully-qualified-name)
   (common-lisp:apply #'common-lisp:make-instance 'branch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input branch))
   common-lisp:nil))
(common-lisp:deftype campaign-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass campaign-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %campaign-summary-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %campaign-summary-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor %campaign-summary-status :initform
                         common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %campaign-summary-target-arn :initform
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %campaign-summary-signal-catalog-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %campaign-summary-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %campaign-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %campaign-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'campaign-summary 'make-campaign-summary))
 (common-lisp:defun make-campaign-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     status target-arn signal-catalog-arn description name arn)
   (common-lisp:apply #'common-lisp:make-instance 'campaign-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass can-dbc-definition common-lisp:nil
                       ((signals-map :initarg :|signalsMap| :type
                         (common-lisp:or model-signals-map common-lisp:null)
                         :accessor %can-dbc-definition-signals-map :initform
                         common-lisp:nil)
                        (can-dbc-files :initarg :|canDbcFiles| :type
                         (common-lisp:or network-files-list common-lisp:null)
                         :accessor %can-dbc-definition-can-dbc-files :initform
                         (common-lisp:error ":candbcfiles is required"))
                        (network-interface :initarg :|networkInterface| :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor %can-dbc-definition-network-interface
                         :initform
                         (common-lisp:error ":networkinterface is required"))))
 (common-lisp:export
  (common-lisp:list 'can-dbc-definition 'make-can-dbc-definition))
 (common-lisp:defun make-can-dbc-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signals-map can-dbc-files
                     network-interface)
   (common-lisp:apply #'common-lisp:make-instance 'can-dbc-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interface))
      (common-lisp:list
       (common-lisp:cons "networkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-dbc-files))
      (common-lisp:list
       (common-lisp:cons "canDbcFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-map))
      (common-lisp:list
       (common-lisp:cons "signalsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-dbc-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass can-interface common-lisp:nil
                       ((protocol-version :initarg :|protocolVersion| :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor %can-interface-protocol-version :initform
                         common-lisp:nil)
                        (protocol-name :initarg :|protocolName| :type
                         (common-lisp:or protocol-name common-lisp:null)
                         :accessor %can-interface-protocol-name :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or can-interface-name common-lisp:null)
                         :accessor %can-interface-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'can-interface 'make-can-interface))
 (common-lisp:defun make-can-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol-version protocol-name name)
   (common-lisp:apply #'common-lisp:make-instance 'can-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-name))
      (common-lisp:list
       (common-lisp:cons "protocolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "protocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-interface))
   common-lisp:nil))
(common-lisp:deftype can-interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass can-signal common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or can-signal-name common-lisp:null)
                         :accessor %can-signal-name :initform common-lisp:nil)
                        (length :initarg :|length| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %can-signal-length :initform
                         (common-lisp:error ":length is required"))
                        (factor :initarg :|factor| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %can-signal-factor :initform
                         (common-lisp:error ":factor is required"))
                        (offset :initarg :|offset| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %can-signal-offset :initform
                         (common-lisp:error ":offset is required"))
                        (start-bit :initarg :|startBit| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %can-signal-start-bit :initform
                         (common-lisp:error ":startbit is required"))
                        (is-signed :initarg :|isSigned| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %can-signal-is-signed :initform
                         (common-lisp:error ":issigned is required"))
                        (is-big-endian :initarg :|isBigEndian| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %can-signal-is-big-endian :initform
                         (common-lisp:error ":isbigendian is required"))
                        (message-id :initarg :|messageId| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %can-signal-message-id :initform
                         (common-lisp:error ":messageid is required"))))
 (common-lisp:export (common-lisp:list 'can-signal 'make-can-signal))
 (common-lisp:defun make-can-signal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name length factor offset start-bit
                     is-signed is-big-endian message-id)
   (common-lisp:apply #'common-lisp:make-instance 'can-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input can-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input can-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "messageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-big-endian))
      (common-lisp:list
       (common-lisp:cons "isBigEndian"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-signed))
      (common-lisp:list
       (common-lisp:cons "isSigned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-bit))
      (common-lisp:list
       (common-lisp:cons "startBit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'factor))
      (common-lisp:list
       (common-lisp:cons "factor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input can-signal))
   common-lisp:nil))
(common-lisp:deftype can-signal-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-log-delivery-options common-lisp:nil
                       ((log-group-name :initarg :|logGroupName| :type
                         (common-lisp:or cloud-watch-log-group-name
                                         common-lisp:null)
                         :accessor
                         %cloud-watch-log-delivery-options-log-group-name
                         :initform common-lisp:nil)
                        (log-type :initarg :|logType| :type
                         (common-lisp:or log-type common-lisp:null) :accessor
                         %cloud-watch-log-delivery-options-log-type :initform
                         (common-lisp:error ":logtype is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-log-delivery-options
                    'make-cloud-watch-log-delivery-options))
 (common-lisp:defun make-cloud-watch-log-delivery-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-name log-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-log-delivery-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "logGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-delivery-options))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collection-scheme common-lisp:nil
                       ((condition-based-collection-scheme :initarg
                         :|conditionBasedCollectionScheme| :type
                         (common-lisp:or condition-based-collection-scheme
                                         common-lisp:null)
                         :accessor
                         %collection-scheme-condition-based-collection-scheme
                         :initform common-lisp:nil)
                        (time-based-collection-scheme :initarg
                         :|timeBasedCollectionScheme| :type
                         (common-lisp:or time-based-collection-scheme
                                         common-lisp:null)
                         :accessor
                         %collection-scheme-time-based-collection-scheme
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'collection-scheme 'make-collection-scheme))
 (common-lisp:defun make-collection-scheme
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition-based-collection-scheme
                     time-based-collection-scheme)
   (common-lisp:apply #'common-lisp:make-instance 'collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-based-collection-scheme))
      (common-lisp:list
       (common-lisp:cons "timeBasedCollectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-based-collection-scheme))
      (common-lisp:list
       (common-lisp:cons "conditionBasedCollectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collection-scheme))
   common-lisp:nil))
(common-lisp:deftype compression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition-based-collection-scheme common-lisp:nil
                       ((condition-language-version :initarg
                         :|conditionLanguageVersion| :type
                         (common-lisp:or |languageVersion| common-lisp:null)
                         :accessor
                         %condition-based-collection-scheme-condition-language-version
                         :initform common-lisp:nil)
                        (trigger-mode :initarg :|triggerMode| :type
                         (common-lisp:or trigger-mode common-lisp:null)
                         :accessor
                         %condition-based-collection-scheme-trigger-mode
                         :initform common-lisp:nil)
                        (minimum-trigger-interval-ms :initarg
                         :|minimumTriggerIntervalMs| :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         %condition-based-collection-scheme-minimum-trigger-interval-ms
                         :initform common-lisp:nil)
                        (expression :initarg :|expression| :type
                         (common-lisp:or |eventExpression| common-lisp:null)
                         :accessor
                         %condition-based-collection-scheme-expression
                         :initform
                         (common-lisp:error ":expression is required"))))
 (common-lisp:export
  (common-lisp:list 'condition-based-collection-scheme
                    'make-condition-based-collection-scheme))
 (common-lisp:defun make-condition-based-collection-scheme
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition-language-version trigger-mode
                     minimum-trigger-interval-ms expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'condition-based-collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-trigger-interval-ms))
      (common-lisp:list
       (common-lisp:cons "minimumTriggerIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-mode))
      (common-lisp:list
       (common-lisp:cons "triggerMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'condition-language-version))
      (common-lisp:list
       (common-lisp:cons "conditionLanguageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          condition-based-collection-scheme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource :initarg :|resource| :initform common-lisp:nil :reader
       conflict-exception-resource)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-campaign-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-campaign-request-tags :initform
                         common-lisp:nil)
                        (data-extra-dimensions :initarg :|dataExtraDimensions|
                         :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor
                         %create-campaign-request-data-extra-dimensions
                         :initform common-lisp:nil)
                        (collection-scheme :initarg :|collectionScheme| :type
                         (common-lisp:or collection-scheme common-lisp:null)
                         :accessor %create-campaign-request-collection-scheme
                         :initform
                         (common-lisp:error ":collectionscheme is required"))
                        (signals-to-collect :initarg :|signalsToCollect| :type
                         (common-lisp:or signal-information-list
                                         common-lisp:null)
                         :accessor %create-campaign-request-signals-to-collect
                         :initform common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or |priority| common-lisp:null) :accessor
                         %create-campaign-request-priority :initform
                         common-lisp:nil)
                        (compression :initarg :|compression| :type
                         (common-lisp:or compression common-lisp:null)
                         :accessor %create-campaign-request-compression
                         :initform common-lisp:nil)
                        (spooling-mode :initarg :|spoolingMode| :type
                         (common-lisp:or spooling-mode common-lisp:null)
                         :accessor %create-campaign-request-spooling-mode
                         :initform common-lisp:nil)
                        (diagnostics-mode :initarg :|diagnosticsMode| :type
                         (common-lisp:or diagnostics-mode common-lisp:null)
                         :accessor %create-campaign-request-diagnostics-mode
                         :initform common-lisp:nil)
                        (post-trigger-collection-duration :initarg
                         :|postTriggerCollectionDuration| :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         %create-campaign-request-post-trigger-collection-duration
                         :initform common-lisp:nil)
                        (expiry-time :initarg :|expiryTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-campaign-request-expiry-time
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-campaign-request-start-time
                         :initform common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-campaign-request-target-arn :initform
                         (common-lisp:error ":targetarn is required"))
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-campaign-request-signal-catalog-arn :initform
                         (common-lisp:error ":signalcatalogarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-campaign-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %create-campaign-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-campaign-request 'make-create-campaign-request))
 (common-lisp:defun make-create-campaign-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags data-extra-dimensions
                     collection-scheme signals-to-collect priority compression
                     spooling-mode diagnostics-mode
                     post-trigger-collection-duration expiry-time start-time
                     target-arn signal-catalog-arn description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-trigger-collection-duration))
      (common-lisp:list
       (common-lisp:cons "postTriggerCollectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics-mode))
      (common-lisp:list
       (common-lisp:cons "diagnosticsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spooling-mode))
      (common-lisp:list
       (common-lisp:cons "spoolingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-to-collect))
      (common-lisp:list
       (common-lisp:cons "signalsToCollect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-scheme))
      (common-lisp:list
       (common-lisp:cons "collectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-campaign-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-campaign-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %create-campaign-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-campaign-response 'make-create-campaign-response))
 (common-lisp:defun make-create-campaign-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-decoder-manifest-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-decoder-manifest-request-tags :initform
                         common-lisp:nil)
                        (network-interfaces :initarg :|networkInterfaces| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         %create-decoder-manifest-request-network-interfaces
                         :initform common-lisp:nil)
                        (signal-decoders :initarg :|signalDecoders| :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         %create-decoder-manifest-request-signal-decoders
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-decoder-manifest-request-model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-decoder-manifest-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-decoder-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-decoder-manifest-request
                    'make-create-decoder-manifest-request))
 (common-lisp:defun make-create-decoder-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags network-interfaces signal-decoders
                     model-manifest-arn description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-decoders))
      (common-lisp:list
       (common-lisp:cons "signalDecoders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-decoder-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-decoder-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-decoder-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-decoder-manifest-response
                    'make-create-decoder-manifest-response))
 (common-lisp:defun make-create-decoder-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-fleet-request-tags :initform common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-fleet-request-signal-catalog-arn :initform
                         (common-lisp:error ":signalcatalogarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-fleet-request-description :initform
                         common-lisp:nil)
                        (fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %create-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-request 'make-create-fleet-request))
 (common-lisp:defun make-create-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags signal-catalog-arn description
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-fleet-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %create-fleet-response-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-response 'make-create-fleet-response))
 (common-lisp:defun make-create-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-manifest-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-model-manifest-request-tags :initform
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-model-manifest-request-signal-catalog-arn
                         :initform
                         (common-lisp:error ":signalcatalogarn is required"))
                        (nodes :initarg :|nodes| :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor %create-model-manifest-request-nodes
                         :initform (common-lisp:error ":nodes is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-model-manifest-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-model-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-model-manifest-request
                    'make-create-model-manifest-request))
 (common-lisp:defun make-create-model-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags signal-catalog-arn nodes description
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-model-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-model-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-model-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-model-manifest-response
                    'make-create-model-manifest-response))
 (common-lisp:defun make-create-model-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-signal-catalog-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-signal-catalog-request-tags :initform
                         common-lisp:nil)
                        (nodes :initarg :|nodes| :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         %create-signal-catalog-request-nodes :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %create-signal-catalog-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-signal-catalog-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-signal-catalog-request
                    'make-create-signal-catalog-request))
 (common-lisp:defun make-create-signal-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags nodes description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-signal-catalog-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-signal-catalog-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %create-signal-catalog-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-signal-catalog-response
                    'make-create-signal-catalog-response))
 (common-lisp:defun make-create-signal-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-vehicle-error-message :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %create-vehicle-error-code :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %create-vehicle-error-vehicle-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-error 'make-create-vehicle-error))
 (common-lisp:defun make-create-vehicle-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-vehicle-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-vehicle-request-tags :initform
                         common-lisp:nil)
                        (association-behavior :initarg :|associationBehavior|
                         :type
                         (common-lisp:or vehicle-association-behavior
                                         common-lisp:null)
                         :accessor %create-vehicle-request-association-behavior
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor %create-vehicle-request-attributes :initform
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor %create-vehicle-request-decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required"))
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-request-model-manifest-arn :initform
                         (common-lisp:error ":modelmanifestarn is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %create-vehicle-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-request 'make-create-vehicle-request))
 (common-lisp:defun make-create-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags association-behavior attributes
                     decoder-manifest-arn model-manifest-arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-behavior))
      (common-lisp:list
       (common-lisp:cons "associationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-request-item common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-vehicle-request-item-tags :initform
                         common-lisp:nil)
                        (association-behavior :initarg :|associationBehavior|
                         :type
                         (common-lisp:or vehicle-association-behavior
                                         common-lisp:null)
                         :accessor
                         %create-vehicle-request-item-association-behavior
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor %create-vehicle-request-item-attributes
                         :initform common-lisp:nil)
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         %create-vehicle-request-item-decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required"))
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-request-item-model-manifest-arn
                         :initform
                         (common-lisp:error ":modelmanifestarn is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %create-vehicle-request-item-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-request-item
                    'make-create-vehicle-request-item))
 (common-lisp:defun make-create-vehicle-request-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags association-behavior attributes
                     decoder-manifest-arn model-manifest-arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-request-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-behavior))
      (common-lisp:list
       (common-lisp:cons "associationBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-request-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-response common-lisp:nil
                       ((thing-arn :initarg :|thingArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-response-thing-arn :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-response-arn :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %create-vehicle-response-vehicle-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-response 'make-create-vehicle-response))
 (common-lisp:defun make-create-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thing-arn arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vehicle-response-item common-lisp:nil
                       ((thing-arn :initarg :|thingArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-response-item-thing-arn :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %create-vehicle-response-item-arn :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %create-vehicle-response-item-vehicle-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-vehicle-response-item
                    'make-create-vehicle-response-item))
 (common-lisp:defun make-create-vehicle-response-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thing-arn arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vehicle-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "thingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vehicle-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-extra-dimension-node-path-list ()
   '(trivial-types:proper-list node-path))
 (common-lisp:defun |make-data-extra-dimension-node-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass decoder-manifest-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %decoder-manifest-summary-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %decoder-manifest-summary-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %decoder-manifest-summary-status :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %decoder-manifest-summary-description
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %decoder-manifest-summary-model-manifest-arn :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %decoder-manifest-summary-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %decoder-manifest-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decoder-manifest-summary 'make-decoder-manifest-summary))
 (common-lisp:defun make-decoder-manifest-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     status description model-manifest-arn arn name)
   (common-lisp:apply #'common-lisp:make-instance 'decoder-manifest-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decoder-manifest-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition decoder-manifest-validation-exception
     (iotfleetwise-error)
     ((invalid-signals :initarg :|invalidSignals| :initform common-lisp:nil
       :reader decoder-manifest-validation-exception-invalid-signals)
      (invalid-network-interfaces :initarg :|invalidNetworkInterfaces|
       :initform common-lisp:nil :reader
       decoder-manifest-validation-exception-invalid-network-interfaces)
      (message :initarg :|message| :initform common-lisp:nil :reader
       decoder-manifest-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'decoder-manifest-validation-exception
                    'decoder-manifest-validation-exception-invalid-signals
                    'decoder-manifest-validation-exception-invalid-network-interfaces
                    'decoder-manifest-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-campaign-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %delete-campaign-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-request 'make-delete-campaign-request))
 (common-lisp:defun make-delete-campaign-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-campaign-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-campaign-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %delete-campaign-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-response 'make-delete-campaign-response))
 (common-lisp:defun make-delete-campaign-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-decoder-manifest-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-decoder-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-decoder-manifest-request
                    'make-delete-decoder-manifest-request))
 (common-lisp:defun make-delete-decoder-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-decoder-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-decoder-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-decoder-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-decoder-manifest-response
                    'make-delete-decoder-manifest-response))
 (common-lisp:defun make-delete-decoder-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-request common-lisp:nil
                       ((fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %delete-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-request 'make-delete-fleet-request))
 (common-lisp:defun make-delete-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-fleet-response-arn :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %delete-fleet-response-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-response 'make-delete-fleet-response))
 (common-lisp:defun make-delete-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-manifest-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-model-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-model-manifest-request
                    'make-delete-model-manifest-request))
 (common-lisp:defun make-delete-model-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-model-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-model-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-model-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-model-manifest-response
                    'make-delete-model-manifest-response))
 (common-lisp:defun make-delete-model-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-signal-catalog-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-signal-catalog-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-signal-catalog-request
                    'make-delete-signal-catalog-request))
 (common-lisp:defun make-delete-signal-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-signal-catalog-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-signal-catalog-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %delete-signal-catalog-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-signal-catalog-response
                    'make-delete-signal-catalog-response))
 (common-lisp:defun make-delete-signal-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %delete-vehicle-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vehicle-request 'make-delete-vehicle-request))
 (common-lisp:defun make-delete-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vehicle-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %delete-vehicle-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %delete-vehicle-response-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vehicle-response 'make-delete-vehicle-response))
 (common-lisp:defun make-delete-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vehicle-response))
   common-lisp:nil))
(common-lisp:deftype diagnostics-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-vehicle-fleet-request common-lisp:nil
                       ((fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %disassociate-vehicle-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         %disassociate-vehicle-fleet-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-vehicle-fleet-request
                    'make-disassociate-vehicle-fleet-request))
 (common-lisp:defun make-disassociate-vehicle-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-vehicle-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-vehicle-fleet-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-vehicle-fleet-response
                    'make-disassociate-vehicle-fleet-response))
 (common-lisp:defun make-disassociate-vehicle-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-vehicle-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-vehicle-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fleet-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %fleet-summary-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %fleet-summary-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %fleet-summary-signal-catalog-arn :initform
                         (common-lisp:error ":signalcatalogarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %fleet-summary-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %fleet-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %fleet-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'fleet-summary 'make-fleet-summary))
 (common-lisp:defun make-fleet-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     signal-catalog-arn description arn id)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass formatted-vss common-lisp:nil
                       ((vss-json :initarg :|vssJson| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %formatted-vss-vss-json :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'formatted-vss 'make-formatted-vss))
 (common-lisp:defun make-formatted-vss
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vss-json)
   (common-lisp:apply #'common-lisp:make-instance 'formatted-vss
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input formatted-vss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input formatted-vss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vss-json))
      (common-lisp:list
       (common-lisp:cons "vssJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input formatted-vss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fqns ()
   '(trivial-types:proper-list fully-qualified-name))
 (common-lisp:defun |make-fqns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fully-qualified-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fully-qualified-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-campaign-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %get-campaign-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-campaign-request 'make-get-campaign-request))
 (common-lisp:defun make-get-campaign-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-campaign-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-campaign-response-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-campaign-response-creation-time
                         :initform common-lisp:nil)
                        (data-extra-dimensions :initarg :|dataExtraDimensions|
                         :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor %get-campaign-response-data-extra-dimensions
                         :initform common-lisp:nil)
                        (collection-scheme :initarg :|collectionScheme| :type
                         (common-lisp:or collection-scheme common-lisp:null)
                         :accessor %get-campaign-response-collection-scheme
                         :initform common-lisp:nil)
                        (signals-to-collect :initarg :|signalsToCollect| :type
                         (common-lisp:or signal-information-list
                                         common-lisp:null)
                         :accessor %get-campaign-response-signals-to-collect
                         :initform common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or |priority| common-lisp:null) :accessor
                         %get-campaign-response-priority :initform
                         common-lisp:nil)
                        (compression :initarg :|compression| :type
                         (common-lisp:or compression common-lisp:null)
                         :accessor %get-campaign-response-compression :initform
                         common-lisp:nil)
                        (spooling-mode :initarg :|spoolingMode| :type
                         (common-lisp:or spooling-mode common-lisp:null)
                         :accessor %get-campaign-response-spooling-mode
                         :initform common-lisp:nil)
                        (diagnostics-mode :initarg :|diagnosticsMode| :type
                         (common-lisp:or diagnostics-mode common-lisp:null)
                         :accessor %get-campaign-response-diagnostics-mode
                         :initform common-lisp:nil)
                        (post-trigger-collection-duration :initarg
                         :|postTriggerCollectionDuration| :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         %get-campaign-response-post-trigger-collection-duration
                         :initform common-lisp:nil)
                        (expiry-time :initarg :|expiryTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-campaign-response-expiry-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-campaign-response-start-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor %get-campaign-response-status :initform
                         common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-campaign-response-target-arn :initform
                         common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-campaign-response-signal-catalog-arn :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-campaign-response-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-campaign-response-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %get-campaign-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-response 'make-get-campaign-response))
 (common-lisp:defun make-get-campaign-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     data-extra-dimensions collection-scheme signals-to-collect
                     priority compression spooling-mode diagnostics-mode
                     post-trigger-collection-duration expiry-time start-time
                     status target-arn signal-catalog-arn description arn name)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-trigger-collection-duration))
      (common-lisp:list
       (common-lisp:cons "postTriggerCollectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics-mode))
      (common-lisp:list
       (common-lisp:cons "diagnosticsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spooling-mode))
      (common-lisp:list
       (common-lisp:cons "spoolingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signals-to-collect))
      (common-lisp:list
       (common-lisp:cons "signalsToCollect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-scheme))
      (common-lisp:list
       (common-lisp:cons "collectionScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-decoder-manifest-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %get-decoder-manifest-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-decoder-manifest-request
                    'make-get-decoder-manifest-request))
 (common-lisp:defun make-get-decoder-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-decoder-manifest-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-decoder-manifest-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-decoder-manifest-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %get-decoder-manifest-response-status
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-decoder-manifest-response-model-manifest-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-decoder-manifest-response-description
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-decoder-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-decoder-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-decoder-manifest-response
                    'make-get-decoder-manifest-response))
 (common-lisp:defun make-get-decoder-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     status model-manifest-arn description arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fleet-request common-lisp:nil
                       ((fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %get-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-fleet-request 'make-get-fleet-request))
 (common-lisp:defun make-get-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fleet-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-fleet-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-fleet-response-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-fleet-response-signal-catalog-arn :initform
                         (common-lisp:error ":signalcatalogarn is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-fleet-response-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-fleet-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %get-fleet-response-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-fleet-response 'make-get-fleet-response))
 (common-lisp:defun make-get-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     signal-catalog-arn description arn id)
   (common-lisp:apply #'common-lisp:make-instance 'get-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defun make-get-logging-options-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-logging-options-response common-lisp:nil
                       ((cloud-watch-log-delivery :initarg
                         :|cloudWatchLogDelivery| :type
                         (common-lisp:or cloud-watch-log-delivery-options
                                         common-lisp:null)
                         :accessor
                         %get-logging-options-response-cloud-watch-log-delivery
                         :initform
                         (common-lisp:error
                          ":cloudwatchlogdelivery is required"))))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defun make-get-logging-options-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-log-delivery)
   (common-lisp:apply #'common-lisp:make-instance 'get-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-delivery))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-manifest-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %get-model-manifest-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-model-manifest-request
                    'make-get-model-manifest-request))
 (common-lisp:defun make-get-model-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-model-manifest-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-model-manifest-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-model-manifest-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %get-model-manifest-response-status
                         :initform common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-model-manifest-response-signal-catalog-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-model-manifest-response-description
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-model-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %get-model-manifest-response-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-model-manifest-response
                    'make-get-model-manifest-response))
 (common-lisp:defun make-get-model-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     status signal-catalog-arn description arn name)
   (common-lisp:apply #'common-lisp:make-instance 'get-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-register-account-status-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-register-account-status-request
                    'make-get-register-account-status-request))
 (common-lisp:defun make-get-register-account-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-register-account-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-register-account-status-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-register-account-status-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-register-account-status-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (iam-registration-response :initarg
                         :|iamRegistrationResponse| :type
                         (common-lisp:or iam-registration-response
                                         common-lisp:null)
                         :accessor
                         %get-register-account-status-response-iam-registration-response
                         :initform
                         (common-lisp:error
                          ":iamregistrationresponse is required"))
                        (timestream-registration-response :initarg
                         :|timestreamRegistrationResponse| :type
                         (common-lisp:or timestream-registration-response
                                         common-lisp:null)
                         :accessor
                         %get-register-account-status-response-timestream-registration-response
                         :initform
                         (common-lisp:error
                          ":timestreamregistrationresponse is required"))
                        (account-status :initarg :|accountStatus| :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %get-register-account-status-response-account-status
                         :initform
                         (common-lisp:error ":accountstatus is required"))
                        (customer-account-id :initarg :|customerAccountId|
                         :type
                         (common-lisp:or |customerAccountId| common-lisp:null)
                         :accessor
                         %get-register-account-status-response-customer-account-id
                         :initform
                         (common-lisp:error
                          ":customeraccountid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-register-account-status-response
                    'make-get-register-account-status-response))
 (common-lisp:defun make-get-register-account-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     iam-registration-response timestream-registration-response
                     account-status customer-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-register-account-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-account-id))
      (common-lisp:list
       (common-lisp:cons "customerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-status))
      (common-lisp:list
       (common-lisp:cons "accountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-registration-response))
      (common-lisp:list
       (common-lisp:cons "timestreamRegistrationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-registration-response))
      (common-lisp:list
       (common-lisp:cons "iamRegistrationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-register-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signal-catalog-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %get-signal-catalog-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-signal-catalog-request
                    'make-get-signal-catalog-request))
 (common-lisp:defun make-get-signal-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-signal-catalog-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %get-signal-catalog-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-signal-catalog-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (node-counts :initarg :|nodeCounts| :type
                         (common-lisp:or node-counts common-lisp:null)
                         :accessor %get-signal-catalog-response-node-counts
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %get-signal-catalog-response-description
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-signal-catalog-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %get-signal-catalog-response-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-signal-catalog-response
                    'make-get-signal-catalog-response))
 (common-lisp:defun make-get-signal-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     node-counts description arn name)
   (common-lisp:apply #'common-lisp:make-instance 'get-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-counts))
      (common-lisp:list
       (common-lisp:cons "nodeCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-request common-lisp:nil
                       ((vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %get-vehicle-request-vehicle-name :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-request 'make-get-vehicle-request))
 (common-lisp:defun make-get-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-vehicle-response-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %get-vehicle-response-creation-time
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor %get-vehicle-response-attributes :initform
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor %get-vehicle-response-decoder-manifest-arn
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-vehicle-response-model-manifest-arn :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %get-vehicle-response-arn :initform common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %get-vehicle-response-vehicle-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-response 'make-get-vehicle-response))
 (common-lisp:defun make-get-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     attributes decoder-manifest-arn model-manifest-arn arn
                     vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-status-request common-lisp:nil
                       ((vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %get-vehicle-status-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %get-vehicle-status-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-vehicle-status-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-status-request
                    'make-get-vehicle-status-request))
 (common-lisp:defun make-get-vehicle-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vehicle-name max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vehicle-status-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %get-vehicle-status-response-next-token
                         :initform common-lisp:nil)
                        (campaigns :initarg :|campaigns| :type
                         (common-lisp:or vehicle-status-list common-lisp:null)
                         :accessor %get-vehicle-status-response-campaigns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-vehicle-status-response
                    'make-get-vehicle-status-response))
 (common-lisp:defun make-get-vehicle-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token campaigns)
   (common-lisp:apply #'common-lisp:make-instance 'get-vehicle-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaigns))
      (common-lisp:list
       (common-lisp:cons "campaigns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vehicle-status-response))
   common-lisp:nil))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iam-registration-response common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor %iam-registration-response-error-message
                         :initform common-lisp:nil)
                        (registration-status :initarg :|registrationStatus|
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %iam-registration-response-registration-status
                         :initform
                         (common-lisp:error ":registrationstatus is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %iam-registration-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'iam-registration-response
                    'make-iam-registration-response))
 (common-lisp:defun make-iam-registration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message registration-status
                     role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'iam-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iam-resources common-lisp:nil
                       ((role-arn :initarg :|roleArn| :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor %iam-resources-role-arn :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export (common-lisp:list 'iam-resources 'make-iam-resources))
 (common-lisp:defun make-iam-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'iam-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-decoder-manifest-request common-lisp:nil
                       ((network-file-definitions :initarg
                         :|networkFileDefinitions| :type
                         (common-lisp:or network-file-definitions
                                         common-lisp:null)
                         :accessor
                         %import-decoder-manifest-request-network-file-definitions
                         :initform
                         (common-lisp:error
                          ":networkfiledefinitions is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %import-decoder-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-decoder-manifest-request
                    'make-import-decoder-manifest-request))
 (common-lisp:defun make-import-decoder-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-file-definitions name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-file-definitions))
      (common-lisp:list
       (common-lisp:cons "networkFileDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-decoder-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %import-decoder-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %import-decoder-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-decoder-manifest-response
                    'make-import-decoder-manifest-response))
 (common-lisp:defun make-import-decoder-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-signal-catalog-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %import-signal-catalog-request-tags :initform
                         common-lisp:nil)
                        (vss :initarg :|vss| :type
                         (common-lisp:or formatted-vss common-lisp:null)
                         :accessor %import-signal-catalog-request-vss :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %import-signal-catalog-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %import-signal-catalog-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-signal-catalog-request
                    'make-import-signal-catalog-request))
 (common-lisp:defun make-import-signal-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags vss description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vss))
      (common-lisp:list
       (common-lisp:cons "vss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-signal-catalog-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %import-signal-catalog-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %import-signal-catalog-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-signal-catalog-response
                    'make-import-signal-catalog-response))
 (common-lisp:defun make-import-signal-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-signal-catalog-response))
   common-lisp:nil))
(common-lisp:deftype interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype interface-ids ()
   '(trivial-types:proper-list interface-id))
 (common-lisp:defun |make-interface-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interface-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass invalid-network-interface common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or network-interface-failure-reason
                                         common-lisp:null)
                         :accessor %invalid-network-interface-reason :initform
                         common-lisp:nil)
                        (interface-id :initarg :|interfaceId| :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor %invalid-network-interface-interface-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-network-interface
                    'make-invalid-network-interface))
 (common-lisp:defun make-invalid-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason interface-id)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalid-network-interfaces ()
   '(trivial-types:proper-list invalid-network-interface))
 (common-lisp:defun |make-invalid-network-interfaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            invalid-network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-node-exception
     (iotfleetwise-error)
     ((invalid-nodes :initarg :|invalidNodes| :initform common-lisp:nil :reader
       invalid-node-exception-invalid-nodes)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       invalid-node-exception-reason)
      (message :initarg :|message| :initform common-lisp:nil :reader
       invalid-node-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-node-exception
                    'invalid-node-exception-invalid-nodes
                    'invalid-node-exception-reason
                    'invalid-node-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invalid-signal common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %invalid-signal-reason :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor %invalid-signal-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'invalid-signal 'make-invalid-signal))
 (common-lisp:defun make-invalid-signal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason name)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-signal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalid-signal-decoder common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or signal-decoder-failure-reason
                                         common-lisp:null)
                         :accessor %invalid-signal-decoder-reason :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor %invalid-signal-decoder-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-signal-decoder 'make-invalid-signal-decoder))
 (common-lisp:defun make-invalid-signal-decoder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason name)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-signal-decoder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invalid-signal-decoder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invalid-signal-decoders ()
   '(trivial-types:proper-list invalid-signal-decoder))
 (common-lisp:defun |make-invalid-signal-decoders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invalid-signal-decoder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype invalid-signals ()
   '(trivial-types:proper-list invalid-signal))
 (common-lisp:defun |make-invalid-signals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invalid-signal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-signals-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-signals-exception-message)
      (invalid-signals :initarg :|invalidSignals| :initform common-lisp:nil
       :reader invalid-signals-exception-invalid-signals)))
 (common-lisp:export
  (common-lisp:list 'invalid-signals-exception
                    'invalid-signals-exception-message
                    'invalid-signals-exception-invalid-signals)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-id
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or |status| common-lisp:null) :accessor
                         %list-campaigns-request-status :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-campaigns-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-campaigns-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-request 'make-list-campaigns-request))
 (common-lisp:defun make-list-campaigns-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-campaigns-response-next-token
                         :initform common-lisp:nil)
                        (campaign-summaries :initarg :|campaignSummaries| :type
                         (common-lisp:or |campaignSummaries| common-lisp:null)
                         :accessor %list-campaigns-response-campaign-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-response 'make-list-campaigns-response))
 (common-lisp:defun make-list-campaigns-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token campaign-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-summaries))
      (common-lisp:list
       (common-lisp:cons "campaignSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-network-interfaces-request
                       common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-network-interfaces-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-network-interfaces-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-network-interfaces-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-network-interfaces-request
                    'make-list-decoder-manifest-network-interfaces-request))
 (common-lisp:defun make-list-decoder-manifest-network-interfaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-network-interfaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-network-interfaces-response
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-network-interfaces-response-next-token
                         :initform common-lisp:nil)
                        (network-interfaces :initarg :|networkInterfaces| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         %list-decoder-manifest-network-interfaces-response-network-interfaces
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-network-interfaces-response
                    'make-list-decoder-manifest-network-interfaces-response))
 (common-lisp:defun make-list-decoder-manifest-network-interfaces-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token network-interfaces)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-network-interfaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-network-interfaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-signals-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-signals-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-signals-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %list-decoder-manifest-signals-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-signals-request
                    'make-list-decoder-manifest-signals-request))
 (common-lisp:defun make-list-decoder-manifest-signals-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-signals-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifest-signals-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-decoder-manifest-signals-response-next-token
                         :initform common-lisp:nil)
                        (signal-decoders :initarg :|signalDecoders| :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         %list-decoder-manifest-signals-response-signal-decoders
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifest-signals-response
                    'make-list-decoder-manifest-signals-response))
 (common-lisp:defun make-list-decoder-manifest-signals-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token signal-decoders)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifest-signals-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-decoders))
      (common-lisp:list
       (common-lisp:cons "signalDecoders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifest-signals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifests-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-decoder-manifests-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-decoder-manifests-request-next-token
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %list-decoder-manifests-request-model-manifest-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifests-request
                    'make-list-decoder-manifests-request))
 (common-lisp:defun make-list-decoder-manifests-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     model-manifest-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-decoder-manifests-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-decoder-manifests-response-next-token
                         :initform common-lisp:nil)
                        (summaries :initarg :|summaries| :type
                         (common-lisp:or |decoderManifestSummaries|
                                         common-lisp:null)
                         :accessor %list-decoder-manifests-response-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-decoder-manifests-response
                    'make-list-decoder-manifests-response))
 (common-lisp:defun make-list-decoder-manifests-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-decoder-manifests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-decoder-manifests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-for-vehicle-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-fleets-for-vehicle-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-fleets-for-vehicle-request-next-token
                         :initform common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor
                         %list-fleets-for-vehicle-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'list-fleets-for-vehicle-request
                    'make-list-fleets-for-vehicle-request))
 (common-lisp:defun make-list-fleets-for-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fleets-for-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-for-vehicle-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-fleets-for-vehicle-response-next-token
                         :initform common-lisp:nil)
                        (fleets :initarg :|fleets| :type
                         (common-lisp:or |fleets| common-lisp:null) :accessor
                         %list-fleets-for-vehicle-response-fleets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-for-vehicle-response
                    'make-list-fleets-for-vehicle-response))
 (common-lisp:defun make-list-fleets-for-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleets)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-fleets-for-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleets))
      (common-lisp:list
       (common-lisp:cons "fleets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fleets-for-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-fleets-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-fleets-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-request 'make-list-fleets-request))
 (common-lisp:defun make-list-fleets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-fleets-response-next-token :initform
                         common-lisp:nil)
                        (fleet-summaries :initarg :|fleetSummaries| :type
                         (common-lisp:or |fleetSummaries| common-lisp:null)
                         :accessor %list-fleets-response-fleet-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-response 'make-list-fleets-response))
 (common-lisp:defun make-list-fleets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-summaries))
      (common-lisp:list
       (common-lisp:cons "fleetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifest-nodes-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         %list-model-manifest-nodes-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-model-manifest-nodes-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %list-model-manifest-nodes-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-model-manifest-nodes-request
                    'make-list-model-manifest-nodes-request))
 (common-lisp:defun make-list-model-manifest-nodes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifest-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifest-nodes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-model-manifest-nodes-response-next-token
                         :initform common-lisp:nil)
                        (nodes :initarg :|nodes| :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         %list-model-manifest-nodes-response-nodes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-model-manifest-nodes-response
                    'make-list-model-manifest-nodes-response))
 (common-lisp:defun make-list-model-manifest-nodes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token nodes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifest-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifest-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifests-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-model-manifests-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-model-manifests-request-next-token
                         :initform common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %list-model-manifests-request-signal-catalog-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-model-manifests-request
                    'make-list-model-manifests-request))
 (common-lisp:defun make-list-model-manifests-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     signal-catalog-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-model-manifests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-model-manifests-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-model-manifests-response-next-token
                         :initform common-lisp:nil)
                        (summaries :initarg :|summaries| :type
                         (common-lisp:or |modelManifestSummaries|
                                         common-lisp:null)
                         :accessor %list-model-manifests-response-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-model-manifests-response
                    'make-list-model-manifests-response))
 (common-lisp:defun make-list-model-manifests-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-model-manifests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-manifests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalog-nodes-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor
                         %list-signal-catalog-nodes-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-signal-catalog-nodes-request-next-token
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %list-signal-catalog-nodes-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalog-nodes-request
                    'make-list-signal-catalog-nodes-request))
 (common-lisp:defun make-list-signal-catalog-nodes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalog-nodes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalog-nodes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor
                         %list-signal-catalog-nodes-response-next-token
                         :initform common-lisp:nil)
                        (nodes :initarg :|nodes| :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         %list-signal-catalog-nodes-response-nodes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalog-nodes-response
                    'make-list-signal-catalog-nodes-response))
 (common-lisp:defun make-list-signal-catalog-nodes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token nodes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalog-nodes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalog-nodes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalogs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-signal-catalogs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-signal-catalogs-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalogs-request
                    'make-list-signal-catalogs-request))
 (common-lisp:defun make-list-signal-catalogs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-signal-catalogs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signal-catalogs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-signal-catalogs-response-next-token
                         :initform common-lisp:nil)
                        (summaries :initarg :|summaries| :type
                         (common-lisp:or |signalCatalogSummaries|
                                         common-lisp:null)
                         :accessor %list-signal-catalogs-response-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-signal-catalogs-response
                    'make-list-signal-catalogs-response))
 (common-lisp:defun make-list-signal-catalogs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signal-catalogs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signal-catalogs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-in-fleet-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |maxResults| common-lisp:null)
                         :accessor %list-vehicles-in-fleet-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-vehicles-in-fleet-request-next-token
                         :initform common-lisp:nil)
                        (fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %list-vehicles-in-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-in-fleet-request
                    'make-list-vehicles-in-fleet-request))
 (common-lisp:defun make-list-vehicles-in-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vehicles-in-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-in-fleet-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-vehicles-in-fleet-response-next-token
                         :initform common-lisp:nil)
                        (vehicles :initarg :|vehicles| :type
                         (common-lisp:or |vehicles| common-lisp:null) :accessor
                         %list-vehicles-in-fleet-response-vehicles :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-in-fleet-response
                    'make-list-vehicles-in-fleet-response))
 (common-lisp:defun make-list-vehicles-in-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vehicles)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vehicles-in-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicles))
      (common-lisp:list
       (common-lisp:cons "vehicles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-in-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or |listVehiclesMaxResults|
                                         common-lisp:null)
                         :accessor %list-vehicles-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-vehicles-request-next-token :initform
                         common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %list-vehicles-request-model-manifest-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-request 'make-list-vehicles-request))
 (common-lisp:defun make-list-vehicles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     model-manifest-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-vehicles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vehicles-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or |nextToken| common-lisp:null)
                         :accessor %list-vehicles-response-next-token :initform
                         common-lisp:nil)
                        (vehicle-summaries :initarg :|vehicleSummaries| :type
                         (common-lisp:or |vehicleSummaries| common-lisp:null)
                         :accessor %list-vehicles-response-vehicle-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vehicles-response 'make-list-vehicles-response))
 (common-lisp:defun make-list-vehicles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vehicle-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-vehicles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-summaries))
      (common-lisp:list
       (common-lisp:cons "vehicleSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vehicles-response))
   common-lisp:nil))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:deftype manifest-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass model-manifest-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %model-manifest-summary-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %model-manifest-summary-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %model-manifest-summary-status :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %model-manifest-summary-description
                         :initform common-lisp:nil)
                        (signal-catalog-arn :initarg :|signalCatalogArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %model-manifest-summary-signal-catalog-arn :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %model-manifest-summary-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %model-manifest-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'model-manifest-summary 'make-model-manifest-summary))
 (common-lisp:defun make-model-manifest-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     status description signal-catalog-arn arn name)
   (common-lisp:apply #'common-lisp:make-instance 'model-manifest-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-catalog-arn))
      (common-lisp:list
       (common-lisp:cons "signalCatalogArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-manifest-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-signals-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-model-signals-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype network-file-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass network-file-definition common-lisp:nil
                       ((can-dbc :initarg :|canDbc| :type
                         (common-lisp:or can-dbc-definition common-lisp:null)
                         :accessor %network-file-definition-can-dbc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-file-definition 'make-network-file-definition))
 (common-lisp:defun make-network-file-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key can-dbc)
   (common-lisp:apply #'common-lisp:make-instance 'network-file-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-dbc))
      (common-lisp:list
       (common-lisp:cons "canDbc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-file-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-file-definitions ()
   '(trivial-types:proper-list network-file-definition))
 (common-lisp:defun |make-network-file-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-file-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-files-list ()
   '(trivial-types:proper-list network-file-blob))
 (common-lisp:defun |make-network-files-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-file-blob))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((obd-interface :initarg :|obdInterface| :type
                         (common-lisp:or obd-interface common-lisp:null)
                         :accessor %network-interface-obd-interface :initform
                         common-lisp:nil)
                        (can-interface :initarg :|canInterface| :type
                         (common-lisp:or can-interface common-lisp:null)
                         :accessor %network-interface-can-interface :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor %network-interface-type :initform
                         (common-lisp:error ":type is required"))
                        (interface-id :initarg :|interfaceId| :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor %network-interface-interface-id :initform
                         (common-lisp:error ":interfaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defun make-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key obd-interface can-interface type
                     interface-id)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-interface))
      (common-lisp:list
       (common-lisp:cons "canInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-interface))
      (common-lisp:list
       (common-lisp:cons "obdInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:deftype network-interface-failure-reason () 'common-lisp:string)
(common-lisp:deftype network-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun |make-network-interfaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((attribute :initarg :|attribute| :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         %node-attribute :initform common-lisp:nil)
                        (actuator :initarg :|actuator| :type
                         (common-lisp:or actuator common-lisp:null) :accessor
                         %node-actuator :initform common-lisp:nil)
                        (sensor :initarg :|sensor| :type
                         (common-lisp:or sensor common-lisp:null) :accessor
                         %node-sensor :initform common-lisp:nil)
                        (branch :initarg :|branch| :type
                         (common-lisp:or branch common-lisp:null) :accessor
                         %node-branch :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defun make-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute actuator sensor branch)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensor))
      (common-lisp:list
       (common-lisp:cons "sensor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actuator))
      (common-lisp:list
       (common-lisp:cons "actuator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-counts common-lisp:nil
                       ((total-actuators :initarg :|totalActuators| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %node-counts-total-actuators :initform
                         common-lisp:nil)
                        (total-attributes :initarg :|totalAttributes| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %node-counts-total-attributes :initform
                         common-lisp:nil)
                        (total-sensors :initarg :|totalSensors| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %node-counts-total-sensors :initform common-lisp:nil)
                        (total-branches :initarg :|totalBranches| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %node-counts-total-branches :initform common-lisp:nil)
                        (total-nodes :initarg :|totalNodes| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %node-counts-total-nodes :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'node-counts 'make-node-counts))
 (common-lisp:defun make-node-counts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-actuators total-attributes
                     total-sensors total-branches total-nodes)
   (common-lisp:apply #'common-lisp:make-instance 'node-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-nodes))
      (common-lisp:list
       (common-lisp:cons "totalNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-branches))
      (common-lisp:list
       (common-lisp:cons "totalBranches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-sensors))
      (common-lisp:list
       (common-lisp:cons "totalSensors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-attributes))
      (common-lisp:list
       (common-lisp:cons "totalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actuators))
      (common-lisp:list
       (common-lisp:cons "totalActuators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node-counts))
   common-lisp:nil))
(common-lisp:deftype node-data-type () 'common-lisp:string)
(common-lisp:deftype node-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-paths () '(trivial-types:proper-list node-path))
 (common-lisp:defun |make-node-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype nodes () '(trivial-types:proper-list node))
 (common-lisp:defun |make-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:deftype obd-bitmask-length () 'common-lisp:integer)
(common-lisp:deftype obd-byte-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass obd-interface common-lisp:nil
                       ((has-transmission-ecu :initarg :|hasTransmissionEcu|
                         :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %obd-interface-has-transmission-ecu
                         :initform common-lisp:nil)
                        (use-extended-ids :initarg :|useExtendedIds| :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor %obd-interface-use-extended-ids :initform
                         common-lisp:nil)
                        (dtc-request-interval-seconds :initarg
                         :|dtcRequestIntervalSeconds| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-interface-dtc-request-interval-seconds
                         :initform common-lisp:nil)
                        (pid-request-interval-seconds :initarg
                         :|pidRequestIntervalSeconds| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-interface-pid-request-interval-seconds
                         :initform common-lisp:nil)
                        (obd-standard :initarg :|obdStandard| :type
                         (common-lisp:or obd-standard common-lisp:null)
                         :accessor %obd-interface-obd-standard :initform
                         common-lisp:nil)
                        (request-message-id :initarg :|requestMessageId| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-interface-request-message-id :initform
                         (common-lisp:error ":requestmessageid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or obd-interface-name common-lisp:null)
                         :accessor %obd-interface-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'obd-interface 'make-obd-interface))
 (common-lisp:defun make-obd-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key has-transmission-ecu use-extended-ids
                     dtc-request-interval-seconds pid-request-interval-seconds
                     obd-standard request-message-id name)
   (common-lisp:apply #'common-lisp:make-instance 'obd-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obd-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obd-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-message-id))
      (common-lisp:list
       (common-lisp:cons "requestMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-standard))
      (common-lisp:list
       (common-lisp:cons "obdStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pid-request-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "pidRequestIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dtc-request-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "dtcRequestIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-extended-ids))
      (common-lisp:list
       (common-lisp:cons "useExtendedIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-transmission-ecu))
      (common-lisp:list
       (common-lisp:cons "hasTransmissionEcu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obd-interface))
   common-lisp:nil))
(common-lisp:deftype obd-interface-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass obd-signal common-lisp:nil
                       ((bit-mask-length :initarg :|bitMaskLength| :type
                         (common-lisp:or obd-bitmask-length common-lisp:null)
                         :accessor %obd-signal-bit-mask-length :initform
                         common-lisp:nil)
                        (bit-right-shift :initarg :|bitRightShift| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-signal-bit-right-shift :initform
                         common-lisp:nil)
                        (byte-length :initarg :|byteLength| :type
                         (common-lisp:or obd-byte-length common-lisp:null)
                         :accessor %obd-signal-byte-length :initform
                         (common-lisp:error ":bytelength is required"))
                        (start-byte :initarg :|startByte| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-signal-start-byte :initform
                         (common-lisp:error ":startbyte is required"))
                        (offset :initarg :|offset| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %obd-signal-offset :initform
                         (common-lisp:error ":offset is required"))
                        (scaling :initarg :|scaling| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %obd-signal-scaling :initform
                         (common-lisp:error ":scaling is required"))
                        (pid :initarg :|pid| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-signal-pid :initform
                         (common-lisp:error ":pid is required"))
                        (service-mode :initarg :|serviceMode| :type
                         (common-lisp:or |nonNegativeInteger| common-lisp:null)
                         :accessor %obd-signal-service-mode :initform
                         (common-lisp:error ":servicemode is required"))
                        (pid-response-length :initarg :|pidResponseLength|
                         :type
                         (common-lisp:or |positiveInteger| common-lisp:null)
                         :accessor %obd-signal-pid-response-length :initform
                         (common-lisp:error
                          ":pidresponselength is required"))))
 (common-lisp:export (common-lisp:list 'obd-signal 'make-obd-signal))
 (common-lisp:defun make-obd-signal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bit-mask-length bit-right-shift
                     byte-length start-byte offset scaling pid service-mode
                     pid-response-length)
   (common-lisp:apply #'common-lisp:make-instance 'obd-signal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obd-signal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obd-signal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-response-length))
      (common-lisp:list
       (common-lisp:cons "pidResponseLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-mode))
      (common-lisp:list
       (common-lisp:cons "serviceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling))
      (common-lisp:list
       (common-lisp:cons "scaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-byte))
      (common-lisp:list
       (common-lisp:cons "startByte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-length))
      (common-lisp:list
       (common-lisp:cons "byteLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-right-shift))
      (common-lisp:list
       (common-lisp:cons "bitRightShift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-mask-length))
      (common-lisp:list
       (common-lisp:cons "bitMaskLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obd-signal))
   common-lisp:nil))
(common-lisp:deftype obd-standard () 'common-lisp:string)
(common-lisp:deftype protocol-name () 'common-lisp:string)
(common-lisp:deftype protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-logging-options-request common-lisp:nil
                       ((cloud-watch-log-delivery :initarg
                         :|cloudWatchLogDelivery| :type
                         (common-lisp:or cloud-watch-log-delivery-options
                                         common-lisp:null)
                         :accessor
                         %put-logging-options-request-cloud-watch-log-delivery
                         :initform
                         (common-lisp:error
                          ":cloudwatchlogdelivery is required"))))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-request
                    'make-put-logging-options-request))
 (common-lisp:defun make-put-logging-options-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-log-delivery)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-delivery))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-logging-options-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-logging-options-response
                    'make-put-logging-options-response))
 (common-lisp:defun make-put-logging-options-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-logging-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-account-request common-lisp:nil
                       ((iam-resources :initarg :|iamResources| :type
                         (common-lisp:or iam-resources common-lisp:null)
                         :accessor %register-account-request-iam-resources
                         :initform common-lisp:nil)
                        (timestream-resources :initarg :|timestreamResources|
                         :type
                         (common-lisp:or timestream-resources common-lisp:null)
                         :accessor
                         %register-account-request-timestream-resources
                         :initform
                         (common-lisp:error
                          ":timestreamresources is required"))))
 (common-lisp:export
  (common-lisp:list 'register-account-request 'make-register-account-request))
 (common-lisp:defun make-register-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-resources timestream-resources)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-resources))
      (common-lisp:list
       (common-lisp:cons "timestreamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-resources))
      (common-lisp:list
       (common-lisp:cons "iamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-account-response common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %register-account-response-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %register-account-response-creation-time
                         :initform
                         (common-lisp:error ":creationtime is required"))
                        (iam-resources :initarg :|iamResources| :type
                         (common-lisp:or iam-resources common-lisp:null)
                         :accessor %register-account-response-iam-resources
                         :initform
                         (common-lisp:error ":iamresources is required"))
                        (timestream-resources :initarg :|timestreamResources|
                         :type
                         (common-lisp:or timestream-resources common-lisp:null)
                         :accessor
                         %register-account-response-timestream-resources
                         :initform
                         (common-lisp:error
                          ":timestreamresources is required"))
                        (register-account-status :initarg
                         :|registerAccountStatus| :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %register-account-response-register-account-status
                         :initform
                         (common-lisp:error
                          ":registeraccountstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'register-account-response
                    'make-register-account-response))
 (common-lisp:defun make-register-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     iam-resources timestream-resources
                     register-account-status)
   (common-lisp:apply #'common-lisp:make-instance 'register-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'register-account-status))
      (common-lisp:list
       (common-lisp:cons "registerAccountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-resources))
      (common-lisp:list
       (common-lisp:cons "timestreamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-resources))
      (common-lisp:list
       (common-lisp:cons "iamResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-account-response))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass sensor common-lisp:nil
                       ((max :initarg :|max| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %sensor-max :initform common-lisp:nil)
                        (min :initarg :|min| :type
                         (common-lisp:or common-lisp:double-float
                                         common-lisp:null)
                         :accessor %sensor-min :initform common-lisp:nil)
                        (allowed-values :initarg :|allowedValues| :type
                         (common-lisp:or |listOfStrings| common-lisp:null)
                         :accessor %sensor-allowed-values :initform
                         common-lisp:nil)
                        (unit :initarg :|unit| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %sensor-unit :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %sensor-description :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or node-data-type common-lisp:null)
                         :accessor %sensor-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (fully-qualified-name :initarg :|fullyQualifiedName|
                         :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %sensor-fully-qualified-name :initform
                         (common-lisp:error
                          ":fullyqualifiedname is required"))))
 (common-lisp:export (common-lisp:list 'sensor 'make-sensor))
 (common-lisp:defun make-sensor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max min allowed-values unit description
                     data-type fully-qualified-name)
   (common-lisp:apply #'common-lisp:make-instance 'sensor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sensor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sensor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sensor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-catalog-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor
                         %signal-catalog-summary-last-modification-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %signal-catalog-summary-creation-time
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %signal-catalog-summary-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %signal-catalog-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'signal-catalog-summary 'make-signal-catalog-summary))
 (common-lisp:defun make-signal-catalog-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time arn
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'signal-catalog-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-catalog-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-decoder common-lisp:nil
                       ((obd-signal :initarg :|obdSignal| :type
                         (common-lisp:or obd-signal common-lisp:null) :accessor
                         %signal-decoder-obd-signal :initform common-lisp:nil)
                        (can-signal :initarg :|canSignal| :type
                         (common-lisp:or can-signal common-lisp:null) :accessor
                         %signal-decoder-can-signal :initform common-lisp:nil)
                        (interface-id :initarg :|interfaceId| :type
                         (common-lisp:or interface-id common-lisp:null)
                         :accessor %signal-decoder-interface-id :initform
                         (common-lisp:error ":interfaceid is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or signal-decoder-type common-lisp:null)
                         :accessor %signal-decoder-type :initform
                         (common-lisp:error ":type is required"))
                        (fully-qualified-name :initarg :|fullyQualifiedName|
                         :type
                         (common-lisp:or fully-qualified-name common-lisp:null)
                         :accessor %signal-decoder-fully-qualified-name
                         :initform
                         (common-lisp:error
                          ":fullyqualifiedname is required"))))
 (common-lisp:export (common-lisp:list 'signal-decoder 'make-signal-decoder))
 (common-lisp:defun make-signal-decoder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key obd-signal can-signal interface-id type
                     fully-qualified-name)
   (common-lisp:apply #'common-lisp:make-instance 'signal-decoder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signal-decoder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signal-decoder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fully-qualified-name))
      (common-lisp:list
       (common-lisp:cons "fullyQualifiedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-id))
      (common-lisp:list
       (common-lisp:cons "interfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-signal))
      (common-lisp:list
       (common-lisp:cons "canSignal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obd-signal))
      (common-lisp:list
       (common-lisp:cons "obdSignal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signal-decoder))
   common-lisp:nil))
(common-lisp:deftype signal-decoder-failure-reason () 'common-lisp:string)
(common-lisp:deftype signal-decoder-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype signal-decoders ()
   '(trivial-types:proper-list signal-decoder))
 (common-lisp:defun |make-signal-decoders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-decoder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass signal-information common-lisp:nil
                       ((minimum-sampling-interval-ms :initarg
                         :|minimumSamplingIntervalMs| :type
                         (common-lisp:or |uint32| common-lisp:null) :accessor
                         %signal-information-minimum-sampling-interval-ms
                         :initform common-lisp:nil)
                        (max-sample-count :initarg :|maxSampleCount| :type
                         (common-lisp:or |maxSampleCount| common-lisp:null)
                         :accessor %signal-information-max-sample-count
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |wildcardSignalName| common-lisp:null)
                         :accessor %signal-information-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'signal-information 'make-signal-information))
 (common-lisp:defun make-signal-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-sampling-interval-ms
                     max-sample-count name)
   (common-lisp:apply #'common-lisp:make-instance 'signal-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signal-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signal-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sample-count))
      (common-lisp:list
       (common-lisp:cons "maxSampleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-sampling-interval-ms))
      (common-lisp:list
       (common-lisp:cons "minimumSamplingIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signal-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype signal-information-list ()
   '(trivial-types:proper-list signal-information))
 (common-lisp:defun |make-signal-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype spooling-mode () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code
                    'throttling-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass time-based-collection-scheme common-lisp:nil
                       ((period-ms :initarg :|periodMs| :type
                         (common-lisp:or |collectionPeriodMs| common-lisp:null)
                         :accessor %time-based-collection-scheme-period-ms
                         :initform
                         (common-lisp:error ":periodms is required"))))
 (common-lisp:export
  (common-lisp:list 'time-based-collection-scheme
                    'make-time-based-collection-scheme))
 (common-lisp:defun make-time-based-collection-scheme
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key period-ms)
   (common-lisp:apply #'common-lisp:make-instance 'time-based-collection-scheme
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-ms))
      (common-lisp:list
       (common-lisp:cons "periodMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-based-collection-scheme))
   common-lisp:nil))
(common-lisp:deftype timestream-database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestream-registration-response common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or |errorMessage| common-lisp:null)
                         :accessor
                         %timestream-registration-response-error-message
                         :initform common-lisp:nil)
                        (registration-status :initarg :|registrationStatus|
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %timestream-registration-response-registration-status
                         :initform
                         (common-lisp:error ":registrationstatus is required"))
                        (timestream-table-arn :initarg :|timestreamTableArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         %timestream-registration-response-timestream-table-arn
                         :initform common-lisp:nil)
                        (timestream-database-arn :initarg
                         :|timestreamDatabaseArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %timestream-registration-response-timestream-database-arn
                         :initform common-lisp:nil)
                        (timestream-table-name :initarg :|timestreamTableName|
                         :type
                         (common-lisp:or timestream-table-name
                                         common-lisp:null)
                         :accessor
                         %timestream-registration-response-timestream-table-name
                         :initform
                         (common-lisp:error
                          ":timestreamtablename is required"))
                        (timestream-database-name :initarg
                         :|timestreamDatabaseName| :type
                         (common-lisp:or timestream-database-name
                                         common-lisp:null)
                         :accessor
                         %timestream-registration-response-timestream-database-name
                         :initform
                         (common-lisp:error
                          ":timestreamdatabasename is required"))))
 (common-lisp:export
  (common-lisp:list 'timestream-registration-response
                    'make-timestream-registration-response))
 (common-lisp:defun make-timestream-registration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message registration-status
                     timestream-table-arn timestream-database-arn
                     timestream-table-name timestream-database-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'timestream-registration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-name))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-name))
      (common-lisp:list
       (common-lisp:cons "timestreamTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-arn))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-arn))
      (common-lisp:list
       (common-lisp:cons "timestreamTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timestream-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timestream-resources common-lisp:nil
                       ((timestream-table-name :initarg :|timestreamTableName|
                         :type
                         (common-lisp:or timestream-table-name
                                         common-lisp:null)
                         :accessor %timestream-resources-timestream-table-name
                         :initform
                         (common-lisp:error
                          ":timestreamtablename is required"))
                        (timestream-database-name :initarg
                         :|timestreamDatabaseName| :type
                         (common-lisp:or timestream-database-name
                                         common-lisp:null)
                         :accessor
                         %timestream-resources-timestream-database-name
                         :initform
                         (common-lisp:error
                          ":timestreamdatabasename is required"))))
 (common-lisp:export
  (common-lisp:list 'timestream-resources 'make-timestream-resources))
 (common-lisp:defun make-timestream-resources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestream-table-name
                     timestream-database-name)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-resources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-database-name))
      (common-lisp:list
       (common-lisp:cons "timestreamDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestream-table-name))
      (common-lisp:list
       (common-lisp:cons "timestreamTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-resources))
   common-lisp:nil))
(common-lisp:deftype timestream-table-name () 'common-lisp:string)
(common-lisp:deftype trigger-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-campaign-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-campaign-request common-lisp:nil
                       ((action :initarg :|action| :type
                         (common-lisp:or update-campaign-action
                                         common-lisp:null)
                         :accessor %update-campaign-request-action :initform
                         (common-lisp:error ":action is required"))
                        (data-extra-dimensions :initarg :|dataExtraDimensions|
                         :type
                         (common-lisp:or data-extra-dimension-node-path-list
                                         common-lisp:null)
                         :accessor
                         %update-campaign-request-data-extra-dimensions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-campaign-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %update-campaign-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-campaign-request 'make-update-campaign-request))
 (common-lisp:defun make-update-campaign-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action data-extra-dimensions description
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'update-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-extra-dimensions))
      (common-lisp:list
       (common-lisp:cons "dataExtraDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-campaign-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or campaign-status common-lisp:null)
                         :accessor %update-campaign-response-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |campaignName| common-lisp:null)
                         :accessor %update-campaign-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-campaign-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-campaign-response 'make-update-campaign-response))
 (common-lisp:defun make-update-campaign-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status name arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-decoder-manifest-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %update-decoder-manifest-request-status
                         :initform common-lisp:nil)
                        (network-interfaces-to-remove :initarg
                         :|networkInterfacesToRemove| :type
                         (common-lisp:or interface-ids common-lisp:null)
                         :accessor
                         %update-decoder-manifest-request-network-interfaces-to-remove
                         :initform common-lisp:nil)
                        (network-interfaces-to-update :initarg
                         :|networkInterfacesToUpdate| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         %update-decoder-manifest-request-network-interfaces-to-update
                         :initform common-lisp:nil)
                        (network-interfaces-to-add :initarg
                         :|networkInterfacesToAdd| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         %update-decoder-manifest-request-network-interfaces-to-add
                         :initform common-lisp:nil)
                        (signal-decoders-to-remove :initarg
                         :|signalDecodersToRemove| :type
                         (common-lisp:or fqns common-lisp:null) :accessor
                         %update-decoder-manifest-request-signal-decoders-to-remove
                         :initform common-lisp:nil)
                        (signal-decoders-to-update :initarg
                         :|signalDecodersToUpdate| :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         %update-decoder-manifest-request-signal-decoders-to-update
                         :initform common-lisp:nil)
                        (signal-decoders-to-add :initarg :|signalDecodersToAdd|
                         :type
                         (common-lisp:or signal-decoders common-lisp:null)
                         :accessor
                         %update-decoder-manifest-request-signal-decoders-to-add
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-decoder-manifest-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-decoder-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-decoder-manifest-request
                    'make-update-decoder-manifest-request))
 (common-lisp:defun make-update-decoder-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status network-interfaces-to-remove
                     network-interfaces-to-update network-interfaces-to-add
                     signal-decoders-to-remove signal-decoders-to-update
                     signal-decoders-to-add description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-decoder-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-add))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-update))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-decoders-to-remove))
      (common-lisp:list
       (common-lisp:cons "signalDecodersToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-add))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-update))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interfaces-to-remove))
      (common-lisp:list
       (common-lisp:cons "networkInterfacesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-decoder-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-decoder-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-decoder-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-decoder-manifest-response
                    'make-update-decoder-manifest-response))
 (common-lisp:defun make-update-decoder-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-decoder-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-decoder-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-fleet-request-description :initform
                         common-lisp:nil)
                        (fleet-id :initarg :|fleetId| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %update-fleet-request-fleet-id :initform
                         (common-lisp:error ":fleetid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-fleet-request 'make-update-fleet-request))
 (common-lisp:defun make-update-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "fleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-fleet-response-arn :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or |fleetId| common-lisp:null) :accessor
                         %update-fleet-response-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-response 'make-update-fleet-response))
 (common-lisp:defun make-update-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-response))
   common-lisp:nil))
(common-lisp:deftype update-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-model-manifest-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or manifest-status common-lisp:null)
                         :accessor %update-model-manifest-request-status
                         :initform common-lisp:nil)
                        (nodes-to-remove :initarg :|nodesToRemove| :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         %update-model-manifest-request-nodes-to-remove
                         :initform common-lisp:nil)
                        (nodes-to-add :initarg :|nodesToAdd| :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         %update-model-manifest-request-nodes-to-add :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-model-manifest-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-model-manifest-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-model-manifest-request
                    'make-update-model-manifest-request))
 (common-lisp:defun make-update-model-manifest-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status nodes-to-remove nodes-to-add
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-manifest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-add))
      (common-lisp:list
       (common-lisp:cons "nodesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-remove))
      (common-lisp:list
       (common-lisp:cons "nodesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-model-manifest-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-model-manifest-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-model-manifest-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-model-manifest-response
                    'make-update-model-manifest-response))
 (common-lisp:defun make-update-model-manifest-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-model-manifest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-manifest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-signal-catalog-request common-lisp:nil
                       ((nodes-to-remove :initarg :|nodesToRemove| :type
                         (common-lisp:or node-paths common-lisp:null) :accessor
                         %update-signal-catalog-request-nodes-to-remove
                         :initform common-lisp:nil)
                        (nodes-to-update :initarg :|nodesToUpdate| :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         %update-signal-catalog-request-nodes-to-update
                         :initform common-lisp:nil)
                        (nodes-to-add :initarg :|nodesToAdd| :type
                         (common-lisp:or nodes common-lisp:null) :accessor
                         %update-signal-catalog-request-nodes-to-add :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or |description| common-lisp:null)
                         :accessor %update-signal-catalog-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-signal-catalog-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-signal-catalog-request
                    'make-update-signal-catalog-request))
 (common-lisp:defun make-update-signal-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nodes-to-remove nodes-to-update
                     nodes-to-add description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-signal-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-add))
      (common-lisp:list
       (common-lisp:cons "nodesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-update))
      (common-lisp:list
       (common-lisp:cons "nodesToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes-to-remove))
      (common-lisp:list
       (common-lisp:cons "nodesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-signal-catalog-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-signal-catalog-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or |resourceName| common-lisp:null)
                         :accessor %update-signal-catalog-response-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-signal-catalog-response
                    'make-update-signal-catalog-response))
 (common-lisp:defun make-update-signal-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-signal-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signal-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %update-vehicle-error-message :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or |number| common-lisp:null) :accessor
                         %update-vehicle-error-code :initform common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %update-vehicle-error-vehicle-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-error 'make-update-vehicle-error))
 (common-lisp:defun make-update-vehicle-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-vehicle-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-request common-lisp:nil
                       ((attribute-update-mode :initarg :|attributeUpdateMode|
                         :type (common-lisp:or update-mode common-lisp:null)
                         :accessor
                         %update-vehicle-request-attribute-update-mode
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor %update-vehicle-request-attributes :initform
                         common-lisp:nil)
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor %update-vehicle-request-decoder-manifest-arn
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-vehicle-request-model-manifest-arn :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %update-vehicle-request-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-request 'make-update-vehicle-request))
 (common-lisp:defun make-update-vehicle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-update-mode attributes
                     decoder-manifest-arn model-manifest-arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-update-mode))
      (common-lisp:list
       (common-lisp:cons "attributeUpdateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-request-item common-lisp:nil
                       ((attribute-update-mode :initarg :|attributeUpdateMode|
                         :type (common-lisp:or update-mode common-lisp:null)
                         :accessor
                         %update-vehicle-request-item-attribute-update-mode
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or |attributesMap| common-lisp:null)
                         :accessor %update-vehicle-request-item-attributes
                         :initform common-lisp:nil)
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor
                         %update-vehicle-request-item-decoder-manifest-arn
                         :initform common-lisp:nil)
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-vehicle-request-item-model-manifest-arn
                         :initform common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %update-vehicle-request-item-vehicle-name
                         :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-request-item
                    'make-update-vehicle-request-item))
 (common-lisp:defun make-update-vehicle-request-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-update-mode attributes
                     decoder-manifest-arn model-manifest-arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-request-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-update-mode))
      (common-lisp:list
       (common-lisp:cons "attributeUpdateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-request-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-vehicle-response-arn :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %update-vehicle-response-vehicle-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-response 'make-update-vehicle-response))
 (common-lisp:defun make-update-vehicle-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vehicle-response-item common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %update-vehicle-response-item-arn :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %update-vehicle-response-item-vehicle-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-vehicle-response-item
                    'make-update-vehicle-response-item))
 (common-lisp:defun make-update-vehicle-response-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-vehicle-response-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vehicle-response-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iotfleetwise-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vehicle-association-behavior () 'common-lisp:string)
(common-lisp:deftype vehicle-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vehicle-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or vehicle-state common-lisp:null)
                         :accessor %vehicle-status-status :initform
                         common-lisp:nil)
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %vehicle-status-vehicle-name :initform
                         common-lisp:nil)
                        (campaign-name :initarg :|campaignName| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %vehicle-status-campaign-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vehicle-status 'make-vehicle-status))
 (common-lisp:defun make-vehicle-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status vehicle-name campaign-name)
   (common-lisp:apply #'common-lisp:make-instance 'vehicle-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vehicle-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vehicle-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-name))
      (common-lisp:list
       (common-lisp:cons "campaignName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vehicle-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vehicle-status-list ()
   '(trivial-types:proper-list vehicle-status))
 (common-lisp:defun |make-vehicle-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vehicle-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vehicle-summary common-lisp:nil
                       ((last-modification-time :initarg
                         :|lastModificationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %vehicle-summary-last-modification-time
                         :initform
                         (common-lisp:error
                          ":lastmodificationtime is required"))
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or common-lisp:string common-lisp:null)
                         :accessor %vehicle-summary-creation-time :initform
                         (common-lisp:error ":creationtime is required"))
                        (decoder-manifest-arn :initarg :|decoderManifestArn|
                         :type (common-lisp:or |arn| common-lisp:null)
                         :accessor %vehicle-summary-decoder-manifest-arn
                         :initform
                         (common-lisp:error ":decodermanifestarn is required"))
                        (model-manifest-arn :initarg :|modelManifestArn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %vehicle-summary-model-manifest-arn :initform
                         (common-lisp:error ":modelmanifestarn is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or |arn| common-lisp:null) :accessor
                         %vehicle-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (vehicle-name :initarg :|vehicleName| :type
                         (common-lisp:or |vehicleName| common-lisp:null)
                         :accessor %vehicle-summary-vehicle-name :initform
                         (common-lisp:error ":vehiclename is required"))))
 (common-lisp:export (common-lisp:list 'vehicle-summary 'make-vehicle-summary))
 (common-lisp:defun make-vehicle-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modification-time creation-time
                     decoder-manifest-arn model-manifest-arn arn vehicle-name)
   (common-lisp:apply #'common-lisp:make-instance 'vehicle-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vehicle-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vehicle-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vehicle-name))
      (common-lisp:list
       (common-lisp:cons "vehicleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "modelManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decoder-manifest-arn))
      (common-lisp:list
       (common-lisp:cons "decoderManifestArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vehicle-summary))
   common-lisp:nil))
(common-lisp:deftype |arn| () 'common-lisp:string)
(common-lisp:deftype |attributeName| () 'common-lisp:string)
(common-lisp:deftype |attributeValue| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |attributesMap| () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributesmap| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
common-lisp:nil
(common-lisp:deftype |campaignName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |campaignSummaries| ()
   '(trivial-types:proper-list campaign-summary))
 (common-lisp:defun |make-campaignsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list campaign-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |collectionPeriodMs| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |createVehicleErrors| ()
   '(trivial-types:proper-list create-vehicle-error))
 (common-lisp:defun |make-createvehicleerrors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-vehicle-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |createVehicleRequestItems| ()
   '(trivial-types:proper-list create-vehicle-request-item))
 (common-lisp:defun |make-createvehiclerequestitems|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-vehicle-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |createVehicleResponses| ()
   '(trivial-types:proper-list create-vehicle-response-item))
 (common-lisp:defun |make-createvehicleresponses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-vehicle-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |customerAccountId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |decoderManifestSummaries| ()
   '(trivial-types:proper-list decoder-manifest-summary))
 (common-lisp:defun |make-decodermanifestsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            decoder-manifest-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |description| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |eventExpression| () 'common-lisp:string)
(common-lisp:deftype |fleetId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |fleetSummaries| ()
   '(trivial-types:proper-list fleet-summary))
 (common-lisp:defun |make-fleetsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |fleets| () '(trivial-types:proper-list |fleetId|))
 (common-lisp:defun |make-fleets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |fleetId|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |languageVersion| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |listOfStrings| ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-listofstrings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |listVehiclesMaxResults| () 'common-lisp:integer)
(common-lisp:deftype |maxResults| () 'common-lisp:integer)
(common-lisp:deftype |maxSampleCount| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |modelManifestSummaries| ()
   '(trivial-types:proper-list model-manifest-summary))
 (common-lisp:defun |make-modelmanifestsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-manifest-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |nextToken| () 'common-lisp:string)
(common-lisp:deftype |nonNegativeInteger| () 'common-lisp:integer)
(common-lisp:deftype |number| () 'common-lisp:integer)
(common-lisp:deftype |positiveInteger| () 'common-lisp:integer)
(common-lisp:deftype |priority| () 'common-lisp:integer)
(common-lisp:deftype |resourceName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |signalCatalogSummaries| ()
   '(trivial-types:proper-list signal-catalog-summary))
 (common-lisp:defun |make-signalcatalogsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signal-catalog-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |status| () 'common-lisp:string)
common-lisp:nil
common-lisp:nil
(common-lisp:deftype |uint32| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |updateVehicleErrors| ()
   '(trivial-types:proper-list update-vehicle-error))
 (common-lisp:defun |make-updatevehicleerrors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-vehicle-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |updateVehicleRequestItems| ()
   '(trivial-types:proper-list update-vehicle-request-item))
 (common-lisp:defun |make-updatevehiclerequestitems|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-vehicle-request-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |updateVehicleResponseItems| ()
   '(trivial-types:proper-list update-vehicle-response-item))
 (common-lisp:defun |make-updatevehicleresponseitems|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-vehicle-response-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |vehicleName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |vehicleSummaries| ()
   '(trivial-types:proper-list vehicle-summary))
 (common-lisp:defun |make-vehiclesummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vehicle-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |vehicles| () '(trivial-types:proper-list |vehicleName|))
 (common-lisp:defun |make-vehicles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |vehicleName|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |wildcardSignalName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-vehicle-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name fleet-id)
   (common-lisp:declare (common-lisp:ignorable vehicle-name fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-vehicle-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateVehicleFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-vehicle-fleet))
(common-lisp:progn
 (common-lisp:defun batch-create-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicles)
   (common-lisp:declare (common-lisp:ignorable vehicles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchCreateVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-vehicle))
(common-lisp:progn
 (common-lisp:defun batch-update-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicles)
   (common-lisp:declare (common-lisp:ignorable vehicles))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchUpdateVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-vehicle))
(common-lisp:progn
 (common-lisp:defun create-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description signal-catalog-arn
                     target-arn start-time expiry-time
                     post-trigger-collection-duration diagnostics-mode
                     spooling-mode compression priority signals-to-collect
                     collection-scheme data-extra-dimensions tags)
   (common-lisp:declare
    (common-lisp:ignorable name description signal-catalog-arn target-arn
     start-time expiry-time post-trigger-collection-duration diagnostics-mode
     spooling-mode compression priority signals-to-collect collection-scheme
     data-extra-dimensions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCampaign"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-campaign))
(common-lisp:progn
 (common-lisp:defun create-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description model-manifest-arn
                     signal-decoders network-interfaces tags)
   (common-lisp:declare
    (common-lisp:ignorable name description model-manifest-arn signal-decoders
     network-interfaces tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDecoderManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun create-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id description signal-catalog-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id description signal-catalog-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet))
(common-lisp:progn
 (common-lisp:defun create-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes signal-catalog-arn
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes signal-catalog-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateModelManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-manifest))
(common-lisp:progn
 (common-lisp:defun create-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes tags)
   (common-lisp:declare (common-lisp:ignorable name description nodes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSignalCatalog"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-signal-catalog))
(common-lisp:progn
 (common-lisp:defun create-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name model-manifest-arn
                     decoder-manifest-arn attributes association-behavior tags)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name model-manifest-arn decoder-manifest-arn
     attributes association-behavior tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vehicle))
(common-lisp:progn
 (common-lisp:defun delete-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCampaign"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-campaign))
(common-lisp:progn
 (common-lisp:defun delete-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDecoderManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun delete-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet))
(common-lisp:progn
 (common-lisp:defun delete-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteModelManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-manifest))
(common-lisp:progn
 (common-lisp:defun delete-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSignalCatalog"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-signal-catalog))
(common-lisp:progn
 (common-lisp:defun delete-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name)
   (common-lisp:declare (common-lisp:ignorable vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vehicle))
(common-lisp:progn
 (common-lisp:defun disassociate-vehicle-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name fleet-id)
   (common-lisp:declare (common-lisp:ignorable vehicle-name fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-vehicle-fleet-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateVehicleFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-vehicle-fleet))
(common-lisp:progn
 (common-lisp:defun get-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCampaign"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign))
(common-lisp:progn
 (common-lisp:defun get-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDecoderManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun get-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-fleet))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotfleetwise-request :method "POST" :path "/"
                                :protocol :json :operation "GetLoggingOptions"
                                :params
                                `(("Action" ,@"GetLoggingOptions")
                                  ("Version" ,@"2021-06-17"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetModelManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-model-manifest))
(common-lisp:progn
 (common-lisp:defun get-register-account-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotfleetwise-request :method "POST" :path "/"
                                :protocol :json :operation
                                "GetRegisterAccountStatus" :params
                                `(("Action" ,@"GetRegisterAccountStatus")
                                  ("Version" ,@"2021-06-17"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-register-account-status))
(common-lisp:progn
 (common-lisp:defun get-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetSignalCatalog"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-signal-catalog))
(common-lisp:progn
 (common-lisp:defun get-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name)
   (common-lisp:declare (common-lisp:ignorable vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-vehicle))
(common-lisp:progn
 (common-lisp:defun get-vehicle-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results vehicle-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results vehicle-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vehicle-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetVehicleStatus"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-vehicle-status))
(common-lisp:progn
 (common-lisp:defun import-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name network-file-definitions)
   (common-lisp:declare (common-lisp:ignorable name network-file-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportDecoderManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun import-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description vss tags)
   (common-lisp:declare (common-lisp:ignorable name description vss tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportSignalCatalog"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-signal-catalog))
(common-lisp:progn
 (common-lisp:defun list-campaigns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-campaigns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCampaigns"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-campaigns))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifest-network-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-decoder-manifest-network-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDecoderManifestNetworkInterfaces"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-decoder-manifest-network-interfaces))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifest-signals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-decoder-manifest-signals-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDecoderManifestSignals"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-decoder-manifest-signals))
(common-lisp:progn
 (common-lisp:defun list-decoder-manifests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-manifest-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-manifest-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-decoder-manifests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDecoderManifests"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-decoder-manifests))
(common-lisp:progn
 (common-lisp:defun list-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFleets"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fleets))
(common-lisp:progn
 (common-lisp:defun list-fleets-for-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-for-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFleetsForVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fleets-for-vehicle))
(common-lisp:progn
 (common-lisp:defun list-model-manifest-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-manifest-nodes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListModelManifestNodes"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-manifest-nodes))
(common-lisp:progn
 (common-lisp:defun list-model-manifests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key signal-catalog-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable signal-catalog-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-manifests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListModelManifests"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-manifests))
(common-lisp:progn
 (common-lisp:defun list-signal-catalog-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-signal-catalog-nodes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSignalCatalogNodes"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-signal-catalog-nodes))
(common-lisp:progn
 (common-lisp:defun list-signal-catalogs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-signal-catalogs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSignalCatalogs"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-signal-catalogs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vehicles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-manifest-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-manifest-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vehicles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListVehicles"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vehicles))
(common-lisp:progn
 (common-lisp:defun list-vehicles-in-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vehicles-in-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListVehiclesInFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vehicles-in-fleet))
(common-lisp:progn
 (common-lisp:defun put-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cloud-watch-log-delivery)
   (common-lisp:declare (common-lisp:ignorable cloud-watch-log-delivery))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutLoggingOptions"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-logging-options))
(common-lisp:progn
 (common-lisp:defun register-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key timestream-resources iam-resources)
   (common-lisp:declare
    (common-lisp:ignorable timestream-resources iam-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterAccount"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-account))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description data-extra-dimensions
                     action)
   (common-lisp:declare
    (common-lisp:ignorable name description data-extra-dimensions action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCampaign"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-campaign))
(common-lisp:progn
 (common-lisp:defun update-decoder-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description signal-decoders-to-add
                     signal-decoders-to-update signal-decoders-to-remove
                     network-interfaces-to-add network-interfaces-to-update
                     network-interfaces-to-remove status)
   (common-lisp:declare
    (common-lisp:ignorable name description signal-decoders-to-add
     signal-decoders-to-update signal-decoders-to-remove
     network-interfaces-to-add network-interfaces-to-update
     network-interfaces-to-remove status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-decoder-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDecoderManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-decoder-manifest))
(common-lisp:progn
 (common-lisp:defun update-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id description)
   (common-lisp:declare (common-lisp:ignorable fleet-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFleet"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet))
(common-lisp:progn
 (common-lisp:defun update-model-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes-to-add
                     nodes-to-remove status)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes-to-add nodes-to-remove
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-manifest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateModelManifest"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-manifest))
(common-lisp:progn
 (common-lisp:defun update-signal-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description nodes-to-add
                     nodes-to-update nodes-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable name description nodes-to-add nodes-to-update
     nodes-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-signal-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSignalCatalog"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-signal-catalog))
(common-lisp:progn
 (common-lisp:defun update-vehicle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vehicle-name model-manifest-arn
                     decoder-manifest-arn attributes attribute-update-mode)
   (common-lisp:declare
    (common-lisp:ignorable vehicle-name model-manifest-arn decoder-manifest-arn
     attributes attribute-update-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vehicle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotfleetwise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateVehicle"
                                                        "2021-06-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vehicle))
