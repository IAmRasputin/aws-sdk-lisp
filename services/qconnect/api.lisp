;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qconnect/api
  (:use)
  (:nicknames #:aws/qconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qconnect/api)
(common-lisp:progn
 (common-lisp:define-condition qconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qconnect-error))
(common-lisp:progn
 (common-lisp:defclass qconnect-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "qconnect" :api-version
                        "2020-10-19" :host-prefix "wisdom" :signing-name
                        "wisdom" :global-host common-lisp:nil))
 (common-lisp:export 'qconnect-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("RequestTimeoutException" . request-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (app-integrations-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-integrations-configuration-"))
   (app-integration-arn (common-lisp:error ":appintegrationarn is required")
    :type (common-lisp:or generic-arn common-lisp:null))
   (object-fields common-lisp:nil :type
    (common-lisp:or object-fields-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-integrations-configuration
                    'make-app-integrations-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-integration-arn))
      (common-lisp:list
       (common-lisp:cons "appIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-fields))
      (common-lisp:list
       (common-lisp:cons "objectFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-integrations-configuration))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-association-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-association-data-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-association-arn
    (common-lisp:error ":assistantassociationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-association-id
    (common-lisp:error ":assistantassociationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (association-data (common-lisp:error ":associationdata is required") :type
    (common-lisp:or assistant-association-output-data common-lisp:null))
   (association-type (common-lisp:error ":associationtype is required") :type
    (common-lisp:or association-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-association-data
                    'make-assistant-association-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-arn))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-id))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-data))
      (common-lisp:list
       (common-lisp:cons "associationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-association-input-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-association-input-data-"))
   (knowledge-base-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-association-input-data
                    'make-assistant-association-input-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-input-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-association-output-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-association-output-data-"))
   (knowledge-base-association common-lisp:nil :type
    (common-lisp:or knowledge-base-association-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-association-output-data
                    'make-assistant-association-output-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-association))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-output-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-association-summary-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-association-arn
    (common-lisp:error ":assistantassociationarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-association-id
    (common-lisp:error ":assistantassociationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (association-data (common-lisp:error ":associationdata is required") :type
    (common-lisp:or assistant-association-output-data common-lisp:null))
   (association-type (common-lisp:error ":associationtype is required") :type
    (common-lisp:or association-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-association-summary
                    'make-assistant-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-arn))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-id))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-data))
      (common-lisp:list
       (common-lisp:cons "associationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assistant-association-summary-list ()
   '(trivial-types:proper-list assistant-association-summary))
 (common-lisp:defun make-assistant-association-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assistant-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-capability-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-capability-configuration-"))
   (type common-lisp:nil :type
    (common-lisp:or assistant-capability-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-capability-configuration
                    'make-assistant-capability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-capability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-capability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-capability-configuration))
   common-lisp:nil))
(common-lisp:deftype assistant-capability-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-data-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (capability-configuration common-lisp:nil :type
    (common-lisp:or assistant-capability-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (integration-configuration common-lisp:nil :type
    (common-lisp:or assistant-integration-configuration common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or assistant-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or assistant-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'assistant-data 'make-assistant-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assistant-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assistant-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assistant-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-integration-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-integration-configuration-"))
   (topic-integration-arn common-lisp:nil :type
    (common-lisp:or generic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-integration-configuration
                    'make-assistant-integration-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-integration-arn))
      (common-lisp:list
       (common-lisp:cons "topicIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assistant-integration-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assistant-list ()
   '(trivial-types:proper-list assistant-summary))
 (common-lisp:defun make-assistant-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assistant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assistant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assistant-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-assistant-summary-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (capability-configuration common-lisp:nil :type
    (common-lisp:or assistant-capability-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (integration-configuration common-lisp:nil :type
    (common-lisp:or assistant-integration-configuration common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or assistant-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or assistant-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assistant-summary 'make-assistant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assistant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assistant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assistant-summary))
   common-lisp:nil))
(common-lisp:deftype assistant-type () 'common-lisp:string)
(common-lisp:deftype association-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype channel () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun make-channels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-"))
   (connect-configuration common-lisp:nil :type
    (common-lisp:or connect-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-configuration))
      (common-lisp:list
       (common-lisp:cons "connectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (connect-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-connect-configuration-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connect-configuration 'make-connect-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-configuration))
   common-lisp:nil))
(common-lisp:deftype contact-attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-attribute-keys ()
   '(trivial-types:proper-list contact-attribute-key))
 (common-lisp:defun make-contact-attribute-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-contact-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (content-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-data-"))
   (content-arn (common-lisp:error ":contentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or content-type common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (link-out-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or content-metadata common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (revision-id (common-lisp:error ":revisionid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or content-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or content-title common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null))
   (url-expiry (common-lisp:error ":urlexpiry is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'content-data 'make-content-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-out-uri))
      (common-lisp:list
       (common-lisp:cons "linkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-data-details-"))
   (ranking-data (common-lisp:error ":rankingdata is required") :type
    (common-lisp:or ranking-data common-lisp:null))
   (text-data (common-lisp:error ":textdata is required") :type
    (common-lisp:or text-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-data-details 'make-content-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ranking-data))
      (common-lisp:list
       (common-lisp:cons "rankingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-data))
      (common-lisp:list
       (common-lisp:cons "textData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-feedback-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-feedback-data-"))
   (generative-content-feedback-data common-lisp:nil :type
    (common-lisp:or generative-content-feedback-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-feedback-data 'make-content-feedback-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-feedback-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-feedback-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-content-feedback-data))
      (common-lisp:list
       (common-lisp:cons "generativeContentFeedbackData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-feedback-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-metadata () 'common-lisp:hash-table)
 (common-lisp:defun make-content-metadata (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (content-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-reference-"))
   (content-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (content-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (knowledge-base-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (knowledge-base-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-reference 'make-content-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-reference))
   common-lisp:nil))
(common-lisp:deftype content-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (content-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-summary-"))
   (content-arn (common-lisp:error ":contentarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or content-type common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or content-metadata common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (revision-id (common-lisp:error ":revisionid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or content-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or content-title common-lisp:null)))
 (common-lisp:export (common-lisp:list 'content-summary 'make-content-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-arn))
      (common-lisp:list
       (common-lisp:cons "contentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-id))
      (common-lisp:list
       (common-lisp:cons "contentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype content-summary-list ()
   '(trivial-types:proper-list content-summary))
 (common-lisp:defun make-content-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-title () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-assistant-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assistant-association-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (association (common-lisp:error ":association is required") :type
    (common-lisp:or assistant-association-input-data common-lisp:null))
   (association-type (common-lisp:error ":associationtype is required") :type
    (common-lisp:or association-type common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assistant-association-request
                    'make-create-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "associationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assistant-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assistant-association-response-"))
   (assistant-association common-lisp:nil :type
    (common-lisp:or assistant-association-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assistant-association-response
                    'make-create-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association))
      (common-lisp:list
       (common-lisp:cons "assistantAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assistant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assistant-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or assistant-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assistant-request 'make-create-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assistant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assistant-response-"))
   (assistant common-lisp:nil :type
    (common-lisp:or assistant-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assistant-response
                    'make-create-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant))
      (common-lisp:list
       (common-lisp:cons "assistant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-content-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or content-metadata common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (override-link-out-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or content-title common-lisp:null))
   (upload-id (common-lisp:error ":uploadid is required") :type
    (common-lisp:or upload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-content-request 'make-create-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "overrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-content-response-"))
   (content common-lisp:nil :type
    (common-lisp:or content-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-content-response 'make-create-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-knowledge-base-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-type (common-lisp:error ":knowledgebasetype is required")
    :type (common-lisp:or knowledge-base-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (rendering-configuration common-lisp:nil :type
    (common-lisp:or rendering-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-request
                    'make-create-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-knowledge-base-response-"))
   (knowledge-base common-lisp:nil :type
    (common-lisp:or knowledge-base-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-knowledge-base-response
                    'make-create-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-quick-response-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quick-response-request-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or quick-response-data-provider common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or quick-response-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-response-description common-lisp:null))
   (grouping-configuration common-lisp:nil :type
    (common-lisp:or grouping-configuration common-lisp:null))
   (is-active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or quick-response-name common-lisp:null))
   (shortcut-key common-lisp:nil :type
    (common-lisp:or short-cut-key common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quick-response-request
                    'make-create-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-quick-response-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quick-response-response-"))
   (quick-response common-lisp:nil :type
    (common-lisp:or quick-response-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quick-response-response
                    'make-create-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quick-response-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or session-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-response 'make-create-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-details-"))
   (content-data common-lisp:nil :type
    (common-lisp:or content-data-details common-lisp:null))
   (generative-data common-lisp:nil :type
    (common-lisp:or generative-data-details common-lisp:null))
   (source-content-data common-lisp:nil :type
    (common-lisp:or source-content-data-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-details 'make-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-data))
      (common-lisp:list
       (common-lisp:cons "contentData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generative-data))
      (common-lisp:list
       (common-lisp:cons "generativeData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-content-data))
      (common-lisp:list
       (common-lisp:cons "sourceContentData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-reference-"))
   (content-reference common-lisp:nil :type
    (common-lisp:or content-reference common-lisp:null))
   (generative-reference common-lisp:nil :type
    (common-lisp:or generative-reference common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-reference 'make-data-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-reference))
      (common-lisp:list
       (common-lisp:cons "contentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-reference))
      (common-lisp:list
       (common-lisp:cons "generativeReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-summary-"))
   (details (common-lisp:error ":details is required") :type
    (common-lisp:or data-details common-lisp:null))
   (reference (common-lisp:error ":reference is required") :type
    (common-lisp:or data-reference common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-summary 'make-data-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-summary-list ()
   '(trivial-types:proper-list data-summary))
 (common-lisp:defun make-data-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assistant-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assistant-association-request-"))
   (assistant-association-id
    (common-lisp:error ":assistantassociationid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-association-request
                    'make-delete-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assistant-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assistant-association-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-association-response
                    'make-delete-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assistant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assistant-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-request 'make-delete-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assistant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assistant-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-assistant-response
                    'make-delete-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-content-request-"))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-content-request 'make-delete-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-content-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-content-response 'make-delete-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-import-job-request-"))
   (import-job-id (common-lisp:error ":importjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-import-job-request
                    'make-delete-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-import-job-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-import-job-response
                    'make-delete-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-knowledge-base-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-request
                    'make-delete-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-knowledge-base-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-knowledge-base-response
                    'make-delete-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-quick-response-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-quick-response-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-quick-response-request
                    'make-delete-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-quick-response-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-quick-response-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-quick-response-response
                    'make-delete-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-quick-response-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (document (:copier common-lisp:nil) (:conc-name "struct-shape-document-"))
   (content-reference (common-lisp:error ":contentreference is required") :type
    (common-lisp:or content-reference common-lisp:null))
   (excerpt common-lisp:nil :type
    (common-lisp:or document-text common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or document-text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document 'make-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-reference))
      (common-lisp:list
       (common-lisp:cons "contentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excerpt))
      (common-lisp:list
       (common-lisp:cons "excerpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (document-text (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-text-"))
   (highlights common-lisp:nil :type
    (common-lisp:or highlights common-lisp:null))
   (text common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'document-text 'make-document-text))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-text))
   common-lisp:nil))
(common-lisp:deftype external-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (external-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-external-source-configuration-"))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or configuration common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or external-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'external-source-configuration
                    'make-external-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (field (common-lisp:error ":field is required") :type
    (common-lisp:or filter-field common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or filter-operator common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generative-content-feedback-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-generative-content-feedback-data-"))
   (relevance (common-lisp:error ":relevance is required") :type
    (common-lisp:or relevance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generative-content-feedback-data
                    'make-generative-content-feedback-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generative-content-feedback-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generative-content-feedback-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance))
      (common-lisp:list
       (common-lisp:cons "relevance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generative-content-feedback-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generative-data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-generative-data-details-"))
   (completion (common-lisp:error ":completion is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (ranking-data (common-lisp:error ":rankingdata is required") :type
    (common-lisp:or ranking-data common-lisp:null))
   (references (common-lisp:error ":references is required") :type
    (common-lisp:or data-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generative-data-details 'make-generative-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generative-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generative-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion))
      (common-lisp:list
       (common-lisp:cons "completion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ranking-data))
      (common-lisp:list
       (common-lisp:cons "rankingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'references))
      (common-lisp:list
       (common-lisp:cons "references"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generative-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generative-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-generative-reference-"))
   (generation-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (model-id common-lisp:nil :type
    (common-lisp:or llm-model-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generative-reference 'make-generative-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generative-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generative-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "modelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generative-reference))
   common-lisp:nil))
(common-lisp:deftype generic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-assistant-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assistant-association-request-"))
   (assistant-association-id
    (common-lisp:error ":assistantassociationid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assistant-association-request
                    'make-get-assistant-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assistant-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assistant-association-response-"))
   (assistant-association common-lisp:nil :type
    (common-lisp:or assistant-association-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assistant-association-response
                    'make-get-assistant-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association))
      (common-lisp:list
       (common-lisp:cons "assistantAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assistant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assistant-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assistant-request 'make-get-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assistant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assistant-response-"))
   (assistant common-lisp:nil :type
    (common-lisp:or assistant-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assistant-response 'make-get-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant))
      (common-lisp:list
       (common-lisp:cons "assistant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-content-request-"))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-content-request 'make-get-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-content-response-"))
   (content common-lisp:nil :type
    (common-lisp:or content-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-content-response 'make-get-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-content-summary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-content-summary-request-"))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-content-summary-request
                    'make-get-content-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-content-summary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-content-summary-response-"))
   (content-summary common-lisp:nil :type
    (common-lisp:or content-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-content-summary-response
                    'make-get-content-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summary))
      (common-lisp:list
       (common-lisp:cons "contentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-content-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-job-request-"))
   (import-job-id (common-lisp:error ":importjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-job-request 'make-get-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-job-response-"))
   (import-job common-lisp:nil :type
    (common-lisp:or import-job-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-job-response 'make-get-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job))
      (common-lisp:list
       (common-lisp:cons "importJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-knowledge-base-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-knowledge-base-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-request
                    'make-get-knowledge-base-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-knowledge-base-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-knowledge-base-response-"))
   (knowledge-base common-lisp:nil :type
    (common-lisp:or knowledge-base-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-knowledge-base-response
                    'make-get-knowledge-base-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-knowledge-base-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-quick-response-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-quick-response-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-quick-response-request
                    'make-get-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-quick-response-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-quick-response-response-"))
   (quick-response common-lisp:nil :type
    (common-lisp:or quick-response-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-quick-response-response
                    'make-get-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quick-response-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendations-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (wait-time-seconds common-lisp:nil :type
    (common-lisp:or wait-time-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-request
                    'make-get-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendations-response-"))
   (recommendations (common-lisp:error ":recommendations is required") :type
    (common-lisp:or recommendation-list common-lisp:null))
   (triggers common-lisp:nil :type
    (common-lisp:or recommendation-trigger-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-response
                    'make-get-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-response-"))
   (session common-lisp:nil :type
    (common-lisp:or session-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grouping-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-grouping-configuration-"))
   (criteria common-lisp:nil :type
    (common-lisp:or grouping-criteria common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or grouping-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grouping-configuration 'make-grouping-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criteria))
      (common-lisp:list
       (common-lisp:cons "criteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grouping-configuration))
   common-lisp:nil))
(common-lisp:deftype grouping-criteria () 'common-lisp:string)
(common-lisp:deftype grouping-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grouping-values ()
   '(trivial-types:proper-list grouping-value))
 (common-lisp:defun make-grouping-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grouping-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype headers () 'common-lisp:hash-table)
 (common-lisp:defun make-headers (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (highlight (:copier common-lisp:nil)
      (:conc-name "struct-shape-highlight-"))
   (begin-offset-inclusive common-lisp:nil :type
    (common-lisp:or highlight-offset common-lisp:null))
   (end-offset-exclusive common-lisp:nil :type
    (common-lisp:or highlight-offset common-lisp:null)))
 (common-lisp:export (common-lisp:list 'highlight 'make-highlight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input highlight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'begin-offset-inclusive))
      (common-lisp:list
       (common-lisp:cons "beginOffsetInclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-offset-exclusive))
      (common-lisp:list
       (common-lisp:cons "endOffsetExclusive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input highlight))
   common-lisp:nil))
(common-lisp:deftype highlight-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype highlights () '(trivial-types:proper-list highlight))
 (common-lisp:defun make-highlights
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list highlight))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-data-"))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (external-source-configuration common-lisp:nil :type
    (common-lisp:or external-source-configuration common-lisp:null))
   (failed-record-report common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (import-job-id (common-lisp:error ":importjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (import-job-type (common-lisp:error ":importjobtype is required") :type
    (common-lisp:or import-job-type common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (last-modified-time (common-lisp:error ":lastmodifiedtime is required")
    :type (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or content-metadata common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or import-job-status common-lisp:null))
   (upload-id (common-lisp:error ":uploadid is required") :type
    (common-lisp:or upload-id common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null))
   (url-expiry (common-lisp:error ":urlexpiry is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'import-job-data 'make-import-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-record-report))
      (common-lisp:list
       (common-lisp:cons "failedRecordReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-id))
      (common-lisp:list
       (common-lisp:cons "importJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-job-list ()
   '(trivial-types:proper-list import-job-summary))
 (common-lisp:defun make-import-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-summary-"))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (external-source-configuration common-lisp:nil :type
    (common-lisp:or external-source-configuration common-lisp:null))
   (import-job-id (common-lisp:error ":importjobid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (import-job-type (common-lisp:error ":importjobtype is required") :type
    (common-lisp:or import-job-type common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (last-modified-time (common-lisp:error ":lastmodifiedtime is required")
    :type (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or content-metadata common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or import-job-status common-lisp:null))
   (upload-id (common-lisp:error ":uploadid is required") :type
    (common-lisp:or upload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-job-summary 'make-import-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-id))
      (common-lisp:list
       (common-lisp:cons "importJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-summary))
   common-lisp:nil))
(common-lisp:deftype import-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base-association-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-association-data-"))
   (knowledge-base-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (knowledge-base-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-association-data
                    'make-knowledge-base-association-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-association-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-data-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (knowledge-base-type (common-lisp:error ":knowledgebasetype is required")
    :type (common-lisp:or knowledge-base-type common-lisp:null))
   (last-content-modification-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (rendering-configuration common-lisp:nil :type
    (common-lisp:or rendering-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or knowledge-base-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-data 'make-knowledge-base-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-content-modification-time))
      (common-lisp:list
       (common-lisp:cons "lastContentModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input knowledge-base-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype knowledge-base-list ()
   '(trivial-types:proper-list knowledge-base-summary))
 (common-lisp:defun make-knowledge-base-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list knowledge-base-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype knowledge-base-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (knowledge-base-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-knowledge-base-summary-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (knowledge-base-type (common-lisp:error ":knowledgebasetype is required")
    :type (common-lisp:or knowledge-base-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (rendering-configuration common-lisp:nil :type
    (common-lisp:or rendering-configuration common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or knowledge-base-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'knowledge-base-summary 'make-knowledge-base-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-type))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendering-configuration))
      (common-lisp:list
       (common-lisp:cons "renderingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "serverSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "sourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          knowledge-base-summary))
   common-lisp:nil))
(common-lisp:deftype knowledge-base-type () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-assistant-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assistant-associations-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assistant-associations-request
                    'make-list-assistant-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assistant-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assistant-associations-response-"))
   (assistant-association-summaries
    (common-lisp:error ":assistantassociationsummaries is required") :type
    (common-lisp:or assistant-association-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assistant-associations-response
                    'make-list-assistant-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assistant-association-summaries))
      (common-lisp:list
       (common-lisp:cons "assistantAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistant-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assistants-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assistants-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assistants-request 'make-list-assistants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assistants-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assistants-response-"))
   (assistant-summaries (common-lisp:error ":assistantsummaries is required")
    :type (common-lisp:or assistant-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assistants-response 'make-list-assistants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-summaries))
      (common-lisp:list
       (common-lisp:cons "assistantSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assistants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contents-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contents-request 'make-list-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contents-response-"))
   (content-summaries (common-lisp:error ":contentsummaries is required") :type
    (common-lisp:or content-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contents-response 'make-list-contents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summaries))
      (common-lisp:list
       (common-lisp:cons "contentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-jobs-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-jobs-request 'make-list-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-jobs-response-"))
   (import-job-summaries (common-lisp:error ":importjobsummaries is required")
    :type (common-lisp:or import-job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-jobs-response
                    'make-list-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-job-summaries))
      (common-lisp:list
       (common-lisp:cons "importJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-knowledge-bases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-knowledge-bases-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-request
                    'make-list-knowledge-bases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-knowledge-bases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-knowledge-bases-response-"))
   (knowledge-base-summaries
    (common-lisp:error ":knowledgebasesummaries is required") :type
    (common-lisp:or knowledge-base-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-knowledge-bases-response
                    'make-list-knowledge-bases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'knowledge-base-summaries))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-knowledge-bases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-quick-responses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-quick-responses-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-quick-responses-request
                    'make-list-quick-responses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-quick-responses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-quick-responses-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (quick-response-summaries
    (common-lisp:error ":quickresponsesummaries is required") :type
    (common-lisp:or quick-response-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-quick-responses-response
                    'make-list-quick-responses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quick-response-summaries))
      (common-lisp:list
       (common-lisp:cons "quickResponseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-quick-responses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype llm-model-id () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notify-recommendations-received-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-notify-recommendations-received-error-"))
   (message common-lisp:nil :type
    (common-lisp:or notify-recommendations-received-error-message
                    common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-error
                    'make-notify-recommendations-received-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notify-recommendations-received-error-list ()
   '(trivial-types:proper-list notify-recommendations-received-error))
 (common-lisp:defun make-notify-recommendations-received-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notify-recommendations-received-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notify-recommendations-received-error-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notify-recommendations-received-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-notify-recommendations-received-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (recommendation-ids (common-lisp:error ":recommendationids is required")
    :type (common-lisp:or recommendation-id-list common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-request
                    'make-notify-recommendations-received-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notify-recommendations-received-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-notify-recommendations-received-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or notify-recommendations-received-error-list
                    common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notify-recommendations-received-response
                    'make-notify-recommendations-received-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-recommendations-received-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-fields-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-object-fields-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-message)))
(common-lisp:deftype priority () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-feedback-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (content-feedback (common-lisp:error ":contentfeedback is required") :type
    (common-lisp:or content-feedback-data common-lisp:null))
   (target-id (common-lisp:error ":targetid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (target-type (common-lisp:error ":targettype is required") :type
    (common-lisp:or target-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-feedback-request 'make-put-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-feedback))
      (common-lisp:list
       (common-lisp:cons "contentFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-feedback-response-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (content-feedback (common-lisp:error ":contentfeedback is required") :type
    (common-lisp:or content-feedback-data common-lisp:null))
   (target-id (common-lisp:error ":targetid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (target-type (common-lisp:error ":targettype is required") :type
    (common-lisp:or target-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-feedback-response 'make-put-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-feedback))
      (common-lisp:list
       (common-lisp:cons "contentFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-assistant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-assistant-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (query-condition common-lisp:nil :type
    (common-lisp:or query-condition-expression common-lisp:null))
   (query-text (common-lisp:error ":querytext is required") :type
    (common-lisp:or query-text common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-assistant-request 'make-query-assistant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-condition))
      (common-lisp:list
       (common-lisp:cons "queryCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-text))
      (common-lisp:list
       (common-lisp:cons "queryText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-assistant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-assistant-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or query-results-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-assistant-response 'make-query-assistant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-assistant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-condition-"))
   (single common-lisp:nil :type
    (common-lisp:or query-condition-item common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-condition 'make-query-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single))
      (common-lisp:list
       (common-lisp:cons "single"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-condition))
   common-lisp:nil))
(common-lisp:deftype query-condition-comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-condition-expression ()
   '(trivial-types:proper-list query-condition))
 (common-lisp:defun make-query-condition-expression
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-condition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-condition-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-condition-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-condition-item-"))
   (comparator (common-lisp:error ":comparator is required") :type
    (common-lisp:or query-condition-comparison-operator common-lisp:null))
   (field (common-lisp:error ":field is required") :type
    (common-lisp:or query-condition-field-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-condition-item 'make-query-condition-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-condition-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-condition-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-condition-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-recommendation-trigger-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-recommendation-trigger-data-"))
   (text common-lisp:nil :type (common-lisp:or query-text common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-recommendation-trigger-data
                    'make-query-recommendation-trigger-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-recommendation-trigger-data))
   common-lisp:nil))
(common-lisp:deftype query-result-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-results-list ()
   '(trivial-types:proper-list result-data))
 (common-lisp:defun make-query-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-text () 'common-lisp:string)
(common-lisp:deftype quick-response-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-content-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-content-provider-"))
   (content common-lisp:nil :type
    (common-lisp:or quick-response-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-content-provider
                    'make-quick-response-content-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-content-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-contents (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-contents-"))
   (markdown common-lisp:nil :type
    (common-lisp:or quick-response-content-provider common-lisp:null))
   (plain-text common-lisp:nil :type
    (common-lisp:or quick-response-content-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-contents 'make-quick-response-contents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'markdown))
      (common-lisp:list
       (common-lisp:cons "markdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "plainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-contents))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-data-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or quick-response-type common-lisp:null))
   (contents common-lisp:nil :type
    (common-lisp:or quick-response-contents common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-response-description common-lisp:null))
   (grouping-configuration common-lisp:nil :type
    (common-lisp:or grouping-configuration common-lisp:null))
   (is-active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or generic-arn common-lisp:null))
   (last-modified-time (common-lisp:error ":lastmodifiedtime is required")
    :type (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or quick-response-name common-lisp:null))
   (quick-response-arn (common-lisp:error ":quickresponsearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (shortcut-key common-lisp:nil :type
    (common-lisp:or short-cut-key common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or quick-response-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-data 'make-quick-response-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quick-response-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quick-response-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quick-response-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-data-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-data-provider-"))
   (content common-lisp:nil :type
    (common-lisp:or quick-response-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-data-provider
                    'make-quick-response-data-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-data-provider))
   common-lisp:nil))
(common-lisp:deftype quick-response-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-filter-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-filter-field-"))
   (include-no-existence common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or quick-response-filter-operator common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or quick-response-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-filter-field
                    'make-quick-response-filter-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-no-existence))
      (common-lisp:list
       (common-lisp:cons "includeNoExistence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-filter-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-filter-field-list ()
   '(trivial-types:proper-list quick-response-filter-field))
 (common-lisp:defun make-quick-response-filter-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-filter-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-filter-operator () 'common-lisp:string)
(common-lisp:deftype quick-response-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quick-response-filter-value-list ()
   '(trivial-types:proper-list quick-response-filter-value))
 (common-lisp:defun make-quick-response-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-order-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-order-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-order-field
                    'make-quick-response-order-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-order-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-query-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-query-field-"))
   (allow-fuzziness common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or quick-response-query-operator common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or quick-response-query-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-query-field
                    'make-quick-response-query-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-fuzziness))
      (common-lisp:list
       (common-lisp:cons "allowFuzziness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-query-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-query-field-list ()
   '(trivial-types:proper-list quick-response-query-field))
 (common-lisp:defun make-quick-response-query-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-query-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-query-operator () 'common-lisp:string)
(common-lisp:deftype quick-response-query-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype quick-response-query-value-list ()
   '(trivial-types:proper-list quick-response-query-value))
 (common-lisp:defun make-quick-response-query-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-query-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-search-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-search-expression-"))
   (filters common-lisp:nil :type
    (common-lisp:or quick-response-filter-field-list common-lisp:null))
   (order-on-field common-lisp:nil :type
    (common-lisp:or quick-response-order-field common-lisp:null))
   (queries common-lisp:nil :type
    (common-lisp:or quick-response-query-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-search-expression
                    'make-quick-response-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-on-field))
      (common-lisp:list
       (common-lisp:cons "orderOnField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-search-result-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-search-result-data-"))
   (attributes-interpolated common-lisp:nil :type
    (common-lisp:or contact-attribute-keys common-lisp:null))
   (attributes-not-interpolated common-lisp:nil :type
    (common-lisp:or contact-attribute-keys common-lisp:null))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or quick-response-type common-lisp:null))
   (contents (common-lisp:error ":contents is required") :type
    (common-lisp:or quick-response-contents common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-response-description common-lisp:null))
   (grouping-configuration common-lisp:nil :type
    (common-lisp:or grouping-configuration common-lisp:null))
   (is-active (common-lisp:error ":isactive is required") :type
    (common-lisp:or boolean common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or generic-arn common-lisp:null))
   (last-modified-time (common-lisp:error ":lastmodifiedtime is required")
    :type (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or quick-response-name common-lisp:null))
   (quick-response-arn (common-lisp:error ":quickresponsearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (shortcut-key common-lisp:nil :type
    (common-lisp:or short-cut-key common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or quick-response-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-search-result-data
                    'make-quick-response-search-result-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-interpolated))
      (common-lisp:list
       (common-lisp:cons "attributesInterpolated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-not-interpolated))
      (common-lisp:list
       (common-lisp:cons "attributesNotInterpolated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-search-result-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-search-results-list ()
   '(trivial-types:proper-list quick-response-search-result-data))
 (common-lisp:defun make-quick-response-search-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            quick-response-search-result-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quick-response-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-quick-response-summary-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or quick-response-type common-lisp:null))
   (created-time (common-lisp:error ":createdtime is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-response-description common-lisp:null))
   (is-active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (knowledge-base-arn (common-lisp:error ":knowledgebasearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or generic-arn common-lisp:null))
   (last-modified-time (common-lisp:error ":lastmodifiedtime is required")
    :type (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or quick-response-name common-lisp:null))
   (quick-response-arn (common-lisp:error ":quickresponsearn is required")
    :type (common-lisp:or arn common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or quick-response-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quick-response-summary 'make-quick-response-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base-id))
      (common-lisp:list
       (common-lisp:cons "knowledgeBaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-arn))
      (common-lisp:list
       (common-lisp:cons "quickResponseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response-id))
      (common-lisp:list
       (common-lisp:cons "quickResponseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quick-response-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quick-response-summary-list ()
   '(trivial-types:proper-list quick-response-summary))
 (common-lisp:defun make-quick-response-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quick-response-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quick-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ranking-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-ranking-data-"))
   (relevance-level common-lisp:nil :type
    (common-lisp:or relevance-level common-lisp:null))
   (relevance-score common-lisp:nil :type
    (common-lisp:or relevance-score common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ranking-data 'make-ranking-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ranking-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ranking-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-level))
      (common-lisp:list
       (common-lisp:cons "relevanceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-score))
      (common-lisp:list
       (common-lisp:cons "relevanceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ranking-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-data-"))
   (data common-lisp:nil :type (common-lisp:or data-summary common-lisp:null))
   (document common-lisp:nil :type (common-lisp:or document common-lisp:null))
   (recommendation-id (common-lisp:error ":recommendationid is required") :type
    (common-lisp:or recommendation-id common-lisp:null))
   (relevance-level common-lisp:nil :type
    (common-lisp:or relevance-level common-lisp:null))
   (relevance-score common-lisp:nil :type
    (common-lisp:or relevance-score common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or recommendation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-data 'make-recommendation-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-level))
      (common-lisp:list
       (common-lisp:cons "relevanceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-score))
      (common-lisp:list
       (common-lisp:cons "relevanceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-data))
   common-lisp:nil))
(common-lisp:deftype recommendation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list recommendation-id))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation-data))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-trigger (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-trigger-"))
   (data (common-lisp:error ":data is required") :type
    (common-lisp:or recommendation-trigger-data common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (recommendation-ids (common-lisp:error ":recommendationids is required")
    :type (common-lisp:or recommendation-id-list common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or recommendation-source-type common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or recommendation-trigger-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-trigger 'make-recommendation-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-trigger-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-trigger-data-"))
   (query common-lisp:nil :type
    (common-lisp:or query-recommendation-trigger-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-trigger-data
                    'make-recommendation-trigger-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-trigger-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-trigger-list ()
   '(trivial-types:proper-list recommendation-trigger))
 (common-lisp:defun make-recommendation-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-trigger-type () 'common-lisp:string)
(common-lisp:deftype recommendation-type () 'common-lisp:string)
(common-lisp:deftype relevance () 'common-lisp:string)
(common-lisp:deftype relevance-level () 'common-lisp:string)
(common-lisp:deftype relevance-score () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-knowledge-base-template-uri-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-knowledge-base-template-uri-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-knowledge-base-template-uri-request
                    'make-remove-knowledge-base-template-uri-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-knowledge-base-template-uri-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-knowledge-base-template-uri-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-knowledge-base-template-uri-response
                    'make-remove-knowledge-base-template-uri-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-knowledge-base-template-uri-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rendering-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rendering-configuration-"))
   (template-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rendering-configuration 'make-rendering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-uri))
      (common-lisp:list
       (common-lisp:cons "templateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rendering-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-timeout-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-timeout-exception
                    'request-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (result-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-data-"))
   (data common-lisp:nil :type (common-lisp:or data-summary common-lisp:null))
   (document common-lisp:nil :type (common-lisp:or document common-lisp:null))
   (relevance-score common-lisp:nil :type
    (common-lisp:or relevance-score common-lisp:null))
   (result-id (common-lisp:error ":resultid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or query-result-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result-data 'make-result-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relevance-score))
      (common-lisp:list
       (common-lisp:cons "relevanceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "resultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-content-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (search-expression (common-lisp:error ":searchexpression is required") :type
    (common-lisp:or search-expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-content-request 'make-search-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-content-response-"))
   (content-summaries (common-lisp:error ":contentsummaries is required") :type
    (common-lisp:or content-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-content-response 'make-search-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-summaries))
      (common-lisp:list
       (common-lisp:cons "contentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-expression-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-expression 'make-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-quick-responses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-quick-responses-request-"))
   (attributes common-lisp:nil :type
    (common-lisp:or contact-attributes common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (search-expression (common-lisp:error ":searchexpression is required") :type
    (common-lisp:or quick-response-search-expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-quick-responses-request
                    'make-search-quick-responses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-quick-responses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-quick-responses-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or quick-response-search-results-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-quick-responses-response
                    'make-search-quick-responses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quick-responses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-sessions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-sessions-request-"))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (search-expression (common-lisp:error ":searchexpression is required") :type
    (common-lisp:or search-expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-sessions-request 'make-search-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "searchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-sessions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-sessions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (session-summaries (common-lisp:error ":sessionsummaries is required") :type
    (common-lisp:or session-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-sessions-response 'make-search-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-summaries))
      (common-lisp:list
       (common-lisp:cons "sessionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-sessions-response))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-configuration-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (session-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-data-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (integration-configuration common-lisp:nil :type
    (common-lisp:or session-integration-configuration common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (session-arn (common-lisp:error ":sessionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-data 'make-session-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integration-configuration))
      (common-lisp:list
       (common-lisp:cons "integrationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-integration-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-integration-configuration-"))
   (topic-integration-arn common-lisp:nil :type
    (common-lisp:or generic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-integration-configuration
                    'make-session-integration-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-integration-arn))
      (common-lisp:list
       (common-lisp:cons "topicIntegrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-integration-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-summaries ()
   '(trivial-types:proper-list session-summary))
 (common-lisp:defun make-session-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (session-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-summary-"))
   (assistant-arn (common-lisp:error ":assistantarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assistant-id (common-lisp:error ":assistantid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (session-arn (common-lisp:error ":sessionarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-summary 'make-session-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-arn))
      (common-lisp:list
       (common-lisp:cons "assistantArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assistant-id))
      (common-lisp:list
       (common-lisp:cons "assistantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-arn))
      (common-lisp:list
       (common-lisp:cons "sessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-summary))
   common-lisp:nil))
(common-lisp:deftype short-cut-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-configuration-"))
   (app-integrations common-lisp:nil :type
    (common-lisp:or app-integrations-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-integrations))
      (common-lisp:list
       (common-lisp:cons "appIntegrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-content-data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-content-data-details-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (ranking-data (common-lisp:error ":rankingdata is required") :type
    (common-lisp:or ranking-data common-lisp:null))
   (text-data (common-lisp:error ":textdata is required") :type
    (common-lisp:or text-data common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or source-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-content-data-details
                    'make-source-content-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-content-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-content-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ranking-data))
      (common-lisp:list
       (common-lisp:cons "rankingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-data))
      (common-lisp:list
       (common-lisp:cons "textData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-content-data-details))
   common-lisp:nil))
(common-lisp:deftype source-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-content-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-content-upload-request-"))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or content-type common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (presigned-url-time-to-live common-lisp:nil :type
    (common-lisp:or time-to-live common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-content-upload-request
                    'make-start-content-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presigned-url-time-to-live))
      (common-lisp:list
       (common-lisp:cons "presignedUrlTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-content-upload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-content-upload-response-"))
   (headers-to-include (common-lisp:error ":headerstoinclude is required")
    :type (common-lisp:or headers common-lisp:null))
   (upload-id (common-lisp:error ":uploadid is required") :type
    (common-lisp:or upload-id common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null))
   (url-expiry (common-lisp:error ":urlexpiry is required") :type
    (common-lisp:or synthetic-timestamp-epoch-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-content-upload-response
                    'make-start-content-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-to-include))
      (common-lisp:list
       (common-lisp:cons "headersToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "urlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-content-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-job-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (external-source-configuration common-lisp:nil :type
    (common-lisp:or external-source-configuration common-lisp:null))
   (import-job-type (common-lisp:error ":importjobtype is required") :type
    (common-lisp:or import-job-type common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or content-metadata common-lisp:null))
   (upload-id (common-lisp:error ":uploadid is required") :type
    (common-lisp:or upload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-job-request 'make-start-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-configuration))
      (common-lisp:list
       (common-lisp:cons "externalSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-type))
      (common-lisp:list
       (common-lisp:cons "importJobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-job-response-"))
   (import-job common-lisp:nil :type
    (common-lisp:or import-job-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-job-response
                    'make-start-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job))
      (common-lisp:list
       (common-lisp:cons "importJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-epoch-seconds () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-data-"))
   (excerpt common-lisp:nil :type
    (common-lisp:or document-text common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or document-text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'text-data 'make-text-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excerpt))
      (common-lisp:list
       (common-lisp:cons "excerpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-data))
   common-lisp:nil))
(common-lisp:deftype time-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-content-request-"))
   (content-id (common-lisp:error ":contentid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or content-metadata common-lisp:null))
   (override-link-out-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (remove-override-link-out-uri common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (revision-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or content-title common-lisp:null))
   (upload-id common-lisp:nil :type
    (common-lisp:or upload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-content-request 'make-update-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "overrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-override-link-out-uri))
      (common-lisp:list
       (common-lisp:cons "removeOverrideLinkOutUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "uploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-content-response-"))
   (content common-lisp:nil :type
    (common-lisp:or content-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-content-response 'make-update-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-knowledge-base-template-uri-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-knowledge-base-template-uri-request-"))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (template-uri (common-lisp:error ":templateuri is required") :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-template-uri-request
                    'make-update-knowledge-base-template-uri-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-uri))
      (common-lisp:list
       (common-lisp:cons "templateUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-knowledge-base-template-uri-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-knowledge-base-template-uri-response-"))
   (knowledge-base common-lisp:nil :type
    (common-lisp:or knowledge-base-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-knowledge-base-template-uri-response
                    'make-update-knowledge-base-template-uri-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'knowledge-base))
      (common-lisp:list
       (common-lisp:cons "knowledgeBase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-knowledge-base-template-uri-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-quick-response-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-quick-response-request-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or quick-response-data-provider common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or quick-response-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or quick-response-description common-lisp:null))
   (grouping-configuration common-lisp:nil :type
    (common-lisp:or grouping-configuration common-lisp:null))
   (is-active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (knowledge-base-id (common-lisp:error ":knowledgebaseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or quick-response-name common-lisp:null))
   (quick-response-id (common-lisp:error ":quickresponseid is required") :type
    (common-lisp:or uuid-or-arn common-lisp:null))
   (remove-description common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (remove-grouping-configuration common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (remove-shortcut-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (shortcut-key common-lisp:nil :type
    (common-lisp:or short-cut-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-quick-response-request
                    'make-update-quick-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "groupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-description))
      (common-lisp:list
       (common-lisp:cons "removeDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-grouping-configuration))
      (common-lisp:list
       (common-lisp:cons "removeGroupingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-shortcut-key))
      (common-lisp:list
       (common-lisp:cons "removeShortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortcut-key))
      (common-lisp:list
       (common-lisp:cons "shortcutKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-quick-response-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-quick-response-response-"))
   (quick-response common-lisp:nil :type
    (common-lisp:or quick-response-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-quick-response-response
                    'make-update-quick-response-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quick-response))
      (common-lisp:list
       (common-lisp:cons "quickResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-quick-response-response))
   common-lisp:nil))
(common-lisp:deftype upload-id () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:deftype uuid-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (qconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype wait-time-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun create-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description name
                     server-side-encryption-configuration tags type)
   (common-lisp:declare
    (common-lisp:ignorable client-token description name
     server-side-encryption-configuration tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/assistants"
                                                        "CreateAssistant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assistant))
(common-lisp:progn
 (common-lisp:defun create-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id association association-type
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id association association-type
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "CreateAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assistant-association))
(common-lisp:progn
 (common-lisp:defun create-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token knowledge-base-id metadata
                     name override-link-out-uri tags title upload-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token knowledge-base-id metadata name
     override-link-out-uri tags title upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "CreateContent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-content))
(common-lisp:progn
 (common-lisp:defun create-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description
                     knowledge-base-type name rendering-configuration
                     server-side-encryption-configuration source-configuration
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description knowledge-base-type name
     rendering-configuration server-side-encryption-configuration
     source-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/knowledgeBases"
                                                        "CreateKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-knowledge-base))
(common-lisp:progn
 (common-lisp:defun create-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels client-token content
                     content-type description grouping-configuration is-active
                     knowledge-base-id language name shortcut-key tags)
   (common-lisp:declare
    (common-lisp:ignorable channels client-token content content-type
     description grouping-configuration is-active knowledge-base-id language
     name shortcut-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "CreateQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-quick-response))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id client-token description
                     name tags)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id client-token description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "CreateSession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun delete-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "DeleteAssistant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assistant))
(common-lisp:progn
 (common-lisp:defun delete-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-association-id assistant-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-association-id assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-association-id))))
                                                        "DeleteAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assistant-association))
(common-lisp:progn
 (common-lisp:defun delete-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "DeleteContent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-content))
(common-lisp:progn
 (common-lisp:defun delete-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-job-id knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable import-job-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-job-id))))
                                                        "DeleteImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-import-job))
(common-lisp:progn
 (common-lisp:defun delete-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "DeleteKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-knowledge-base))
(common-lisp:progn
 (common-lisp:defun delete-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id quick-response-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id quick-response-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "DeleteQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-quick-response))
(common-lisp:progn
 (common-lisp:defun get-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "GetAssistant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assistant))
(common-lisp:progn
 (common-lisp:defun get-assistant-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-association-id assistant-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-association-id assistant-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-assistant-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-association-id))))
                                                        "GetAssistantAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assistant-association))
(common-lisp:progn
 (common-lisp:defun get-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "GetContent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-content))
(common-lisp:progn
 (common-lisp:defun get-content-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable content-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-content-summary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A/summary"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "GetContentSummary"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-content-summary))
(common-lisp:progn
 (common-lisp:defun get-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-job-id knowledge-base-id)
   (common-lisp:declare
    (common-lisp:ignorable import-job-id knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-job-id))))
                                                        "GetImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import-job))
(common-lisp:progn
 (common-lisp:defun get-knowledge-base
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-knowledge-base-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "GetKnowledgeBase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-knowledge-base))
(common-lisp:progn
 (common-lisp:defun get-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id quick-response-id)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id quick-response-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "GetQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-quick-response))
(common-lisp:progn
 (common-lisp:defun get-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results session-id
                     wait-time-seconds)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results session-id
     wait-time-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A/recommendations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetRecommendations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommendations))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id session-id)
   (common-lisp:declare (common-lisp:ignorable assistant-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetSession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun list-assistant-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assistant-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "ListAssistantAssociations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assistant-associations))
(common-lisp:progn
 (common-lisp:defun list-assistants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assistants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/assistants"
                                                        "ListAssistants"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assistants))
(common-lisp:progn
 (common-lisp:defun list-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListContents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contents))
(common-lisp:progn
 (common-lisp:defun list-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListImportJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-knowledge-bases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-knowledge-bases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/knowledgeBases"
                                                        "ListKnowledgeBases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-knowledge-bases))
(common-lisp:progn
 (common-lisp:defun list-quick-responses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-quick-responses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "ListQuickResponses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-quick-responses))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun notify-recommendations-received
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id recommendation-ids
                     session-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id recommendation-ids session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-recommendations-received-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/sessions/~A/recommendations/notify"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "NotifyRecommendationsReceived"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'notify-recommendations-received))
(common-lisp:progn
 (common-lisp:defun put-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id content-feedback target-id
                     target-type)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id content-feedback target-id
     target-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/feedback"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "PutFeedback"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-feedback))
(common-lisp:progn
 (common-lisp:defun query-assistant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token
                     query-condition query-text session-id)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token query-condition
     query-text session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-assistant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/query"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "QueryAssistant"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query-assistant))
(common-lisp:progn
 (common-lisp:defun remove-knowledge-base-template-uri
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-knowledge-base-template-uri-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/templateUri"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "RemoveKnowledgeBaseTemplateUri"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-knowledge-base-template-uri))
(common-lisp:progn
 (common-lisp:defun search-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id max-results next-token
                     search-expression)
   (common-lisp:declare
    (common-lisp:ignorable knowledge-base-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/search"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "SearchContent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-content))
(common-lisp:progn
 (common-lisp:defun search-quick-responses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attributes knowledge-base-id max-results
                     next-token search-expression)
   (common-lisp:declare
    (common-lisp:ignorable attributes knowledge-base-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-quick-responses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/search/quickResponses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "SearchQuickResponses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-quick-responses))
(common-lisp:progn
 (common-lisp:defun search-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assistant-id max-results next-token
                     search-expression)
   (common-lisp:declare
    (common-lisp:ignorable assistant-id max-results next-token
     search-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assistants/~A/searchSessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'assistant-id))))
                                                        "SearchSessions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-sessions))
(common-lisp:progn
 (common-lisp:defun start-content-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type knowledge-base-id
                     presigned-url-time-to-live)
   (common-lisp:declare
    (common-lisp:ignorable content-type knowledge-base-id
     presigned-url-time-to-live))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-content-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/upload"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "StartContentUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-content-upload))
(common-lisp:progn
 (common-lisp:defun start-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token
                     external-source-configuration import-job-type
                     knowledge-base-id metadata upload-id)
   (common-lisp:declare
    (common-lisp:ignorable client-token external-source-configuration
     import-job-type knowledge-base-id metadata upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/importJobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "StartImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-id knowledge-base-id metadata
                     override-link-out-uri remove-override-link-out-uri
                     revision-id title upload-id)
   (common-lisp:declare
    (common-lisp:ignorable content-id knowledge-base-id metadata
     override-link-out-uri remove-override-link-out-uri revision-id title
     upload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/contents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'content-id))))
                                                        "UpdateContent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-content))
(common-lisp:progn
 (common-lisp:defun update-knowledge-base-template-uri
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key knowledge-base-id template-uri)
   (common-lisp:declare (common-lisp:ignorable knowledge-base-id template-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-knowledge-base-template-uri-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/templateUri"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))))
                                                        "UpdateKnowledgeBaseTemplateUri"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-knowledge-base-template-uri))
(common-lisp:progn
 (common-lisp:defun update-quick-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels content content-type description
                     grouping-configuration is-active knowledge-base-id
                     language name quick-response-id remove-description
                     remove-grouping-configuration remove-shortcut-key
                     shortcut-key)
   (common-lisp:declare
    (common-lisp:ignorable channels content content-type description
     grouping-configuration is-active knowledge-base-id language name
     quick-response-id remove-description remove-grouping-configuration
     remove-shortcut-key shortcut-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-quick-response-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/knowledgeBases/~A/quickResponses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'knowledge-base-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quick-response-id))))
                                                        "UpdateQuickResponse"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-quick-response))
