;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/securitylake/api
  (:use)
  (:nicknames #:aws/securitylake)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/securitylake/api)
(common-lisp:progn
 (common-lisp:defclass securitylake-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "securitylake" :protocol
                        :rest-json))
 (common-lisp:export 'securitylake-request))
(common-lisp:progn
 (common-lisp:define-condition securitylake-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'securitylake-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AccountNotFoundException" . account-not-found-exception)
    ("BucketNotFoundException" . bucket-not-found-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("ConflictSourceNamesException" . conflict-source-names-exception)
    ("ConflictSubscriptionException" . conflict-subscription-exception)
    ("EventBridgeException" . event-bridge-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("S3Exception" . s3exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (securitylake-error)
     ((error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       access-denied-exception-error-code)
      (message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception
                    'access-denied-exception-error-code
                    'access-denied-exception-message)))
(common-lisp:deftype access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-type-list ()
   '(trivial-types:proper-list access-type))
 (common-lisp:defun |make-access-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition account-not-found-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       account-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-not-found-exception
                    'account-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass account-sources common-lisp:nil
                       ((source-type :initarg :|sourceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-sources-source-type :initform
                         (common-lisp:error ":sourcetype is required"))
                        (logs-status :initarg :|logsStatus| :type
                         (common-lisp:or logs-status-list common-lisp:null)
                         :accessor %account-sources-logs-status :initform
                         common-lisp:nil)
                        (event-class :initarg :|eventClass| :type
                         (common-lisp:or ocsf-event-class common-lisp:null)
                         :accessor %account-sources-event-class :initform
                         common-lisp:nil)
                        (account :initarg :|account| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %account-sources-account :initform
                         (common-lisp:error ":account is required"))))
 (common-lisp:export (common-lisp:list 'account-sources 'make-account-sources))
 (common-lisp:defun make-account-sources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-type logs-status event-class
                     account)
   (common-lisp:apply #'common-lisp:make-instance 'account-sources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-sources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-sources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "eventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs-status))
      (common-lisp:list
       (common-lisp:cons "logsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-sources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-sources-list ()
   '(trivial-types:proper-list account-sources))
 (common-lisp:defun |make-account-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-sources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype all-dimensions-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-all-dimensions-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass auto-enable-new-region-configuration common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or aws-source-type-list common-lisp:null)
                         :accessor
                         %auto-enable-new-region-configuration-sources
                         :initform (common-lisp:error ":sources is required"))
                        (region :initarg :|region| :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %auto-enable-new-region-configuration-region :initform
                         (common-lisp:error ":region is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-enable-new-region-configuration
                    'make-auto-enable-new-region-configuration))
 (common-lisp:defun make-auto-enable-new-region-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources region)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-enable-new-region-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-enable-new-region-configuration-list ()
   '(trivial-types:proper-list auto-enable-new-region-configuration))
 (common-lisp:defun |make-auto-enable-new-region-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-enable-new-region-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-log-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-source-type-list ()
   '(trivial-types:proper-list aws-log-source-type))
 (common-lisp:defun |make-aws-source-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-log-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-not-found-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bucket-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bucket-not-found-exception
                    'bucket-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition conflict-source-names-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-source-names-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-source-names-exception
                    'conflict-source-names-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-subscription-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-subscription-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-subscription-exception
                    'conflict-subscription-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-aws-log-source-request common-lisp:nil
                       ((input-order :initarg :|inputOrder| :type
                         (common-lisp:or dimension-set common-lisp:null)
                         :accessor %create-aws-log-source-request-input-order
                         :initform
                         (common-lisp:error ":inputorder is required"))
                        (enable-two-dimensions :initarg :|enableTwoDimensions|
                         :type
                         (common-lisp:or two-dimensions-map common-lisp:null)
                         :accessor
                         %create-aws-log-source-request-enable-two-dimensions
                         :initform common-lisp:nil)
                        (enable-single-dimension :initarg
                         :|enableSingleDimension| :type
                         (common-lisp:or input-set common-lisp:null) :accessor
                         %create-aws-log-source-request-enable-single-dimension
                         :initform common-lisp:nil)
                        (enable-all-dimensions :initarg :|enableAllDimensions|
                         :type
                         (common-lisp:or all-dimensions-map common-lisp:null)
                         :accessor
                         %create-aws-log-source-request-enable-all-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-request
                    'make-create-aws-log-source-request))
 (common-lisp:defun make-create-aws-log-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-order enable-two-dimensions
                     enable-single-dimension enable-all-dimensions)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-aws-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "enableAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-single-dimension))
      (common-lisp:list
       (common-lisp:cons "enableSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "enableTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-aws-log-source-response common-lisp:nil
                       ((processing :initarg :|processing| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %create-aws-log-source-response-processing
                         :initform common-lisp:nil)
                        (failed :initarg :|failed| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %create-aws-log-source-response-failed
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-response
                    'make-create-aws-log-source-response))
 (common-lisp:defun make-create-aws-log-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processing failed)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-aws-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-log-source-request common-lisp:nil
                       ((log-provider-account-id :initarg
                         :|logProviderAccountId| :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %create-custom-log-source-request-log-provider-account-id
                         :initform
                         (common-lisp:error
                          ":logprovideraccountid is required"))
                        (glue-invocation-role-arn :initarg
                         :|glueInvocationRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-custom-log-source-request-glue-invocation-role-arn
                         :initform
                         (common-lisp:error
                          ":glueinvocationrolearn is required"))
                        (event-class :initarg :|eventClass| :type
                         (common-lisp:or ocsf-event-class common-lisp:null)
                         :accessor
                         %create-custom-log-source-request-event-class
                         :initform
                         (common-lisp:error ":eventclass is required"))
                        (custom-source-name :initarg :|customSourceName| :type
                         (common-lisp:or custom-source-type common-lisp:null)
                         :accessor
                         %create-custom-log-source-request-custom-source-name
                         :initform
                         (common-lisp:error ":customsourcename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-request
                    'make-create-custom-log-source-request))
 (common-lisp:defun make-create-custom-log-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-provider-account-id
                     glue-invocation-role-arn event-class custom-source-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-source-name))
      (common-lisp:list
       (common-lisp:cons "customSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "eventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-invocation-role-arn))
      (common-lisp:list
       (common-lisp:cons "glueInvocationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-provider-account-id))
      (common-lisp:list
       (common-lisp:cons "logProviderAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-log-source-response common-lisp:nil
                       ((log-provider-access-role-arn :initarg
                         :|logProviderAccessRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-custom-log-source-response-log-provider-access-role-arn
                         :initform
                         (common-lisp:error
                          ":logprovideraccessrolearn is required"))
                        (glue-table-name :initarg :|glueTableName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-custom-log-source-response-glue-table-name
                         :initform
                         (common-lisp:error ":gluetablename is required"))
                        (glue-database-name :initarg :|glueDatabaseName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-custom-log-source-response-glue-database-name
                         :initform
                         (common-lisp:error ":gluedatabasename is required"))
                        (glue-crawler-name :initarg :|glueCrawlerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-custom-log-source-response-glue-crawler-name
                         :initform
                         (common-lisp:error ":gluecrawlername is required"))
                        (custom-data-location :initarg :|customDataLocation|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-custom-log-source-response-custom-data-location
                         :initform
                         (common-lisp:error
                          ":customdatalocation is required"))))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-response
                    'make-create-custom-log-source-response))
 (common-lisp:defun make-create-custom-log-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-provider-access-role-arn
                     glue-table-name glue-database-name glue-crawler-name
                     custom-data-location)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-location))
      (common-lisp:list
       (common-lisp:cons "customDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-crawler-name))
      (common-lisp:list
       (common-lisp:cons "glueCrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-database-name))
      (common-lisp:list
       (common-lisp:cons "glueDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-table-name))
      (common-lisp:list
       (common-lisp:cons "glueTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-provider-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "logProviderAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-auto-enable-request common-lisp:nil
                       ((configuration-for-new-accounts :initarg
                         :|configurationForNewAccounts| :type
                         (common-lisp:or
                          auto-enable-new-region-configuration-list
                          common-lisp:null)
                         :accessor
                         %create-datalake-auto-enable-request-configuration-for-new-accounts
                         :initform
                         (common-lisp:error
                          ":configurationfornewaccounts is required"))))
 (common-lisp:export
  (common-lisp:list 'create-datalake-auto-enable-request
                    'make-create-datalake-auto-enable-request))
 (common-lisp:defun make-create-datalake-auto-enable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-for-new-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-auto-enable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-for-new-accounts))
      (common-lisp:list
       (common-lisp:cons "configurationForNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-auto-enable-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-datalake-auto-enable-response
                    'make-create-datalake-auto-enable-response))
 (common-lisp:defun make-create-datalake-auto-enable-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-auto-enable-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-delegated-admin-request common-lisp:nil
                       ((account :initarg :|account| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %create-datalake-delegated-admin-request-account
                         :initform
                         (common-lisp:error ":account is required"))))
 (common-lisp:export
  (common-lisp:list 'create-datalake-delegated-admin-request
                    'make-create-datalake-delegated-admin-request))
 (common-lisp:defun make-create-datalake-delegated-admin-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-delegated-admin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-delegated-admin-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-datalake-delegated-admin-response
                    'make-create-datalake-delegated-admin-response))
 (common-lisp:defun make-create-datalake-delegated-admin-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-delegated-admin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-exceptions-subscription-request
                       common-lisp:nil
                       ((subscription-protocol :initarg :|subscriptionProtocol|
                         :type
                         (common-lisp:or subscription-protocol-type
                                         common-lisp:null)
                         :accessor
                         %create-datalake-exceptions-subscription-request-subscription-protocol
                         :initform
                         (common-lisp:error
                          ":subscriptionprotocol is required"))
                        (notification-endpoint :initarg :|notificationEndpoint|
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %create-datalake-exceptions-subscription-request-notification-endpoint
                         :initform
                         (common-lisp:error
                          ":notificationendpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'create-datalake-exceptions-subscription-request
                    'make-create-datalake-exceptions-subscription-request))
 (common-lisp:defun make-create-datalake-exceptions-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-protocol
                     notification-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-exceptions-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-exceptions-subscription-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-datalake-exceptions-subscription-response
                    'make-create-datalake-exceptions-subscription-response))
 (common-lisp:defun make-create-datalake-exceptions-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-datalake-exceptions-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-request common-lisp:nil
                       ((regions :initarg :|regions| :type
                         (common-lisp:or region-set common-lisp:null) :accessor
                         %create-datalake-request-regions :initform
                         common-lisp:nil)
                        (meta-store-manager-role-arn :initarg
                         :|metaStoreManagerRoleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-datalake-request-meta-store-manager-role-arn
                         :initform common-lisp:nil)
                        (enable-all :initarg :|enableAll| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-datalake-request-enable-all :initform
                         common-lisp:nil)
                        (configurations :initarg :|configurations| :type
                         (common-lisp:or lake-configuration-request-map
                                         common-lisp:null)
                         :accessor %create-datalake-request-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-datalake-request 'make-create-datalake-request))
 (common-lisp:defun make-create-datalake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions meta-store-manager-role-arn
                     enable-all configurations)
   (common-lisp:apply #'common-lisp:make-instance 'create-datalake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-all))
      (common-lisp:list
       (common-lisp:cons "enableAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meta-store-manager-role-arn))
      (common-lisp:list
       (common-lisp:cons "metaStoreManagerRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-datalake-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-datalake-response 'make-create-datalake-response))
 (common-lisp:defun make-create-datalake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-datalake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscriber-request common-lisp:nil
                       ((subscriber-name :initarg :|subscriberName| :type
                         (common-lisp:or
                          create-subscriber-request-subscriber-name-string
                          common-lisp:null)
                         :accessor %create-subscriber-request-subscriber-name
                         :initform
                         (common-lisp:error ":subscribername is required"))
                        (subscriber-description :initarg
                         :|subscriberDescription| :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         %create-subscriber-request-subscriber-description
                         :initform common-lisp:nil)
                        (source-types :initarg :|sourceTypes| :type
                         (common-lisp:or source-type-list common-lisp:null)
                         :accessor %create-subscriber-request-source-types
                         :initform
                         (common-lisp:error ":sourcetypes is required"))
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %create-subscriber-request-external-id
                         :initform
                         (common-lisp:error ":externalid is required"))
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %create-subscriber-request-account-id
                         :initform
                         (common-lisp:error ":accountid is required"))
                        (access-types :initarg :|accessTypes| :type
                         (common-lisp:or access-type-list common-lisp:null)
                         :accessor %create-subscriber-request-access-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-request
                    'make-create-subscriber-request))
 (common-lisp:defun make-create-subscriber-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscriber-name subscriber-description
                     source-types external-id account-id access-types)
   (common-lisp:apply #'common-lisp:make-instance 'create-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype create-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-subscriber-response common-lisp:nil
                       ((subscription-id :initarg :|subscriptionId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-subscriber-response-subscription-id :initform
                         (common-lisp:error ":subscriptionid is required"))
                        (sns-arn :initarg :|snsArn| :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor %create-subscriber-response-sns-arn
                         :initform common-lisp:nil)
                        (s3bucket-arn :initarg :|s3BucketArn| :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor %create-subscriber-response-s3bucket-arn
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-subscriber-response-role-arn :initform
                         common-lisp:nil)
                        (resource-share-name :initarg :|resourceShareName|
                         :type
                         (common-lisp:or resource-share-name common-lisp:null)
                         :accessor
                         %create-subscriber-response-resource-share-name
                         :initform common-lisp:nil)
                        (resource-share-arn :initarg :|resourceShareArn| :type
                         (common-lisp:or resource-share-arn common-lisp:null)
                         :accessor
                         %create-subscriber-response-resource-share-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-response
                    'make-create-subscriber-response))
 (common-lisp:defun make-create-subscriber-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-id sns-arn s3bucket-arn
                     role-arn resource-share-name resource-share-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-arn))
      (common-lisp:list
       (common-lisp:cons "resourceShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-name))
      (common-lisp:list
       (common-lisp:cons "resourceShareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-arn))
      (common-lisp:list
       (common-lisp:cons "snsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscription-notification-configuration-request
                       common-lisp:nil
                       ((subscription-id :initarg :|subscriptionId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-subscription-notification-configuration-request-subscription-id
                         :initform
                         (common-lisp:error ":subscriptionid is required"))
                        (subscription-endpoint :initarg :|subscriptionEndpoint|
                         :type
                         (common-lisp:or
                          create-subscription-notification-configuration-request-subscription-endpoint-string
                          common-lisp:null)
                         :accessor
                         %create-subscription-notification-configuration-request-subscription-endpoint
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-subscription-notification-configuration-request-role-arn
                         :initform common-lisp:nil)
                        (https-method :initarg :|httpsMethod| :type
                         (common-lisp:or https-method common-lisp:null)
                         :accessor
                         %create-subscription-notification-configuration-request-https-method
                         :initform common-lisp:nil)
                        (https-api-key-value :initarg :|httpsApiKeyValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subscription-notification-configuration-request-https-api-key-value
                         :initform common-lisp:nil)
                        (https-api-key-name :initarg :|httpsApiKeyName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-subscription-notification-configuration-request-https-api-key-name
                         :initform common-lisp:nil)
                        (create-sqs :initarg :|createSqs| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-subscription-notification-configuration-request-create-sqs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-notification-configuration-request
                    'make-create-subscription-notification-configuration-request))
 (common-lisp:defun make-create-subscription-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-id subscription-endpoint
                     role-arn https-method https-api-key-value
                     https-api-key-name create-sqs)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-sqs))
      (common-lisp:list
       (common-lisp:cons "createSqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-name))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-value))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-method))
      (common-lisp:list
       (common-lisp:cons "httpsMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:deftype create-subscription-notification-configuration-request-subscription-endpoint-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-subscription-notification-configuration-response
                       common-lisp:nil
                       ((queue-arn :initarg :|queueArn| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %create-subscription-notification-configuration-response-queue-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-notification-configuration-response
                    'make-create-subscription-notification-configuration-response))
 (common-lisp:defun make-create-subscription-notification-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscription-notification-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "queueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:deftype custom-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-aws-log-source-request common-lisp:nil
                       ((input-order :initarg :|inputOrder| :type
                         (common-lisp:or dimension-set common-lisp:null)
                         :accessor %delete-aws-log-source-request-input-order
                         :initform
                         (common-lisp:error ":inputorder is required"))
                        (disable-two-dimensions :initarg
                         :|disableTwoDimensions| :type
                         (common-lisp:or two-dimensions-map common-lisp:null)
                         :accessor
                         %delete-aws-log-source-request-disable-two-dimensions
                         :initform common-lisp:nil)
                        (disable-single-dimension :initarg
                         :|disableSingleDimension| :type
                         (common-lisp:or input-set common-lisp:null) :accessor
                         %delete-aws-log-source-request-disable-single-dimension
                         :initform common-lisp:nil)
                        (disable-all-dimensions :initarg
                         :|disableAllDimensions| :type
                         (common-lisp:or all-dimensions-map common-lisp:null)
                         :accessor
                         %delete-aws-log-source-request-disable-all-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-request
                    'make-delete-aws-log-source-request))
 (common-lisp:defun make-delete-aws-log-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-order disable-two-dimensions
                     disable-single-dimension disable-all-dimensions)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-aws-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "disableAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-single-dimension))
      (common-lisp:list
       (common-lisp:cons "disableSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "disableTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-aws-log-source-response common-lisp:nil
                       ((processing :initarg :|processing| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %delete-aws-log-source-response-processing
                         :initform common-lisp:nil)
                        (failed :initarg :|failed| :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %delete-aws-log-source-response-failed
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-response
                    'make-delete-aws-log-source-response))
 (common-lisp:defun make-delete-aws-log-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processing failed)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-aws-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-log-source-request common-lisp:nil
                       ((custom-source-name :initarg :|customSourceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-custom-log-source-request-custom-source-name
                         :initform
                         (common-lisp:error ":customsourcename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-request
                    'make-delete-custom-log-source-request))
 (common-lisp:defun make-delete-custom-log-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-source-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-log-source-response common-lisp:nil
                       ((custom-data-location :initarg :|customDataLocation|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-custom-log-source-response-custom-data-location
                         :initform
                         (common-lisp:error
                          ":customdatalocation is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-response
                    'make-delete-custom-log-source-response))
 (common-lisp:defun make-delete-custom-log-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-data-location)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-location))
      (common-lisp:list
       (common-lisp:cons "customDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-auto-enable-request common-lisp:nil
                       ((remove-from-configuration-for-new-accounts :initarg
                         :|removeFromConfigurationForNewAccounts| :type
                         (common-lisp:or
                          auto-enable-new-region-configuration-list
                          common-lisp:null)
                         :accessor
                         %delete-datalake-auto-enable-request-remove-from-configuration-for-new-accounts
                         :initform
                         (common-lisp:error
                          ":removefromconfigurationfornewaccounts is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-auto-enable-request
                    'make-delete-datalake-auto-enable-request))
 (common-lisp:defun make-delete-datalake-auto-enable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     remove-from-configuration-for-new-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-auto-enable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-from-configuration-for-new-accounts))
      (common-lisp:list
       (common-lisp:cons "removeFromConfigurationForNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-auto-enable-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-datalake-auto-enable-response
                    'make-delete-datalake-auto-enable-response))
 (common-lisp:defun make-delete-datalake-auto-enable-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-auto-enable-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-delegated-admin-request common-lisp:nil
                       ((account :initarg :|account| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %delete-datalake-delegated-admin-request-account
                         :initform
                         (common-lisp:error ":account is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-delegated-admin-request
                    'make-delete-datalake-delegated-admin-request))
 (common-lisp:defun make-delete-datalake-delegated-admin-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-delegated-admin-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-delegated-admin-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-datalake-delegated-admin-response
                    'make-delete-datalake-delegated-admin-response))
 (common-lisp:defun make-delete-datalake-delegated-admin-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-delegated-admin-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-exceptions-subscription-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-datalake-exceptions-subscription-request
                    'make-delete-datalake-exceptions-subscription-request))
 (common-lisp:defun make-delete-datalake-exceptions-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-exceptions-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-exceptions-subscription-response
                       common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %delete-datalake-exceptions-subscription-response-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-exceptions-subscription-response
                    'make-delete-datalake-exceptions-subscription-response))
 (common-lisp:defun make-delete-datalake-exceptions-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-datalake-exceptions-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-datalake-request 'make-delete-datalake-request))
 (common-lisp:defun make-delete-datalake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-datalake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-datalake-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-datalake-response 'make-delete-datalake-response))
 (common-lisp:defun make-delete-datalake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-datalake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-subscriber-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-request
                    'make-delete-subscriber-request))
 (common-lisp:defun make-delete-subscriber-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-response
                    'make-delete-subscriber-response))
 (common-lisp:defun make-delete-subscriber-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-notification-configuration-request
                       common-lisp:nil
                       ((subscription-id :initarg :|subscriptionId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-subscription-notification-configuration-request-subscription-id
                         :initform
                         (common-lisp:error ":subscriptionid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-notification-configuration-request
                    'make-delete-subscription-notification-configuration-request))
 (common-lisp:defun make-delete-subscription-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscription-notification-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-subscription-notification-configuration-response
                    'make-delete-subscription-notification-configuration-response))
 (common-lisp:defun make-delete-subscription-notification-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscription-notification-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-set () '(trivial-types:proper-list dimension))
 (common-lisp:defun |make-dimension-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-bridge-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       event-bridge-exception-message)))
 (common-lisp:export
  (common-lisp:list 'event-bridge-exception 'event-bridge-exception-message)))
(common-lisp:progn
 (common-lisp:defclass failures common-lisp:nil
                       ((timestamp :initarg common-lisp:string :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %failures-timestamp :initform
                         (common-lisp:error ":string is required"))
                        (remediation :initarg :|remediation| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %failures-remediation :initform
                         (common-lisp:error ":remediation is required"))
                        (exception-message :initarg :|exceptionMessage| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %failures-exception-message :initform
                         (common-lisp:error ":exceptionmessage is required"))))
 (common-lisp:export (common-lisp:list 'failures 'make-failures))
 (common-lisp:defun make-failures
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp remediation exception-message)
   (common-lisp:apply #'common-lisp:make-instance 'failures
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failures))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failures))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exception-message))
      (common-lisp:list
       (common-lisp:cons "exceptionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failures))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failures-response common-lisp:nil
                       ((region :initarg :|region| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %failures-response-region :initform
                         common-lisp:nil)
                        (failures :initarg :|failures| :type
                         (common-lisp:or failureslist common-lisp:null)
                         :accessor %failures-response-failures :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failures-response 'make-failures-response))
 (common-lisp:defun make-failures-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region failures)
   (common-lisp:apply #'common-lisp:make-instance 'failures-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failures-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failures-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failures-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failures-response-list ()
   '(trivial-types:proper-list failures-response))
 (common-lisp:defun |make-failures-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failures-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failureslist () '(trivial-types:proper-list failures))
 (common-lisp:defun |make-failureslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failures))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-datalake-auto-enable-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-datalake-auto-enable-request
                    'make-get-datalake-auto-enable-request))
 (common-lisp:defun make-get-datalake-auto-enable-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-auto-enable-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-auto-enable-response common-lisp:nil
                       ((auto-enable-new-accounts :initarg
                         :|autoEnableNewAccounts| :type
                         (common-lisp:or
                          auto-enable-new-region-configuration-list
                          common-lisp:null)
                         :accessor
                         %get-datalake-auto-enable-response-auto-enable-new-accounts
                         :initform
                         (common-lisp:error
                          ":autoenablenewaccounts is required"))))
 (common-lisp:export
  (common-lisp:list 'get-datalake-auto-enable-response
                    'make-get-datalake-auto-enable-response))
 (common-lisp:defun make-get-datalake-auto-enable-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-enable-new-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-auto-enable-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-new-accounts))
      (common-lisp:list
       (common-lisp:cons "autoEnableNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-exceptions-expiry-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-expiry-request
                    'make-get-datalake-exceptions-expiry-request))
 (common-lisp:defun make-get-datalake-exceptions-expiry-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-exceptions-expiry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-exceptions-expiry-response common-lisp:nil
                       ((exception-message-expiry :initarg
                         :|exceptionMessageExpiry| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %get-datalake-exceptions-expiry-response-exception-message-expiry
                         :initform
                         (common-lisp:error
                          ":exceptionmessageexpiry is required"))))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-expiry-response
                    'make-get-datalake-exceptions-expiry-response))
 (common-lisp:defun make-get-datalake-exceptions-expiry-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exception-message-expiry)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-exceptions-expiry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-message-expiry))
      (common-lisp:list
       (common-lisp:cons "exceptionMessageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-exceptions-subscription-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-subscription-request
                    'make-get-datalake-exceptions-subscription-request))
 (common-lisp:defun make-get-datalake-exceptions-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-exceptions-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-exceptions-subscription-response
                       common-lisp:nil
                       ((protocol-and-notification-endpoint :initarg
                         :|protocolAndNotificationEndpoint| :type
                         (common-lisp:or protocol-and-notification-endpoint
                                         common-lisp:null)
                         :accessor
                         %get-datalake-exceptions-subscription-response-protocol-and-notification-endpoint
                         :initform
                         (common-lisp:error
                          ":protocolandnotificationendpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-subscription-response
                    'make-get-datalake-exceptions-subscription-response))
 (common-lisp:defun make-get-datalake-exceptions-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol-and-notification-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-datalake-exceptions-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protocol-and-notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "protocolAndNotificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-datalake-request 'make-get-datalake-request))
 (common-lisp:defun make-get-datalake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-datalake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-response common-lisp:nil
                       ((configurations :initarg :|configurations| :type
                         (common-lisp:or lake-configuration-response-map
                                         common-lisp:null)
                         :accessor %get-datalake-response-configurations
                         :initform
                         (common-lisp:error ":configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'get-datalake-response 'make-get-datalake-response))
 (common-lisp:defun make-get-datalake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configurations)
   (common-lisp:apply #'common-lisp:make-instance 'get-datalake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-status-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %get-datalake-status-request-next-token
                         :initform common-lisp:nil)
                        (max-account-results :initarg :|maxAccountResults|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %get-datalake-status-request-max-account-results
                         :initform common-lisp:nil)
                        (account-set :initarg :|accountSet| :type
                         (common-lisp:or input-set common-lisp:null) :accessor
                         %get-datalake-status-request-account-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-status-request
                    'make-get-datalake-status-request))
 (common-lisp:defun make-get-datalake-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-account-results
                     account-set)
   (common-lisp:apply #'common-lisp:make-instance 'get-datalake-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-set))
      (common-lisp:list
       (common-lisp:cons "accountSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-account-results))
      (common-lisp:list
       (common-lisp:cons "maxAccountResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-datalake-status-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %get-datalake-status-response-next-token
                         :initform common-lisp:nil)
                        (account-sources-list :initarg :|accountSourcesList|
                         :type
                         (common-lisp:or account-sources-list common-lisp:null)
                         :accessor
                         %get-datalake-status-response-account-sources-list
                         :initform
                         (common-lisp:error
                          ":accountsourceslist is required"))))
 (common-lisp:export
  (common-lisp:list 'get-datalake-status-response
                    'make-get-datalake-status-response))
 (common-lisp:defun make-get-datalake-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-sources-list)
   (common-lisp:apply #'common-lisp:make-instance 'get-datalake-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-sources-list))
      (common-lisp:list
       (common-lisp:cons "accountSourcesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscriber-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-subscriber-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-request 'make-get-subscriber-request))
 (common-lisp:defun make-get-subscriber-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscriber-response common-lisp:nil
                       ((subscriber :initarg :|subscriber| :type
                         (common-lisp:or subscriber-resource common-lisp:null)
                         :accessor %get-subscriber-response-subscriber
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-response 'make-get-subscriber-response))
 (common-lisp:defun make-get-subscriber-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscriber)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   common-lisp:nil))
(common-lisp:deftype https-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-set () '(trivial-types:proper-list safe-string))
 (common-lisp:defun |make-input-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list safe-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lake-configuration-request common-lisp:nil
                       ((tags-map :initarg :|tagsMap| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %lake-configuration-request-tags-map :initform
                         common-lisp:nil)
                        (retention-settings :initarg :|retentionSettings| :type
                         (common-lisp:or retention-setting-list
                                         common-lisp:null)
                         :accessor
                         %lake-configuration-request-retention-settings
                         :initform common-lisp:nil)
                        (replication-role-arn :initarg :|replicationRoleArn|
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         %lake-configuration-request-replication-role-arn
                         :initform common-lisp:nil)
                        (replication-destination-regions :initarg
                         :|replicationDestinationRegions| :type
                         (common-lisp:or region-set common-lisp:null) :accessor
                         %lake-configuration-request-replication-destination-regions
                         :initform common-lisp:nil)
                        (encryption-key :initarg :|encryptionKey| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lake-configuration-request-encryption-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lake-configuration-request
                    'make-lake-configuration-request))
 (common-lisp:defun make-lake-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags-map retention-settings
                     replication-role-arn replication-destination-regions
                     encryption-key)
   (common-lisp:apply #'common-lisp:make-instance 'lake-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-destination-regions))
      (common-lisp:list
       (common-lisp:cons "replicationDestinationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-role-arn))
      (common-lisp:list
       (common-lisp:cons "replicationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-settings))
      (common-lisp:list
       (common-lisp:cons "retentionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-map))
      (common-lisp:list
       (common-lisp:cons "tagsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-configuration-request-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-lake-configuration-request-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass lake-configuration-response common-lisp:nil
                       ((update-status :initarg :|updateStatus| :type
                         (common-lisp:or update-status common-lisp:null)
                         :accessor %lake-configuration-response-update-status
                         :initform common-lisp:nil)
                        (tags-map :initarg :|tagsMap| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %lake-configuration-response-tags-map :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or |settingsStatus| common-lisp:null)
                         :accessor %lake-configuration-response-status
                         :initform common-lisp:nil)
                        (s3bucket-arn :initarg :|s3BucketArn| :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor %lake-configuration-response-s3bucket-arn
                         :initform common-lisp:nil)
                        (retention-settings :initarg :|retentionSettings| :type
                         (common-lisp:or retention-setting-list
                                         common-lisp:null)
                         :accessor
                         %lake-configuration-response-retention-settings
                         :initform common-lisp:nil)
                        (replication-role-arn :initarg :|replicationRoleArn|
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         %lake-configuration-response-replication-role-arn
                         :initform common-lisp:nil)
                        (replication-destination-regions :initarg
                         :|replicationDestinationRegions| :type
                         (common-lisp:or region-set common-lisp:null) :accessor
                         %lake-configuration-response-replication-destination-regions
                         :initform common-lisp:nil)
                        (encryption-key :initarg :|encryptionKey| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %lake-configuration-response-encryption-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lake-configuration-response
                    'make-lake-configuration-response))
 (common-lisp:defun make-lake-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-status tags-map status
                     s3bucket-arn retention-settings replication-role-arn
                     replication-destination-regions encryption-key)
   (common-lisp:apply #'common-lisp:make-instance 'lake-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-destination-regions))
      (common-lisp:list
       (common-lisp:cons "replicationDestinationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-role-arn))
      (common-lisp:list
       (common-lisp:cons "replicationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-settings))
      (common-lisp:list
       (common-lisp:cons "retentionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-map))
      (common-lisp:list
       (common-lisp:cons "tagsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "updateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-configuration-response-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-lake-configuration-response-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass last-update-failure common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %last-update-failure-reason :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %last-update-failure-code :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'last-update-failure 'make-last-update-failure))
 (common-lisp:defun make-last-update-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason code)
   (common-lisp:apply #'common-lisp:make-instance 'last-update-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-update-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-update-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-update-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datalake-exceptions-request common-lisp:nil
                       ((region-set :initarg :|regionSet| :type
                         (common-lisp:or region-set common-lisp:null) :accessor
                         %list-datalake-exceptions-request-region-set :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %list-datalake-exceptions-request-next-token
                         :initform common-lisp:nil)
                        (max-failures :initarg :|maxFailures| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-datalake-exceptions-request-max-failures
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-datalake-exceptions-request
                    'make-list-datalake-exceptions-request))
 (common-lisp:defun make-list-datalake-exceptions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region-set next-token max-failures)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-datalake-exceptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-failures))
      (common-lisp:list
       (common-lisp:cons "maxFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-set))
      (common-lisp:list
       (common-lisp:cons "regionSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datalake-exceptions-response common-lisp:nil
                       ((non-retryable-failures :initarg
                         :|nonRetryableFailures| :type
                         (common-lisp:or failures-response-list
                                         common-lisp:null)
                         :accessor
                         %list-datalake-exceptions-response-non-retryable-failures
                         :initform
                         (common-lisp:error
                          ":nonretryablefailures is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %list-datalake-exceptions-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-datalake-exceptions-response
                    'make-list-datalake-exceptions-response))
 (common-lisp:defun make-list-datalake-exceptions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key non-retryable-failures next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-datalake-exceptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-retryable-failures))
      (common-lisp:list
       (common-lisp:cons "nonRetryableFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-sources-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %list-log-sources-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-log-sources-request-max-results :initform
                         common-lisp:nil)
                        (list-two-dimensions :initarg :|listTwoDimensions|
                         :type
                         (common-lisp:or two-dimensions-map common-lisp:null)
                         :accessor
                         %list-log-sources-request-list-two-dimensions
                         :initform common-lisp:nil)
                        (list-single-dimension :initarg :|listSingleDimension|
                         :type (common-lisp:or input-set common-lisp:null)
                         :accessor
                         %list-log-sources-request-list-single-dimension
                         :initform common-lisp:nil)
                        (list-all-dimensions :initarg :|listAllDimensions|
                         :type
                         (common-lisp:or all-dimensions-map common-lisp:null)
                         :accessor
                         %list-log-sources-request-list-all-dimensions
                         :initform common-lisp:nil)
                        (input-order :initarg :|inputOrder| :type
                         (common-lisp:or dimension-set common-lisp:null)
                         :accessor %list-log-sources-request-input-order
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-request 'make-list-log-sources-request))
 (common-lisp:defun make-list-log-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     list-two-dimensions list-single-dimension
                     list-all-dimensions input-order)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "listAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-single-dimension))
      (common-lisp:list
       (common-lisp:cons "listSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "listTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-sources-response common-lisp:nil
                       ((region-source-types-accounts-list :initarg
                         :|regionSourceTypesAccountsList| :type
                         (common-lisp:or region-source-types-accounts-list
                                         common-lisp:null)
                         :accessor
                         %list-log-sources-response-region-source-types-accounts-list
                         :initform
                         (common-lisp:error
                          ":regionsourcetypesaccountslist is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-log-sources-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-response
                    'make-list-log-sources-response))
 (common-lisp:defun make-list-log-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region-source-types-accounts-list
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'region-source-types-accounts-list))
      (common-lisp:list
       (common-lisp:cons "regionSourceTypesAccountsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscribers-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-subscribers-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-subscribers-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-request 'make-list-subscribers-request))
 (common-lisp:defun make-list-subscribers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscribers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscribers-response common-lisp:nil
                       ((subscribers :initarg :|subscribers| :type
                         (common-lisp:or subscriber-list common-lisp:null)
                         :accessor %list-subscribers-response-subscribers
                         :initform
                         (common-lisp:error ":subscribers is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-subscribers-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-response
                    'make-list-subscribers-response))
 (common-lisp:defun make-list-subscribers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscribers next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscribers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logs-status common-lisp:nil
                       ((path-to-logs :initarg :|pathToLogs| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %logs-status-path-to-logs :initform
                         (common-lisp:error ":pathtologs is required"))
                        (health-status :initarg :|healthStatus| :type
                         (common-lisp:or source-status common-lisp:null)
                         :accessor %logs-status-health-status :initform
                         (common-lisp:error ":healthstatus is required"))))
 (common-lisp:export (common-lisp:list 'logs-status 'make-logs-status))
 (common-lisp:defun make-logs-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path-to-logs health-status)
   (common-lisp:apply #'common-lisp:make-instance 'logs-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logs-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logs-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-to-logs))
      (common-lisp:list
       (common-lisp:cons "pathToLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logs-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logs-status-list ()
   '(trivial-types:proper-list logs-status))
 (common-lisp:defun |make-logs-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logs-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype ocsf-event-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protocol-and-notification-endpoint common-lisp:nil
                       ((protocol :initarg :|protocol| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %protocol-and-notification-endpoint-protocol
                         :initform common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %protocol-and-notification-endpoint-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protocol-and-notification-endpoint
                    'make-protocol-and-notification-endpoint))
 (common-lisp:defun make-protocol-and-notification-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'protocol-and-notification-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-set () '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype region-source-types-accounts-list ()
   '(trivial-types:proper-list all-dimensions-map))
 (common-lisp:defun |make-region-source-types-accounts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list all-dimensions-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-share-arn () 'common-lisp:string)
(common-lisp:deftype resource-share-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass retention-setting common-lisp:nil
                       ((storage-class :initarg :|storageClass| :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %retention-setting-storage-class :initform
                         common-lisp:nil)
                        (retention-period :initarg :|retentionPeriod| :type
                         (common-lisp:or
                          retention-setting-retention-period-integer
                          common-lisp:null)
                         :accessor %retention-setting-retention-period
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retention-setting 'make-retention-setting))
 (common-lisp:defun make-retention-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class retention-period)
   (common-lisp:apply #'common-lisp:make-instance 'retention-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retention-setting-list ()
   '(trivial-types:proper-list retention-setting))
 (common-lisp:defun |make-retention-setting-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retention-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-setting-retention-period-integer ()
  'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition s3exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       s3exception-message)))
 (common-lisp:export (common-lisp:list 's3exception 's3exception-message)))
(common-lisp:deftype safe-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-type common-lisp:nil
                       ((custom-source-type :initarg :|customSourceType| :type
                         (common-lisp:or custom-source-type common-lisp:null)
                         :accessor %source-type-custom-source-type :initform
                         common-lisp:nil)
                        (aws-source-type :initarg :|awsSourceType| :type
                         (common-lisp:or aws-log-source-type common-lisp:null)
                         :accessor %source-type-aws-source-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source-type 'make-source-type))
 (common-lisp:defun make-source-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-source-type aws-source-type)
   (common-lisp:apply #'common-lisp:make-instance 'source-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-source-type))
      (common-lisp:list
       (common-lisp:cons "awsSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-source-type))
      (common-lisp:list
       (common-lisp:cons "customSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-type-list ()
   '(trivial-types:proper-list source-type))
 (common-lisp:defun |make-source-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscriber-list ()
   '(trivial-types:proper-list subscriber-resource))
 (common-lisp:defun |make-subscriber-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subscriber-resource common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %subscriber-resource-updated-at :initform
                         common-lisp:nil)
                        (subscription-status :initarg :|subscriptionStatus|
                         :type
                         (common-lisp:or subscription-status common-lisp:null)
                         :accessor %subscriber-resource-subscription-status
                         :initform common-lisp:nil)
                        (subscription-protocol :initarg :|subscriptionProtocol|
                         :type
                         (common-lisp:or endpoint-protocol common-lisp:null)
                         :accessor %subscriber-resource-subscription-protocol
                         :initform common-lisp:nil)
                        (subscription-id :initarg :|subscriptionId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %subscriber-resource-subscription-id :initform
                         (common-lisp:error ":subscriptionid is required"))
                        (subscription-endpoint :initarg :|subscriptionEndpoint|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %subscriber-resource-subscription-endpoint
                         :initform common-lisp:nil)
                        (subscriber-name :initarg :|subscriberName| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %subscriber-resource-subscriber-name
                         :initform common-lisp:nil)
                        (subscriber-description :initarg
                         :|subscriberDescription| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %subscriber-resource-subscriber-description
                         :initform common-lisp:nil)
                        (source-types :initarg :|sourceTypes| :type
                         (common-lisp:or source-type-list common-lisp:null)
                         :accessor %subscriber-resource-source-types :initform
                         (common-lisp:error ":sourcetypes is required"))
                        (sns-arn :initarg :|snsArn| :type
                         (common-lisp:or sns-topic-arn common-lisp:null)
                         :accessor %subscriber-resource-sns-arn :initform
                         common-lisp:nil)
                        (s3bucket-arn :initarg :|s3BucketArn| :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor %subscriber-resource-s3bucket-arn :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %subscriber-resource-role-arn :initform
                         common-lisp:nil)
                        (resource-share-name :initarg :|resourceShareName|
                         :type
                         (common-lisp:or resource-share-name common-lisp:null)
                         :accessor %subscriber-resource-resource-share-name
                         :initform common-lisp:nil)
                        (resource-share-arn :initarg :|resourceShareArn| :type
                         (common-lisp:or resource-share-arn common-lisp:null)
                         :accessor %subscriber-resource-resource-share-arn
                         :initform common-lisp:nil)
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %subscriber-resource-external-id :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %subscriber-resource-created-at :initform
                         common-lisp:nil)
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %subscriber-resource-account-id :initform
                         (common-lisp:error ":accountid is required"))
                        (access-types :initarg :|accessTypes| :type
                         (common-lisp:or access-type-list common-lisp:null)
                         :accessor %subscriber-resource-access-types :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'subscriber-resource 'make-subscriber-resource))
 (common-lisp:defun make-subscriber-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at subscription-status
                     subscription-protocol subscription-id
                     subscription-endpoint subscriber-name
                     subscriber-description source-types sns-arn s3bucket-arn
                     role-arn resource-share-name resource-share-arn
                     external-id created-at account-id access-types)
   (common-lisp:apply #'common-lisp:make-instance 'subscriber-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-arn))
      (common-lisp:list
       (common-lisp:cons "resourceShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-name))
      (common-lisp:list
       (common-lisp:cons "resourceShareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-arn))
      (common-lisp:list
       (common-lisp:cons "snsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-status))
      (common-lisp:list
       (common-lisp:cons "subscriptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber-resource))
   common-lisp:nil))
(common-lisp:deftype subscription-protocol-type () 'common-lisp:string)
(common-lisp:deftype subscription-status () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (securitylake-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:deftype two-dimensions-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-two-dimensions-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-datalake-exceptions-expiry-request
                       common-lisp:nil
                       ((exception-message-expiry :initarg
                         :|exceptionMessageExpiry| :type
                         (common-lisp:or
                          update-datalake-exceptions-expiry-request-exception-message-expiry-long
                          common-lisp:null)
                         :accessor
                         %update-datalake-exceptions-expiry-request-exception-message-expiry
                         :initform
                         (common-lisp:error
                          ":exceptionmessageexpiry is required"))))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-expiry-request
                    'make-update-datalake-exceptions-expiry-request))
 (common-lisp:defun make-update-datalake-exceptions-expiry-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exception-message-expiry)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-datalake-exceptions-expiry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-message-expiry))
      (common-lisp:list
       (common-lisp:cons "exceptionMessageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   common-lisp:nil))
(common-lisp:deftype update-datalake-exceptions-expiry-request-exception-message-expiry-long
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-datalake-exceptions-expiry-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-expiry-response
                    'make-update-datalake-exceptions-expiry-response))
 (common-lisp:defun make-update-datalake-exceptions-expiry-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-datalake-exceptions-expiry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datalake-exceptions-subscription-request
                       common-lisp:nil
                       ((subscription-protocol :initarg :|subscriptionProtocol|
                         :type
                         (common-lisp:or subscription-protocol-type
                                         common-lisp:null)
                         :accessor
                         %update-datalake-exceptions-subscription-request-subscription-protocol
                         :initform
                         (common-lisp:error
                          ":subscriptionprotocol is required"))
                        (notification-endpoint :initarg :|notificationEndpoint|
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %update-datalake-exceptions-subscription-request-notification-endpoint
                         :initform
                         (common-lisp:error
                          ":notificationendpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-subscription-request
                    'make-update-datalake-exceptions-subscription-request))
 (common-lisp:defun make-update-datalake-exceptions-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-protocol
                     notification-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-datalake-exceptions-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datalake-exceptions-subscription-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-subscription-response
                    'make-update-datalake-exceptions-subscription-response))
 (common-lisp:defun make-update-datalake-exceptions-subscription-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-datalake-exceptions-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datalake-request common-lisp:nil
                       ((configurations :initarg :|configurations| :type
                         (common-lisp:or lake-configuration-request-map
                                         common-lisp:null)
                         :accessor %update-datalake-request-configurations
                         :initform
                         (common-lisp:error ":configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'update-datalake-request 'make-update-datalake-request))
 (common-lisp:defun make-update-datalake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configurations)
   (common-lisp:apply #'common-lisp:make-instance 'update-datalake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-datalake-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-datalake-response 'make-update-datalake-response))
 (common-lisp:defun make-update-datalake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-datalake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-status common-lisp:nil
                       ((last-update-status :initarg :|lastUpdateStatus| :type
                         (common-lisp:or |settingsStatus| common-lisp:null)
                         :accessor %update-status-last-update-status :initform
                         common-lisp:nil)
                        (last-update-request-id :initarg :|lastUpdateRequestId|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %update-status-last-update-request-id
                         :initform common-lisp:nil)
                        (last-update-failure :initarg :|lastUpdateFailure|
                         :type
                         (common-lisp:or last-update-failure common-lisp:null)
                         :accessor %update-status-last-update-failure :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-status 'make-update-status))
 (common-lisp:defun make-update-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-update-status last-update-request-id
                     last-update-failure)
   (common-lisp:apply #'common-lisp:make-instance 'update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-failure))
      (common-lisp:list
       (common-lisp:cons "lastUpdateFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-request-id))
      (common-lisp:list
       (common-lisp:cons "lastUpdateRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "lastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscriber-request common-lisp:nil
                       ((subscriber-name :initarg :|subscriberName| :type
                         (common-lisp:or
                          update-subscriber-request-subscriber-name-string
                          common-lisp:null)
                         :accessor %update-subscriber-request-subscriber-name
                         :initform common-lisp:nil)
                        (subscriber-description :initarg
                         :|subscriberDescription| :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         %update-subscriber-request-subscriber-description
                         :initform common-lisp:nil)
                        (source-types :initarg :|sourceTypes| :type
                         (common-lisp:or source-type-list common-lisp:null)
                         :accessor %update-subscriber-request-source-types
                         :initform
                         (common-lisp:error ":sourcetypes is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subscriber-request-id :initform
                         (common-lisp:error ":id is required"))
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor %update-subscriber-request-external-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-request
                    'make-update-subscriber-request))
 (common-lisp:defun make-update-subscriber-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscriber-name subscriber-description
                     source-types id external-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype update-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-subscriber-response common-lisp:nil
                       ((subscriber :initarg :|subscriber| :type
                         (common-lisp:or subscriber-resource common-lisp:null)
                         :accessor %update-subscriber-response-subscriber
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-response
                    'make-update-subscriber-response))
 (common-lisp:defun make-update-subscriber-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscriber)
   (common-lisp:apply #'common-lisp:make-instance 'update-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscription-notification-configuration-request
                       common-lisp:nil
                       ((subscription-id :initarg :|subscriptionId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-subscription-notification-configuration-request-subscription-id
                         :initform
                         (common-lisp:error ":subscriptionid is required"))
                        (subscription-endpoint :initarg :|subscriptionEndpoint|
                         :type
                         (common-lisp:or
                          update-subscription-notification-configuration-request-subscription-endpoint-string
                          common-lisp:null)
                         :accessor
                         %update-subscription-notification-configuration-request-subscription-endpoint
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-subscription-notification-configuration-request-role-arn
                         :initform common-lisp:nil)
                        (https-method :initarg :|httpsMethod| :type
                         (common-lisp:or https-method common-lisp:null)
                         :accessor
                         %update-subscription-notification-configuration-request-https-method
                         :initform common-lisp:nil)
                        (https-api-key-value :initarg :|httpsApiKeyValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subscription-notification-configuration-request-https-api-key-value
                         :initform common-lisp:nil)
                        (https-api-key-name :initarg :|httpsApiKeyName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-subscription-notification-configuration-request-https-api-key-name
                         :initform common-lisp:nil)
                        (create-sqs :initarg :|createSqs| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-subscription-notification-configuration-request-create-sqs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-notification-configuration-request
                    'make-update-subscription-notification-configuration-request))
 (common-lisp:defun make-update-subscription-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-id subscription-endpoint
                     role-arn https-method https-api-key-value
                     https-api-key-name create-sqs)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-sqs))
      (common-lisp:list
       (common-lisp:cons "createSqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-name))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-value))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-method))
      (common-lisp:list
       (common-lisp:cons "httpsMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:deftype update-subscription-notification-configuration-request-subscription-endpoint-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-subscription-notification-configuration-response
                       common-lisp:nil
                       ((queue-arn :initarg :|queueArn| :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         %update-subscription-notification-configuration-response-queue-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-notification-configuration-response
                    'make-update-subscription-notification-configuration-response))
 (common-lisp:defun make-update-subscription-notification-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscription-notification-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "queueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (securitylake-error)
     ((field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name message)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-set () '(trivial-types:proper-list string))
 (common-lisp:defun |make-value-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |settingsStatus| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enable-all-dimensions
                     enable-single-dimension enable-two-dimensions input-order)
   (common-lisp:declare
    (common-lisp:ignorable enable-all-dimensions enable-single-dimension
     enable-two-dimensions input-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/logsources/aws"
                                                        "CreateAwsLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-aws-log-source))
(common-lisp:progn
 (common-lisp:defun create-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-source-name event-class
                     glue-invocation-role-arn log-provider-account-id)
   (common-lisp:declare
    (common-lisp:ignorable custom-source-name event-class
     glue-invocation-role-arn log-provider-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/logsources/custom"
                                                        "CreateCustomLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-log-source))
(common-lisp:progn
 (common-lisp:defun create-datalake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations enable-all
                     meta-store-manager-role-arn regions)
   (common-lisp:declare
    (common-lisp:ignorable configurations enable-all
     meta-store-manager-role-arn regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-datalake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake"
                                                        "CreateDatalake"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake))
(common-lisp:progn
 (common-lisp:defun create-datalake-auto-enable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-for-new-accounts)
   (common-lisp:declare (common-lisp:ignorable configuration-for-new-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-auto-enable-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/autoenable"
                                                        "CreateDatalakeAutoEnable"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun create-datalake-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account)
   (common-lisp:declare (common-lisp:ignorable account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/delegate"
                                                        "CreateDatalakeDelegatedAdmin"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-delegated-admin))
(common-lisp:progn
 (common-lisp:defun create-datalake-exceptions-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notification-endpoint
                     subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable notification-endpoint subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-exceptions-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/exceptions/subscription"
                                                        "CreateDatalakeExceptionsSubscription"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun create-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-types account-id external-id
                     source-types subscriber-description subscriber-name)
   (common-lisp:declare
    (common-lisp:ignorable access-types account-id external-id source-types
     subscriber-description subscriber-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/subscribers"
                                                        "CreateSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscriber))
(common-lisp:progn
 (common-lisp:defun create-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-sqs https-api-key-name
                     https-api-key-value https-method role-arn
                     subscription-endpoint subscription-id)
   (common-lisp:declare
    (common-lisp:ignorable create-sqs https-api-key-name https-api-key-value
     https-method role-arn subscription-endpoint subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "CreateSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscription-notification-configuration))
(common-lisp:progn
 (common-lisp:defun delete-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disable-all-dimensions
                     disable-single-dimension disable-two-dimensions
                     input-order)
   (common-lisp:declare
    (common-lisp:ignorable disable-all-dimensions disable-single-dimension
     disable-two-dimensions input-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/logsources/aws/delete"
                                                        "DeleteAwsLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-aws-log-source))
(common-lisp:progn
 (common-lisp:defun delete-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-source-name)
   (common-lisp:declare (common-lisp:ignorable custom-source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/logsources/custom"
                                                        "DeleteCustomLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-log-source))
(common-lisp:progn
 (common-lisp:defun delete-datalake ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake" :protocol :rest-json :operation
                                "DeleteDatalake" :params
                                `(("Action" ,@"DeleteDatalake")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-datalake))
(common-lisp:progn
 (common-lisp:defun delete-datalake-auto-enable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     remove-from-configuration-for-new-accounts)
   (common-lisp:declare
    (common-lisp:ignorable remove-from-configuration-for-new-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-datalake-auto-enable-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/autoenable/delete"
                                                        "DeleteDatalakeAutoEnable"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun delete-datalake-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account)
   (common-lisp:declare (common-lisp:ignorable account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-datalake-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/datalake/delegate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'account))))
                                                        "DeleteDatalakeDelegatedAdmin"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-datalake-delegated-admin))
(common-lisp:progn
 (common-lisp:defun delete-datalake-exceptions-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake/exceptions/subscription"
                                :protocol :rest-json :operation
                                "DeleteDatalakeExceptionsSubscription" :params
                                `(("Action"
                                   ,@"DeleteDatalakeExceptionsSubscription")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun delete-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/subscribers"
                                                        "DeleteSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscriber))
(common-lisp:progn
 (common-lisp:defun delete-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-id)
   (common-lisp:declare (common-lisp:ignorable subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "DeleteSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscription-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-datalake ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake" :protocol :rest-json :operation
                                "GetDatalake" :params
                                `(("Action" ,@"GetDatalake")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake))
(common-lisp:progn
 (common-lisp:defun get-datalake-auto-enable ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/autoenable" :protocol :rest-json
                                :operation "GetDatalakeAutoEnable" :params
                                `(("Action" ,@"GetDatalakeAutoEnable")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun get-datalake-exceptions-expiry ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/exceptions/expiry" :protocol
                                :rest-json :operation
                                "GetDatalakeExceptionsExpiry" :params
                                `(("Action" ,@"GetDatalakeExceptionsExpiry")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-exceptions-expiry))
(common-lisp:progn
 (common-lisp:defun get-datalake-exceptions-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/exceptions/subscription"
                                :protocol :rest-json :operation
                                "GetDatalakeExceptionsSubscription" :params
                                `(("Action"
                                   ,@"GetDatalakeExceptionsSubscription")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun get-datalake-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-set max-account-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-set max-account-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-datalake-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/status"
                                                        "GetDatalakeStatus"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-datalake-status))
(common-lisp:progn
 (common-lisp:defun get-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscriber))
(common-lisp:progn
 (common-lisp:defun list-datalake-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-failures next-token region-set)
   (common-lisp:declare
    (common-lisp:ignorable max-failures next-token region-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datalake-exceptions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/datalake/exceptions"
                                                        "ListDatalakeExceptions"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datalake-exceptions))
(common-lisp:progn
 (common-lisp:defun list-log-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-order list-all-dimensions
                     list-single-dimension list-two-dimensions max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable input-order list-all-dimensions
     list-single-dimension list-two-dimensions max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/logsources/list"
                                                        "ListLogSources"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-sources))
(common-lisp:progn
 (common-lisp:defun list-subscribers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscribers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/subscribers"
                                                        "ListSubscribers"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscribers))
(common-lisp:progn
 (common-lisp:defun update-datalake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations)
   (common-lisp:declare (common-lisp:ignorable configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-datalake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/datalake"
                                                        "UpdateDatalake"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake))
(common-lisp:progn
 (common-lisp:defun update-datalake-exceptions-expiry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exception-message-expiry)
   (common-lisp:declare (common-lisp:ignorable exception-message-expiry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-datalake-exceptions-expiry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/datalake/exceptions/expiry"
                                                        "UpdateDatalakeExceptionsExpiry"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake-exceptions-expiry))
(common-lisp:progn
 (common-lisp:defun update-datalake-exceptions-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notification-endpoint
                     subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable notification-endpoint subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-datalake-exceptions-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/datalake/exceptions/subscription"
                                                        "UpdateDatalakeExceptionsSubscription"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun update-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key external-id id source-types
                     subscriber-description subscriber-name)
   (common-lisp:declare
    (common-lisp:ignorable external-id id source-types subscriber-description
     subscriber-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscriber))
(common-lisp:progn
 (common-lisp:defun update-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-sqs https-api-key-name
                     https-api-key-value https-method role-arn
                     subscription-endpoint subscription-id)
   (common-lisp:declare
    (common-lisp:ignorable create-sqs https-api-key-name https-api-key-value
     https-method role-arn subscription-endpoint subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "UpdateSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscription-notification-configuration))
