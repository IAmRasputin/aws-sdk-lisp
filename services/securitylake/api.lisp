;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/securitylake/api
  (:use)
  (:nicknames #:aws/securitylake)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/securitylake/api)
(common-lisp:progn
 (common-lisp:defclass securitylake-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "securitylake"))
 (common-lisp:export 'securitylake-request))
(common-lisp:progn
 (common-lisp:define-condition securitylake-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'securitylake-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AccountNotFoundException" . account-not-found-exception)
    ("BucketNotFoundException" . bucket-not-found-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("ConflictSourceNamesException" . conflict-source-names-exception)
    ("ConflictSubscriptionException" . conflict-subscription-exception)
    ("EventBridgeException" . event-bridge-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("S3Exception" . s3exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-type-list ()
   '(trivial-types:proper-list access-type))
 (common-lisp:defun |make-access-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition account-not-found-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-not-found-exception
                    'account-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-sources (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-sources-"))
   (account (common-lisp:error ":account is required") :type
    (common-lisp:or string common-lisp:null))
   (event-class common-lisp:nil :type
    (common-lisp:or ocsf-event-class common-lisp:null))
   (logs-status common-lisp:nil :type
    (common-lisp:or logs-status-list common-lisp:null))
   (source-type (common-lisp:error ":sourcetype is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-sources 'make-account-sources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-sources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-sources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "eventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs-status))
      (common-lisp:list
       (common-lisp:cons "logsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "sourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-sources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-sources-list ()
   '(trivial-types:proper-list account-sources))
 (common-lisp:defun |make-account-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-sources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype all-dimensions-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-all-dimensions-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-enable-new-region-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-enable-new-region-configuration-"))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or region common-lisp:null))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or aws-source-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-enable-new-region-configuration
                    'make-auto-enable-new-region-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-enable-new-region-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-enable-new-region-configuration-list ()
   '(trivial-types:proper-list auto-enable-new-region-configuration))
 (common-lisp:defun |make-auto-enable-new-region-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-enable-new-region-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-log-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-source-type-list ()
   '(trivial-types:proper-list aws-log-source-type))
 (common-lisp:defun |make-aws-source-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-log-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-not-found-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bucket-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bucket-not-found-exception
                    'bucket-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition conflict-source-names-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-source-names-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-source-names-exception
                    'conflict-source-names-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-subscription-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-subscription-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-subscription-exception
                    'conflict-subscription-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-aws-log-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-aws-log-source-request-"))
   (enable-all-dimensions common-lisp:nil :type
    (common-lisp:or all-dimensions-map common-lisp:null))
   (enable-single-dimension common-lisp:nil :type
    (common-lisp:or input-set common-lisp:null))
   (enable-two-dimensions common-lisp:nil :type
    (common-lisp:or two-dimensions-map common-lisp:null))
   (input-order (common-lisp:error ":inputorder is required") :type
    (common-lisp:or dimension-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-request
                    'make-create-aws-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "enableAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-single-dimension))
      (common-lisp:list
       (common-lisp:cons "enableSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "enableTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-aws-log-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-aws-log-source-response-"))
   (failed common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null))
   (processing common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-response
                    'make-create-aws-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-log-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-log-source-request-"))
   (custom-source-name (common-lisp:error ":customsourcename is required")
    :type (common-lisp:or custom-source-type common-lisp:null))
   (event-class (common-lisp:error ":eventclass is required") :type
    (common-lisp:or ocsf-event-class common-lisp:null))
   (glue-invocation-role-arn
    (common-lisp:error ":glueinvocationrolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (log-provider-account-id
    (common-lisp:error ":logprovideraccountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-request
                    'make-create-custom-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-source-name))
      (common-lisp:list
       (common-lisp:cons "customSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-class))
      (common-lisp:list
       (common-lisp:cons "eventClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-invocation-role-arn))
      (common-lisp:list
       (common-lisp:cons "glueInvocationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-provider-account-id))
      (common-lisp:list
       (common-lisp:cons "logProviderAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-log-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-log-source-response-"))
   (custom-data-location (common-lisp:error ":customdatalocation is required")
    :type (common-lisp:or string common-lisp:null))
   (glue-crawler-name (common-lisp:error ":gluecrawlername is required") :type
    (common-lisp:or string common-lisp:null))
   (glue-database-name (common-lisp:error ":gluedatabasename is required")
    :type (common-lisp:or string common-lisp:null))
   (glue-table-name (common-lisp:error ":gluetablename is required") :type
    (common-lisp:or string common-lisp:null))
   (log-provider-access-role-arn
    (common-lisp:error ":logprovideraccessrolearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-response
                    'make-create-custom-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-location))
      (common-lisp:list
       (common-lisp:cons "customDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-crawler-name))
      (common-lisp:list
       (common-lisp:cons "glueCrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-database-name))
      (common-lisp:list
       (common-lisp:cons "glueDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-table-name))
      (common-lisp:list
       (common-lisp:cons "glueTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-provider-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "logProviderAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-auto-enable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-auto-enable-request-"))
   (configuration-for-new-accounts
    (common-lisp:error ":configurationfornewaccounts is required") :type
    (common-lisp:or auto-enable-new-region-configuration-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datalake-auto-enable-request
                    'make-create-datalake-auto-enable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-for-new-accounts))
      (common-lisp:list
       (common-lisp:cons "configurationForNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-auto-enable-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-auto-enable-response-")))
 (common-lisp:export
  (common-lisp:list 'create-datalake-auto-enable-response
                    'make-create-datalake-auto-enable-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-delegated-admin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-delegated-admin-request-"))
   (account (common-lisp:error ":account is required") :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datalake-delegated-admin-request
                    'make-create-datalake-delegated-admin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-delegated-admin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-delegated-admin-response-")))
 (common-lisp:export
  (common-lisp:list 'create-datalake-delegated-admin-response
                    'make-create-datalake-delegated-admin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-exceptions-subscription-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-datalake-exceptions-subscription-request-"))
   (notification-endpoint
    (common-lisp:error ":notificationendpoint is required") :type
    (common-lisp:or safe-string common-lisp:null))
   (subscription-protocol
    (common-lisp:error ":subscriptionprotocol is required") :type
    (common-lisp:or subscription-protocol-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datalake-exceptions-subscription-request
                    'make-create-datalake-exceptions-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-exceptions-subscription-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-datalake-exceptions-subscription-response-")))
 (common-lisp:export
  (common-lisp:list 'create-datalake-exceptions-subscription-response
                    'make-create-datalake-exceptions-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-request-"))
   (configurations common-lisp:nil :type
    (common-lisp:or lake-configuration-request-map common-lisp:null))
   (enable-all common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (meta-store-manager-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datalake-request 'make-create-datalake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-all))
      (common-lisp:list
       (common-lisp:cons "enableAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meta-store-manager-role-arn))
      (common-lisp:list
       (common-lisp:cons "metaStoreManagerRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datalake-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datalake-response-")))
 (common-lisp:export
  (common-lisp:list 'create-datalake-response 'make-create-datalake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscriber-request-"))
   (access-types common-lisp:nil :type
    (common-lisp:or access-type-list common-lisp:null))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (external-id (common-lisp:error ":externalid is required") :type
    (common-lisp:or safe-string common-lisp:null))
   (source-types (common-lisp:error ":sourcetypes is required") :type
    (common-lisp:or source-type-list common-lisp:null))
   (subscriber-description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (subscriber-name (common-lisp:error ":subscribername is required") :type
    (common-lisp:or create-subscriber-request-subscriber-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-request
                    'make-create-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype create-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-subscriber-response-"))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (s3bucket-arn common-lisp:nil :type
    (common-lisp:or s3bucket-arn common-lisp:null))
   (sns-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (subscription-id (common-lisp:error ":subscriptionid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-response
                    'make-create-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-arn))
      (common-lisp:list
       (common-lisp:cons "snsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-notification-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-subscription-notification-configuration-request-"))
   (create-sqs common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (https-api-key-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (https-api-key-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (https-method common-lisp:nil :type
    (common-lisp:or https-method common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (subscription-endpoint common-lisp:nil :type
    (common-lisp:or
     create-subscription-notification-configuration-request-subscription-endpoint-string
     common-lisp:null))
   (subscription-id (common-lisp:error ":subscriptionid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-notification-configuration-request
                    'make-create-subscription-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-sqs))
      (common-lisp:list
       (common-lisp:cons "createSqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-name))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-value))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-method))
      (common-lisp:list
       (common-lisp:cons "httpsMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:deftype create-subscription-notification-configuration-request-subscription-endpoint-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-subscription-notification-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-subscription-notification-configuration-response-"))
   (queue-arn common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-subscription-notification-configuration-response
                    'make-create-subscription-notification-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "queueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:deftype custom-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-aws-log-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-aws-log-source-request-"))
   (disable-all-dimensions common-lisp:nil :type
    (common-lisp:or all-dimensions-map common-lisp:null))
   (disable-single-dimension common-lisp:nil :type
    (common-lisp:or input-set common-lisp:null))
   (disable-two-dimensions common-lisp:nil :type
    (common-lisp:or two-dimensions-map common-lisp:null))
   (input-order (common-lisp:error ":inputorder is required") :type
    (common-lisp:or dimension-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-request
                    'make-delete-aws-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "disableAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-single-dimension))
      (common-lisp:list
       (common-lisp:cons "disableSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "disableTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-aws-log-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-aws-log-source-response-"))
   (failed common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null))
   (processing common-lisp:nil :type
    (common-lisp:or account-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-response
                    'make-delete-aws-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-log-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-log-source-request-"))
   (custom-source-name (common-lisp:error ":customsourcename is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-request
                    'make-delete-custom-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-log-source-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-log-source-response-"))
   (custom-data-location (common-lisp:error ":customdatalocation is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-response
                    'make-delete-custom-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-location))
      (common-lisp:list
       (common-lisp:cons "customDataLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-auto-enable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-auto-enable-request-"))
   (remove-from-configuration-for-new-accounts
    (common-lisp:error ":removefromconfigurationfornewaccounts is required")
    :type
    (common-lisp:or auto-enable-new-region-configuration-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-auto-enable-request
                    'make-delete-datalake-auto-enable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-from-configuration-for-new-accounts))
      (common-lisp:list
       (common-lisp:cons "removeFromConfigurationForNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-auto-enable-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-auto-enable-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-auto-enable-response
                    'make-delete-datalake-auto-enable-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-delegated-admin-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-delegated-admin-request-"))
   (account (common-lisp:error ":account is required") :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-delegated-admin-request
                    'make-delete-datalake-delegated-admin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-delegated-admin-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-delegated-admin-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-delegated-admin-response
                    'make-delete-datalake-delegated-admin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-exceptions-subscription-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-datalake-exceptions-subscription-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-exceptions-subscription-request
                    'make-delete-datalake-exceptions-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-exceptions-subscription-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-datalake-exceptions-subscription-response-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-exceptions-subscription-response
                    'make-delete-datalake-exceptions-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-request-")))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-request 'make-delete-datalake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datalake-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datalake-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-datalake-response 'make-delete-datalake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscriber-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-request
                    'make-delete-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-subscriber-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-response
                    'make-delete-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-notification-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-subscription-notification-configuration-request-"))
   (subscription-id (common-lisp:error ":subscriptionid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-notification-configuration-request
                    'make-delete-subscription-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-subscription-notification-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-subscription-notification-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-subscription-notification-configuration-response
                    'make-delete-subscription-notification-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-set () '(trivial-types:proper-list dimension))
 (common-lisp:defun |make-dimension-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-bridge-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       event-bridge-exception-message)))
 (common-lisp:export
  (common-lisp:list 'event-bridge-exception 'event-bridge-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (failures (:copier common-lisp:nil) (:conc-name "struct-shape-failures-"))
   (exception-message (common-lisp:error ":exceptionmessage is required") :type
    (common-lisp:or safe-string common-lisp:null))
   (remediation (common-lisp:error ":remediation is required") :type
    (common-lisp:or safe-string common-lisp:null))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failures 'make-failures))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failures))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failures))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exception-message))
      (common-lisp:list
       (common-lisp:cons "exceptionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failures))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failures-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-failures-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or failureslist common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failures-response 'make-failures-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failures-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failures-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failures-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failures-response-list ()
   '(trivial-types:proper-list failures-response))
 (common-lisp:defun |make-failures-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failures-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failureslist () '(trivial-types:proper-list failures))
 (common-lisp:defun |make-failureslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failures))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-auto-enable-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-auto-enable-request-")))
 (common-lisp:export
  (common-lisp:list 'get-datalake-auto-enable-request
                    'make-get-datalake-auto-enable-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-auto-enable-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-auto-enable-response-"))
   (auto-enable-new-accounts
    (common-lisp:error ":autoenablenewaccounts is required") :type
    (common-lisp:or auto-enable-new-region-configuration-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-auto-enable-response
                    'make-get-datalake-auto-enable-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-new-accounts))
      (common-lisp:list
       (common-lisp:cons "autoEnableNewAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-auto-enable-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-exceptions-expiry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-exceptions-expiry-request-")))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-expiry-request
                    'make-get-datalake-exceptions-expiry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-exceptions-expiry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-exceptions-expiry-response-"))
   (exception-message-expiry
    (common-lisp:error ":exceptionmessageexpiry is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-expiry-response
                    'make-get-datalake-exceptions-expiry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-message-expiry))
      (common-lisp:list
       (common-lisp:cons "exceptionMessageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-expiry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-exceptions-subscription-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-datalake-exceptions-subscription-request-")))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-subscription-request
                    'make-get-datalake-exceptions-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-exceptions-subscription-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-datalake-exceptions-subscription-response-"))
   (protocol-and-notification-endpoint
    (common-lisp:error ":protocolandnotificationendpoint is required") :type
    (common-lisp:or protocol-and-notification-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-exceptions-subscription-response
                    'make-get-datalake-exceptions-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'protocol-and-notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "protocolAndNotificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-request-")))
 (common-lisp:export
  (common-lisp:list 'get-datalake-request 'make-get-datalake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-response-"))
   (configurations (common-lisp:error ":configurations is required") :type
    (common-lisp:or lake-configuration-response-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-response 'make-get-datalake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-status-request-"))
   (account-set common-lisp:nil :type
    (common-lisp:or input-set common-lisp:null))
   (max-account-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-status-request
                    'make-get-datalake-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-set))
      (common-lisp:list
       (common-lisp:cons "accountSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-account-results))
      (common-lisp:list
       (common-lisp:cons "maxAccountResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datalake-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datalake-status-response-"))
   (account-sources-list (common-lisp:error ":accountsourceslist is required")
    :type (common-lisp:or account-sources-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datalake-status-response
                    'make-get-datalake-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-sources-list))
      (common-lisp:list
       (common-lisp:cons "accountSourcesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datalake-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscriber-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-request 'make-get-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-subscriber-response-"))
   (subscriber common-lisp:nil :type
    (common-lisp:or subscriber-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-response 'make-get-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   common-lisp:nil))
(common-lisp:deftype https-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-set () '(trivial-types:proper-list safe-string))
 (common-lisp:defun |make-input-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list safe-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (lake-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-lake-configuration-request-"))
   (encryption-key common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-destination-regions common-lisp:nil :type
    (common-lisp:or region-set common-lisp:null))
   (replication-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (retention-settings common-lisp:nil :type
    (common-lisp:or retention-setting-list common-lisp:null))
   (tags-map common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lake-configuration-request
                    'make-lake-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-destination-regions))
      (common-lisp:list
       (common-lisp:cons "replicationDestinationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-role-arn))
      (common-lisp:list
       (common-lisp:cons "replicationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-settings))
      (common-lisp:list
       (common-lisp:cons "retentionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-map))
      (common-lisp:list
       (common-lisp:cons "tagsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-configuration-request-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-lake-configuration-request-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (lake-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-lake-configuration-response-"))
   (encryption-key common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-destination-regions common-lisp:nil :type
    (common-lisp:or region-set common-lisp:null))
   (replication-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (retention-settings common-lisp:nil :type
    (common-lisp:or retention-setting-list common-lisp:null))
   (s3bucket-arn common-lisp:nil :type
    (common-lisp:or s3bucket-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or |settingsStatus| common-lisp:null))
   (tags-map common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lake-configuration-response
                    'make-lake-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-destination-regions))
      (common-lisp:list
       (common-lisp:cons "replicationDestinationRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-role-arn))
      (common-lisp:list
       (common-lisp:cons "replicationRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-settings))
      (common-lisp:list
       (common-lisp:cons "retentionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-map))
      (common-lisp:list
       (common-lisp:cons "tagsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lake-configuration-response-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-lake-configuration-response-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datalake-exceptions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datalake-exceptions-request-"))
   (max-failures common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (region-set common-lisp:nil :type
    (common-lisp:or region-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datalake-exceptions-request
                    'make-list-datalake-exceptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-failures))
      (common-lisp:list
       (common-lisp:cons "maxFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-set))
      (common-lisp:list
       (common-lisp:cons "regionSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datalake-exceptions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datalake-exceptions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (non-retryable-failures
    (common-lisp:error ":nonretryablefailures is required") :type
    (common-lisp:or failures-response-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datalake-exceptions-response
                    'make-list-datalake-exceptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-retryable-failures))
      (common-lisp:list
       (common-lisp:cons "nonRetryableFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datalake-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-sources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-sources-request-"))
   (input-order common-lisp:nil :type
    (common-lisp:or dimension-set common-lisp:null))
   (list-all-dimensions common-lisp:nil :type
    (common-lisp:or all-dimensions-map common-lisp:null))
   (list-single-dimension common-lisp:nil :type
    (common-lisp:or input-set common-lisp:null))
   (list-two-dimensions common-lisp:nil :type
    (common-lisp:or two-dimensions-map common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-request 'make-list-log-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-order))
      (common-lisp:list
       (common-lisp:cons "inputOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-all-dimensions))
      (common-lisp:list
       (common-lisp:cons "listAllDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-single-dimension))
      (common-lisp:list
       (common-lisp:cons "listSingleDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-two-dimensions))
      (common-lisp:list
       (common-lisp:cons "listTwoDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-sources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-sources-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (region-source-types-accounts-list
    (common-lisp:error ":regionsourcetypesaccountslist is required") :type
    (common-lisp:or region-source-types-accounts-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-response
                    'make-list-log-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'region-source-types-accounts-list))
      (common-lisp:list
       (common-lisp:cons "regionSourceTypesAccountsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-request 'make-list-subscribers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribers-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscribers (common-lisp:error ":subscribers is required") :type
    (common-lisp:or subscriber-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-response
                    'make-list-subscribers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logs-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-logs-status-"))
   (health-status (common-lisp:error ":healthstatus is required") :type
    (common-lisp:or source-status common-lisp:null))
   (path-to-logs (common-lisp:error ":pathtologs is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logs-status 'make-logs-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logs-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logs-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-to-logs))
      (common-lisp:list
       (common-lisp:cons "pathToLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logs-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logs-status-list ()
   '(trivial-types:proper-list logs-status))
 (common-lisp:defun |make-logs-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logs-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype ocsf-event-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protocol-and-notification-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-protocol-and-notification-endpoint-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protocol-and-notification-endpoint
                    'make-protocol-and-notification-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protocol-and-notification-endpoint))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-set () '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype region-source-types-accounts-list ()
   '(trivial-types:proper-list all-dimensions-map))
 (common-lisp:defun |make-region-source-types-accounts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list all-dimensions-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (retention-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-retention-setting-"))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-setting-retention-period-integer
                    common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retention-setting 'make-retention-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retention-setting-list ()
   '(trivial-types:proper-list retention-setting))
 (common-lisp:defun |make-retention-setting-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retention-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-setting-retention-period-integer ()
  'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition s3exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       s3exception-message)))
 (common-lisp:export (common-lisp:list 's3exception 's3exception-message)))
(common-lisp:deftype safe-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype source-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-type-"))
   (aws-source-type common-lisp:nil :type
    (common-lisp:or aws-log-source-type common-lisp:null))
   (custom-source-type common-lisp:nil :type
    (common-lisp:or custom-source-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-type 'make-source-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-source-type))
      (common-lisp:list
       (common-lisp:cons "awsSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-source-type))
      (common-lisp:list
       (common-lisp:cons "customSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-type-list ()
   '(trivial-types:proper-list source-type))
 (common-lisp:defun |make-source-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscriber-list ()
   '(trivial-types:proper-list subscriber-resource))
 (common-lisp:defun |make-subscriber-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscriber-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscriber-resource-"))
   (access-types common-lisp:nil :type
    (common-lisp:or access-type-list common-lisp:null))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or aws-account-id common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (s3bucket-arn common-lisp:nil :type
    (common-lisp:or s3bucket-arn common-lisp:null))
   (sns-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (source-types (common-lisp:error ":sourcetypes is required") :type
    (common-lisp:or source-type-list common-lisp:null))
   (subscriber-description common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (subscriber-name common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (subscription-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subscription-id (common-lisp:error ":subscriptionid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (subscription-protocol common-lisp:nil :type
    (common-lisp:or endpoint-protocol common-lisp:null))
   (subscription-status common-lisp:nil :type
    (common-lisp:or subscription-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscriber-resource 'make-subscriber-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-arn))
      (common-lisp:list
       (common-lisp:cons "snsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-id))
      (common-lisp:list
       (common-lisp:cons "subscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-status))
      (common-lisp:list
       (common-lisp:cons "subscriptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber-resource))
   common-lisp:nil))
(common-lisp:deftype subscription-protocol-type () 'common-lisp:string)
(common-lisp:deftype subscription-status () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:deftype two-dimensions-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-two-dimensions-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-exceptions-expiry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-datalake-exceptions-expiry-request-"))
   (exception-message-expiry
    (common-lisp:error ":exceptionmessageexpiry is required") :type
    (common-lisp:or
     update-datalake-exceptions-expiry-request-exception-message-expiry-long
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-expiry-request
                    'make-update-datalake-exceptions-expiry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-message-expiry))
      (common-lisp:list
       (common-lisp:cons "exceptionMessageExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-request))
   common-lisp:nil))
(common-lisp:deftype update-datalake-exceptions-expiry-request-exception-message-expiry-long
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-exceptions-expiry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-datalake-exceptions-expiry-response-")))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-expiry-response
                    'make-update-datalake-exceptions-expiry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-expiry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-exceptions-subscription-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-datalake-exceptions-subscription-request-"))
   (notification-endpoint
    (common-lisp:error ":notificationendpoint is required") :type
    (common-lisp:or safe-string common-lisp:null))
   (subscription-protocol
    (common-lisp:error ":subscriptionprotocol is required") :type
    (common-lisp:or subscription-protocol-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-subscription-request
                    'make-update-datalake-exceptions-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-exceptions-subscription-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-datalake-exceptions-subscription-response-")))
 (common-lisp:export
  (common-lisp:list 'update-datalake-exceptions-subscription-response
                    'make-update-datalake-exceptions-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-exceptions-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-datalake-request-"))
   (configurations (common-lisp:error ":configurations is required") :type
    (common-lisp:or lake-configuration-request-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-datalake-request 'make-update-datalake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-datalake-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-datalake-response-")))
 (common-lisp:export
  (common-lisp:list 'update-datalake-response 'make-update-datalake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-datalake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscriber-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscriber-request-"))
   (external-id common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or string common-lisp:null))
   (source-types (common-lisp:error ":sourcetypes is required") :type
    (common-lisp:or source-type-list common-lisp:null))
   (subscriber-description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (subscriber-name common-lisp:nil :type
    (common-lisp:or update-subscriber-request-subscriber-name-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-request
                    'make-update-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "sourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype update-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscriber-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-subscriber-response-"))
   (subscriber common-lisp:nil :type
    (common-lisp:or subscriber-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-response
                    'make-update-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-notification-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-subscription-notification-configuration-request-"))
   (create-sqs common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (https-api-key-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (https-api-key-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (https-method common-lisp:nil :type
    (common-lisp:or https-method common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (subscription-endpoint common-lisp:nil :type
    (common-lisp:or
     update-subscription-notification-configuration-request-subscription-endpoint-string
     common-lisp:null))
   (subscription-id (common-lisp:error ":subscriptionid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-notification-configuration-request
                    'make-update-subscription-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-sqs))
      (common-lisp:list
       (common-lisp:cons "createSqs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-name))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-api-key-value))
      (common-lisp:list
       (common-lisp:cons "httpsApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-method))
      (common-lisp:list
       (common-lisp:cons "httpsMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriptionEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-request))
   common-lisp:nil))
(common-lisp:deftype update-subscription-notification-configuration-request-subscription-endpoint-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-subscription-notification-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-subscription-notification-configuration-response-"))
   (queue-arn common-lisp:nil :type
    (common-lisp:or safe-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-subscription-notification-configuration-response
                    'make-update-subscription-notification-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "queueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscription-notification-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (securitylake-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-set () '(trivial-types:proper-list string))
 (common-lisp:defun |make-value-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |settingsStatus| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enable-all-dimensions
                     enable-single-dimension enable-two-dimensions input-order)
   (common-lisp:declare
    (common-lisp:ignorable enable-all-dimensions enable-single-dimension
     enable-two-dimensions input-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/logsources/aws"
                                                        "CreateAwsLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-aws-log-source))
(common-lisp:progn
 (common-lisp:defun create-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-source-name event-class
                     glue-invocation-role-arn log-provider-account-id)
   (common-lisp:declare
    (common-lisp:ignorable custom-source-name event-class
     glue-invocation-role-arn log-provider-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/logsources/custom"
                                                        "CreateCustomLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-log-source))
(common-lisp:progn
 (common-lisp:defun create-datalake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations enable-all
                     meta-store-manager-role-arn regions)
   (common-lisp:declare
    (common-lisp:ignorable configurations enable-all
     meta-store-manager-role-arn regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-datalake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/datalake"
                                                        "CreateDatalake"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake))
(common-lisp:progn
 (common-lisp:defun create-datalake-auto-enable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-for-new-accounts)
   (common-lisp:declare (common-lisp:ignorable configuration-for-new-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-auto-enable-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/autoenable"
                                                        "CreateDatalakeAutoEnable"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun create-datalake-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account)
   (common-lisp:declare (common-lisp:ignorable account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/delegate"
                                                        "CreateDatalakeDelegatedAdmin"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-delegated-admin))
(common-lisp:progn
 (common-lisp:defun create-datalake-exceptions-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notification-endpoint
                     subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable notification-endpoint subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-datalake-exceptions-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/exceptions/subscription"
                                                        "CreateDatalakeExceptionsSubscription"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun create-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-types account-id external-id
                     source-types subscriber-description subscriber-name)
   (common-lisp:declare
    (common-lisp:ignorable access-types account-id external-id source-types
     subscriber-description subscriber-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/subscribers"
                                                        "CreateSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscriber))
(common-lisp:progn
 (common-lisp:defun create-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-sqs https-api-key-name
                     https-api-key-value https-method role-arn
                     subscription-endpoint subscription-id)
   (common-lisp:declare
    (common-lisp:ignorable create-sqs https-api-key-name https-api-key-value
     https-method role-arn subscription-endpoint subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "CreateSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-subscription-notification-configuration))
(common-lisp:progn
 (common-lisp:defun delete-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disable-all-dimensions
                     disable-single-dimension disable-two-dimensions
                     input-order)
   (common-lisp:declare
    (common-lisp:ignorable disable-all-dimensions disable-single-dimension
     disable-two-dimensions input-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/logsources/aws/delete"
                                                        "DeleteAwsLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-aws-log-source))
(common-lisp:progn
 (common-lisp:defun delete-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-source-name)
   (common-lisp:declare (common-lisp:ignorable custom-source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/logsources/custom"
                                                        "DeleteCustomLogSource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-log-source))
(common-lisp:progn
 (common-lisp:defun delete-datalake ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake" :params
                                `(("Action" ,@"DeleteDatalake")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-datalake))
(common-lisp:progn
 (common-lisp:defun delete-datalake-auto-enable
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     remove-from-configuration-for-new-accounts)
   (common-lisp:declare
    (common-lisp:ignorable remove-from-configuration-for-new-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-datalake-auto-enable-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/autoenable/delete"
                                                        "DeleteDatalakeAutoEnable"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun delete-datalake-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account)
   (common-lisp:declare (common-lisp:ignorable account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-datalake-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/datalake/delegate/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'account))))
                                                        "DeleteDatalakeDelegatedAdmin"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-datalake-delegated-admin))
(common-lisp:progn
 (common-lisp:defun delete-datalake-exceptions-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake/exceptions/subscription" :params
                                `(("Action"
                                   ,@"DeleteDatalakeExceptionsSubscription")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun delete-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/subscribers"
                                                        "DeleteSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscriber))
(common-lisp:progn
 (common-lisp:defun delete-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-id)
   (common-lisp:declare (common-lisp:ignorable subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "DeleteSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-subscription-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-datalake ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake" :params
                                `(("Action" ,@"GetDatalake")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake))
(common-lisp:progn
 (common-lisp:defun get-datalake-auto-enable ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/autoenable" :params
                                `(("Action" ,@"GetDatalakeAutoEnable")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-auto-enable))
(common-lisp:progn
 (common-lisp:defun get-datalake-exceptions-expiry ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/exceptions/expiry" :params
                                `(("Action" ,@"GetDatalakeExceptionsExpiry")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-exceptions-expiry))
(common-lisp:progn
 (common-lisp:defun get-datalake-exceptions-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/exceptions/subscription" :params
                                `(("Action"
                                   ,@"GetDatalakeExceptionsSubscription")
                                  ("Version" ,@"2018-05-10"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun get-datalake-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-set max-account-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-set max-account-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-datalake-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/status"
                                                        "GetDatalakeStatus"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-datalake-status))
(common-lisp:progn
 (common-lisp:defun get-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-subscriber))
(common-lisp:progn
 (common-lisp:defun list-datalake-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-failures next-token region-set)
   (common-lisp:declare
    (common-lisp:ignorable max-failures next-token region-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datalake-exceptions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/exceptions"
                                                        "ListDatalakeExceptions"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datalake-exceptions))
(common-lisp:progn
 (common-lisp:defun list-log-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-order list-all-dimensions
                     list-single-dimension list-two-dimensions max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable input-order list-all-dimensions
     list-single-dimension list-two-dimensions max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/logsources/list"
                                                        "ListLogSources"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-sources))
(common-lisp:progn
 (common-lisp:defun list-subscribers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscribers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/subscribers"
                                                        "ListSubscribers"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscribers))
(common-lisp:progn
 (common-lisp:defun update-datalake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations)
   (common-lisp:declare (common-lisp:ignorable configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-datalake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/v1/datalake"
                                                        "UpdateDatalake"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake))
(common-lisp:progn
 (common-lisp:defun update-datalake-exceptions-expiry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exception-message-expiry)
   (common-lisp:declare (common-lisp:ignorable exception-message-expiry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-datalake-exceptions-expiry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/datalake/exceptions/expiry"
                                                        "UpdateDatalakeExceptionsExpiry"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake-exceptions-expiry))
(common-lisp:progn
 (common-lisp:defun update-datalake-exceptions-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notification-endpoint
                     subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable notification-endpoint subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-datalake-exceptions-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/datalake/exceptions/subscription"
                                                        "UpdateDatalakeExceptionsSubscription"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-datalake-exceptions-subscription))
(common-lisp:progn
 (common-lisp:defun update-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key external-id id source-types
                     subscriber-description subscriber-name)
   (common-lisp:declare
    (common-lisp:ignorable external-id id source-types subscriber-description
     subscriber-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateSubscriber"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscriber))
(common-lisp:progn
 (common-lisp:defun update-subscription-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-sqs https-api-key-name
                     https-api-key-value https-method role-arn
                     subscription-endpoint subscription-id)
   (common-lisp:declare
    (common-lisp:ignorable create-sqs https-api-key-name https-api-key-value
     https-method role-arn subscription-endpoint subscription-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscription-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/subscription-notifications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscription-id))))
                                                        "UpdateSubscriptionNotificationConfiguration"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-subscription-notification-configuration))
