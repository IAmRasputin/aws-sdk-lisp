;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/customer-profiles/api
  (:use)
  (:nicknames #:aws/customer-profiles)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/customer-profiles/api)
(common-lisp:progn
 (common-lisp:defclass customer-profiles-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "customer-profiles"))
 (common-lisp:export 'customer-profiles-request))
(common-lisp:progn
 (common-lisp:define-condition customer-profiles-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'customer-profiles-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:deftype |name| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-profile-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-profile-key-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or |requestValueList| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-profile-key-request 'make-add-profile-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-profile-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-profile-key-response-"))
   (key-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |requestValueList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-profile-key-response 'make-add-profile-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-profile-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-search-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-search-key-"))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or |requestValueList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-search-key 'make-additional-search-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-search-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (address (:copier common-lisp:nil) (:conc-name "struct-shape-address-"))
   (address1 common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (address2 common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (address3 common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (address4 common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (city common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (county common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (province common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (country common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (postal-code common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address1))
      (common-lisp:list
       (common-lisp:cons "Address1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address2))
      (common-lisp:list
       (common-lisp:cons "Address2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address3))
      (common-lisp:list
       (common-lisp:cons "Address3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address4))
      (common-lisp:list
       (common-lisp:cons "Address4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'county))
      (common-lisp:list
       (common-lisp:cons "County"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'province))
      (common-lisp:list
       (common-lisp:cons "Province"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (appflow-integration (:copier common-lisp:nil)
      (:conc-name "struct-shape-appflow-integration-"))
   (flow-definition (common-lisp:error ":flow-definition is required") :type
    (common-lisp:or flow-definition common-lisp:null))
   (batches common-lisp:nil :type (common-lisp:or batches common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'appflow-integration 'make-appflow-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input appflow-integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input appflow-integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition))
      (common-lisp:list
       (common-lisp:cons "FlowDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batches))
      (common-lisp:list
       (common-lisp:cons "Batches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input appflow-integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (appflow-integration-workflow-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-appflow-integration-workflow-attributes-"))
   (source-connector-type
    (common-lisp:error ":source-connector-type is required") :type
    (common-lisp:or source-connector-type common-lisp:null))
   (connector-profile-name
    (common-lisp:error ":connector-profile-name is required") :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-attributes
                    'make-appflow-integration-workflow-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-type))
      (common-lisp:list
       (common-lisp:cons "SourceConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (appflow-integration-workflow-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-appflow-integration-workflow-metrics-"))
   (records-processed (common-lisp:error ":records-processed is required")
    :type (common-lisp:or common-lisp:integer common-lisp:null))
   (steps-completed (common-lisp:error ":steps-completed is required") :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (total-steps (common-lisp:error ":total-steps is required") :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-metrics
                    'make-appflow-integration-workflow-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "RecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps-completed))
      (common-lisp:list
       (common-lisp:cons "StepsCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps))
      (common-lisp:list
       (common-lisp:cons "TotalSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (appflow-integration-workflow-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-appflow-integration-workflow-step-"))
   (flow-name (common-lisp:error ":flow-name is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status common-lisp:null))
   (execution-message (common-lisp:error ":execution-message is required")
    :type (common-lisp:or |string1To255| common-lisp:null))
   (records-processed (common-lisp:error ":records-processed is required")
    :type (common-lisp:or common-lisp:integer common-lisp:null))
   (batch-records-start-time
    (common-lisp:error ":batch-records-start-time is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (batch-records-end-time
    (common-lisp:error ":batch-records-end-time is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'appflow-integration-workflow-step
                    'make-appflow-integration-workflow-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "FlowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-message))
      (common-lisp:list
       (common-lisp:cons "ExecutionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "RecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-records-start-time))
      (common-lisp:list
       (common-lisp:cons "BatchRecordsStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-records-end-time))
      (common-lisp:list
       (common-lisp:cons "BatchRecordsEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          appflow-integration-workflow-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-source-id-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-attribute-source-id-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-merging (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-merging-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or |optionalBoolean| common-lisp:null))
   (consolidation common-lisp:nil :type
    (common-lisp:or consolidation common-lisp:null))
   (conflict-resolution common-lisp:nil :type
    (common-lisp:or conflict-resolution common-lisp:null))
   (min-allowed-confidence-score-for-merging common-lisp:nil :type
    (common-lisp:or double0to1 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auto-merging 'make-auto-merging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-merging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-merging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consolidation))
      (common-lisp:list
       (common-lisp:cons "Consolidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-allowed-confidence-score-for-merging))
      (common-lisp:list
       (common-lisp:cons "MinAllowedConfidenceScoreForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-merging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch (:copier common-lisp:nil) (:conc-name "struct-shape-batch-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'batch 'make-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batches () '(trivial-types:proper-list batch))
 (common-lisp:defun |make-batches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (conflict-resolution (:copier common-lisp:nil)
      (:conc-name "struct-shape-conflict-resolution-"))
   (conflict-resolving-model
    (common-lisp:error ":conflict-resolving-model is required") :type
    (common-lisp:or conflict-resolving-model common-lisp:null))
   (source-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conflict-resolution 'make-conflict-resolution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conflict-resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conflict-resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conflict-resolving-model))
      (common-lisp:list
       (common-lisp:cons "ConflictResolvingModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conflict-resolution))
   common-lisp:nil))
(common-lisp:deftype conflict-resolving-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-operator-"))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-connector-operator common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3connector-operator common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-connector-operator common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-connector-operator common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-connector-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-operator 'make-connector-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-operator))
   common-lisp:nil))
(common-lisp:deftype connector-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (consolidation (:copier common-lisp:nil)
      (:conc-name "struct-shape-consolidation-"))
   (matching-attributes-list
    (common-lisp:error ":matching-attributes-list is required") :type
    (common-lisp:or matching-attributes-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'consolidation 'make-consolidation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consolidation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consolidation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-attributes-list))
      (common-lisp:list
       (common-lisp:cons "MatchingAttributesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consolidation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (default-expiration-days
    (common-lisp:error ":default-expiration-days is required") :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (default-encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (dead-letter-queue-url common-lisp:nil :type
    (common-lisp:or |sqsQueueUrl| common-lisp:null))
   (matching common-lisp:nil :type
    (common-lisp:or matching-request common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (default-expiration-days
    (common-lisp:error ":default-expiration-days is required") :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (default-encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (dead-letter-queue-url common-lisp:nil :type
    (common-lisp:or |sqsQueueUrl| common-lisp:null))
   (matching common-lisp:nil :type
    (common-lisp:or matching-response common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-integration-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-integration-workflow-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (workflow-type (common-lisp:error ":workflow-type is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (integration-config (common-lisp:error ":integration-config is required")
    :type (common-lisp:or integration-config common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-integration-workflow-request
                    'make-create-integration-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-config))
      (common-lisp:list
       (common-lisp:cons "IntegrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-integration-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-integration-workflow-response-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-integration-workflow-response
                    'make-create-integration-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-integration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (account-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (additional-information common-lisp:nil :type
    (common-lisp:or |string1To1000| common-lisp:null))
   (party-type common-lisp:nil :type
    (common-lisp:or party-type common-lisp:null))
   (business-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (middle-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (birth-date common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (mobile-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (home-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (business-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (personal-email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (business-email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (address common-lisp:nil :type (common-lisp:or address common-lisp:null))
   (shipping-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (mailing-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (billing-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (party-type-string common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (gender-string common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-response-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:deftype data-pull-mode () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype datetime-type-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-response-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-integration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-integration-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-integration-request
                    'make-delete-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-integration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-integration-response-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-integration-response
                    'make-delete-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-key-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or |requestValueList| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-key-request
                    'make-delete-profile-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-key-response-"))
   (message common-lisp:nil :type (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-key-response
                    'make-delete-profile-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-object-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (profile-object-unique-key
    (common-lisp:error ":profile-object-unique-key is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-request
                    'make-delete-profile-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-object-response-"))
   (message common-lisp:nil :type (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-response
                    'make-delete-profile-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-object-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-object-type-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-type-request
                    'make-delete-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-object-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-object-type-response-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-object-type-response
                    'make-delete-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-response-"))
   (message common-lisp:nil :type (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-response 'make-delete-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workflow-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workflow-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-response 'make-delete-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   common-lisp:nil))
(common-lisp:deftype destination-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-list ()
   '(trivial-types:proper-list list-domain-item))
 (common-lisp:defun |make-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-domain-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-stats (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-stats-"))
   (profile-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (metering-profile-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (object-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (total-size common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-stats 'make-domain-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-count))
      (common-lisp:list
       (common-lisp:cons "ProfileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metering-profile-count))
      (common-lisp:list
       (common-lisp:cons "MeteringProfileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-count))
      (common-lisp:list
       (common-lisp:cons "ObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-stats))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double0to1 () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (exporting-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-exporting-config-"))
   (s3exporting common-lisp:nil :type
    (common-lisp:or s3exporting-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exporting-config 'make-exporting-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exporting-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exporting-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3exporting))
      (common-lisp:list
       (common-lisp:cons "S3Exporting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exporting-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exporting-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-exporting-location-"))
   (s3exporting common-lisp:nil :type
    (common-lisp:or s3exporting-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exporting-location 'make-exporting-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exporting-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exporting-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3exporting))
      (common-lisp:list
       (common-lisp:cons "S3Exporting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exporting-location))
   common-lisp:nil))
(common-lisp:deftype field-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype field-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-field-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype field-name-list () '(trivial-types:proper-list |name|))
 (common-lisp:defun |make-field-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |name|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (field-source-profile-ids (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-source-profile-ids-"))
   (account-number common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (additional-information common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (party-type common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (business-name common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (first-name common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (middle-name common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (last-name common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (birth-date common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (gender common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (mobile-phone-number common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (home-phone-number common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (business-phone-number common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (personal-email-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (business-email-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (address common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (shipping-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (mailing-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (billing-address common-lisp:nil :type
    (common-lisp:or |uuid| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-source-id-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-source-profile-ids 'make-field-source-profile-ids))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-source-profile-ids))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (flow-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-flow-definition-"))
   (description common-lisp:nil :type
    (common-lisp:or flow-description common-lisp:null))
   (flow-name (common-lisp:error ":flow-name is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (kms-arn (common-lisp:error ":kms-arn is required") :type
    (common-lisp:or kms-arn common-lisp:null))
   (source-flow-config (common-lisp:error ":source-flow-config is required")
    :type (common-lisp:or source-flow-config common-lisp:null))
   (tasks (common-lisp:error ":tasks is required") :type
    (common-lisp:or tasks common-lisp:null))
   (trigger-config (common-lisp:error ":trigger-config is required") :type
    (common-lisp:or trigger-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'flow-definition 'make-flow-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "FlowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-arn))
      (common-lisp:list
       (common-lisp:cons "KmsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-flow-config))
      (common-lisp:list
       (common-lisp:cons "SourceFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "Tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-config))
      (common-lisp:list
       (common-lisp:cons "TriggerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow-definition))
   common-lisp:nil))
(common-lisp:deftype flow-description () 'common-lisp:string)
(common-lisp:deftype flow-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (found-by-key-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-found-by-key-value-"))
   (key-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |requestValueList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'found-by-key-value 'make-found-by-key-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input found-by-key-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input found-by-key-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input found-by-key-value))
   common-lisp:nil))
(common-lisp:deftype gender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-auto-merging-preview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-auto-merging-preview-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (consolidation (common-lisp:error ":consolidation is required") :type
    (common-lisp:or consolidation common-lisp:null))
   (conflict-resolution (common-lisp:error ":conflict-resolution is required")
    :type (common-lisp:or conflict-resolution common-lisp:null))
   (min-allowed-confidence-score-for-merging common-lisp:nil :type
    (common-lisp:or double0to1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-auto-merging-preview-request
                    'make-get-auto-merging-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consolidation))
      (common-lisp:list
       (common-lisp:cons "Consolidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-allowed-confidence-score-for-merging))
      (common-lisp:list
       (common-lisp:cons "MinAllowedConfidenceScoreForMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-auto-merging-preview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-auto-merging-preview-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (number-of-matches-in-sample common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (number-of-profiles-in-sample common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (number-of-profiles-will-be-merged common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-auto-merging-preview-response
                    'make-get-auto-merging-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-matches-in-sample))
      (common-lisp:list
       (common-lisp:cons "NumberOfMatchesInSample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-in-sample))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesInSample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-will-be-merged))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesWillBeMerged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-merging-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-request 'make-get-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (default-expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (default-encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (dead-letter-queue-url common-lisp:nil :type
    (common-lisp:or |sqsQueueUrl| common-lisp:null))
   (stats common-lisp:nil :type (common-lisp:or domain-stats common-lisp:null))
   (matching common-lisp:nil :type
    (common-lisp:or matching-response common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-response 'make-get-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "Stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-identity-resolution-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-identity-resolution-job-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |uuid| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-identity-resolution-job-request
                    'make-get-identity-resolution-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-identity-resolution-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-identity-resolution-job-response-"))
   (domain-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or identity-resolution-job-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or |stringTo2048| common-lisp:null))
   (job-start-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (job-end-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (job-expiration-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (auto-merging common-lisp:nil :type
    (common-lisp:or auto-merging common-lisp:null))
   (exporting-location common-lisp:nil :type
    (common-lisp:or exporting-location common-lisp:null))
   (job-stats common-lisp:nil :type
    (common-lisp:or job-stats common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-identity-resolution-job-response
                    'make-get-identity-resolution-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-start-time))
      (common-lisp:list
       (common-lisp:cons "JobStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-end-time))
      (common-lisp:list
       (common-lisp:cons "JobEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-expiration-time))
      (common-lisp:list
       (common-lisp:cons "JobExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-location))
      (common-lisp:list
       (common-lisp:cons "ExportingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-stats))
      (common-lisp:list
       (common-lisp:cons "JobStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-resolution-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-integration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-integration-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-integration-request 'make-get-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-integration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-integration-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (object-type-name common-lisp:nil :type
    (common-lisp:or |typeName| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (object-type-names common-lisp:nil :type
    (common-lisp:or object-type-names common-lisp:null))
   (workflow-id common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (is-unstructured common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-integration-response 'make-get-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matches-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matches-request-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matches-request 'make-get-matches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-matches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-matches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matches-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matches-response-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (match-generation-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (potential-matches common-lisp:nil :type
    (common-lisp:or |matchesNumber| common-lisp:null))
   (matches common-lisp:nil :type
    (common-lisp:or matches-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matches-response 'make-get-matches-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-matches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-matches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'match-generation-date))
      (common-lisp:list
       (common-lisp:cons "MatchGenerationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'potential-matches))
      (common-lisp:list
       (common-lisp:cons "PotentialMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matches))
      (common-lisp:list
       (common-lisp:cons "Matches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-matches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-object-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-object-type-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-request
                    'make-get-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-object-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-object-type-response-"))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |text| common-lisp:null))
   (template-id common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (allow-profile-creation common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (source-last-updated-timestamp-format common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (keys common-lisp:nil :type (common-lisp:or key-map common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-response
                    'make-get-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-object-type-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-object-type-template-request-"))
   (template-id (common-lisp:error ":template-id is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-template-request
                    'make-get-profile-object-type-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-profile-object-type-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-profile-object-type-template-response-"))
   (template-id common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (source-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (source-object common-lisp:nil :type
    (common-lisp:or |name| common-lisp:null))
   (allow-profile-creation common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (source-last-updated-timestamp-format common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (keys common-lisp:nil :type (common-lisp:or key-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-profile-object-type-template-response
                    'make-get-profile-object-type-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-object))
      (common-lisp:list
       (common-lisp:cons "SourceObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-profile-object-type-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or |uuid| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-request 'make-get-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-response-"))
   (workflow-id common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (workflow-type common-lisp:nil :type
    (common-lisp:or workflow-type common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (error-description common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (start-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or workflow-attributes common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or workflow-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-response 'make-get-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-description))
      (common-lisp:list
       (common-lisp:cons "ErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-steps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-steps-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-steps-request
                    'make-get-workflow-steps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-steps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-steps-response-"))
   (workflow-id common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (workflow-type common-lisp:nil :type
    (common-lisp:or workflow-type common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or workflow-steps-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-steps-response
                    'make-get-workflow-steps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-steps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-resolution-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-resolution-job-"))
   (domain-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or identity-resolution-job-status common-lisp:null))
   (job-start-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (job-end-time common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (job-stats common-lisp:nil :type
    (common-lisp:or job-stats common-lisp:null))
   (exporting-location common-lisp:nil :type
    (common-lisp:or exporting-location common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or |stringTo2048| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-resolution-job 'make-identity-resolution-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-start-time))
      (common-lisp:list
       (common-lisp:cons "JobStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-end-time))
      (common-lisp:list
       (common-lisp:cons "JobEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-stats))
      (common-lisp:list
       (common-lisp:cons "JobStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-location))
      (common-lisp:list
       (common-lisp:cons "ExportingLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-resolution-job))
   common-lisp:nil))
(common-lisp:deftype identity-resolution-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-resolution-jobs-list ()
   '(trivial-types:proper-list identity-resolution-job))
 (common-lisp:defun |make-identity-resolution-jobs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-resolution-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (incremental-pull-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-incremental-pull-config-"))
   (datetime-type-field-name common-lisp:nil :type
    (common-lisp:or datetime-type-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'incremental-pull-config 'make-incremental-pull-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datetime-type-field-name))
      (common-lisp:list
       (common-lisp:cons "DatetimeTypeFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (integration-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-integration-config-"))
   (appflow-integration common-lisp:nil :type
    (common-lisp:or appflow-integration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integration-config 'make-integration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integration-list ()
   '(trivial-types:proper-list list-integration-item))
 (common-lisp:defun |make-integration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-integration-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (job-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-schedule-"))
   (day-of-the-week (common-lisp:error ":day-of-the-week is required") :type
    (common-lisp:or job-schedule-day-of-the-week common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or job-schedule-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-schedule 'make-job-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-the-week))
      (common-lisp:list
       (common-lisp:cons "DayOfTheWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-schedule))
   common-lisp:nil))
(common-lisp:deftype job-schedule-day-of-the-week () 'common-lisp:string)
(common-lisp:deftype job-schedule-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-stats (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-stats-"))
   (number-of-profiles-reviewed common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (number-of-matches-found common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (number-of-merges-done common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-stats 'make-job-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-profiles-reviewed))
      (common-lisp:list
       (common-lisp:cons "NumberOfProfilesReviewed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-matches-found))
      (common-lisp:list
       (common-lisp:cons "NumberOfMatchesFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-merges-done))
      (common-lisp:list
       (common-lisp:cons "NumberOfMergesDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-key-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-integrations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-integrations-request-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null))
   (include-hidden common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-integrations-request
                    'make-list-account-integrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-integrations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-integrations-response-"))
   (items common-lisp:nil :type
    (common-lisp:or integration-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-integrations-response
                    'make-list-account-integrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-integrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-item-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-item 'make-list-domain-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domain-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domain-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domain-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-request-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-response-"))
   (items common-lisp:nil :type (common-lisp:or domain-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-resolution-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-resolution-jobs-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-resolution-jobs-request
                    'make-list-identity-resolution-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-resolution-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-resolution-jobs-response-"))
   (identity-resolution-jobs-list common-lisp:nil :type
    (common-lisp:or identity-resolution-jobs-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-resolution-jobs-response
                    'make-list-identity-resolution-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-resolution-jobs-list))
      (common-lisp:list
       (common-lisp:cons "IdentityResolutionJobsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-resolution-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-integration-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-integration-item-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (object-type-name common-lisp:nil :type
    (common-lisp:or |typeName| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (object-type-names common-lisp:nil :type
    (common-lisp:or object-type-names common-lisp:null))
   (workflow-id common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (is-unstructured common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-integration-item 'make-list-integration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-integrations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-integrations-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null))
   (include-hidden common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-integrations-request
                    'make-list-integrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-integrations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-integrations-response-"))
   (items common-lisp:nil :type
    (common-lisp:or integration-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-integrations-response
                    'make-list-integrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-integrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-type-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-type-item-"))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |text| common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-item
                    'make-list-profile-object-type-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-type-template-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-type-template-item-"))
   (template-id common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (source-name common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (source-object common-lisp:nil :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-template-item
                    'make-list-profile-object-type-template-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-object))
      (common-lisp:list
       (common-lisp:cons "SourceObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-template-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-type-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-type-templates-request-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-templates-request
                    'make-list-profile-object-type-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-type-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-type-templates-response-"))
   (items common-lisp:nil :type
    (common-lisp:or profile-object-type-template-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-type-templates-response
                    'make-list-profile-object-type-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-type-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-types-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-types-request
                    'make-list-profile-object-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-object-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-object-types-response-"))
   (items common-lisp:nil :type
    (common-lisp:or profile-object-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-object-types-response
                    'make-list-profile-object-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-object-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-objects-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-objects-item-"))
   (object-type-name common-lisp:nil :type
    (common-lisp:or |typeName| common-lisp:null))
   (profile-object-unique-key common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (object common-lisp:nil :type
    (common-lisp:or |stringifiedJson| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-item
                    'make-list-profile-objects-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-objects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-objects-request-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (object-filter common-lisp:nil :type
    (common-lisp:or object-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-request
                    'make-list-profile-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-filter))
      (common-lisp:list
       (common-lisp:cons "ObjectFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profile-objects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profile-objects-response-"))
   (items common-lisp:nil :type
    (common-lisp:or profile-object-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profile-objects-response
                    'make-list-profile-objects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-objects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tag-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-item-"))
   (workflow-type (common-lisp:error ":workflow-type is required") :type
    (common-lisp:or workflow-type common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or status common-lisp:null))
   (status-description (common-lisp:error ":status-description is required")
    :type (common-lisp:or |string1To255| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-item 'make-list-workflows-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-workflows-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-workflows-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-description))
      (common-lisp:list
       (common-lisp:cons "StatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-workflows-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (workflow-type common-lisp:nil :type
    (common-lisp:or workflow-type common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (query-start-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (query-end-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-type))
      (common-lisp:list
       (common-lisp:cons "WorkflowType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-start-date))
      (common-lisp:list
       (common-lisp:cons "QueryStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-end-date))
      (common-lisp:list
       (common-lisp:cons "QueryEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-response-"))
   (items common-lisp:nil :type
    (common-lisp:or workflow-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:deftype marketo-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketo-source-properties
                    'make-marketo-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (match-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-match-item-"))
   (match-id common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (profile-ids common-lisp:nil :type
    (common-lisp:or profile-id-list common-lisp:null))
   (confidence-score common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'match-item 'make-match-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-id))
      (common-lisp:list
       (common-lisp:cons "MatchId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-ids))
      (common-lisp:list
       (common-lisp:cons "ProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence-score))
      (common-lisp:list
       (common-lisp:cons "ConfidenceScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matches-list () '(trivial-types:proper-list match-item))
 (common-lisp:defun |make-matches-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype matching-attributes ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun |make-matching-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype matching-attributes-list ()
   '(trivial-types:proper-list matching-attributes))
 (common-lisp:defun |make-matching-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matching-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (matching-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-matching-request-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or |optionalBoolean| common-lisp:null))
   (job-schedule common-lisp:nil :type
    (common-lisp:or job-schedule common-lisp:null))
   (auto-merging common-lisp:nil :type
    (common-lisp:or auto-merging common-lisp:null))
   (exporting-config common-lisp:nil :type
    (common-lisp:or exporting-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'matching-request 'make-matching-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-schedule))
      (common-lisp:list
       (common-lisp:cons "JobSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (matching-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-matching-response-"))
   (enabled common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null))
   (job-schedule common-lisp:nil :type
    (common-lisp:or job-schedule common-lisp:null))
   (auto-merging common-lisp:nil :type
    (common-lisp:or auto-merging common-lisp:null))
   (exporting-config common-lisp:nil :type
    (common-lisp:or exporting-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'matching-response 'make-matching-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matching-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matching-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-schedule))
      (common-lisp:list
       (common-lisp:cons "JobSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-merging))
      (common-lisp:list
       (common-lisp:cons "AutoMerging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-config))
      (common-lisp:list
       (common-lisp:cons "ExportingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matching-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (merge-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-merge-profiles-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (main-profile-id (common-lisp:error ":main-profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (profile-ids-to-be-merged
    (common-lisp:error ":profile-ids-to-be-merged is required") :type
    (common-lisp:or profile-id-to-be-merged-list common-lisp:null))
   (field-source-profile-ids common-lisp:nil :type
    (common-lisp:or field-source-profile-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'merge-profiles-request 'make-merge-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main-profile-id))
      (common-lisp:list
       (common-lisp:cons "MainProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-ids-to-be-merged))
      (common-lisp:list
       (common-lisp:cons "ProfileIdsToBeMerged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'field-source-profile-ids))
      (common-lisp:list
       (common-lisp:cons "FieldSourceProfileIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (merge-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-merge-profiles-response-"))
   (message common-lisp:nil :type (common-lisp:or |message| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'merge-profiles-response 'make-merge-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-profiles-response))
   common-lisp:nil))
(common-lisp:deftype object () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-filter-"))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or |requestValueList| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'object-filter 'make-object-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-type-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-type-field-"))
   (source common-lisp:nil :type (common-lisp:or |text| common-lisp:null))
   (target common-lisp:nil :type (common-lisp:or |text| common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or field-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-type-field 'make-object-type-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-type-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-type-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-type-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-type-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-type-key-"))
   (standard-identifiers common-lisp:nil :type
    (common-lisp:or standard-identifier-list common-lisp:null))
   (field-names common-lisp:nil :type
    (common-lisp:or field-name-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'object-type-key 'make-object-type-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-type-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-type-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-identifiers))
      (common-lisp:list
       (common-lisp:cons "StandardIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-names))
      (common-lisp:list
       (common-lisp:cons "FieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-type-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-type-key-list ()
   '(trivial-types:proper-list object-type-key))
 (common-lisp:defun |make-object-type-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-type-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype object-type-names () 'common-lisp:hash-table)
 (common-lisp:defun |make-object-type-names|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype operator-properties-keys () 'common-lisp:string)
(common-lisp:deftype party-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (profile (:copier common-lisp:nil) (:conc-name "struct-shape-profile-"))
   (profile-id common-lisp:nil :type (common-lisp:or |uuid| common-lisp:null))
   (account-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (additional-information common-lisp:nil :type
    (common-lisp:or |string1To1000| common-lisp:null))
   (party-type common-lisp:nil :type
    (common-lisp:or party-type common-lisp:null))
   (business-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (middle-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (birth-date common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (mobile-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (home-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (business-phone-number common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (personal-email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (business-email-address common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (address common-lisp:nil :type (common-lisp:or address common-lisp:null))
   (shipping-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (mailing-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (billing-address common-lisp:nil :type
    (common-lisp:or address common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (found-by-items common-lisp:nil :type
    (common-lisp:or |foundByList| common-lisp:null))
   (party-type-string common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (gender-string common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profile 'make-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found-by-items))
      (common-lisp:list
       (common-lisp:cons "FoundByItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-id-list () '(trivial-types:proper-list |uuid|))
 (common-lisp:defun |make-profile-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |uuid|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-id-to-be-merged-list ()
   '(trivial-types:proper-list |uuid|))
 (common-lisp:defun |make-profile-id-to-be-merged-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |uuid|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-list () '(trivial-types:proper-list profile))
 (common-lisp:defun |make-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-list ()
   '(trivial-types:proper-list list-profile-objects-item))
 (common-lisp:defun |make-profile-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-objects-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-type-list ()
   '(trivial-types:proper-list list-profile-object-type-item))
 (common-lisp:defun |make-profile-object-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-object-type-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype profile-object-type-template-list ()
   '(trivial-types:proper-list list-profile-object-type-template-item))
 (common-lisp:defun |make-profile-object-type-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-profile-object-type-template-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-integration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-integration-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or |string1To255| common-lisp:null))
   (object-type-name common-lisp:nil :type
    (common-lisp:or |typeName| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (flow-definition common-lisp:nil :type
    (common-lisp:or flow-definition common-lisp:null))
   (object-type-names common-lisp:nil :type
    (common-lisp:or object-type-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-integration-request 'make-put-integration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition))
      (common-lisp:list
       (common-lisp:cons "FlowDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-integration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-integration-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |string1To255| common-lisp:null))
   (object-type-name common-lisp:nil :type
    (common-lisp:or |typeName| common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (object-type-names common-lisp:nil :type
    (common-lisp:or object-type-names common-lisp:null))
   (workflow-id common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (is-unstructured common-lisp:nil :type
    (common-lisp:or |optionalBoolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-integration-response 'make-put-integration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-names))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unstructured))
      (common-lisp:list
       (common-lisp:cons "IsUnstructured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-integration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-profile-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-profile-object-request-"))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or |stringifiedJson| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-request
                    'make-put-profile-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-profile-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-profile-object-response-"))
   (profile-object-unique-key common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-response
                    'make-put-profile-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profile-object-unique-key))
      (common-lisp:list
       (common-lisp:cons "ProfileObjectUniqueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-profile-object-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-profile-object-type-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |text| common-lisp:null))
   (template-id common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (allow-profile-creation common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (source-last-updated-timestamp-format common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (keys common-lisp:nil :type (common-lisp:or key-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-type-request
                    'make-put-profile-object-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-profile-object-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-profile-object-type-response-"))
   (object-type-name (common-lisp:error ":object-type-name is required") :type
    (common-lisp:or |typeName| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |text| common-lisp:null))
   (template-id common-lisp:nil :type (common-lisp:or |name| common-lisp:null))
   (expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (allow-profile-creation common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (source-last-updated-timestamp-format common-lisp:nil :type
    (common-lisp:or |string1To255| common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (keys common-lisp:nil :type (common-lisp:or key-map common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-profile-object-type-response
                    'make-put-profile-object-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "ObjectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-profile-creation))
      (common-lisp:list
       (common-lisp:cons "AllowProfileCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-last-updated-timestamp-format))
      (common-lisp:list
       (common-lisp:cons "SourceLastUpdatedTimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "Fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-profile-object-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3exporting-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3exporting-config-"))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or |s3BucketName| common-lisp:null))
   (s3key-name common-lisp:nil :type
    (common-lisp:or |s3KeyNameCustomerOutputConfig| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3exporting-config 'make-s3exporting-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3exporting-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3exporting-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-name))
      (common-lisp:list
       (common-lisp:cons "S3KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3exporting-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3exporting-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3exporting-location-"))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or |s3BucketName| common-lisp:null))
   (s3key-name common-lisp:nil :type
    (common-lisp:or |s3KeyName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3exporting-location 'make-s3exporting-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3exporting-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3exporting-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-name))
      (common-lisp:list
       (common-lisp:cons "S3KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3exporting-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3source-properties-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3source-properties 'make-s3source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source-properties))
   common-lisp:nil))
(common-lisp:deftype salesforce-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (enable-dynamic-field-update common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (include-deleted-records common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-source-properties
                    'make-salesforce-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-dynamic-field-update))
      (common-lisp:list
       (common-lisp:cons "EnableDynamicFieldUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-records))
      (common-lisp:list
       (common-lisp:cons "IncludeDeletedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-trigger-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-trigger-properties-"))
   (schedule-expression (common-lisp:error ":schedule-expression is required")
    :type (common-lisp:or schedule-expression common-lisp:null))
   (data-pull-mode common-lisp:nil :type
    (common-lisp:or data-pull-mode common-lisp:null))
   (schedule-start-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (schedule-end-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or timezone common-lisp:null))
   (schedule-offset common-lisp:nil :type
    (common-lisp:or schedule-offset common-lisp:null))
   (first-execution-from common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-trigger-properties
                    'make-scheduled-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pull-mode))
      (common-lisp:list
       (common-lisp:cons "DataPullMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-start-time))
      (common-lisp:list
       (common-lisp:cons "ScheduleStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-end-time))
      (common-lisp:list
       (common-lisp:cons "ScheduleEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-execution-from))
      (common-lisp:list
       (common-lisp:cons "FirstExecutionFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-profiles-request-"))
   (next-token common-lisp:nil :type (common-lisp:or |token| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or |maxSize100| common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (key-name (common-lisp:error ":key-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or |requestValueList| common-lisp:null))
   (additional-search-keys common-lisp:nil :type
    (common-lisp:or |additionalSearchKeysList| common-lisp:null))
   (logical-operator common-lisp:nil :type
    (common-lisp:or |logicalOperator| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-profiles-request 'make-search-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-search-keys))
      (common-lisp:list
       (common-lisp:cons "AdditionalSearchKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-profiles-response-"))
   (items common-lisp:nil :type (common-lisp:or profile-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |token| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-profiles-response 'make-search-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   common-lisp:nil))
(common-lisp:deftype service-now-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-source-properties
                    'make-service-now-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-connector-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-connector-properties-"))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-source-properties common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3source-properties common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-source-properties common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-source-properties common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-source-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-connector-properties
                    'make-source-connector-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   common-lisp:nil))
(common-lisp:deftype source-connector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-fields ()
   '(trivial-types:proper-list |stringTo2048|))
 (common-lisp:defun |make-source-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |stringTo2048|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-flow-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-flow-config-"))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (connector-type (common-lisp:error ":connector-type is required") :type
    (common-lisp:or source-connector-type common-lisp:null))
   (incremental-pull-config common-lisp:nil :type
    (common-lisp:or incremental-pull-config common-lisp:null))
   (source-connector-properties
    (common-lisp:error ":source-connector-properties is required") :type
    (common-lisp:or source-connector-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-flow-config 'make-source-flow-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "ConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-pull-config))
      (common-lisp:list
       (common-lisp:cons "IncrementalPullConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-properties))
      (common-lisp:list
       (common-lisp:cons "SourceConnectorProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-flow-config))
   common-lisp:nil))
(common-lisp:deftype standard-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype standard-identifier-list ()
   '(trivial-types:proper-list standard-identifier))
 (common-lisp:defun |make-standard-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standard-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype tag-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tag-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task (:copier common-lisp:nil) (:conc-name "struct-shape-task-"))
   (connector-operator common-lisp:nil :type
    (common-lisp:or connector-operator common-lisp:null))
   (destination-field common-lisp:nil :type
    (common-lisp:or destination-field common-lisp:null))
   (source-fields (common-lisp:error ":source-fields is required") :type
    (common-lisp:or source-fields common-lisp:null))
   (task-properties common-lisp:nil :type
    (common-lisp:or task-properties-map common-lisp:null))
   (task-type (common-lisp:error ":task-type is required") :type
    (common-lisp:or task-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task 'make-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-operator))
      (common-lisp:list
       (common-lisp:cons "ConnectorOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-field))
      (common-lisp:list
       (common-lisp:cons "DestinationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "SourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-properties))
      (common-lisp:list
       (common-lisp:cons "TaskProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-task-properties-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype task-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tasks () '(trivial-types:proper-list task))
 (common-lisp:defun |make-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (customer-profiles-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-config-"))
   (trigger-type (common-lisp:error ":trigger-type is required") :type
    (common-lisp:or trigger-type common-lisp:null))
   (trigger-properties common-lisp:nil :type
    (common-lisp:or trigger-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger-config 'make-trigger-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "TriggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-properties))
      (common-lisp:list
       (common-lisp:cons "TriggerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-properties-"))
   (scheduled common-lisp:nil :type
    (common-lisp:or scheduled-trigger-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trigger-properties 'make-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled))
      (common-lisp:list
       (common-lisp:cons "Scheduled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-properties))
   common-lisp:nil))
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or tag-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-address-"))
   (address1 common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (address2 common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (address3 common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (address4 common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (city common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (county common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (province common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (country common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (postal-code common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-address 'make-update-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address1))
      (common-lisp:list
       (common-lisp:cons "Address1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address2))
      (common-lisp:list
       (common-lisp:cons "Address2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address3))
      (common-lisp:list
       (common-lisp:cons "Address3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address4))
      (common-lisp:list
       (common-lisp:cons "Address4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'county))
      (common-lisp:list
       (common-lisp:cons "County"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'province))
      (common-lisp:list
       (common-lisp:cons "Province"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-update-attributes|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (default-expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (default-encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (dead-letter-queue-url common-lisp:nil :type
    (common-lisp:or |sqsQueueUrl| common-lisp:null))
   (matching common-lisp:nil :type
    (common-lisp:or matching-request common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-request 'make-update-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-response-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (default-expiration-days common-lisp:nil :type
    (common-lisp:or |expirationDaysInteger| common-lisp:null))
   (default-encryption-key common-lisp:nil :type
    (common-lisp:or |encryptionKey| common-lisp:null))
   (dead-letter-queue-url common-lisp:nil :type
    (common-lisp:or |sqsQueueUrl| common-lisp:null))
   (matching common-lisp:nil :type
    (common-lisp:or matching-response common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (last-updated-at (common-lisp:error ":last-updated-at is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-response 'make-update-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-expiration-days))
      (common-lisp:list
       (common-lisp:cons "DefaultExpirationDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-encryption-key))
      (common-lisp:list
       (common-lisp:cons "DefaultEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-queue-url))
      (common-lisp:list
       (common-lisp:cons "DeadLetterQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching))
      (common-lisp:list
       (common-lisp:cons "Matching"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or |name| common-lisp:null))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null))
   (additional-information common-lisp:nil :type
    (common-lisp:or |string0To1000| common-lisp:null))
   (account-number common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (party-type common-lisp:nil :type
    (common-lisp:or party-type common-lisp:null))
   (business-name common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (first-name common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (middle-name common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (last-name common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (birth-date common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (mobile-phone-number common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (home-phone-number common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (business-phone-number common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (personal-email-address common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (business-email-address common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (address common-lisp:nil :type
    (common-lisp:or update-address common-lisp:null))
   (shipping-address common-lisp:nil :type
    (common-lisp:or update-address common-lisp:null))
   (mailing-address common-lisp:nil :type
    (common-lisp:or update-address common-lisp:null))
   (billing-address common-lisp:nil :type
    (common-lisp:or update-address common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or update-attributes common-lisp:null))
   (party-type-string common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null))
   (gender-string common-lisp:nil :type
    (common-lisp:or |string0To255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-information))
      (common-lisp:list
       (common-lisp:cons "AdditionalInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-number))
      (common-lisp:list
       (common-lisp:cons "AccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type))
      (common-lisp:list
       (common-lisp:cons "PartyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-name))
      (common-lisp:list
       (common-lisp:cons "BusinessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'middle-name))
      (common-lisp:list
       (common-lisp:cons "MiddleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'birth-date))
      (common-lisp:list
       (common-lisp:cons "BirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender))
      (common-lisp:list
       (common-lisp:cons "Gender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-phone-number))
      (common-lisp:list
       (common-lisp:cons "MobilePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-phone-number))
      (common-lisp:list
       (common-lisp:cons "HomePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-phone-number))
      (common-lisp:list
       (common-lisp:cons "BusinessPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'personal-email-address))
      (common-lisp:list
       (common-lisp:cons "PersonalEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-email-address))
      (common-lisp:list
       (common-lisp:cons "BusinessEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mailing-address))
      (common-lisp:list
       (common-lisp:cons "MailingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-address))
      (common-lisp:list
       (common-lisp:cons "BillingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-type-string))
      (common-lisp:list
       (common-lisp:cons "PartyTypeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gender-string))
      (common-lisp:list
       (common-lisp:cons "GenderString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-response-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or |uuid| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-attributes-"))
   (appflow-integration common-lisp:nil :type
    (common-lisp:or appflow-integration-workflow-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-attributes 'make-workflow-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-list ()
   '(trivial-types:proper-list list-workflows-item))
 (common-lisp:defun |make-workflow-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-workflows-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-metrics-"))
   (appflow-integration common-lisp:nil :type
    (common-lisp:or appflow-integration-workflow-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-metrics 'make-workflow-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-step-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-step-item-"))
   (appflow-integration common-lisp:nil :type
    (common-lisp:or appflow-integration-workflow-step common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-item 'make-workflow-step-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-step-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-step-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'appflow-integration))
      (common-lisp:list
       (common-lisp:cons "AppflowIntegration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-step-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-steps-list ()
   '(trivial-types:proper-list workflow-step-item))
 (common-lisp:defun |make-workflow-steps-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-type () 'common-lisp:string)
(common-lisp:deftype zendesk-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-source-properties
                    'make-zendesk-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype |additionalSearchKeysList| ()
   '(trivial-types:proper-list additional-search-key))
 (common-lisp:defun |make-additionalsearchkeyslist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-search-key))
   aws-sdk/generator/shape::members))
common-lisp:nil
(common-lisp:deftype |encryptionKey| () 'common-lisp:string)
(common-lisp:deftype |expirationDaysInteger| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |foundByList| ()
   '(trivial-types:proper-list found-by-key-value))
 (common-lisp:defun |make-foundbylist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list found-by-key-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |logicalOperator| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |matchesNumber| () 'common-lisp:integer)
(common-lisp:deftype |maxSize100| () 'common-lisp:integer)
(common-lisp:deftype |message| () 'common-lisp:string)
(common-lisp:deftype |optionalBoolean| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype |requestValueList| ()
   '(trivial-types:proper-list |string1To255|))
 (common-lisp:defun |make-requestvaluelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |string1To255|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |s3BucketName| () 'common-lisp:string)
(common-lisp:deftype |s3KeyName| () 'common-lisp:string)
(common-lisp:deftype |s3KeyNameCustomerOutputConfig| () 'common-lisp:string)
(common-lisp:deftype |sqsQueueUrl| () 'common-lisp:string)
(common-lisp:deftype |string0To1000| () 'common-lisp:string)
(common-lisp:deftype |string0To255| () 'common-lisp:string)
(common-lisp:deftype |string1To1000| () 'common-lisp:string)
(common-lisp:deftype |string1To255| () 'common-lisp:string)
(common-lisp:deftype |stringTo2048| () 'common-lisp:string)
(common-lisp:deftype |stringifiedJson| () 'common-lisp:string)
(common-lisp:deftype |text| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |token| () 'common-lisp:string)
(common-lisp:deftype |typeName| () 'common-lisp:string)
(common-lisp:deftype |uuid| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-profile-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id key-name values domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id key-name values domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-profile-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/keys"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "AddProfileKey" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-profile-key))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name default-expiration-days
                     default-encryption-key dead-letter-queue-url matching
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name default-expiration-days
     default-encryption-key dead-letter-queue-url matching tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateDomain" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-integration-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-type
                     integration-config object-type-name role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-type integration-config
     object-type-name role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-integration-workflow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/workflows/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateIntegrationWorkflow" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-integration-workflow))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account-number
                     additional-information party-type business-name first-name
                     middle-name last-name birth-date gender phone-number
                     mobile-phone-number home-phone-number
                     business-phone-number email-address personal-email-address
                     business-email-address address shipping-address
                     mailing-address billing-address attributes
                     party-type-string gender-string)
   (common-lisp:declare
    (common-lisp:ignorable domain-name account-number additional-information
     party-type business-name first-name middle-name last-name birth-date
     gender phone-number mobile-phone-number home-phone-number
     business-phone-number email-address personal-email-address
     business-email-address address shipping-address mailing-address
     billing-address attributes party-type-string gender-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "CreateProfile" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteDomain" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri)
   (common-lisp:declare (common-lisp:ignorable domain-name uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteIntegration" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-integration))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id domain-name)
   (common-lisp:declare (common-lisp:ignorable profile-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfile" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-profile-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id key-name values domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id key-name values domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/keys/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfileKey" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile-key))
(common-lisp:progn
 (common-lisp:defun delete-profile-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id profile-object-unique-key
                     object-type-name domain-name)
   (common-lisp:declare
    (common-lisp:ignorable profile-id profile-object-unique-key
     object-type-name domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/objects/delete"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "DeleteProfileObject" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile-object))
(common-lisp:progn
 (common-lisp:defun delete-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name)
   (common-lisp:declare (common-lisp:ignorable domain-name object-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-profile-object-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "DeleteProfileObjectType" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile-object-type))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id)
   (common-lisp:declare (common-lisp:ignorable domain-name workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "DeleteWorkflow" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun get-auto-merging-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name consolidation
                     conflict-resolution
                     min-allowed-confidence-score-for-merging)
   (common-lisp:declare
    (common-lisp:ignorable domain-name consolidation conflict-resolution
     min-allowed-confidence-score-for-merging))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-auto-merging-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs/auto-merging-preview"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetAutoMergingPreview" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-auto-merging-preview))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetDomain" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-identity-resolution-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name job-id)
   (common-lisp:declare (common-lisp:ignorable domain-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-resolution-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetIdentityResolutionJob" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-identity-resolution-job))
(common-lisp:progn
 (common-lisp:defun get-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri)
   (common-lisp:declare (common-lisp:ignorable domain-name uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetIntegration" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-integration))
(common-lisp:progn
 (common-lisp:defun get-matches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-matches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/matches"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "GetMatches" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-matches))
(common-lisp:progn
 (common-lisp:defun get-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name)
   (common-lisp:declare (common-lisp:ignorable domain-name object-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-object-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "GetProfileObjectType" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-profile-object-type))
(common-lisp:progn
 (common-lisp:defun get-profile-object-type-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-id)
   (common-lisp:declare (common-lisp:ignorable template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-profile-object-type-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-id))))
        "GetProfileObjectTypeTemplate" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-profile-object-type-template))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id)
   (common-lisp:declare (common-lisp:ignorable domain-name workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "GetWorkflow" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun get-workflow-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-steps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows/~A/steps"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))))
        "GetWorkflowSteps" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-steps))
(common-lisp:progn
 (common-lisp:defun list-account-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key uri next-token max-results
                     include-hidden)
   (common-lisp:declare
    (common-lisp:ignorable uri next-token max-results include-hidden))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-account-integrations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        "/integrations" "ListAccountIntegrations" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-account-integrations))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        "/domains" "ListDomains" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-identity-resolution-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-identity-resolution-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/identity-resolution-jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListIdentityResolutionJobs" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-resolution-jobs))
(common-lisp:progn
 (common-lisp:defun list-integrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results
                     include-hidden)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results include-hidden))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-integrations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListIntegrations" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-integrations))
(common-lisp:progn
 (common-lisp:defun list-profile-object-type-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-profile-object-type-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        "/templates" "ListProfileObjectTypeTemplates" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-object-type-templates))
(common-lisp:progn
 (common-lisp:defun list-profile-object-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-profile-object-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListProfileObjectTypes" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-object-types))
(common-lisp:progn
 (common-lisp:defun list-profile-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     object-type-name profile-id object-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name object-type-name
     profile-id object-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/objects"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListProfileObjects" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-objects))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name workflow-type status
                     query-start-date query-end-date next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable domain-name workflow-type status query-start-date
     query-end-date next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/workflows"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "ListWorkflows" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun merge-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name main-profile-id
                     profile-ids-to-be-merged field-source-profile-ids)
   (common-lisp:declare
    (common-lisp:ignorable domain-name main-profile-id profile-ids-to-be-merged
     field-source-profile-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-merge-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/domains/~A/profiles/objects/merge"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "MergeProfiles" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'merge-profiles))
(common-lisp:progn
 (common-lisp:defun put-integration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name uri object-type-name tags
                     flow-definition object-type-names)
   (common-lisp:declare
    (common-lisp:ignorable domain-name uri object-type-name tags
     flow-definition object-type-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-integration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/integrations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "PutIntegration" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-integration))
(common-lisp:progn
 (common-lisp:defun put-profile-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key object-type-name object domain-name)
   (common-lisp:declare
    (common-lisp:ignorable object-type-name object domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-profile-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/objects"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "PutProfileObject" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-profile-object))
(common-lisp:progn
 (common-lisp:defun put-profile-object-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name object-type-name description
                     template-id expiration-days encryption-key
                     allow-profile-creation
                     source-last-updated-timestamp-format fields keys tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name object-type-name description template-id
     expiration-days encryption-key allow-profile-creation
     source-last-updated-timestamp-format fields keys tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-profile-object-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/object-types/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'object-type-name))))
        "PutProfileObjectType" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-profile-object-type))
(common-lisp:progn
 (common-lisp:defun search-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results domain-name
                     key-name values additional-search-keys logical-operator)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results domain-name key-name values
     additional-search-keys logical-operator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles/search"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "SearchProfiles" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-profiles))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name default-expiration-days
                     default-encryption-key dead-letter-queue-url matching
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable domain-name default-expiration-days
     default-encryption-key dead-letter-queue-url matching tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "UpdateDomain" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name profile-id
                     additional-information account-number party-type
                     business-name first-name middle-name last-name birth-date
                     gender phone-number mobile-phone-number home-phone-number
                     business-phone-number email-address personal-email-address
                     business-email-address address shipping-address
                     mailing-address billing-address attributes
                     party-type-string gender-string)
   (common-lisp:declare
    (common-lisp:ignorable domain-name profile-id additional-information
     account-number party-type business-name first-name middle-name last-name
     birth-date gender phone-number mobile-phone-number home-phone-number
     business-phone-number email-address personal-email-address
     business-email-address address shipping-address mailing-address
     billing-address attributes party-type-string gender-string))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'customer-profiles-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/domains/~A/profiles"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'domain-name))))
        "UpdateProfile" "2020-08-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profile))
