;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ds/api
  (:use)
  (:nicknames #:aws/ds)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ds/api)
(common-lisp:progn
 (common-lisp:defclass ds-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ds" :protocol :json))
 (common-lisp:export 'ds-request))
(common-lisp:progn
 (common-lisp:define-condition ds-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ds-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AuthenticationFailedException" . authentication-failed-exception)
    ("CertificateAlreadyExistsException"
     . certificate-already-exists-exception)
    ("CertificateDoesNotExistException" . certificate-does-not-exist-exception)
    ("CertificateInUseException" . certificate-in-use-exception)
    ("CertificateLimitExceededException"
     . certificate-limit-exceeded-exception)
    ("ClientException" . client-exception)
    ("DirectoryAlreadyInRegionException"
     . directory-already-in-region-exception)
    ("DirectoryAlreadySharedException" . directory-already-shared-exception)
    ("DirectoryDoesNotExistException" . directory-does-not-exist-exception)
    ("DirectoryInDesiredStateException" . directory-in-desired-state-exception)
    ("DirectoryLimitExceededException" . directory-limit-exceeded-exception)
    ("DirectoryNotSharedException" . directory-not-shared-exception)
    ("DirectoryUnavailableException" . directory-unavailable-exception)
    ("DomainControllerLimitExceededException"
     . domain-controller-limit-exceeded-exception)
    ("EntityAlreadyExistsException" . entity-already-exists-exception)
    ("EntityDoesNotExistException" . entity-does-not-exist-exception)
    ("IncompatibleSettingsException" . incompatible-settings-exception)
    ("InsufficientPermissionsException" . insufficient-permissions-exception)
    ("InvalidCertificateException" . invalid-certificate-exception)
    ("InvalidClientAuthStatusException" . invalid-client-auth-status-exception)
    ("InvalidLDAPSStatusException" . invalid-ldapsstatus-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPasswordException" . invalid-password-exception)
    ("InvalidTargetException" . invalid-target-exception)
    ("IpRouteLimitExceededException" . ip-route-limit-exceeded-exception)
    ("NoAvailableCertificateException" . no-available-certificate-exception)
    ("OrganizationsException" . organizations-exception)
    ("RegionLimitExceededException" . region-limit-exceeded-exception)
    ("ServiceException" . service-exception)
    ("ShareLimitExceededException" . share-limit-exceeded-exception)
    ("SnapshotLimitExceededException" . snapshot-limit-exceeded-exception)
    ("TagLimitExceededException" . tag-limit-exceeded-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)
    ("UnsupportedSettingsException" . unsupported-settings-exception)
    ("UserDoesNotExistException" . user-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-shared-directory-request common-lisp:nil
                       ((shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %accept-shared-directory-request-shared-directory-id
                         :initform
                         (common-lisp:error
                          ":shared-directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-shared-directory-request
                    'make-accept-shared-directory-request))
 (common-lisp:defun make-accept-shared-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-shared-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-shared-directory-result common-lisp:nil
                       ((shared-directory :initarg :shared-directory :type
                         (common-lisp:or shared-directory common-lisp:null)
                         :accessor
                         %accept-shared-directory-result-shared-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-shared-directory-result
                    'make-accept-shared-directory-result))
 (common-lisp:defun make-accept-shared-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-shared-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory))
      (common-lisp:list
       (common-lisp:cons "SharedDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-shared-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       access-denied-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-request-id)))
(common-lisp:deftype access-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-ip-routes-request common-lisp:nil
                       ((update-security-group-for-directory-controllers
                         :initarg
                         :update-security-group-for-directory-controllers :type
                         (common-lisp:or
                          update-security-group-for-directory-controllers
                          common-lisp:null)
                         :accessor
                         %add-ip-routes-request-update-security-group-for-directory-controllers
                         :initform common-lisp:nil)
                        (ip-routes :initarg :ip-routes :type
                         (common-lisp:or ip-routes common-lisp:null) :accessor
                         %add-ip-routes-request-ip-routes :initform
                         (common-lisp:error ":ip-routes is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %add-ip-routes-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'add-ip-routes-request 'make-add-ip-routes-request))
 (common-lisp:defun make-add-ip-routes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     update-security-group-for-directory-controllers ip-routes
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'add-ip-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-routes))
      (common-lisp:list
       (common-lisp:cons "IpRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-security-group-for-directory-controllers))
      (common-lisp:list
       (common-lisp:cons "UpdateSecurityGroupForDirectoryControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-ip-routes-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-ip-routes-result 'make-add-ip-routes-result))
 (common-lisp:defun make-add-ip-routes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-ip-routes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-region-request common-lisp:nil
                       ((vpcsettings :initarg :vpcsettings :type
                         (common-lisp:or directory-vpc-settings
                                         common-lisp:null)
                         :accessor %add-region-request-vpcsettings :initform
                         (common-lisp:error ":vpcsettings is required"))
                        (region-name :initarg :region-name :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %add-region-request-region-name :initform
                         (common-lisp:error ":region-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %add-region-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'add-region-request 'make-add-region-request))
 (common-lisp:defun make-add-region-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpcsettings region-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'add-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcsettings))
      (common-lisp:list
       (common-lisp:cons "VPCSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-region-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-region-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-region-result 'make-add-region-result))
 (common-lisp:defun make-add-region-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-region-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-region-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-region-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-region-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %add-tags-to-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %add-tags-to-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-request
                    'make-add-tags-to-resource-request))
 (common-lisp:defun make-add-tags-to-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-result
                    'make-add-tags-to-resource-result))
 (common-lisp:defun make-add-tags-to-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   common-lisp:nil))
(common-lisp:deftype added-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-regions ()
   '(trivial-types:proper-list region-name))
 (common-lisp:defun |make-additional-regions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alias-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor %attribute-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor %attribute-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defun make-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authentication-failed-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       authentication-failed-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       authentication-failed-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'authentication-failed-exception
                    'authentication-failed-exception-message
                    'authentication-failed-exception-request-id)))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-schema-extension-request common-lisp:nil
                       ((schema-extension-id :initarg :schema-extension-id
                         :type
                         (common-lisp:or schema-extension-id common-lisp:null)
                         :accessor
                         %cancel-schema-extension-request-schema-extension-id
                         :initform
                         (common-lisp:error
                          ":schema-extension-id is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %cancel-schema-extension-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-schema-extension-request
                    'make-cancel-schema-extension-request))
 (common-lisp:defun make-cancel-schema-extension-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema-extension-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-schema-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-schema-extension-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-schema-extension-result
                    'make-cancel-schema-extension-result))
 (common-lisp:defun make-cancel-schema-extension-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-schema-extension-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-schema-extension-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((client-cert-auth-settings :initarg
                         :client-cert-auth-settings :type
                         (common-lisp:or client-cert-auth-settings
                                         common-lisp:null)
                         :accessor %certificate-client-cert-auth-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %certificate-type :initform common-lisp:nil)
                        (expiry-date-time :initarg :expiry-date-time :type
                         (common-lisp:or certificate-expiry-date-time
                                         common-lisp:null)
                         :accessor %certificate-expiry-date-time :initform
                         common-lisp:nil)
                        (registered-date-time :initarg :registered-date-time
                         :type
                         (common-lisp:or certificate-registered-date-time
                                         common-lisp:null)
                         :accessor %certificate-registered-date-time :initform
                         common-lisp:nil)
                        (common-name :initarg :common-name :type
                         (common-lisp:or certificate-cn common-lisp:null)
                         :accessor %certificate-common-name :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or certificate-state-reason
                                         common-lisp:null)
                         :accessor %certificate-state-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or certificate-state common-lisp:null)
                         :accessor %certificate-state :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %certificate-certificate-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defun make-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-cert-auth-settings type
                     expiry-date-time registered-date-time common-name
                     state-reason state certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-name))
      (common-lisp:list
       (common-lisp:cons "CommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-date-time))
      (common-lisp:list
       (common-lisp:cons "RegisteredDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-date-time))
      (common-lisp:list
       (common-lisp:cons "ExpiryDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-cert-auth-settings))
      (common-lisp:list
       (common-lisp:cons "ClientCertAuthSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition certificate-already-exists-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-already-exists-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       certificate-already-exists-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'certificate-already-exists-exception
                    'certificate-already-exists-exception-message
                    'certificate-already-exists-exception-request-id)))
(common-lisp:deftype certificate-cn () 'common-lisp:string)
(common-lisp:deftype certificate-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-does-not-exist-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-does-not-exist-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       certificate-does-not-exist-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'certificate-does-not-exist-exception
                    'certificate-does-not-exist-exception-message
                    'certificate-does-not-exist-exception-request-id)))
(common-lisp:deftype certificate-expiry-date-time () 'common-lisp:string)
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-in-use-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-in-use-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       certificate-in-use-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'certificate-in-use-exception
                    'certificate-in-use-exception-message
                    'certificate-in-use-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass certificate-info common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %certificate-info-type :initform
                         common-lisp:nil)
                        (expiry-date-time :initarg :expiry-date-time :type
                         (common-lisp:or certificate-expiry-date-time
                                         common-lisp:null)
                         :accessor %certificate-info-expiry-date-time :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or certificate-state common-lisp:null)
                         :accessor %certificate-info-state :initform
                         common-lisp:nil)
                        (common-name :initarg :common-name :type
                         (common-lisp:or certificate-cn common-lisp:null)
                         :accessor %certificate-info-common-name :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %certificate-info-certificate-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-info 'make-certificate-info))
 (common-lisp:defun make-certificate-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type expiry-date-time state common-name
                     certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-name))
      (common-lisp:list
       (common-lisp:cons "CommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-date-time))
      (common-lisp:list
       (common-lisp:cons "ExpiryDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition certificate-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       certificate-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'certificate-limit-exceeded-exception
                    'certificate-limit-exceeded-exception-message
                    'certificate-limit-exceeded-exception-request-id)))
(common-lisp:deftype certificate-registered-date-time () 'common-lisp:string)
(common-lisp:deftype certificate-state () 'common-lisp:string)
(common-lisp:deftype certificate-state-reason () 'common-lisp:string)
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificates-info ()
   '(trivial-types:proper-list certificate-info))
 (common-lisp:defun |make-certificates-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cidr-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidr-ips () '(trivial-types:proper-list cidr-ip))
 (common-lisp:defun |make-cidr-ips|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr-ip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass client-authentication-setting-info common-lisp:nil
                       ((last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor
                         %client-authentication-setting-info-last-updated-date-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or client-authentication-status
                                         common-lisp:null)
                         :accessor %client-authentication-setting-info-status
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or client-authentication-type
                                         common-lisp:null)
                         :accessor %client-authentication-setting-info-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-authentication-setting-info
                    'make-client-authentication-setting-info))
 (common-lisp:defun make-client-authentication-setting-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time status type)
   (common-lisp:apply #'common-lisp:make-instance
                      'client-authentication-setting-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication-setting-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication-setting-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-authentication-setting-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype client-authentication-settings-info ()
   '(trivial-types:proper-list client-authentication-setting-info))
 (common-lisp:defun |make-client-authentication-settings-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            client-authentication-setting-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-authentication-status () 'common-lisp:string)
(common-lisp:deftype client-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass client-cert-auth-settings common-lisp:nil
                       ((ocspurl :initarg :ocspurl :type
                         (common-lisp:or ocspurl common-lisp:null) :accessor
                         %client-cert-auth-settings-ocspurl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-cert-auth-settings
                    'make-client-cert-auth-settings))
 (common-lisp:defun make-client-cert-auth-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ocspurl)
   (common-lisp:apply #'common-lisp:make-instance 'client-cert-auth-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-cert-auth-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-cert-auth-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocspurl))
      (common-lisp:list
       (common-lisp:cons "OCSPUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-cert-auth-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       client-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       client-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-message
                    'client-exception-request-id)))
(common-lisp:deftype cloud-only-directories-limit-reached ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass computer common-lisp:nil
                       ((computer-attributes :initarg :computer-attributes
                         :type (common-lisp:or attributes common-lisp:null)
                         :accessor %computer-computer-attributes :initform
                         common-lisp:nil)
                        (computer-name :initarg :computer-name :type
                         (common-lisp:or computer-name common-lisp:null)
                         :accessor %computer-computer-name :initform
                         common-lisp:nil)
                        (computer-id :initarg :computer-id :type
                         (common-lisp:or sid common-lisp:null) :accessor
                         %computer-computer-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'computer 'make-computer))
 (common-lisp:defun make-computer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key computer-attributes computer-name
                     computer-id)
   (common-lisp:apply #'common-lisp:make-instance 'computer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input computer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input computer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-id))
      (common-lisp:list
       (common-lisp:cons "ComputerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "ComputerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input computer))
   common-lisp:nil))
(common-lisp:deftype computer-name () 'common-lisp:string)
(common-lisp:deftype computer-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditional-forwarder common-lisp:nil
                       ((replication-scope :initarg :replication-scope :type
                         (common-lisp:or replication-scope common-lisp:null)
                         :accessor %conditional-forwarder-replication-scope
                         :initform common-lisp:nil)
                        (dns-ip-addrs :initarg :dns-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor %conditional-forwarder-dns-ip-addrs
                         :initform common-lisp:nil)
                        (remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor %conditional-forwarder-remote-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conditional-forwarder 'make-conditional-forwarder))
 (common-lisp:defun make-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-scope dns-ip-addrs
                     remote-domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-forwarder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-scope))
      (common-lisp:list
       (common-lisp:cons "ReplicationScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-forwarder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conditional-forwarders ()
   '(trivial-types:proper-list conditional-forwarder))
 (common-lisp:defun |make-conditional-forwarders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conditional-forwarder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connect-directory-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %connect-directory-request-tags :initform
                         common-lisp:nil)
                        (connect-settings :initarg :connect-settings :type
                         (common-lisp:or directory-connect-settings
                                         common-lisp:null)
                         :accessor %connect-directory-request-connect-settings
                         :initform
                         (common-lisp:error ":connect-settings is required"))
                        (size :initarg :size :type
                         (common-lisp:or directory-size common-lisp:null)
                         :accessor %connect-directory-request-size :initform
                         (common-lisp:error ":size is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %connect-directory-request-description
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or connect-password common-lisp:null)
                         :accessor %connect-directory-request-password
                         :initform (common-lisp:error ":password is required"))
                        (short-name :initarg :short-name :type
                         (common-lisp:or directory-short-name common-lisp:null)
                         :accessor %connect-directory-request-short-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %connect-directory-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'connect-directory-request
                    'make-connect-directory-request))
 (common-lisp:defun make-connect-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags connect-settings size description
                     password short-name name)
   (common-lisp:apply #'common-lisp:make-instance 'connect-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connect-directory-result common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %connect-directory-result-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connect-directory-result 'make-connect-directory-result))
 (common-lisp:defun make-connect-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'connect-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-directory-result))
   common-lisp:nil))
(common-lisp:deftype connect-password () 'common-lisp:string)
(common-lisp:deftype connected-directories-limit-reached ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-alias-request common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %create-alias-request-alias :initform
                         (common-lisp:error ":alias is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-alias-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defun make-create-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alias-result common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %create-alias-result-alias :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-alias-result-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-alias-result 'make-create-alias-result))
 (common-lisp:defun make-create-alias-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-computer-request common-lisp:nil
                       ((computer-attributes :initarg :computer-attributes
                         :type (common-lisp:or attributes common-lisp:null)
                         :accessor %create-computer-request-computer-attributes
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :type
                         (common-lisp:or organizational-unit-dn
                                         common-lisp:null)
                         :accessor
                         %create-computer-request-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or computer-password common-lisp:null)
                         :accessor %create-computer-request-password :initform
                         (common-lisp:error ":password is required"))
                        (computer-name :initarg :computer-name :type
                         (common-lisp:or computer-name common-lisp:null)
                         :accessor %create-computer-request-computer-name
                         :initform
                         (common-lisp:error ":computer-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-computer-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-computer-request 'make-create-computer-request))
 (common-lisp:defun make-create-computer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key computer-attributes
                     organizational-unit-distinguished-name password
                     computer-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-computer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-attributes))
      (common-lisp:list
       (common-lisp:cons "ComputerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-computer-result common-lisp:nil
                       ((computer :initarg :computer :type
                         (common-lisp:or computer common-lisp:null) :accessor
                         %create-computer-result-computer :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-computer-result 'make-create-computer-result))
 (common-lisp:defun make-create-computer-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key computer)
   (common-lisp:apply #'common-lisp:make-instance 'create-computer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer))
      (common-lisp:list
       (common-lisp:cons "Computer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-computer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-conditional-forwarder-request common-lisp:nil
                       ((dns-ip-addrs :initarg :dns-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor
                         %create-conditional-forwarder-request-dns-ip-addrs
                         :initform
                         (common-lisp:error ":dns-ip-addrs is required"))
                        (remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor
                         %create-conditional-forwarder-request-remote-domain-name
                         :initform
                         (common-lisp:error ":remote-domain-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %create-conditional-forwarder-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-conditional-forwarder-request
                    'make-create-conditional-forwarder-request))
 (common-lisp:defun make-create-conditional-forwarder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ip-addrs remote-domain-name
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-conditional-forwarder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-conditional-forwarder-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-conditional-forwarder-result
                    'make-create-conditional-forwarder-result))
 (common-lisp:defun make-create-conditional-forwarder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-conditional-forwarder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-directory-request-tags :initform
                         common-lisp:nil)
                        (vpc-settings :initarg :vpc-settings :type
                         (common-lisp:or directory-vpc-settings
                                         common-lisp:null)
                         :accessor %create-directory-request-vpc-settings
                         :initform common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or directory-size common-lisp:null)
                         :accessor %create-directory-request-size :initform
                         (common-lisp:error ":size is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-directory-request-description
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or password common-lisp:null) :accessor
                         %create-directory-request-password :initform
                         (common-lisp:error ":password is required"))
                        (short-name :initarg :short-name :type
                         (common-lisp:or directory-short-name common-lisp:null)
                         :accessor %create-directory-request-short-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %create-directory-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-directory-request 'make-create-directory-request))
 (common-lisp:defun make-create-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags vpc-settings size description
                     password short-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-result common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-directory-result-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-directory-result 'make-create-directory-result))
 (common-lisp:defun make-create-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-subscription-request common-lisp:nil
                       ((log-group-name :initarg :log-group-name :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor
                         %create-log-subscription-request-log-group-name
                         :initform
                         (common-lisp:error ":log-group-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %create-log-subscription-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-log-subscription-request
                    'make-create-log-subscription-request))
 (common-lisp:defun make-create-log-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-log-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-subscription-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-log-subscription-result
                    'make-create-log-subscription-result))
 (common-lisp:defun make-create-log-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-log-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-microsoft-adrequest common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-microsoft-adrequest-tags :initform
                         common-lisp:nil)
                        (edition :initarg :edition :type
                         (common-lisp:or directory-edition common-lisp:null)
                         :accessor %create-microsoft-adrequest-edition
                         :initform common-lisp:nil)
                        (vpc-settings :initarg :vpc-settings :type
                         (common-lisp:or directory-vpc-settings
                                         common-lisp:null)
                         :accessor %create-microsoft-adrequest-vpc-settings
                         :initform
                         (common-lisp:error ":vpc-settings is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-microsoft-adrequest-description
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or password common-lisp:null) :accessor
                         %create-microsoft-adrequest-password :initform
                         (common-lisp:error ":password is required"))
                        (short-name :initarg :short-name :type
                         (common-lisp:or directory-short-name common-lisp:null)
                         :accessor %create-microsoft-adrequest-short-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %create-microsoft-adrequest-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-microsoft-adrequest
                    'make-create-microsoft-adrequest))
 (common-lisp:defun make-create-microsoft-adrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags edition vpc-settings description
                     password short-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-microsoft-adrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-microsoft-adresult common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-microsoft-adresult-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-microsoft-adresult
                    'make-create-microsoft-adresult))
 (common-lisp:defun make-create-microsoft-adresult
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-microsoft-adresult
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-microsoft-adresult))
   common-lisp:nil))
(common-lisp:deftype create-snapshot-before-schema-extension ()
  'common-lisp:boolean)
(common-lisp:deftype create-snapshot-before-update () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-snapshot-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or snapshot-name common-lisp:null)
                         :accessor %create-snapshot-request-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-snapshot-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defun make-create-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-result common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %create-snapshot-result-snapshot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-result 'make-create-snapshot-result))
 (common-lisp:defun make-create-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-request common-lisp:nil
                       ((selective-auth :initarg :selective-auth :type
                         (common-lisp:or selective-auth common-lisp:null)
                         :accessor %create-trust-request-selective-auth
                         :initform common-lisp:nil)
                        (conditional-forwarder-ip-addrs :initarg
                         :conditional-forwarder-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor
                         %create-trust-request-conditional-forwarder-ip-addrs
                         :initform common-lisp:nil)
                        (trust-type :initarg :trust-type :type
                         (common-lisp:or trust-type common-lisp:null) :accessor
                         %create-trust-request-trust-type :initform
                         common-lisp:nil)
                        (trust-direction :initarg :trust-direction :type
                         (common-lisp:or trust-direction common-lisp:null)
                         :accessor %create-trust-request-trust-direction
                         :initform
                         (common-lisp:error ":trust-direction is required"))
                        (trust-password :initarg :trust-password :type
                         (common-lisp:or trust-password common-lisp:null)
                         :accessor %create-trust-request-trust-password
                         :initform
                         (common-lisp:error ":trust-password is required"))
                        (remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor %create-trust-request-remote-domain-name
                         :initform
                         (common-lisp:error ":remote-domain-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %create-trust-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-trust-request 'make-create-trust-request))
 (common-lisp:defun make-create-trust-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selective-auth
                     conditional-forwarder-ip-addrs trust-type trust-direction
                     trust-password remote-domain-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-password))
      (common-lisp:list
       (common-lisp:cons "TrustPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-direction))
      (common-lisp:list
       (common-lisp:cons "TrustDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-type))
      (common-lisp:list
       (common-lisp:cons "TrustType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-forwarder-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "ConditionalForwarderIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selective-auth))
      (common-lisp:list
       (common-lisp:cons "SelectiveAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-result common-lisp:nil
                       ((trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %create-trust-result-trust-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-trust-result 'make-create-trust-result))
 (common-lisp:defun make-create-trust-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trust-result))
   common-lisp:nil))
(common-lisp:deftype created-date-time () 'common-lisp:string)
(common-lisp:deftype customer-id () 'common-lisp:string)
(common-lisp:deftype customer-user-name () 'common-lisp:string)
(common-lisp:deftype delete-associated-conditional-forwarder ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-conditional-forwarder-request common-lisp:nil
                       ((remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor
                         %delete-conditional-forwarder-request-remote-domain-name
                         :initform
                         (common-lisp:error ":remote-domain-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %delete-conditional-forwarder-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-conditional-forwarder-request
                    'make-delete-conditional-forwarder-request))
 (common-lisp:defun make-delete-conditional-forwarder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remote-domain-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-conditional-forwarder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conditional-forwarder-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-conditional-forwarder-result
                    'make-delete-conditional-forwarder-result))
 (common-lisp:defun make-delete-conditional-forwarder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-conditional-forwarder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-directory-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %delete-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-directory-request 'make-delete-directory-request))
 (common-lisp:defun make-delete-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-directory-result common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %delete-directory-result-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-result 'make-delete-directory-result))
 (common-lisp:defun make-delete-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-subscription-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %delete-log-subscription-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-log-subscription-request
                    'make-delete-log-subscription-request))
 (common-lisp:defun make-delete-log-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-log-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-subscription-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-log-subscription-result
                    'make-delete-log-subscription-result))
 (common-lisp:defun make-delete-log-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-log-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-request common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %delete-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defun make-delete-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-result common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %delete-snapshot-result-snapshot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-result 'make-delete-snapshot-result))
 (common-lisp:defun make-delete-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-request common-lisp:nil
                       ((delete-associated-conditional-forwarder :initarg
                         :delete-associated-conditional-forwarder :type
                         (common-lisp:or
                          delete-associated-conditional-forwarder
                          common-lisp:null)
                         :accessor
                         %delete-trust-request-delete-associated-conditional-forwarder
                         :initform common-lisp:nil)
                        (trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %delete-trust-request-trust-id :initform
                         (common-lisp:error ":trust-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-trust-request 'make-delete-trust-request))
 (common-lisp:defun make-delete-trust-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-associated-conditional-forwarder
                     trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-associated-conditional-forwarder))
      (common-lisp:list
       (common-lisp:cons "DeleteAssociatedConditionalForwarder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-result common-lisp:nil
                       ((trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %delete-trust-result-trust-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-trust-result 'make-delete-trust-result))
 (common-lisp:defun make-delete-trust-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trust-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor
                         %deregister-certificate-request-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %deregister-certificate-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-certificate-request
                    'make-deregister-certificate-request))
 (common-lisp:defun make-deregister-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-certificate-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-certificate-result
                    'make-deregister-certificate-result))
 (common-lisp:defun make-deregister-certificate-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-event-topic-request common-lisp:nil
                       ((topic-name :initarg :topic-name :type
                         (common-lisp:or topic-name common-lisp:null) :accessor
                         %deregister-event-topic-request-topic-name :initform
                         (common-lisp:error ":topic-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %deregister-event-topic-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-event-topic-request
                    'make-deregister-event-topic-request))
 (common-lisp:defun make-deregister-event-topic-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-event-topic-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-event-topic-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-event-topic-result
                    'make-deregister-event-topic-result))
 (common-lisp:defun make-deregister-event-topic-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-event-topic-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-event-topic-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %describe-certificate-request-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-certificate-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defun make-describe-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-result common-lisp:nil
                       ((certificate :initarg :certificate :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor %describe-certificate-result-certificate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-result
                    'make-describe-certificate-result))
 (common-lisp:defun make-describe-certificate-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate)
   (common-lisp:apply #'common-lisp:make-instance 'describe-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-authentication-settings-request
                       common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-client-authentication-settings-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-client-authentication-settings-request-next-token
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or client-authentication-type
                                         common-lisp:null)
                         :accessor
                         %describe-client-authentication-settings-request-type
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-client-authentication-settings-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-client-authentication-settings-request
                    'make-describe-client-authentication-settings-request))
 (common-lisp:defun make-describe-client-authentication-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token type directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-authentication-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-authentication-settings-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-client-authentication-settings-result-next-token
                         :initform common-lisp:nil)
                        (client-authentication-settings-info :initarg
                         :client-authentication-settings-info :type
                         (common-lisp:or client-authentication-settings-info
                                         common-lisp:null)
                         :accessor
                         %describe-client-authentication-settings-result-client-authentication-settings-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-client-authentication-settings-result
                    'make-describe-client-authentication-settings-result))
 (common-lisp:defun make-describe-client-authentication-settings-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     client-authentication-settings-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-authentication-settings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-authentication-settings-info))
      (common-lisp:list
       (common-lisp:cons "ClientAuthenticationSettingsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-authentication-settings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conditional-forwarders-request common-lisp:nil
                       ((remote-domain-names :initarg :remote-domain-names
                         :type
                         (common-lisp:or remote-domain-names common-lisp:null)
                         :accessor
                         %describe-conditional-forwarders-request-remote-domain-names
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-conditional-forwarders-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-conditional-forwarders-request
                    'make-describe-conditional-forwarders-request))
 (common-lisp:defun make-describe-conditional-forwarders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remote-domain-names directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conditional-forwarders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-names))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conditional-forwarders-result common-lisp:nil
                       ((conditional-forwarders :initarg
                         :conditional-forwarders :type
                         (common-lisp:or conditional-forwarders
                                         common-lisp:null)
                         :accessor
                         %describe-conditional-forwarders-result-conditional-forwarders
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-conditional-forwarders-result
                    'make-describe-conditional-forwarders-result))
 (common-lisp:defun make-describe-conditional-forwarders-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conditional-forwarders)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conditional-forwarders-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-forwarders))
      (common-lisp:list
       (common-lisp:cons "ConditionalForwarders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conditional-forwarders-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-directories-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-directories-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-directories-request-next-token :initform
                         common-lisp:nil)
                        (directory-ids :initarg :directory-ids :type
                         (common-lisp:or directory-ids common-lisp:null)
                         :accessor %describe-directories-request-directory-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-directories-request
                    'make-describe-directories-request))
 (common-lisp:defun make-describe-directories-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token directory-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-directories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-ids))
      (common-lisp:list
       (common-lisp:cons "DirectoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-directories-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-directories-result-next-token :initform
                         common-lisp:nil)
                        (directory-descriptions :initarg
                         :directory-descriptions :type
                         (common-lisp:or directory-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-directories-result-directory-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-directories-result
                    'make-describe-directories-result))
 (common-lisp:defun make-describe-directories-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token directory-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-directories-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-descriptions))
      (common-lisp:list
       (common-lisp:cons "DirectoryDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-controllers-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-domain-controllers-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-domain-controllers-request-next-token
                         :initform common-lisp:nil)
                        (domain-controller-ids :initarg :domain-controller-ids
                         :type
                         (common-lisp:or domain-controller-ids
                                         common-lisp:null)
                         :accessor
                         %describe-domain-controllers-request-domain-controller-ids
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-domain-controllers-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-controllers-request
                    'make-describe-domain-controllers-request))
 (common-lisp:defun make-describe-domain-controllers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token domain-controller-ids
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-controllers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-controller-ids))
      (common-lisp:list
       (common-lisp:cons "DomainControllerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-controllers-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-domain-controllers-result-next-token
                         :initform common-lisp:nil)
                        (domain-controllers :initarg :domain-controllers :type
                         (common-lisp:or domain-controllers common-lisp:null)
                         :accessor
                         %describe-domain-controllers-result-domain-controllers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-controllers-result
                    'make-describe-domain-controllers-result))
 (common-lisp:defun make-describe-domain-controllers-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-controllers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-controllers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-controllers))
      (common-lisp:list
       (common-lisp:cons "DomainControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-controllers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-topics-request common-lisp:nil
                       ((topic-names :initarg :topic-names :type
                         (common-lisp:or topic-names common-lisp:null)
                         :accessor %describe-event-topics-request-topic-names
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-event-topics-request-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-topics-request
                    'make-describe-event-topics-request))
 (common-lisp:defun make-describe-event-topics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-names directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-topics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-names))
      (common-lisp:list
       (common-lisp:cons "TopicNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-topics-result common-lisp:nil
                       ((event-topics :initarg :event-topics :type
                         (common-lisp:or event-topics common-lisp:null)
                         :accessor %describe-event-topics-result-event-topics
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-topics-result
                    'make-describe-event-topics-result))
 (common-lisp:defun make-describe-event-topics-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-topics)
   (common-lisp:apply #'common-lisp:make-instance 'describe-event-topics-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-topics))
      (common-lisp:list
       (common-lisp:cons "EventTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-topics-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ldapssettings-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %describe-ldapssettings-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-ldapssettings-request-next-token :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or ldapstype common-lisp:null) :accessor
                         %describe-ldapssettings-request-type :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-ldapssettings-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-ldapssettings-request
                    'make-describe-ldapssettings-request))
 (common-lisp:defun make-describe-ldapssettings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token type directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ldapssettings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ldapssettings-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-ldapssettings-result-next-token :initform
                         common-lisp:nil)
                        (ldapssettings-info :initarg :ldapssettings-info :type
                         (common-lisp:or ldapssettings-info common-lisp:null)
                         :accessor
                         %describe-ldapssettings-result-ldapssettings-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ldapssettings-result
                    'make-describe-ldapssettings-result))
 (common-lisp:defun make-describe-ldapssettings-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token ldapssettings-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ldapssettings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ldapssettings-info))
      (common-lisp:list
       (common-lisp:cons "LDAPSSettingsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ldapssettings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-regions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-regions-request-next-token :initform
                         common-lisp:nil)
                        (region-name :initarg :region-name :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %describe-regions-request-region-name
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-regions-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-regions-request 'make-describe-regions-request))
 (common-lisp:defun make-describe-regions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token region-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-regions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-regions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-regions-result-next-token :initform
                         common-lisp:nil)
                        (regions-description :initarg :regions-description
                         :type
                         (common-lisp:or regions-description common-lisp:null)
                         :accessor %describe-regions-result-regions-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-regions-result 'make-describe-regions-result))
 (common-lisp:defun make-describe-regions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token regions-description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-regions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-description))
      (common-lisp:list
       (common-lisp:cons "RegionsDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-regions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-settings-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-settings-request-next-token :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or directory-configuration-status
                                         common-lisp:null)
                         :accessor %describe-settings-request-status :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-settings-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-settings-request
                    'make-describe-settings-request))
 (common-lisp:defun make-describe-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token status directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-settings-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-settings-result-next-token :initform
                         common-lisp:nil)
                        (setting-entries :initarg :setting-entries :type
                         (common-lisp:or setting-entries common-lisp:null)
                         :accessor %describe-settings-result-setting-entries
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-settings-result-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-settings-result 'make-describe-settings-result))
 (common-lisp:defun make-describe-settings-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token setting-entries directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-settings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-entries))
      (common-lisp:list
       (common-lisp:cons "SettingEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-settings-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-shared-directories-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-shared-directories-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-shared-directories-request-next-token
                         :initform common-lisp:nil)
                        (shared-directory-ids :initarg :shared-directory-ids
                         :type (common-lisp:or directory-ids common-lisp:null)
                         :accessor
                         %describe-shared-directories-request-shared-directory-ids
                         :initform common-lisp:nil)
                        (owner-directory-id :initarg :owner-directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-shared-directories-request-owner-directory-id
                         :initform
                         (common-lisp:error
                          ":owner-directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-shared-directories-request
                    'make-describe-shared-directories-request))
 (common-lisp:defun make-describe-shared-directories-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token shared-directory-ids
                     owner-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-shared-directories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-directory-id))
      (common-lisp:list
       (common-lisp:cons "OwnerDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-directory-ids))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-shared-directories-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-shared-directories-result-next-token
                         :initform common-lisp:nil)
                        (shared-directories :initarg :shared-directories :type
                         (common-lisp:or shared-directories common-lisp:null)
                         :accessor
                         %describe-shared-directories-result-shared-directories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-shared-directories-result
                    'make-describe-shared-directories-result))
 (common-lisp:defun make-describe-shared-directories-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token shared-directories)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-shared-directories-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directories))
      (common-lisp:list
       (common-lisp:cons "SharedDirectories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-shared-directories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-snapshots-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-snapshots-request-next-token :initform
                         common-lisp:nil)
                        (snapshot-ids :initarg :snapshot-ids :type
                         (common-lisp:or snapshot-ids common-lisp:null)
                         :accessor %describe-snapshots-request-snapshot-ids
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-snapshots-request-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-request
                    'make-describe-snapshots-request))
 (common-lisp:defun make-describe-snapshots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token snapshot-ids
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-ids))
      (common-lisp:list
       (common-lisp:cons "SnapshotIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-snapshots-result-next-token :initform
                         common-lisp:nil)
                        (snapshots :initarg :snapshots :type
                         (common-lisp:or snapshots common-lisp:null) :accessor
                         %describe-snapshots-result-snapshots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-result
                    'make-describe-snapshots-result))
 (common-lisp:defun make-describe-snapshots-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token snapshots)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusts-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-trusts-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-trusts-request-next-token :initform
                         common-lisp:nil)
                        (trust-ids :initarg :trust-ids :type
                         (common-lisp:or trust-ids common-lisp:null) :accessor
                         %describe-trusts-request-trust-ids :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-trusts-request-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-trusts-request 'make-describe-trusts-request))
 (common-lisp:defun make-describe-trusts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token trust-ids directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-trusts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-ids))
      (common-lisp:list
       (common-lisp:cons "TrustIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusts-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-trusts-result-next-token :initform
                         common-lisp:nil)
                        (trusts :initarg :trusts :type
                         (common-lisp:or trusts common-lisp:null) :accessor
                         %describe-trusts-result-trusts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-trusts-result 'make-describe-trusts-result))
 (common-lisp:defun make-describe-trusts-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token trusts)
   (common-lisp:apply #'common-lisp:make-instance 'describe-trusts-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trusts))
      (common-lisp:list
       (common-lisp:cons "Trusts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-directory-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-update-directory-request-next-token
                         :initform common-lisp:nil)
                        (region-name :initarg :region-name :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         %describe-update-directory-request-region-name
                         :initform common-lisp:nil)
                        (update-type :initarg :update-type :type
                         (common-lisp:or update-type common-lisp:null)
                         :accessor
                         %describe-update-directory-request-update-type
                         :initform
                         (common-lisp:error ":update-type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-update-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-update-directory-request
                    'make-describe-update-directory-request))
 (common-lisp:defun make-describe-update-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token region-name update-type
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-update-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "UpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-update-directory-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-update-directory-result-next-token :initform
                         common-lisp:nil)
                        (update-activities :initarg :update-activities :type
                         (common-lisp:or update-activities common-lisp:null)
                         :accessor
                         %describe-update-directory-result-update-activities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-update-directory-result
                    'make-describe-update-directory-result))
 (common-lisp:defun make-describe-update-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token update-activities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-update-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-activities))
      (common-lisp:list
       (common-lisp:cons "UpdateActivities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-update-directory-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype desired-number-of-domain-controllers ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition directory-already-in-region-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-already-in-region-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-already-in-region-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-already-in-region-exception
                    'directory-already-in-region-exception-message
                    'directory-already-in-region-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition directory-already-shared-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-already-shared-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-already-shared-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-already-shared-exception
                    'directory-already-shared-exception-message
                    'directory-already-shared-exception-request-id)))
(common-lisp:deftype directory-configuration-setting-allowed-values ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-data-type ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-last-requested-date-time
                     ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-last-updated-date-time ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-configuration-setting-request-detailed-status
                      ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-directory-configuration-setting-request-detailed-status|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype directory-configuration-setting-request-status-message ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-type ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-setting-value ()
  'common-lisp:string)
(common-lisp:deftype directory-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass directory-connect-settings common-lisp:nil
                       ((customer-user-name :initarg :customer-user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %directory-connect-settings-customer-user-name
                         :initform
                         (common-lisp:error ":customer-user-name is required"))
                        (customer-dns-ips :initarg :customer-dns-ips :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor %directory-connect-settings-customer-dns-ips
                         :initform
                         (common-lisp:error ":customer-dns-ips is required"))
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %directory-connect-settings-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %directory-connect-settings-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))))
 (common-lisp:export
  (common-lisp:list 'directory-connect-settings
                    'make-directory-connect-settings))
 (common-lisp:defun make-directory-connect-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key customer-user-name customer-dns-ips
                     subnet-ids vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'directory-connect-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-dns-ips))
      (common-lisp:list
       (common-lisp:cons "CustomerDnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass directory-connect-settings-description common-lisp:nil
                       ((connect-ips :initarg :connect-ips :type
                         (common-lisp:or ip-addrs common-lisp:null) :accessor
                         %directory-connect-settings-description-connect-ips
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %directory-connect-settings-description-availability-zones
                         :initform common-lisp:nil)
                        (security-group-id :initarg :security-group-id :type
                         (common-lisp:or security-group-id common-lisp:null)
                         :accessor
                         %directory-connect-settings-description-security-group-id
                         :initform common-lisp:nil)
                        (customer-user-name :initarg :customer-user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %directory-connect-settings-description-customer-user-name
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %directory-connect-settings-description-subnet-ids
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %directory-connect-settings-description-vpc-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'directory-connect-settings-description
                    'make-directory-connect-settings-description))
 (common-lisp:defun make-directory-connect-settings-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connect-ips availability-zones
                     security-group-id customer-user-name subnet-ids vpc-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'directory-connect-settings-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-ips))
      (common-lisp:list
       (common-lisp:cons "ConnectIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-connect-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass directory-description common-lisp:nil
                       ((os-version :initarg :os-version :type
                         (common-lisp:or osversion common-lisp:null) :accessor
                         %directory-description-os-version :initform
                         common-lisp:nil)
                        (regions-info :initarg :regions-info :type
                         (common-lisp:or regions-info common-lisp:null)
                         :accessor %directory-description-regions-info
                         :initform common-lisp:nil)
                        (owner-directory-description :initarg
                         :owner-directory-description :type
                         (common-lisp:or owner-directory-description
                                         common-lisp:null)
                         :accessor
                         %directory-description-owner-directory-description
                         :initform common-lisp:nil)
                        (desired-number-of-domain-controllers :initarg
                         :desired-number-of-domain-controllers :type
                         (common-lisp:or desired-number-of-domain-controllers
                                         common-lisp:null)
                         :accessor
                         %directory-description-desired-number-of-domain-controllers
                         :initform common-lisp:nil)
                        (sso-enabled :initarg :sso-enabled :type
                         (common-lisp:or sso-enabled common-lisp:null)
                         :accessor %directory-description-sso-enabled :initform
                         common-lisp:nil)
                        (stage-reason :initarg :stage-reason :type
                         (common-lisp:or stage-reason common-lisp:null)
                         :accessor %directory-description-stage-reason
                         :initform common-lisp:nil)
                        (radius-status :initarg :radius-status :type
                         (common-lisp:or radius-status common-lisp:null)
                         :accessor %directory-description-radius-status
                         :initform common-lisp:nil)
                        (radius-settings :initarg :radius-settings :type
                         (common-lisp:or radius-settings common-lisp:null)
                         :accessor %directory-description-radius-settings
                         :initform common-lisp:nil)
                        (connect-settings :initarg :connect-settings :type
                         (common-lisp:or directory-connect-settings-description
                                         common-lisp:null)
                         :accessor %directory-description-connect-settings
                         :initform common-lisp:nil)
                        (vpc-settings :initarg :vpc-settings :type
                         (common-lisp:or directory-vpc-settings-description
                                         common-lisp:null)
                         :accessor %directory-description-vpc-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or directory-type common-lisp:null)
                         :accessor %directory-description-type :initform
                         common-lisp:nil)
                        (stage-last-updated-date-time :initarg
                         :stage-last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor
                         %directory-description-stage-last-updated-date-time
                         :initform common-lisp:nil)
                        (launch-time :initarg :launch-time :type
                         (common-lisp:or launch-time common-lisp:null)
                         :accessor %directory-description-launch-time :initform
                         common-lisp:nil)
                        (share-notes :initarg :share-notes :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         %directory-description-share-notes :initform
                         common-lisp:nil)
                        (share-method :initarg :share-method :type
                         (common-lisp:or share-method common-lisp:null)
                         :accessor %directory-description-share-method
                         :initform common-lisp:nil)
                        (share-status :initarg :share-status :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor %directory-description-share-status
                         :initform common-lisp:nil)
                        (stage :initarg :stage :type
                         (common-lisp:or directory-stage common-lisp:null)
                         :accessor %directory-description-stage :initform
                         common-lisp:nil)
                        (dns-ip-addrs :initarg :dns-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor %directory-description-dns-ip-addrs
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %directory-description-description :initform
                         common-lisp:nil)
                        (access-url :initarg :access-url :type
                         (common-lisp:or access-url common-lisp:null) :accessor
                         %directory-description-access-url :initform
                         common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %directory-description-alias :initform
                         common-lisp:nil)
                        (edition :initarg :edition :type
                         (common-lisp:or directory-edition common-lisp:null)
                         :accessor %directory-description-edition :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or directory-size common-lisp:null)
                         :accessor %directory-description-size :initform
                         common-lisp:nil)
                        (short-name :initarg :short-name :type
                         (common-lisp:or directory-short-name common-lisp:null)
                         :accessor %directory-description-short-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %directory-description-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %directory-description-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'directory-description 'make-directory-description))
 (common-lisp:defun make-directory-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key os-version regions-info
                     owner-directory-description
                     desired-number-of-domain-controllers sso-enabled
                     stage-reason radius-status radius-settings
                     connect-settings vpc-settings type
                     stage-last-updated-date-time launch-time share-notes
                     share-method share-status stage dns-ip-addrs description
                     access-url alias edition size short-name name
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'directory-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-name))
      (common-lisp:list
       (common-lisp:cons "ShortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-url))
      (common-lisp:list
       (common-lisp:cons "AccessUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-method))
      (common-lisp:list
       (common-lisp:cons "ShareMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-notes))
      (common-lisp:list
       (common-lisp:cons "ShareNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stage-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StageLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-status))
      (common-lisp:list
       (common-lisp:cons "RadiusStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-reason))
      (common-lisp:list
       (common-lisp:cons "StageReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-enabled))
      (common-lisp:list
       (common-lisp:cons "SsoEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-number-of-domain-controllers))
      (common-lisp:list
       (common-lisp:cons "DesiredNumberOfDomainControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'owner-directory-description))
      (common-lisp:list
       (common-lisp:cons "OwnerDirectoryDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions-info))
      (common-lisp:list
       (common-lisp:cons "RegionsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-version))
      (common-lisp:list
       (common-lisp:cons "OsVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype directory-descriptions ()
   '(trivial-types:proper-list directory-description))
 (common-lisp:defun |make-directory-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition directory-does-not-exist-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-does-not-exist-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-does-not-exist-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-does-not-exist-exception
                    'directory-does-not-exist-exception-message
                    'directory-does-not-exist-exception-request-id)))
(common-lisp:deftype directory-edition () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-ids ()
   '(trivial-types:proper-list directory-id))
 (common-lisp:defun |make-directory-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition directory-in-desired-state-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-in-desired-state-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-in-desired-state-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-in-desired-state-exception
                    'directory-in-desired-state-exception-message
                    'directory-in-desired-state-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition directory-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-limit-exceeded-exception
                    'directory-limit-exceeded-exception-message
                    'directory-limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass directory-limits common-lisp:nil
                       ((connected-directories-limit-reached :initarg
                         :connected-directories-limit-reached :type
                         (common-lisp:or connected-directories-limit-reached
                                         common-lisp:null)
                         :accessor
                         %directory-limits-connected-directories-limit-reached
                         :initform common-lisp:nil)
                        (connected-directories-current-count :initarg
                         :connected-directories-current-count :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-connected-directories-current-count
                         :initform common-lisp:nil)
                        (connected-directories-limit :initarg
                         :connected-directories-limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-connected-directories-limit
                         :initform common-lisp:nil)
                        (cloud-only-microsoft-adlimit-reached :initarg
                         :cloud-only-microsoft-adlimit-reached :type
                         (common-lisp:or cloud-only-directories-limit-reached
                                         common-lisp:null)
                         :accessor
                         %directory-limits-cloud-only-microsoft-adlimit-reached
                         :initform common-lisp:nil)
                        (cloud-only-microsoft-adcurrent-count :initarg
                         :cloud-only-microsoft-adcurrent-count :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-cloud-only-microsoft-adcurrent-count
                         :initform common-lisp:nil)
                        (cloud-only-microsoft-adlimit :initarg
                         :cloud-only-microsoft-adlimit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-cloud-only-microsoft-adlimit
                         :initform common-lisp:nil)
                        (cloud-only-directories-limit-reached :initarg
                         :cloud-only-directories-limit-reached :type
                         (common-lisp:or cloud-only-directories-limit-reached
                                         common-lisp:null)
                         :accessor
                         %directory-limits-cloud-only-directories-limit-reached
                         :initform common-lisp:nil)
                        (cloud-only-directories-current-count :initarg
                         :cloud-only-directories-current-count :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-cloud-only-directories-current-count
                         :initform common-lisp:nil)
                        (cloud-only-directories-limit :initarg
                         :cloud-only-directories-limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %directory-limits-cloud-only-directories-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'directory-limits 'make-directory-limits))
 (common-lisp:defun make-directory-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connected-directories-limit-reached
                     connected-directories-current-count
                     connected-directories-limit
                     cloud-only-microsoft-adlimit-reached
                     cloud-only-microsoft-adcurrent-count
                     cloud-only-microsoft-adlimit
                     cloud-only-directories-limit-reached
                     cloud-only-directories-current-count
                     cloud-only-directories-limit)
   (common-lisp:apply #'common-lisp:make-instance 'directory-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input directory-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input directory-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-limit))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-current-count))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-directories-limit-reached))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyDirectoriesLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adlimit))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adcurrent-count))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-only-microsoft-adlimit-reached))
      (common-lisp:list
       (common-lisp:cons "CloudOnlyMicrosoftADLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-limit))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-current-count))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-directories-limit-reached))
      (common-lisp:list
       (common-lisp:cons "ConnectedDirectoriesLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input directory-limits))
   common-lisp:nil))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-not-shared-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-not-shared-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-not-shared-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-not-shared-exception
                    'directory-not-shared-exception-message
                    'directory-not-shared-exception-request-id)))
(common-lisp:deftype directory-short-name () 'common-lisp:string)
(common-lisp:deftype directory-size () 'common-lisp:string)
(common-lisp:deftype directory-stage () 'common-lisp:string)
(common-lisp:deftype directory-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-unavailable-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-unavailable-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       directory-unavailable-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'directory-unavailable-exception
                    'directory-unavailable-exception-message
                    'directory-unavailable-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass directory-vpc-settings common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %directory-vpc-settings-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %directory-vpc-settings-vpc-id :initform
                         (common-lisp:error ":vpc-id is required"))))
 (common-lisp:export
  (common-lisp:list 'directory-vpc-settings 'make-directory-vpc-settings))
 (common-lisp:defun make-directory-vpc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'directory-vpc-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass directory-vpc-settings-description common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %directory-vpc-settings-description-availability-zones
                         :initform common-lisp:nil)
                        (security-group-id :initarg :security-group-id :type
                         (common-lisp:or security-group-id common-lisp:null)
                         :accessor
                         %directory-vpc-settings-description-security-group-id
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %directory-vpc-settings-description-subnet-ids
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %directory-vpc-settings-description-vpc-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'directory-vpc-settings-description
                    'make-directory-vpc-settings-description))
 (common-lisp:defun make-directory-vpc-settings-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones security-group-id
                     subnet-ids vpc-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'directory-vpc-settings-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-id))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-vpc-settings-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-client-authentication-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or client-authentication-type
                                         common-lisp:null)
                         :accessor %disable-client-authentication-request-type
                         :initform (common-lisp:error ":type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %disable-client-authentication-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-client-authentication-request
                    'make-disable-client-authentication-request))
 (common-lisp:defun make-disable-client-authentication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-client-authentication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-client-authentication-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-client-authentication-result
                    'make-disable-client-authentication-result))
 (common-lisp:defun make-disable-client-authentication-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-client-authentication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-client-authentication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-ldapsrequest common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or ldapstype common-lisp:null) :accessor
                         %disable-ldapsrequest-type :initform
                         (common-lisp:error ":type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %disable-ldapsrequest-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-ldapsrequest 'make-disable-ldapsrequest))
 (common-lisp:defun make-disable-ldapsrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'disable-ldapsrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-ldapsrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-ldapsrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-ldapsrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-ldapsresult common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-ldapsresult 'make-disable-ldapsresult))
 (common-lisp:defun make-disable-ldapsresult
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-ldapsresult
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-ldapsresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-ldapsresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-ldapsresult))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-radius-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %disable-radius-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-radius-request 'make-disable-radius-request))
 (common-lisp:defun make-disable-radius-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'disable-radius-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-radius-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-radius-result 'make-disable-radius-result))
 (common-lisp:defun make-disable-radius-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-radius-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-radius-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-sso-request common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or connect-password common-lisp:null)
                         :accessor %disable-sso-request-password :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %disable-sso-request-user-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %disable-sso-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-sso-request 'make-disable-sso-request))
 (common-lisp:defun make-disable-sso-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password user-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'disable-sso-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-sso-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-sso-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-sso-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-sso-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-sso-result 'make-disable-sso-result))
 (common-lisp:defun make-disable-sso-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-sso-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-sso-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-ip-addrs () '(trivial-types:proper-list ip-addr))
 (common-lisp:defun |make-dns-ip-addrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-addr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-controller common-lisp:nil
                       ((status-last-updated-date-time :initarg
                         :status-last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor
                         %domain-controller-status-last-updated-date-time
                         :initform common-lisp:nil)
                        (launch-time :initarg :launch-time :type
                         (common-lisp:or launch-time common-lisp:null)
                         :accessor %domain-controller-launch-time :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or domain-controller-status-reason
                                         common-lisp:null)
                         :accessor %domain-controller-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or domain-controller-status
                                         common-lisp:null)
                         :accessor %domain-controller-status :initform
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor %domain-controller-availability-zone
                         :initform common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %domain-controller-subnet-id :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %domain-controller-vpc-id :initform common-lisp:nil)
                        (dns-ip-addr :initarg :dns-ip-addr :type
                         (common-lisp:or ip-addr common-lisp:null) :accessor
                         %domain-controller-dns-ip-addr :initform
                         common-lisp:nil)
                        (domain-controller-id :initarg :domain-controller-id
                         :type
                         (common-lisp:or domain-controller-id common-lisp:null)
                         :accessor %domain-controller-domain-controller-id
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %domain-controller-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-controller 'make-domain-controller))
 (common-lisp:defun make-domain-controller
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-last-updated-date-time launch-time
                     status-reason status availability-zone subnet-id vpc-id
                     dns-ip-addr domain-controller-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'domain-controller
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-controller))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-controller))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-controller-id))
      (common-lisp:list
       (common-lisp:cons "DomainControllerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addr))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StatusLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-controller))
   common-lisp:nil))
(common-lisp:deftype domain-controller-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-controller-ids ()
   '(trivial-types:proper-list domain-controller-id))
 (common-lisp:defun |make-domain-controller-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-controller-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition domain-controller-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       domain-controller-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       domain-controller-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'domain-controller-limit-exceeded-exception
                    'domain-controller-limit-exceeded-exception-message
                    'domain-controller-limit-exceeded-exception-request-id)))
(common-lisp:deftype domain-controller-status () 'common-lisp:string)
(common-lisp:deftype domain-controller-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-controllers ()
   '(trivial-types:proper-list domain-controller))
 (common-lisp:defun |make-domain-controllers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-controller))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enable-client-authentication-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or client-authentication-type
                                         common-lisp:null)
                         :accessor %enable-client-authentication-request-type
                         :initform (common-lisp:error ":type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %enable-client-authentication-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-client-authentication-request
                    'make-enable-client-authentication-request))
 (common-lisp:defun make-enable-client-authentication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-client-authentication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-client-authentication-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-client-authentication-result
                    'make-enable-client-authentication-result))
 (common-lisp:defun make-enable-client-authentication-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-client-authentication-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-client-authentication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-ldapsrequest common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or ldapstype common-lisp:null) :accessor
                         %enable-ldapsrequest-type :initform
                         (common-lisp:error ":type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %enable-ldapsrequest-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-ldapsrequest 'make-enable-ldapsrequest))
 (common-lisp:defun make-enable-ldapsrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'enable-ldapsrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-ldapsrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-ldapsrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-ldapsrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-ldapsresult common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-ldapsresult 'make-enable-ldapsresult))
 (common-lisp:defun make-enable-ldapsresult
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-ldapsresult
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-ldapsresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-ldapsresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-ldapsresult))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-radius-request common-lisp:nil
                       ((radius-settings :initarg :radius-settings :type
                         (common-lisp:or radius-settings common-lisp:null)
                         :accessor %enable-radius-request-radius-settings
                         :initform
                         (common-lisp:error ":radius-settings is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %enable-radius-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-radius-request 'make-enable-radius-request))
 (common-lisp:defun make-enable-radius-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key radius-settings directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'enable-radius-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-radius-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-radius-result 'make-enable-radius-result))
 (common-lisp:defun make-enable-radius-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-radius-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-radius-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-sso-request common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or connect-password common-lisp:null)
                         :accessor %enable-sso-request-password :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %enable-sso-request-user-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %enable-sso-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-sso-request 'make-enable-sso-request))
 (common-lisp:defun make-enable-sso-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password user-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'enable-sso-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-sso-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-sso-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-sso-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-sso-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-sso-result 'make-enable-sso-result))
 (common-lisp:defun make-enable-sso-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-sso-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-sso-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-sso-result))
   common-lisp:nil))
(common-lisp:deftype end-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition entity-already-exists-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-exists-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       entity-already-exists-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'entity-already-exists-exception-message
                    'entity-already-exists-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition entity-does-not-exist-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-does-not-exist-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       entity-does-not-exist-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'entity-does-not-exist-exception
                    'entity-does-not-exist-exception-message
                    'entity-does-not-exist-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass event-topic common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or topic-status common-lisp:null)
                         :accessor %event-topic-status :initform
                         common-lisp:nil)
                        (created-date-time :initarg :created-date-time :type
                         (common-lisp:or created-date-time common-lisp:null)
                         :accessor %event-topic-created-date-time :initform
                         common-lisp:nil)
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or topic-arn common-lisp:null) :accessor
                         %event-topic-topic-arn :initform common-lisp:nil)
                        (topic-name :initarg :topic-name :type
                         (common-lisp:or topic-name common-lisp:null) :accessor
                         %event-topic-topic-name :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %event-topic-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-topic 'make-event-topic))
 (common-lisp:defun make-event-topic
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status created-date-time topic-arn
                     topic-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'event-topic
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-topic))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-topic))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date-time))
      (common-lisp:list
       (common-lisp:cons "CreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-topic))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-topics () '(trivial-types:proper-list event-topic))
 (common-lisp:defun |make-event-topics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-topic))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-directory-limits-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-directory-limits-request
                    'make-get-directory-limits-request))
 (common-lisp:defun make-get-directory-limits-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-directory-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-directory-limits-result common-lisp:nil
                       ((directory-limits :initarg :directory-limits :type
                         (common-lisp:or directory-limits common-lisp:null)
                         :accessor
                         %get-directory-limits-result-directory-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-directory-limits-result
                    'make-get-directory-limits-result))
 (common-lisp:defun make-get-directory-limits-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-limits)
   (common-lisp:apply #'common-lisp:make-instance 'get-directory-limits-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-limits))
      (common-lisp:list
       (common-lisp:cons "DirectoryLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-snapshot-limits-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %get-snapshot-limits-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-limits-request
                    'make-get-snapshot-limits-request))
 (common-lisp:defun make-get-snapshot-limits-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-snapshot-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-snapshot-limits-result common-lisp:nil
                       ((snapshot-limits :initarg :snapshot-limits :type
                         (common-lisp:or snapshot-limits common-lisp:null)
                         :accessor %get-snapshot-limits-result-snapshot-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-limits-result
                    'make-get-snapshot-limits-result))
 (common-lisp:defun make-get-snapshot-limits-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-limits)
   (common-lisp:apply #'common-lisp:make-instance 'get-snapshot-limits-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-limits))
      (common-lisp:list
       (common-lisp:cons "SnapshotLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-limits-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition incompatible-settings-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incompatible-settings-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       incompatible-settings-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'incompatible-settings-exception
                    'incompatible-settings-exception-message
                    'incompatible-settings-exception-request-id)))
(common-lisp:deftype initiated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition insufficient-permissions-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       insufficient-permissions-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       insufficient-permissions-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'insufficient-permissions-exception
                    'insufficient-permissions-exception-message
                    'insufficient-permissions-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-certificate-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-certificate-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-certificate-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-exception
                    'invalid-certificate-exception-message
                    'invalid-certificate-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-client-auth-status-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-client-auth-status-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-client-auth-status-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-client-auth-status-exception
                    'invalid-client-auth-status-exception-message
                    'invalid-client-auth-status-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ldapsstatus-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ldapsstatus-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-ldapsstatus-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-ldapsstatus-exception
                    'invalid-ldapsstatus-exception-message
                    'invalid-ldapsstatus-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-next-token-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message
                    'invalid-next-token-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-parameter-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-password-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-password-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-password-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-password-exception
                    'invalid-password-exception-message
                    'invalid-password-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-target-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       invalid-target-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-target-exception 'invalid-target-exception-message
                    'invalid-target-exception-request-id)))
(common-lisp:deftype ip-addr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-addrs () '(trivial-types:proper-list ip-addr))
 (common-lisp:defun |make-ip-addrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-addr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ip-route common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %ip-route-description :initform
                         common-lisp:nil)
                        (cidr-ip :initarg :cidr-ip :type
                         (common-lisp:or cidr-ip common-lisp:null) :accessor
                         %ip-route-cidr-ip :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-route 'make-ip-route))
 (common-lisp:defun make-ip-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description cidr-ip)
   (common-lisp:apply #'common-lisp:make-instance 'ip-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-route-info common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %ip-route-info-description :initform
                         common-lisp:nil)
                        (ip-route-status-reason :initarg
                         :ip-route-status-reason :type
                         (common-lisp:or ip-route-status-reason
                                         common-lisp:null)
                         :accessor %ip-route-info-ip-route-status-reason
                         :initform common-lisp:nil)
                        (added-date-time :initarg :added-date-time :type
                         (common-lisp:or added-date-time common-lisp:null)
                         :accessor %ip-route-info-added-date-time :initform
                         common-lisp:nil)
                        (ip-route-status-msg :initarg :ip-route-status-msg
                         :type
                         (common-lisp:or ip-route-status-msg common-lisp:null)
                         :accessor %ip-route-info-ip-route-status-msg :initform
                         common-lisp:nil)
                        (cidr-ip :initarg :cidr-ip :type
                         (common-lisp:or cidr-ip common-lisp:null) :accessor
                         %ip-route-info-cidr-ip :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %ip-route-info-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-route-info 'make-ip-route-info))
 (common-lisp:defun make-ip-route-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description ip-route-status-reason
                     added-date-time ip-route-status-msg cidr-ip directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'ip-route-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-route-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-route-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-route-status-msg))
      (common-lisp:list
       (common-lisp:cons "IpRouteStatusMsg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'added-date-time))
      (common-lisp:list
       (common-lisp:cons "AddedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-route-status-reason))
      (common-lisp:list
       (common-lisp:cons "IpRouteStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-route-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition ip-route-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ip-route-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       ip-route-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'ip-route-limit-exceeded-exception
                    'ip-route-limit-exceeded-exception-message
                    'ip-route-limit-exceeded-exception-request-id)))
(common-lisp:deftype ip-route-status-msg () 'common-lisp:string)
(common-lisp:deftype ip-route-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-routes () '(trivial-types:proper-list ip-route))
 (common-lisp:defun |make-ip-routes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-route))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ip-routes-info ()
   '(trivial-types:proper-list ip-route-info))
 (common-lisp:defun |make-ip-routes-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-route-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ldapssetting-info common-lisp:nil
                       ((last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor %ldapssetting-info-last-updated-date-time
                         :initform common-lisp:nil)
                        (ldapsstatus-reason :initarg :ldapsstatus-reason :type
                         (common-lisp:or ldapsstatus-reason common-lisp:null)
                         :accessor %ldapssetting-info-ldapsstatus-reason
                         :initform common-lisp:nil)
                        (ldapsstatus :initarg :ldapsstatus :type
                         (common-lisp:or ldapsstatus common-lisp:null)
                         :accessor %ldapssetting-info-ldapsstatus :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ldapssetting-info 'make-ldapssetting-info))
 (common-lisp:defun make-ldapssetting-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time ldapsstatus-reason
                     ldapsstatus)
   (common-lisp:apply #'common-lisp:make-instance 'ldapssetting-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ldapssetting-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ldapssetting-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ldapsstatus))
      (common-lisp:list
       (common-lisp:cons "LDAPSStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ldapsstatus-reason))
      (common-lisp:list
       (common-lisp:cons "LDAPSStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ldapssetting-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ldapssettings-info ()
   '(trivial-types:proper-list ldapssetting-info))
 (common-lisp:defun |make-ldapssettings-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ldapssetting-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ldapsstatus () 'common-lisp:string)
(common-lisp:deftype ldapsstatus-reason () 'common-lisp:string)
(common-lisp:deftype ldapstype () 'common-lisp:string)
(common-lisp:deftype last-updated-date-time () 'common-lisp:string)
(common-lisp:deftype launch-time () 'common-lisp:string)
(common-lisp:deftype ldif-content () 'common-lisp:string)
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-certificates-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or page-limit common-lisp:null) :accessor
                         %list-certificates-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-certificates-request-next-token :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %list-certificates-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defun make-list-certificates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-result common-lisp:nil
                       ((certificates-info :initarg :certificates-info :type
                         (common-lisp:or certificates-info common-lisp:null)
                         :accessor %list-certificates-result-certificates-info
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-certificates-result-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-result 'make-list-certificates-result))
 (common-lisp:defun make-list-certificates-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificates-info next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates-info))
      (common-lisp:list
       (common-lisp:cons "CertificatesInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ip-routes-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %list-ip-routes-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-ip-routes-request-next-token :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %list-ip-routes-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-ip-routes-request 'make-list-ip-routes-request))
 (common-lisp:defun make-list-ip-routes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-ip-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ip-routes-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-ip-routes-result-next-token :initform
                         common-lisp:nil)
                        (ip-routes-info :initarg :ip-routes-info :type
                         (common-lisp:or ip-routes-info common-lisp:null)
                         :accessor %list-ip-routes-result-ip-routes-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ip-routes-result 'make-list-ip-routes-result))
 (common-lisp:defun make-list-ip-routes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token ip-routes-info)
   (common-lisp:apply #'common-lisp:make-instance 'list-ip-routes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-routes-info))
      (common-lisp:list
       (common-lisp:cons "IpRoutesInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-subscriptions-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %list-log-subscriptions-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-log-subscriptions-request-next-token :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %list-log-subscriptions-request-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-subscriptions-request
                    'make-list-log-subscriptions-request))
 (common-lisp:defun make-list-log-subscriptions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-subscriptions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-log-subscriptions-result-next-token :initform
                         common-lisp:nil)
                        (log-subscriptions :initarg :log-subscriptions :type
                         (common-lisp:or log-subscriptions common-lisp:null)
                         :accessor
                         %list-log-subscriptions-result-log-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-subscriptions-result
                    'make-list-log-subscriptions-result))
 (common-lisp:defun make-list-log-subscriptions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token log-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-subscriptions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-subscriptions))
      (common-lisp:list
       (common-lisp:cons "LogSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-subscriptions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schema-extensions-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %list-schema-extensions-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-schema-extensions-request-next-token :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %list-schema-extensions-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-schema-extensions-request
                    'make-list-schema-extensions-request))
 (common-lisp:defun make-list-schema-extensions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-schema-extensions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schema-extensions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-schema-extensions-result-next-token :initform
                         common-lisp:nil)
                        (schema-extensions-info :initarg
                         :schema-extensions-info :type
                         (common-lisp:or schema-extensions-info
                                         common-lisp:null)
                         :accessor
                         %list-schema-extensions-result-schema-extensions-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-schema-extensions-result
                    'make-list-schema-extensions-result))
 (common-lisp:defun make-list-schema-extensions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token schema-extensions-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-schema-extensions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extensions-info))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-extensions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %list-tags-for-resource-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-result-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass log-subscription common-lisp:nil
                       ((subscription-created-date-time :initarg
                         :subscription-created-date-time :type
                         (common-lisp:or subscription-created-date-time
                                         common-lisp:null)
                         :accessor
                         %log-subscription-subscription-created-date-time
                         :initform common-lisp:nil)
                        (log-group-name :initarg :log-group-name :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor %log-subscription-log-group-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %log-subscription-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'log-subscription 'make-log-subscription))
 (common-lisp:defun make-log-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-created-date-time
                     log-group-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'log-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-created-date-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-subscriptions ()
   '(trivial-types:proper-list log-subscription))
 (common-lisp:defun |make-log-subscriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype manual-snapshots-limit-reached () 'common-lisp:boolean)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-available-certificate-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-available-certificate-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       no-available-certificate-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'no-available-certificate-exception
                    'no-available-certificate-exception-message
                    'no-available-certificate-exception-request-id)))
(common-lisp:deftype notes () 'common-lisp:string)
(common-lisp:deftype ocspurl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass osupdate-settings common-lisp:nil
                       ((osversion :initarg :osversion :type
                         (common-lisp:or osversion common-lisp:null) :accessor
                         %osupdate-settings-osversion :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'osupdate-settings 'make-osupdate-settings))
 (common-lisp:defun make-osupdate-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key osversion)
   (common-lisp:apply #'common-lisp:make-instance 'osupdate-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input osupdate-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input osupdate-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'osversion))
      (common-lisp:list
       (common-lisp:cons "OSVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input osupdate-settings))
   common-lisp:nil))
(common-lisp:deftype osversion () 'common-lisp:string)
(common-lisp:deftype organizational-unit-dn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organizations-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organizations-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       organizations-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'organizations-exception 'organizations-exception-message
                    'organizations-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass owner-directory-description common-lisp:nil
                       ((radius-status :initarg :radius-status :type
                         (common-lisp:or radius-status common-lisp:null)
                         :accessor %owner-directory-description-radius-status
                         :initform common-lisp:nil)
                        (radius-settings :initarg :radius-settings :type
                         (common-lisp:or radius-settings common-lisp:null)
                         :accessor %owner-directory-description-radius-settings
                         :initform common-lisp:nil)
                        (vpc-settings :initarg :vpc-settings :type
                         (common-lisp:or directory-vpc-settings-description
                                         common-lisp:null)
                         :accessor %owner-directory-description-vpc-settings
                         :initform common-lisp:nil)
                        (dns-ip-addrs :initarg :dns-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor %owner-directory-description-dns-ip-addrs
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor %owner-directory-description-account-id
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %owner-directory-description-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'owner-directory-description
                    'make-owner-directory-description))
 (common-lisp:defun make-owner-directory-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key radius-status radius-settings
                     vpc-settings dns-ip-addrs account-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'owner-directory-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          owner-directory-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          owner-directory-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-status))
      (common-lisp:list
       (common-lisp:cons "RadiusStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          owner-directory-description))
   common-lisp:nil))
(common-lisp:deftype page-limit () 'common-lisp:integer)
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype radius-authentication-protocol () 'common-lisp:string)
(common-lisp:deftype radius-display-label () 'common-lisp:string)
(common-lisp:deftype radius-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass radius-settings common-lisp:nil
                       ((use-same-username :initarg :use-same-username :type
                         (common-lisp:or use-same-username common-lisp:null)
                         :accessor %radius-settings-use-same-username :initform
                         common-lisp:nil)
                        (display-label :initarg :display-label :type
                         (common-lisp:or radius-display-label common-lisp:null)
                         :accessor %radius-settings-display-label :initform
                         common-lisp:nil)
                        (authentication-protocol :initarg
                         :authentication-protocol :type
                         (common-lisp:or radius-authentication-protocol
                                         common-lisp:null)
                         :accessor %radius-settings-authentication-protocol
                         :initform common-lisp:nil)
                        (shared-secret :initarg :shared-secret :type
                         (common-lisp:or radius-shared-secret common-lisp:null)
                         :accessor %radius-settings-shared-secret :initform
                         common-lisp:nil)
                        (radius-retries :initarg :radius-retries :type
                         (common-lisp:or radius-retries common-lisp:null)
                         :accessor %radius-settings-radius-retries :initform
                         common-lisp:nil)
                        (radius-timeout :initarg :radius-timeout :type
                         (common-lisp:or radius-timeout common-lisp:null)
                         :accessor %radius-settings-radius-timeout :initform
                         common-lisp:nil)
                        (radius-port :initarg :radius-port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %radius-settings-radius-port :initform
                         common-lisp:nil)
                        (radius-servers :initarg :radius-servers :type
                         (common-lisp:or servers common-lisp:null) :accessor
                         %radius-settings-radius-servers :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'radius-settings 'make-radius-settings))
 (common-lisp:defun make-radius-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-same-username display-label
                     authentication-protocol shared-secret radius-retries
                     radius-timeout radius-port radius-servers)
   (common-lisp:apply #'common-lisp:make-instance 'radius-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input radius-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input radius-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-servers))
      (common-lisp:list
       (common-lisp:cons "RadiusServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-port))
      (common-lisp:list
       (common-lisp:cons "RadiusPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-timeout))
      (common-lisp:list
       (common-lisp:cons "RadiusTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-retries))
      (common-lisp:list
       (common-lisp:cons "RadiusRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-secret))
      (common-lisp:list
       (common-lisp:cons "SharedSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-protocol))
      (common-lisp:list
       (common-lisp:cons "AuthenticationProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-label))
      (common-lisp:list
       (common-lisp:cons "DisplayLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-same-username))
      (common-lisp:list
       (common-lisp:cons "UseSameUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input radius-settings))
   common-lisp:nil))
(common-lisp:deftype radius-shared-secret () 'common-lisp:string)
(common-lisp:deftype radius-status () 'common-lisp:string)
(common-lisp:deftype radius-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass region-description common-lisp:nil
                       ((last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor %region-description-last-updated-date-time
                         :initform common-lisp:nil)
                        (status-last-updated-date-time :initarg
                         :status-last-updated-date-time :type
                         (common-lisp:or state-last-updated-date-time
                                         common-lisp:null)
                         :accessor
                         %region-description-status-last-updated-date-time
                         :initform common-lisp:nil)
                        (launch-time :initarg :launch-time :type
                         (common-lisp:or launch-time common-lisp:null)
                         :accessor %region-description-launch-time :initform
                         common-lisp:nil)
                        (desired-number-of-domain-controllers :initarg
                         :desired-number-of-domain-controllers :type
                         (common-lisp:or desired-number-of-domain-controllers
                                         common-lisp:null)
                         :accessor
                         %region-description-desired-number-of-domain-controllers
                         :initform common-lisp:nil)
                        (vpc-settings :initarg :vpc-settings :type
                         (common-lisp:or directory-vpc-settings
                                         common-lisp:null)
                         :accessor %region-description-vpc-settings :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or directory-stage common-lisp:null)
                         :accessor %region-description-status :initform
                         common-lisp:nil)
                        (region-type :initarg :region-type :type
                         (common-lisp:or region-type common-lisp:null)
                         :accessor %region-description-region-type :initform
                         common-lisp:nil)
                        (region-name :initarg :region-name :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %region-description-region-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %region-description-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'region-description 'make-region-description))
 (common-lisp:defun make-region-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time
                     status-last-updated-date-time launch-time
                     desired-number-of-domain-controllers vpc-settings status
                     region-type region-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'region-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-type))
      (common-lisp:list
       (common-lisp:cons "RegionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-settings))
      (common-lisp:list
       (common-lisp:cons "VpcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-number-of-domain-controllers))
      (common-lisp:list
       (common-lisp:cons "DesiredNumberOfDomainControllers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-time))
      (common-lisp:list
       (common-lisp:cons "LaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StatusLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition region-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       region-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       region-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'region-limit-exceeded-exception
                    'region-limit-exceeded-exception-message
                    'region-limit-exceeded-exception-request-id)))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:deftype region-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regions-description ()
   '(trivial-types:proper-list region-description))
 (common-lisp:defun |make-regions-description|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass regions-info common-lisp:nil
                       ((additional-regions :initarg :additional-regions :type
                         (common-lisp:or additional-regions common-lisp:null)
                         :accessor %regions-info-additional-regions :initform
                         common-lisp:nil)
                        (primary-region :initarg :primary-region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %regions-info-primary-region :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'regions-info 'make-regions-info))
 (common-lisp:defun make-regions-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-regions primary-region)
   (common-lisp:apply #'common-lisp:make-instance 'regions-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regions-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regions-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-regions))
      (common-lisp:list
       (common-lisp:cons "AdditionalRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regions-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-request common-lisp:nil
                       ((client-cert-auth-settings :initarg
                         :client-cert-auth-settings :type
                         (common-lisp:or client-cert-auth-settings
                                         common-lisp:null)
                         :accessor
                         %register-certificate-request-client-cert-auth-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %register-certificate-request-type :initform
                         common-lisp:nil)
                        (certificate-data :initarg :certificate-data :type
                         (common-lisp:or certificate-data common-lisp:null)
                         :accessor
                         %register-certificate-request-certificate-data
                         :initform
                         (common-lisp:error ":certificate-data is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %register-certificate-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-certificate-request
                    'make-register-certificate-request))
 (common-lisp:defun make-register-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-cert-auth-settings type
                     certificate-data directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-data))
      (common-lisp:list
       (common-lisp:cons "CertificateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-cert-auth-settings))
      (common-lisp:list
       (common-lisp:cons "ClientCertAuthSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-certificate-result common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %register-certificate-result-certificate-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-result
                    'make-register-certificate-result))
 (common-lisp:defun make-register-certificate-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-certificate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-event-topic-request common-lisp:nil
                       ((topic-name :initarg :topic-name :type
                         (common-lisp:or topic-name common-lisp:null) :accessor
                         %register-event-topic-request-topic-name :initform
                         (common-lisp:error ":topic-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %register-event-topic-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-event-topic-request
                    'make-register-event-topic-request))
 (common-lisp:defun make-register-event-topic-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-event-topic-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-event-topic-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'register-event-topic-result
                    'make-register-event-topic-result))
 (common-lisp:defun make-register-event-topic-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'register-event-topic-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-event-topic-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-shared-directory-request common-lisp:nil
                       ((shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %reject-shared-directory-request-shared-directory-id
                         :initform
                         (common-lisp:error
                          ":shared-directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reject-shared-directory-request
                    'make-reject-shared-directory-request))
 (common-lisp:defun make-reject-shared-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-shared-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-shared-directory-result common-lisp:nil
                       ((shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %reject-shared-directory-result-shared-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-shared-directory-result
                    'make-reject-shared-directory-result))
 (common-lisp:defun make-reject-shared-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-shared-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-shared-directory-result))
   common-lisp:nil))
(common-lisp:deftype remote-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype remote-domain-names ()
   '(trivial-types:proper-list remote-domain-name))
 (common-lisp:defun |make-remote-domain-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remote-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remove-ip-routes-request common-lisp:nil
                       ((cidr-ips :initarg :cidr-ips :type
                         (common-lisp:or cidr-ips common-lisp:null) :accessor
                         %remove-ip-routes-request-cidr-ips :initform
                         (common-lisp:error ":cidr-ips is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %remove-ip-routes-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-ip-routes-request 'make-remove-ip-routes-request))
 (common-lisp:defun make-remove-ip-routes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-ips directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-ip-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ips))
      (common-lisp:list
       (common-lisp:cons "CidrIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-ip-routes-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-ip-routes-result 'make-remove-ip-routes-result))
 (common-lisp:defun make-remove-ip-routes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'remove-ip-routes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-ip-routes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-region-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %remove-region-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-region-request 'make-remove-region-request))
 (common-lisp:defun make-remove-region-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-region-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-region-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-region-result 'make-remove-region-result))
 (common-lisp:defun make-remove-region-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'remove-region-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-region-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-region-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-region-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %remove-tags-from-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %remove-tags-from-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-request
                    'make-remove-tags-from-resource-request))
 (common-lisp:defun make-remove-tags-from-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-result
                    'make-remove-tags-from-resource-result))
 (common-lisp:defun make-remove-tags-from-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   common-lisp:nil))
(common-lisp:deftype replication-scope () 'common-lisp:string)
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-user-password-request common-lisp:nil
                       ((new-password :initarg :new-password :type
                         (common-lisp:or user-password common-lisp:null)
                         :accessor %reset-user-password-request-new-password
                         :initform
                         (common-lisp:error ":new-password is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or customer-user-name common-lisp:null)
                         :accessor %reset-user-password-request-user-name
                         :initform
                         (common-lisp:error ":user-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %reset-user-password-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reset-user-password-request
                    'make-reset-user-password-request))
 (common-lisp:defun make-reset-user-password-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key new-password user-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'reset-user-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-password))
      (common-lisp:list
       (common-lisp:cons "NewPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-user-password-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reset-user-password-result
                    'make-reset-user-password-result))
 (common-lisp:defun make-reset-user-password-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'reset-user-password-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-result))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-from-snapshot-request common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %restore-from-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-request
                    'make-restore-from-snapshot-request))
 (common-lisp:defun make-restore-from-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-from-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-from-snapshot-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-result
                    'make-restore-from-snapshot-result))
 (common-lisp:defun make-restore-from-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'restore-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype sid () 'common-lisp:string)
(common-lisp:deftype schema-extension-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-extension-info common-lisp:nil
                       ((end-date-time :initarg :end-date-time :type
                         (common-lisp:or end-date-time common-lisp:null)
                         :accessor %schema-extension-info-end-date-time
                         :initform common-lisp:nil)
                        (start-date-time :initarg :start-date-time :type
                         (common-lisp:or start-date-time common-lisp:null)
                         :accessor %schema-extension-info-start-date-time
                         :initform common-lisp:nil)
                        (schema-extension-status-reason :initarg
                         :schema-extension-status-reason :type
                         (common-lisp:or schema-extension-status-reason
                                         common-lisp:null)
                         :accessor
                         %schema-extension-info-schema-extension-status-reason
                         :initform common-lisp:nil)
                        (schema-extension-status :initarg
                         :schema-extension-status :type
                         (common-lisp:or schema-extension-status
                                         common-lisp:null)
                         :accessor
                         %schema-extension-info-schema-extension-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %schema-extension-info-description :initform
                         common-lisp:nil)
                        (schema-extension-id :initarg :schema-extension-id
                         :type
                         (common-lisp:or schema-extension-id common-lisp:null)
                         :accessor %schema-extension-info-schema-extension-id
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %schema-extension-info-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'schema-extension-info 'make-schema-extension-info))
 (common-lisp:defun make-schema-extension-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-date-time start-date-time
                     schema-extension-status-reason schema-extension-status
                     description schema-extension-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'schema-extension-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extension-status))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-extension-status-reason))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-extension-info))
   common-lisp:nil))
(common-lisp:deftype schema-extension-status () 'common-lisp:string)
(common-lisp:deftype schema-extension-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-extensions-info ()
   '(trivial-types:proper-list schema-extension-info))
 (common-lisp:defun |make-schema-extensions-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-extension-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype selective-auth () 'common-lisp:string)
(common-lisp:deftype server () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype servers () '(trivial-types:proper-list server))
 (common-lisp:defun |make-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-message
                    'service-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass setting common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or directory-configuration-setting-value
                                         common-lisp:null)
                         :accessor %setting-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or directory-configuration-setting-name
                                         common-lisp:null)
                         :accessor %setting-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'setting 'make-setting))
 (common-lisp:defun make-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype setting-entries ()
   '(trivial-types:proper-list setting-entry))
 (common-lisp:defun |make-setting-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setting-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass setting-entry common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or
                          directory-configuration-setting-data-type
                          common-lisp:null)
                         :accessor %setting-entry-data-type :initform
                         common-lisp:nil)
                        (last-requested-date-time :initarg
                         :last-requested-date-time :type
                         (common-lisp:or
                          directory-configuration-setting-last-requested-date-time
                          common-lisp:null)
                         :accessor %setting-entry-last-requested-date-time
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or
                          directory-configuration-setting-last-updated-date-time
                          common-lisp:null)
                         :accessor %setting-entry-last-updated-date-time
                         :initform common-lisp:nil)
                        (request-status-message :initarg
                         :request-status-message :type
                         (common-lisp:or
                          directory-configuration-setting-request-status-message
                          common-lisp:null)
                         :accessor %setting-entry-request-status-message
                         :initform common-lisp:nil)
                        (request-detailed-status :initarg
                         :request-detailed-status :type
                         (common-lisp:or
                          directory-configuration-setting-request-detailed-status
                          common-lisp:null)
                         :accessor %setting-entry-request-detailed-status
                         :initform common-lisp:nil)
                        (request-status :initarg :request-status :type
                         (common-lisp:or directory-configuration-status
                                         common-lisp:null)
                         :accessor %setting-entry-request-status :initform
                         common-lisp:nil)
                        (requested-value :initarg :requested-value :type
                         (common-lisp:or directory-configuration-setting-value
                                         common-lisp:null)
                         :accessor %setting-entry-requested-value :initform
                         common-lisp:nil)
                        (applied-value :initarg :applied-value :type
                         (common-lisp:or directory-configuration-setting-value
                                         common-lisp:null)
                         :accessor %setting-entry-applied-value :initform
                         common-lisp:nil)
                        (allowed-values :initarg :allowed-values :type
                         (common-lisp:or
                          directory-configuration-setting-allowed-values
                          common-lisp:null)
                         :accessor %setting-entry-allowed-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or directory-configuration-setting-name
                                         common-lisp:null)
                         :accessor %setting-entry-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or directory-configuration-setting-type
                                         common-lisp:null)
                         :accessor %setting-entry-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'setting-entry 'make-setting-entry))
 (common-lisp:defun make-setting-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type last-requested-date-time
                     last-updated-date-time request-status-message
                     request-detailed-status request-status requested-value
                     applied-value allowed-values name type)
   (common-lisp:apply #'common-lisp:make-instance 'setting-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setting-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setting-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-value))
      (common-lisp:list
       (common-lisp:cons "AppliedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-value))
      (common-lisp:list
       (common-lisp:cons "RequestedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-status))
      (common-lisp:list
       (common-lisp:cons "RequestStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-detailed-status))
      (common-lisp:list
       (common-lisp:cons "RequestDetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-status-message))
      (common-lisp:list
       (common-lisp:cons "RequestStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-requested-date-time))
      (common-lisp:list
       (common-lisp:cons "LastRequestedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setting-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype settings () '(trivial-types:proper-list setting))
 (common-lisp:defun |make-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass share-directory-request common-lisp:nil
                       ((share-method :initarg :share-method :type
                         (common-lisp:or share-method common-lisp:null)
                         :accessor %share-directory-request-share-method
                         :initform
                         (common-lisp:error ":share-method is required"))
                        (share-target :initarg :share-target :type
                         (common-lisp:or share-target common-lisp:null)
                         :accessor %share-directory-request-share-target
                         :initform
                         (common-lisp:error ":share-target is required"))
                        (share-notes :initarg :share-notes :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         %share-directory-request-share-notes :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %share-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'share-directory-request 'make-share-directory-request))
 (common-lisp:defun make-share-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key share-method share-target share-notes
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'share-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-notes))
      (common-lisp:list
       (common-lisp:cons "ShareNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-target))
      (common-lisp:list
       (common-lisp:cons "ShareTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-method))
      (common-lisp:list
       (common-lisp:cons "ShareMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass share-directory-result common-lisp:nil
                       ((shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor %share-directory-result-shared-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'share-directory-result 'make-share-directory-result))
 (common-lisp:defun make-share-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'share-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          share-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition share-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       share-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       share-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'share-limit-exceeded-exception
                    'share-limit-exceeded-exception-message
                    'share-limit-exceeded-exception-request-id)))
(common-lisp:deftype share-method () 'common-lisp:string)
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass share-target common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %share-target-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %share-target-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'share-target 'make-share-target))
 (common-lisp:defun make-share-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'share-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype shared-directories ()
   '(trivial-types:proper-list shared-directory))
 (common-lisp:defun |make-shared-directories|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shared-directory))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass shared-directory common-lisp:nil
                       ((last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor %shared-directory-last-updated-date-time
                         :initform common-lisp:nil)
                        (created-date-time :initarg :created-date-time :type
                         (common-lisp:or created-date-time common-lisp:null)
                         :accessor %shared-directory-created-date-time
                         :initform common-lisp:nil)
                        (share-notes :initarg :share-notes :type
                         (common-lisp:or notes common-lisp:null) :accessor
                         %shared-directory-share-notes :initform
                         common-lisp:nil)
                        (share-status :initarg :share-status :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor %shared-directory-share-status :initform
                         common-lisp:nil)
                        (shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor %shared-directory-shared-directory-id
                         :initform common-lisp:nil)
                        (shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor %shared-directory-shared-account-id
                         :initform common-lisp:nil)
                        (share-method :initarg :share-method :type
                         (common-lisp:or share-method common-lisp:null)
                         :accessor %shared-directory-share-method :initform
                         common-lisp:nil)
                        (owner-directory-id :initarg :owner-directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %shared-directory-owner-directory-id
                         :initform common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or customer-id common-lisp:null)
                         :accessor %shared-directory-owner-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'shared-directory 'make-shared-directory))
 (common-lisp:defun make-shared-directory
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time created-date-time
                     share-notes share-status shared-directory-id
                     shared-account-id share-method owner-directory-id
                     owner-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'shared-directory
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shared-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shared-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-directory-id))
      (common-lisp:list
       (common-lisp:cons "OwnerDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-method))
      (common-lisp:list
       (common-lisp:cons "ShareMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-notes))
      (common-lisp:list
       (common-lisp:cons "ShareNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date-time))
      (common-lisp:list
       (common-lisp:cons "CreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shared-directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %snapshot-start-time :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or snapshot-status common-lisp:null)
                         :accessor %snapshot-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or snapshot-name common-lisp:null)
                         :accessor %snapshot-name :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or snapshot-type common-lisp:null)
                         :accessor %snapshot-type :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %snapshot-snapshot-id :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %snapshot-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defun make-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time status name type snapshot-id
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshot-ids () '(trivial-types:proper-list snapshot-id))
 (common-lisp:defun |make-snapshot-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition snapshot-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       snapshot-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       snapshot-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'snapshot-limit-exceeded-exception
                    'snapshot-limit-exceeded-exception-message
                    'snapshot-limit-exceeded-exception-request-id)))
(common-lisp:progn
 (common-lisp:defclass snapshot-limits common-lisp:nil
                       ((manual-snapshots-limit-reached :initarg
                         :manual-snapshots-limit-reached :type
                         (common-lisp:or manual-snapshots-limit-reached
                                         common-lisp:null)
                         :accessor
                         %snapshot-limits-manual-snapshots-limit-reached
                         :initform common-lisp:nil)
                        (manual-snapshots-current-count :initarg
                         :manual-snapshots-current-count :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %snapshot-limits-manual-snapshots-current-count
                         :initform common-lisp:nil)
                        (manual-snapshots-limit :initarg
                         :manual-snapshots-limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %snapshot-limits-manual-snapshots-limit :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot-limits 'make-snapshot-limits))
 (common-lisp:defun make-snapshot-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key manual-snapshots-limit-reached
                     manual-snapshots-current-count manual-snapshots-limit)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-limit))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-current-count))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsCurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshots-limit-reached))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotsLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-limits))
   common-lisp:nil))
(common-lisp:deftype snapshot-name () 'common-lisp:string)
(common-lisp:deftype snapshot-status () 'common-lisp:string)
(common-lisp:deftype snapshot-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshots () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshots|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sso-enabled () 'common-lisp:boolean)
(common-lisp:deftype stage-reason () 'common-lisp:string)
(common-lisp:deftype start-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-schema-extension-request common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %start-schema-extension-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (ldif-content :initarg :ldif-content :type
                         (common-lisp:or ldif-content common-lisp:null)
                         :accessor %start-schema-extension-request-ldif-content
                         :initform
                         (common-lisp:error ":ldif-content is required"))
                        (create-snapshot-before-schema-extension :initarg
                         :create-snapshot-before-schema-extension :type
                         (common-lisp:or
                          create-snapshot-before-schema-extension
                          common-lisp:null)
                         :accessor
                         %start-schema-extension-request-create-snapshot-before-schema-extension
                         :initform
                         (common-lisp:error
                          ":create-snapshot-before-schema-extension is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %start-schema-extension-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-schema-extension-request
                    'make-start-schema-extension-request))
 (common-lisp:defun make-start-schema-extension-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description ldif-content
                     create-snapshot-before-schema-extension directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-extension-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-snapshot-before-schema-extension))
      (common-lisp:list
       (common-lisp:cons "CreateSnapshotBeforeSchemaExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ldif-content))
      (common-lisp:list
       (common-lisp:cons "LdifContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-schema-extension-result common-lisp:nil
                       ((schema-extension-id :initarg :schema-extension-id
                         :type
                         (common-lisp:or schema-extension-id common-lisp:null)
                         :accessor
                         %start-schema-extension-result-schema-extension-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-schema-extension-result
                    'make-start-schema-extension-result))
 (common-lisp:defun make-start-schema-extension-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema-extension-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-schema-extension-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-extension-id))
      (common-lisp:list
       (common-lisp:cons "SchemaExtensionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-schema-extension-result))
   common-lisp:nil))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype state-last-updated-date-time () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscription-created-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       tag-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'tag-limit-exceeded-exception
                    'tag-limit-exceeded-exception-message
                    'tag-limit-exceeded-exception-request-id)))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:deftype topic-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype topic-names () '(trivial-types:proper-list topic-name))
 (common-lisp:defun |make-topic-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype topic-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trust common-lisp:nil
                       ((selective-auth :initarg :selective-auth :type
                         (common-lisp:or selective-auth common-lisp:null)
                         :accessor %trust-selective-auth :initform
                         common-lisp:nil)
                        (trust-state-reason :initarg :trust-state-reason :type
                         (common-lisp:or trust-state-reason common-lisp:null)
                         :accessor %trust-trust-state-reason :initform
                         common-lisp:nil)
                        (state-last-updated-date-time :initarg
                         :state-last-updated-date-time :type
                         (common-lisp:or state-last-updated-date-time
                                         common-lisp:null)
                         :accessor %trust-state-last-updated-date-time
                         :initform common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor %trust-last-updated-date-time :initform
                         common-lisp:nil)
                        (created-date-time :initarg :created-date-time :type
                         (common-lisp:or created-date-time common-lisp:null)
                         :accessor %trust-created-date-time :initform
                         common-lisp:nil)
                        (trust-state :initarg :trust-state :type
                         (common-lisp:or trust-state common-lisp:null)
                         :accessor %trust-trust-state :initform
                         common-lisp:nil)
                        (trust-direction :initarg :trust-direction :type
                         (common-lisp:or trust-direction common-lisp:null)
                         :accessor %trust-trust-direction :initform
                         common-lisp:nil)
                        (trust-type :initarg :trust-type :type
                         (common-lisp:or trust-type common-lisp:null) :accessor
                         %trust-trust-type :initform common-lisp:nil)
                        (remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor %trust-remote-domain-name :initform
                         common-lisp:nil)
                        (trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %trust-trust-id :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %trust-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'trust 'make-trust))
 (common-lisp:defun make-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selective-auth trust-state-reason
                     state-last-updated-date-time last-updated-date-time
                     created-date-time trust-state trust-direction trust-type
                     remote-domain-name trust-id directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-type))
      (common-lisp:list
       (common-lisp:cons "TrustType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-direction))
      (common-lisp:list
       (common-lisp:cons "TrustDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-state))
      (common-lisp:list
       (common-lisp:cons "TrustState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date-time))
      (common-lisp:list
       (common-lisp:cons "CreatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "StateLastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-state-reason))
      (common-lisp:list
       (common-lisp:cons "TrustStateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selective-auth))
      (common-lisp:list
       (common-lisp:cons "SelectiveAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust))
   common-lisp:nil))
(common-lisp:deftype trust-direction () 'common-lisp:string)
(common-lisp:deftype trust-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-ids () '(trivial-types:proper-list trust-id))
 (common-lisp:defun |make-trust-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trust-password () 'common-lisp:string)
(common-lisp:deftype trust-state () 'common-lisp:string)
(common-lisp:deftype trust-state-reason () 'common-lisp:string)
(common-lisp:deftype trust-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trusts () '(trivial-types:proper-list trust))
 (common-lisp:defun |make-trusts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unshare-directory-request common-lisp:nil
                       ((unshare-target :initarg :unshare-target :type
                         (common-lisp:or unshare-target common-lisp:null)
                         :accessor %unshare-directory-request-unshare-target
                         :initform
                         (common-lisp:error ":unshare-target is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %unshare-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unshare-directory-request
                    'make-unshare-directory-request))
 (common-lisp:defun make-unshare-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unshare-target directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'unshare-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unshare-target))
      (common-lisp:list
       (common-lisp:cons "UnshareTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unshare-directory-result common-lisp:nil
                       ((shared-directory-id :initarg :shared-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %unshare-directory-result-shared-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unshare-directory-result 'make-unshare-directory-result))
 (common-lisp:defun make-unshare-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'unshare-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-directory-id))
      (common-lisp:list
       (common-lisp:cons "SharedDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unshare-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unshare-target common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %unshare-target-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %unshare-target-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'unshare-target 'make-unshare-target))
 (common-lisp:defun make-unshare-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'unshare-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unshare-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unshare-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unshare-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-operation-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message
                    'unsupported-operation-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-settings-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-settings-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unsupported-settings-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unsupported-settings-exception
                    'unsupported-settings-exception-message
                    'unsupported-settings-exception-request-id)))
(common-lisp:progn
 (common-lisp:deftype update-activities ()
   '(trivial-types:proper-list update-info-entry))
 (common-lisp:defun |make-update-activities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-info-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-conditional-forwarder-request common-lisp:nil
                       ((dns-ip-addrs :initarg :dns-ip-addrs :type
                         (common-lisp:or dns-ip-addrs common-lisp:null)
                         :accessor
                         %update-conditional-forwarder-request-dns-ip-addrs
                         :initform
                         (common-lisp:error ":dns-ip-addrs is required"))
                        (remote-domain-name :initarg :remote-domain-name :type
                         (common-lisp:or remote-domain-name common-lisp:null)
                         :accessor
                         %update-conditional-forwarder-request-remote-domain-name
                         :initform
                         (common-lisp:error ":remote-domain-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %update-conditional-forwarder-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-conditional-forwarder-request
                    'make-update-conditional-forwarder-request))
 (common-lisp:defun make-update-conditional-forwarder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ip-addrs remote-domain-name
                     directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-conditional-forwarder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-name))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addrs))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-conditional-forwarder-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-conditional-forwarder-result
                    'make-update-conditional-forwarder-result))
 (common-lisp:defun make-update-conditional-forwarder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-conditional-forwarder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conditional-forwarder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-directory-setup-request common-lisp:nil
                       ((create-snapshot-before-update :initarg
                         :create-snapshot-before-update :type
                         (common-lisp:or create-snapshot-before-update
                                         common-lisp:null)
                         :accessor
                         %update-directory-setup-request-create-snapshot-before-update
                         :initform common-lisp:nil)
                        (osupdate-settings :initarg :osupdate-settings :type
                         (common-lisp:or osupdate-settings common-lisp:null)
                         :accessor
                         %update-directory-setup-request-osupdate-settings
                         :initform common-lisp:nil)
                        (update-type :initarg :update-type :type
                         (common-lisp:or update-type common-lisp:null)
                         :accessor %update-directory-setup-request-update-type
                         :initform
                         (common-lisp:error ":update-type is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %update-directory-setup-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-directory-setup-request
                    'make-update-directory-setup-request))
 (common-lisp:defun make-update-directory-setup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-snapshot-before-update
                     osupdate-settings update-type directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-directory-setup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "UpdateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'osupdate-settings))
      (common-lisp:list
       (common-lisp:cons "OSUpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-snapshot-before-update))
      (common-lisp:list
       (common-lisp:cons "CreateSnapshotBeforeUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-directory-setup-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-directory-setup-result
                    'make-update-directory-setup-result))
 (common-lisp:defun make-update-directory-setup-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-directory-setup-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-setup-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-info-entry common-lisp:nil
                       ((last-updated-date-time :initarg
                         :last-updated-date-time :type
                         (common-lisp:or last-updated-date-time
                                         common-lisp:null)
                         :accessor %update-info-entry-last-updated-date-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-date-time common-lisp:null)
                         :accessor %update-info-entry-start-time :initform
                         common-lisp:nil)
                        (previous-value :initarg :previous-value :type
                         (common-lisp:or update-value common-lisp:null)
                         :accessor %update-info-entry-previous-value :initform
                         common-lisp:nil)
                        (new-value :initarg :new-value :type
                         (common-lisp:or update-value common-lisp:null)
                         :accessor %update-info-entry-new-value :initform
                         common-lisp:nil)
                        (initiated-by :initarg :initiated-by :type
                         (common-lisp:or initiated-by common-lisp:null)
                         :accessor %update-info-entry-initiated-by :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or update-status-reason common-lisp:null)
                         :accessor %update-info-entry-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or update-status common-lisp:null)
                         :accessor %update-info-entry-status :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %update-info-entry-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-info-entry 'make-update-info-entry))
 (common-lisp:defun make-update-info-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date-time start-time
                     previous-value new-value initiated-by status-reason status
                     region)
   (common-lisp:apply #'common-lisp:make-instance 'update-info-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-info-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-info-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-by))
      (common-lisp:list
       (common-lisp:cons "InitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-value))
      (common-lisp:list
       (common-lisp:cons "NewValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-value))
      (common-lisp:list
       (common-lisp:cons "PreviousValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-info-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-number-of-domain-controllers-request
                       common-lisp:nil
                       ((desired-number :initarg :desired-number :type
                         (common-lisp:or desired-number-of-domain-controllers
                                         common-lisp:null)
                         :accessor
                         %update-number-of-domain-controllers-request-desired-number
                         :initform
                         (common-lisp:error ":desired-number is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %update-number-of-domain-controllers-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-number-of-domain-controllers-request
                    'make-update-number-of-domain-controllers-request))
 (common-lisp:defun make-update-number-of-domain-controllers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-number directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-number-of-domain-controllers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-number))
      (common-lisp:list
       (common-lisp:cons "DesiredNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-number-of-domain-controllers-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-number-of-domain-controllers-result
                    'make-update-number-of-domain-controllers-result))
 (common-lisp:defun make-update-number-of-domain-controllers-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-number-of-domain-controllers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-number-of-domain-controllers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-radius-request common-lisp:nil
                       ((radius-settings :initarg :radius-settings :type
                         (common-lisp:or radius-settings common-lisp:null)
                         :accessor %update-radius-request-radius-settings
                         :initform
                         (common-lisp:error ":radius-settings is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %update-radius-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-radius-request 'make-update-radius-request))
 (common-lisp:defun make-update-radius-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key radius-settings directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-radius-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'radius-settings))
      (common-lisp:list
       (common-lisp:cons "RadiusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-radius-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-radius-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-radius-result 'make-update-radius-result))
 (common-lisp:defun make-update-radius-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-radius-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-radius-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-radius-result))
   common-lisp:nil))
(common-lisp:deftype update-security-group-for-directory-controllers ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass update-settings-request common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or settings common-lisp:null) :accessor
                         %update-settings-request-settings :initform
                         (common-lisp:error ":settings is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %update-settings-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-settings-request 'make-update-settings-request))
 (common-lisp:defun make-update-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-settings-result common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %update-settings-result-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-settings-result 'make-update-settings-result))
 (common-lisp:defun make-update-settings-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-settings-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-settings-result))
   common-lisp:nil))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:deftype update-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-trust-request common-lisp:nil
                       ((selective-auth :initarg :selective-auth :type
                         (common-lisp:or selective-auth common-lisp:null)
                         :accessor %update-trust-request-selective-auth
                         :initform common-lisp:nil)
                        (trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %update-trust-request-trust-id :initform
                         (common-lisp:error ":trust-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-trust-request 'make-update-trust-request))
 (common-lisp:defun make-update-trust-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selective-auth trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selective-auth))
      (common-lisp:list
       (common-lisp:cons "SelectiveAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trust-result common-lisp:nil
                       ((trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %update-trust-result-trust-id :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         %update-trust-result-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-trust-result 'make-update-trust-result))
 (common-lisp:defun make-update-trust-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-id request-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-trust-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-trust-result))
   common-lisp:nil))
(common-lisp:deftype update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-value common-lisp:nil
                       ((osupdate-settings :initarg :osupdate-settings :type
                         (common-lisp:or osupdate-settings common-lisp:null)
                         :accessor %update-value-osupdate-settings :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-value 'make-update-value))
 (common-lisp:defun make-update-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key osupdate-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'osupdate-settings))
      (common-lisp:list
       (common-lisp:cons "OSUpdateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-value))
   common-lisp:nil))
(common-lisp:deftype use-same-username () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition user-does-not-exist-exception
     (ds-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       user-does-not-exist-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       user-does-not-exist-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'user-does-not-exist-exception
                    'user-does-not-exist-exception-message
                    'user-does-not-exist-exception-request-id)))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass verify-trust-request common-lisp:nil
                       ((trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %verify-trust-request-trust-id :initform
                         (common-lisp:error ":trust-id is required"))))
 (common-lisp:export
  (common-lisp:list 'verify-trust-request 'make-verify-trust-request))
 (common-lisp:defun make-verify-trust-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'verify-trust-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-trust-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-trust-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-trust-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-trust-result common-lisp:nil
                       ((trust-id :initarg :trust-id :type
                         (common-lisp:or trust-id common-lisp:null) :accessor
                         %verify-trust-result-trust-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'verify-trust-result 'make-verify-trust-result))
 (common-lisp:defun make-verify-trust-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-id)
   (common-lisp:apply #'common-lisp:make-instance 'verify-trust-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-trust-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-trust-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-id))
      (common-lisp:list
       (common-lisp:cons "TrustId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-trust-result))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-shared-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:declare (common-lisp:ignorable shared-directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-shared-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptSharedDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-shared-directory))
(common-lisp:progn
 (common-lisp:defun add-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id ip-routes
                     update-security-group-for-directory-controllers)
   (common-lisp:declare
    (common-lisp:ignorable directory-id ip-routes
     update-security-group-for-directory-controllers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-ip-routes))
(common-lisp:progn
 (common-lisp:defun add-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id region-name vpcsettings)
   (common-lisp:declare
    (common-lisp:ignorable directory-id region-name vpcsettings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddRegion"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-region))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddTagsToResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun cancel-schema-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id schema-extension-id)
   (common-lisp:declare
    (common-lisp:ignorable directory-id schema-extension-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-schema-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelSchemaExtension"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-schema-extension))
(common-lisp:progn
 (common-lisp:defun connect-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description size
                     connect-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description size
     connect-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-connect-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ConnectDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'connect-directory))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id alias)
   (common-lisp:declare (common-lisp:ignorable directory-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAlias"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-computer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id computer-name password
                     organizational-unit-distinguished-name
                     computer-attributes)
   (common-lisp:declare
    (common-lisp:ignorable directory-id computer-name password
     organizational-unit-distinguished-name computer-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-computer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateComputer"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-computer))
(common-lisp:progn
 (common-lisp:defun create-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     dns-ip-addrs)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name dns-ip-addrs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun create-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description size
                     vpc-settings tags)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description size
     vpc-settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-directory))
(common-lisp:progn
 (common-lisp:defun create-log-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id log-group-name)
   (common-lisp:declare (common-lisp:ignorable directory-id log-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-subscription-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateLogSubscription"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-log-subscription))
(common-lisp:progn
 (common-lisp:defun create-microsoft-ad
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name short-name password description
                     vpc-settings edition tags)
   (common-lisp:declare
    (common-lisp:ignorable name short-name password description vpc-settings
     edition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-microsoft-adrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateMicrosoftAD"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-microsoft-ad))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id name)
   (common-lisp:declare (common-lisp:ignorable directory-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     trust-password trust-direction trust-type
                     conditional-forwarder-ip-addrs selective-auth)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name trust-password
     trust-direction trust-type conditional-forwarder-ip-addrs selective-auth))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trust))
(common-lisp:progn
 (common-lisp:defun delete-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun delete-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-directory))
(common-lisp:progn
 (common-lisp:defun delete-log-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-subscription-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteLogSubscription"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-log-subscription))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id)
   (common-lisp:declare (common-lisp:ignorable snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-id
                     delete-associated-conditional-forwarder)
   (common-lisp:declare
    (common-lisp:ignorable trust-id delete-associated-conditional-forwarder))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trust))
(common-lisp:progn
 (common-lisp:defun deregister-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id certificate-id)
   (common-lisp:declare (common-lisp:ignorable directory-id certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterCertificate"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-certificate))
(common-lisp:progn
 (common-lisp:defun deregister-event-topic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-name)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-event-topic-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterEventTopic"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-event-topic))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id certificate-id)
   (common-lisp:declare (common-lisp:ignorable directory-id certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCertificate"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-client-authentication-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id type next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-client-authentication-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClientAuthenticationSettings"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-client-authentication-settings))
(common-lisp:progn
 (common-lisp:defun describe-conditional-forwarders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-names)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conditional-forwarders-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConditionalForwarders"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-conditional-forwarders))
(common-lisp:progn
 (common-lisp:defun describe-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-ids next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-directories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDirectories"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-directories))
(common-lisp:progn
 (common-lisp:defun describe-domain-controllers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id domain-controller-ids
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id domain-controller-ids next-token
     limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-controllers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDomainControllers"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain-controllers))
(common-lisp:progn
 (common-lisp:defun describe-event-topics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-names)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-event-topics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEventTopics"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-event-topics))
(common-lisp:progn
 (common-lisp:defun describe-ldapssettings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id type next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ldapssettings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeLDAPSSettings"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ldapssettings))
(common-lisp:progn
 (common-lisp:defun describe-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id region-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable directory-id region-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-regions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeRegions"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-regions))
(common-lisp:progn
 (common-lisp:defun describe-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id status next-token)
   (common-lisp:declare (common-lisp:ignorable directory-id status next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSettings"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-settings))
(common-lisp:progn
 (common-lisp:defun describe-shared-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-directory-id shared-directory-ids
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable owner-directory-id shared-directory-ids next-token
     limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-shared-directories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSharedDirectories"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-shared-directories))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id snapshot-ids next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id snapshot-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSnapshots"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-trusts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id trust-ids next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable directory-id trust-ids next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trusts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTrusts"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trusts))
(common-lisp:progn
 (common-lisp:defun describe-update-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id update-type region-name
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable directory-id update-type region-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-update-directory-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUpdateDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-update-directory))
(common-lisp:progn
 (common-lisp:defun disable-client-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type)
   (common-lisp:declare (common-lisp:ignorable directory-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-client-authentication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableClientAuthentication"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-client-authentication))
(common-lisp:progn
 (common-lisp:defun disable-ldaps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type)
   (common-lisp:declare (common-lisp:ignorable directory-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-ldapsrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableLDAPS"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-ldaps))
(common-lisp:progn
 (common-lisp:defun disable-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-radius))
(common-lisp:progn
 (common-lisp:defun disable-sso
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id user-name password)
   (common-lisp:declare
    (common-lisp:ignorable directory-id user-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-sso-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableSso"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-sso))
(common-lisp:progn
 (common-lisp:defun enable-client-authentication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type)
   (common-lisp:declare (common-lisp:ignorable directory-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-client-authentication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableClientAuthentication"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-client-authentication))
(common-lisp:progn
 (common-lisp:defun enable-ldaps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id type)
   (common-lisp:declare (common-lisp:ignorable directory-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-ldapsrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableLDAPS"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-ldaps))
(common-lisp:progn
 (common-lisp:defun enable-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id radius-settings)
   (common-lisp:declare (common-lisp:ignorable directory-id radius-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-radius))
(common-lisp:progn
 (common-lisp:defun enable-sso
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id user-name password)
   (common-lisp:declare
    (common-lisp:ignorable directory-id user-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-sso-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableSso"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-sso))
(common-lisp:progn
 (common-lisp:defun get-directory-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ds-request :method "POST" :path "/" :protocol
                                :json :operation "GetDirectoryLimits" :params
                                `(("Action" ,@"GetDirectoryLimits")
                                  ("Version" ,@"2015-04-16"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-directory-limits))
(common-lisp:progn
 (common-lisp:defun get-snapshot-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-snapshot-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetSnapshotLimits"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-snapshot-limits))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCertificates"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ip-routes))
(common-lisp:progn
 (common-lisp:defun list-log-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-subscriptions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListLogSubscriptions"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-schema-extensions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable directory-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schema-extensions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSchemaExtensions"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schema-extensions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id next-token limit)
   (common-lisp:declare (common-lisp:ignorable resource-id next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id certificate-data type
                     client-cert-auth-settings)
   (common-lisp:declare
    (common-lisp:ignorable directory-id certificate-data type
     client-cert-auth-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterCertificate"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-certificate))
(common-lisp:progn
 (common-lisp:defun register-event-topic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id topic-name)
   (common-lisp:declare (common-lisp:ignorable directory-id topic-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-event-topic-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterEventTopic"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-event-topic))
(common-lisp:progn
 (common-lisp:defun reject-shared-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key shared-directory-id)
   (common-lisp:declare (common-lisp:ignorable shared-directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-shared-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RejectSharedDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-shared-directory))
(common-lisp:progn
 (common-lisp:defun remove-ip-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id cidr-ips)
   (common-lisp:declare (common-lisp:ignorable directory-id cidr-ips))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-ip-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveIpRoutes"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-ip-routes))
(common-lisp:progn
 (common-lisp:defun remove-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveRegion"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-region))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTagsFromResource"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id user-name new-password)
   (common-lisp:declare
    (common-lisp:ignorable directory-id user-name new-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-user-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResetUserPassword"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-user-password))
(common-lisp:progn
 (common-lisp:defun restore-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id)
   (common-lisp:declare (common-lisp:ignorable snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-from-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RestoreFromSnapshot"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-from-snapshot))
(common-lisp:progn
 (common-lisp:defun share-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id share-notes share-target
                     share-method)
   (common-lisp:declare
    (common-lisp:ignorable directory-id share-notes share-target share-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-share-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ShareDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'share-directory))
(common-lisp:progn
 (common-lisp:defun start-schema-extension
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id
                     create-snapshot-before-schema-extension ldif-content
                     description)
   (common-lisp:declare
    (common-lisp:ignorable directory-id create-snapshot-before-schema-extension
     ldif-content description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-schema-extension-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartSchemaExtension"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-schema-extension))
(common-lisp:progn
 (common-lisp:defun unshare-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id unshare-target)
   (common-lisp:declare (common-lisp:ignorable directory-id unshare-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unshare-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UnshareDirectory"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unshare-directory))
(common-lisp:progn
 (common-lisp:defun update-conditional-forwarder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id remote-domain-name
                     dns-ip-addrs)
   (common-lisp:declare
    (common-lisp:ignorable directory-id remote-domain-name dns-ip-addrs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-conditional-forwarder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConditionalForwarder"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-conditional-forwarder))
(common-lisp:progn
 (common-lisp:defun update-directory-setup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id update-type
                     osupdate-settings create-snapshot-before-update)
   (common-lisp:declare
    (common-lisp:ignorable directory-id update-type osupdate-settings
     create-snapshot-before-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-directory-setup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDirectorySetup"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-directory-setup))
(common-lisp:progn
 (common-lisp:defun update-number-of-domain-controllers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id desired-number)
   (common-lisp:declare (common-lisp:ignorable directory-id desired-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-number-of-domain-controllers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateNumberOfDomainControllers"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-number-of-domain-controllers))
(common-lisp:progn
 (common-lisp:defun update-radius
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id radius-settings)
   (common-lisp:declare (common-lisp:ignorable directory-id radius-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-radius-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRadius"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-radius))
(common-lisp:progn
 (common-lisp:defun update-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id settings)
   (common-lisp:declare (common-lisp:ignorable directory-id settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSettings"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-settings))
(common-lisp:progn
 (common-lisp:defun update-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-id selective-auth)
   (common-lisp:declare (common-lisp:ignorable trust-id selective-auth))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trust))
(common-lisp:progn
 (common-lisp:defun verify-trust
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-id)
   (common-lisp:declare (common-lisp:ignorable trust-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-trust-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "VerifyTrust"
                                                        "2015-04-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-trust))
